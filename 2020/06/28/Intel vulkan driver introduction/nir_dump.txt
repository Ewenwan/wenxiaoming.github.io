numThreads = 4
INTEL-MESA: warning: Performance support disabled, consider sysctl dev.i915.perf_stream_paranoid=0

INTEL-MESA: debug: anv_AllocateMemory: ignored VkStructureType 1000001003

INTEL-MESA: debug: anv_AllocateMemory: ignored VkStructureType 1000001003

INTEL-MESA: debug: anv_AllocateMemory: ignored VkStructureType 1000001003

INTEL-MESA: debug: anv_AllocateMemory: ignored VkStructureType 1000001003

INTEL-MESA: debug: anv_AllocateMemory: ignored VkStructureType 1000001003

nir_lower_alu_to_scalar
nir_lower_tex
nir_normalize_cubemap_coords
nir_lower_global_vars_to_local
nir_split_var_copies
nir_split_struct_vars
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_lower_doubles
nir_lower_int64
nir_lower_bit_size
nir_lower_load_const_to_scalar
nir_lower_var_copies
nir_opt_large_constants
nir_lower_system_values
nir_lower_compute_system_values
nir_lower_subgroups
nir_lower_clip_cull_distance_arrays
nir_lower_vars_to_scratch
nir_lower_indirect_derefs
nir_lower_array_deref_of_vec
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
brw_nir_apply_sampler_key
nir_lower_subgroups
brw_nir_demote_sample_qualifiers
shader: MESA_SHADER_FRAGMENT
name: BLORP-clear
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_FLAT vec4 clear_color (VARYING_SLOT_VAR0.xyzw, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec4 gl_FragColor (FRAG_RESULT_COLOR.xyzw, 4, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &clear_color (shader_in vec4) 
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_4 = intrinsic load_input (ssa_5) (32, 0, 160, 288) /* base=32 */ /* component=0 */ /* type=float32 */ /* location=32 slots=2 */	/* clear_color */
	vec1 32 ssa_2 = deref_var &gl_FragColor (shader_out vec4) 
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_4, ssa_6) (4, 15, 0, 160, 130) /* base=4 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=2 slots=1 */	/* gl_FragColor */
	/* succs: block_1 */
	block block_1:
}

brw_nir_move_interpolation_to_top
shader: MESA_SHADER_FRAGMENT
name: BLORP-clear
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_FLAT vec4 clear_color (VARYING_SLOT_VAR0.xyzw, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec4 gl_FragColor (FRAG_RESULT_COLOR.xyzw, 4, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &clear_color (shader_in vec4) 
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_4 = intrinsic load_input (ssa_5) (32, 0, 160, 288) /* base=32 */ /* component=0 */ /* type=float32 */ /* location=32 slots=2 */	/* clear_color */
	vec1 32 ssa_2 = deref_var &gl_FragColor (shader_out vec4) 
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_4, ssa_6) (4, 15, 0, 160, 130) /* base=4 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=2 slots=1 */	/* gl_FragColor */
	/* succs: block_1 */
	block block_1:
}

brw_nir_lower_scoped_barriers
nir_opt_combine_memory_barriers
nir_opt_algebraic_before_ffma
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
name: BLORP-clear
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_FLAT vec4 clear_color (VARYING_SLOT_VAR0.xyzw, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec4 gl_FragColor (FRAG_RESULT_COLOR.xyzw, 4, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_4 = intrinsic load_input (ssa_5) (32, 0, 160, 288) /* base=32 */ /* component=0 */ /* type=float32 */ /* location=32 slots=2 */	/* clear_color */
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_4, ssa_6) (4, 15, 0, 160, 130) /* base=4 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=2 slots=1 */	/* gl_FragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_FRAGMENT
name: BLORP-clear
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_FLAT vec4 clear_color (VARYING_SLOT_VAR0.xyzw, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec4 gl_FragColor (FRAG_RESULT_COLOR.xyzw, 4, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_4 = intrinsic load_input (ssa_5) (32, 0, 160, 288) /* base=32 */ /* component=0 */ /* type=float32 */ /* location=32 slots=2 */	/* clear_color */
	intrinsic store_output (ssa_4, ssa_5) (4, 15, 0, 160, 130) /* base=4 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=2 slots=1 */	/* gl_FragColor */
	/* succs: block_1 */
	block block_1:
}


Instructions before scheduling (reg_alloc 0)
{  4}    0: mov(8) vgrf0+0.0:F, g2<0>:F 
{  4}    1: mov(8) vgrf0+1.0:F, g2<0>:F 
{  4}    2: mov(8) vgrf0+2.0:F, g3<0>:F 
{  4}    3: mov(8) vgrf0+3.0:F, g3<0>:F 
{  4}    4: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf0:F 
Maximum   4 registers live at once.
clock    2, scheduled: mov(8) vgrf0+0.0:F, g2<0>:F 
(register pressure 8)
	child 0, 4 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf0:F 
clock    4, scheduled: mov(8) vgrf0+1.0:F, g2<0>:F 
(register pressure 7)
	child 0, 3 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf0:F 
clock    6, scheduled: mov(8) vgrf0+2.0:F, g3<0>:F 
(register pressure 7)
	child 0, 2 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf0:F 
clock    8, scheduled: mov(8) vgrf0+3.0:F, g3<0>:F 
(register pressure 6)
	child 0, 1 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf0:F 
		now available
clock   11, scheduled: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf0:F 
(register pressure 2)

Instructions after scheduling (reg_alloc 0)
{  4}    0: mov(8) vgrf0+0.0:F, g2<0>:F 
{  4}    1: mov(8) vgrf0+1.0:F, g2<0>:F 
{  4}    2: mov(8) vgrf0+2.0:F, g3<0>:F 
{  4}    3: mov(8) vgrf0+3.0:F, g3<0>:F 
{  4}    4: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf0:F 
Maximum   4 registers live at once.
clock    2, scheduled: mov(8) vgrf123+0.0:F, g2<0>:F 
	child 0, 4 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
clock    4, scheduled: mov(8) vgrf124+0.0:F, g2<0>:F 
	child 0, 3 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
clock    6, scheduled: mov(8) vgrf125+0.0:F, g3<0>:F 
	child 0, 2 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
clock    8, scheduled: mov(8) vgrf126+0.0:F, g3<0>:F 
	child 0, 1 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
		now available
clock   24, scheduled: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_opt_load_store_vectorize
brw_nir_lower_mem_access_bit_sizes
nir_lower_int64
brw_nir_opt_peephole_ffma
nir_opt_comparison_pre
nir_opt_algebraic_late
brw_nir_lower_conversions
nir_lower_alu_to_scalar
nir_opt_algebraic_distribute_src_mods
nir_copy_prop
nir_opt_dce
nir_opt_move
nir_lower_bool_to_int32
nir_copy_prop
nir_opt_dce
nir_lower_locals_to_regs
nir_convert_from_ssa
nir_opt_dce
nir_opt_rematerialize_compares
nir_lower_alu_to_scalar
shader: MESA_SHADER_FRAGMENT
name: BLORP-blit
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_FLAT vec4 discard_rect (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT vec4 rect_grid (VARYING_SLOT_VAR2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT vec4 coord_transform (VARYING_SLOT_VAR3.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT uint src_z (VARYING_SLOT_VAR5.z, 0, 0)
decl_var shader_in INTERP_MODE_FLAT uvec2 src_offset (VARYING_SLOT_VAR4.xy, 0, 0)
decl_var shader_in INTERP_MODE_FLAT uvec2 dst_offset (VARYING_SLOT_VAR4.zw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT vec2 src_inv_size (VARYING_SLOT_VAR5.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 gl_FragColor (FRAG_RESULT_COLOR.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec4 32 ssa_0 = intrinsic load_frag_coord () ()
	vec1 32 ssa_25 = f2i32 ssa_0.x
	vec1 32 ssa_26 = f2i32 ssa_0.y
	vec1 32 ssa_27 = f2i32 ssa_0.z
	vec1 32 ssa_28 = f2i32 ssa_0.w
	vec4 32 ssa_29 = vec4 ssa_25, ssa_26, ssa_27, ssa_28
	vec1 32 ssa_2 = mov ssa_29.y
	vec1 32 ssa_3 = mov ssa_29.x
	vec2 32 ssa_4 = vec2 ssa_3, ssa_2
	vec1 32 ssa_30 = i2f32 ssa_4.x
	vec1 32 ssa_31 = i2f32 ssa_4.y
	vec2 32 ssa_32 = vec2 ssa_30, ssa_31
	vec1 32 ssa_6 = deref_var &coord_transform (shader_in vec4) 
	vec4 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = mov ssa_7.w
	vec1 32 ssa_9 = mov ssa_7.y
	vec2 32 ssa_10 = vec2 ssa_9, ssa_8
	vec1 32 ssa_11 = mov ssa_7.z
	vec1 32 ssa_12 = mov ssa_7.x
	vec2 32 ssa_13 = vec2 ssa_12, ssa_11
	vec1 32 ssa_33 = fmul ssa_32.x, ssa_13.x
	vec1 32 ssa_34 = fmul ssa_32.y, ssa_13.y
	vec2 32 ssa_35 = vec2 ssa_33, ssa_34
	vec1 32 ssa_36 = fadd ssa_35.x, ssa_10.x
	vec1 32 ssa_37 = fadd ssa_35.y, ssa_10.y
	vec2 32 ssa_38 = vec2 ssa_36, ssa_37
	vec1 32 ssa_39 = f2i32 ssa_38.x
	vec1 32 ssa_40 = f2i32 ssa_38.y
	vec2 32 ssa_41 = vec2 ssa_39, ssa_40
	vec1 32 ssa_17 = deref_var &src_z (shader_in uint) 
	vec1 32 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_19 = mov ssa_41.y
	vec1 32 ssa_20 = mov ssa_41.x
	vec3 32 ssa_21 = vec3 ssa_20, ssa_19, ssa_18
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_23 = (uint)txf ssa_21 (coord), ssa_22 (lod), 0 (texture), 0 (sampler)
	vec1 32 ssa_24 = deref_var &gl_FragColor (shader_out vec4) 
	intrinsic store_deref (ssa_24, ssa_23) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_tex
nir_normalize_cubemap_coords
nir_lower_global_vars_to_local
nir_split_var_copies
nir_split_struct_vars
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
shader: MESA_SHADER_FRAGMENT
name: BLORP-blit
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_FLAT vec4 discard_rect (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT vec4 rect_grid (VARYING_SLOT_VAR2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT vec4 coord_transform (VARYING_SLOT_VAR3.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT uint src_z (VARYING_SLOT_VAR5.z, 0, 0)
decl_var shader_in INTERP_MODE_FLAT uvec2 src_offset (VARYING_SLOT_VAR4.xy, 0, 0)
decl_var shader_in INTERP_MODE_FLAT uvec2 dst_offset (VARYING_SLOT_VAR4.zw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT vec2 src_inv_size (VARYING_SLOT_VAR5.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 gl_FragColor (FRAG_RESULT_COLOR.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec4 32 ssa_0 = intrinsic load_frag_coord () ()
	vec1 32 ssa_25 = f2i32 ssa_0.x
	vec1 32 ssa_26 = f2i32 ssa_0.y
	vec1 32 ssa_27 = f2i32 ssa_0.z
	vec1 32 ssa_28 = f2i32 ssa_0.w
	vec4 32 ssa_29 = vec4 ssa_25, ssa_26, ssa_27, ssa_28
	vec1 32 ssa_2 = mov ssa_26
	vec1 32 ssa_3 = mov ssa_25
	vec2 32 ssa_4 = vec2 ssa_25, ssa_26
	vec1 32 ssa_30 = i2f32 ssa_25
	vec1 32 ssa_31 = i2f32 ssa_26
	vec2 32 ssa_32 = vec2 ssa_30, ssa_31
	vec1 32 ssa_6 = deref_var &coord_transform (shader_in vec4) 
	vec4 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = mov ssa_7.w
	vec1 32 ssa_9 = mov ssa_7.y
	vec2 32 ssa_10 = vec2 ssa_7.y, ssa_7.w
	vec1 32 ssa_11 = mov ssa_7.z
	vec1 32 ssa_12 = mov ssa_7.x
	vec2 32 ssa_13 = vec2 ssa_7.x, ssa_7.z
	vec1 32 ssa_33 = fmul ssa_30, ssa_7.x
	vec1 32 ssa_34 = fmul ssa_31, ssa_7.z
	vec2 32 ssa_35 = vec2 ssa_33, ssa_34
	vec1 32 ssa_36 = fadd ssa_33, ssa_7.y
	vec1 32 ssa_37 = fadd ssa_34, ssa_7.w
	vec2 32 ssa_38 = vec2 ssa_36, ssa_37
	vec1 32 ssa_39 = f2i32 ssa_36
	vec1 32 ssa_40 = f2i32 ssa_37
	vec2 32 ssa_41 = vec2 ssa_39, ssa_40
	vec1 32 ssa_17 = deref_var &src_z (shader_in uint) 
	vec1 32 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_19 = mov ssa_40
	vec1 32 ssa_20 = mov ssa_39
	vec3 32 ssa_21 = vec3 ssa_39, ssa_40, ssa_18
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_23 = (uint)txf ssa_21 (coord), ssa_22 (lod), 0 (texture), 0 (sampler)
	vec1 32 ssa_24 = deref_var &gl_FragColor (shader_out vec4) 
	intrinsic store_deref (ssa_24, ssa_23) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
name: BLORP-blit
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_FLAT vec4 discard_rect (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT vec4 rect_grid (VARYING_SLOT_VAR2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT vec4 coord_transform (VARYING_SLOT_VAR3.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT uint src_z (VARYING_SLOT_VAR5.z, 0, 0)
decl_var shader_in INTERP_MODE_FLAT uvec2 src_offset (VARYING_SLOT_VAR4.xy, 0, 0)
decl_var shader_in INTERP_MODE_FLAT uvec2 dst_offset (VARYING_SLOT_VAR4.zw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT vec2 src_inv_size (VARYING_SLOT_VAR5.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 gl_FragColor (FRAG_RESULT_COLOR.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec4 32 ssa_0 = intrinsic load_frag_coord () ()
	vec1 32 ssa_25 = f2i32 ssa_0.x
	vec1 32 ssa_26 = f2i32 ssa_0.y
	vec1 32 ssa_30 = i2f32 ssa_25
	vec1 32 ssa_31 = i2f32 ssa_26
	vec1 32 ssa_6 = deref_var &coord_transform (shader_in vec4) 
	vec4 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_33 = fmul ssa_30, ssa_7.x
	vec1 32 ssa_34 = fmul ssa_31, ssa_7.z
	vec1 32 ssa_36 = fadd ssa_33, ssa_7.y
	vec1 32 ssa_37 = fadd ssa_34, ssa_7.w
	vec1 32 ssa_39 = f2i32 ssa_36
	vec1 32 ssa_40 = f2i32 ssa_37
	vec1 32 ssa_17 = deref_var &src_z (shader_in uint) 
	vec1 32 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec3 32 ssa_21 = vec3 ssa_39, ssa_40, ssa_18
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_23 = (uint)txf ssa_21 (coord), ssa_22 (lod), 0 (texture), 0 (sampler)
	vec1 32 ssa_24 = deref_var &gl_FragColor (shader_out vec4) 
	intrinsic store_deref (ssa_24, ssa_23) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
shader: MESA_SHADER_FRAGMENT
name: BLORP-blit
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_FLAT vec4 discard_rect (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT vec4 rect_grid (VARYING_SLOT_VAR2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT vec4 coord_transform (VARYING_SLOT_VAR3.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT uint src_z (VARYING_SLOT_VAR5.z, 0, 0)
decl_var shader_in INTERP_MODE_FLAT uvec2 src_offset (VARYING_SLOT_VAR4.xy, 0, 0)
decl_var shader_in INTERP_MODE_FLAT uvec2 dst_offset (VARYING_SLOT_VAR4.zw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT vec2 src_inv_size (VARYING_SLOT_VAR5.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 gl_FragColor (FRAG_RESULT_COLOR.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec4 32 ssa_0 = intrinsic load_frag_coord () ()
	vec1 32 ssa_25 = f2i32 ssa_0.x
	vec1 32 ssa_26 = f2i32 ssa_0.y
	vec1 32 ssa_43 = ftrunc ssa_0.x
	vec1 32 ssa_42 = ftrunc ssa_0.y
	vec1 32 ssa_6 = deref_var &coord_transform (shader_in vec4) 
	vec4 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_33 = fmul ssa_43, ssa_7.x
	vec1 32 ssa_34 = fmul ssa_42, ssa_7.z
	vec1 32 ssa_36 = fadd ssa_33, ssa_7.y
	vec1 32 ssa_37 = fadd ssa_34, ssa_7.w
	vec1 32 ssa_39 = f2i32 ssa_36
	vec1 32 ssa_40 = f2i32 ssa_37
	vec1 32 ssa_17 = deref_var &src_z (shader_in uint) 
	vec1 32 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec3 32 ssa_21 = vec3 ssa_39, ssa_40, ssa_18
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_23 = (uint)txf ssa_21 (coord), ssa_22 (lod), 0 (texture), 0 (sampler)
	vec1 32 ssa_24 = deref_var &gl_FragColor (shader_out vec4) 
	intrinsic store_deref (ssa_24, ssa_23) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
name: BLORP-blit
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_FLAT vec4 discard_rect (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT vec4 rect_grid (VARYING_SLOT_VAR2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT vec4 coord_transform (VARYING_SLOT_VAR3.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT uint src_z (VARYING_SLOT_VAR5.z, 0, 0)
decl_var shader_in INTERP_MODE_FLAT uvec2 src_offset (VARYING_SLOT_VAR4.xy, 0, 0)
decl_var shader_in INTERP_MODE_FLAT uvec2 dst_offset (VARYING_SLOT_VAR4.zw, 0, 0)
decl_var shader_in INTERP_MODE_FLAT vec2 src_inv_size (VARYING_SLOT_VAR5.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 gl_FragColor (FRAG_RESULT_COLOR.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec4 32 ssa_0 = intrinsic load_frag_coord () ()
	vec1 32 ssa_3 = ftrunc ssa_0.x
	vec1 32 ssa_4 = ftrunc ssa_0.y
	vec1 32 ssa_5 = deref_var &coord_transform (shader_in vec4) 
	vec4 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = fmul ssa_3, ssa_6.x
	vec1 32 ssa_8 = fmul ssa_4, ssa_6.z
	vec1 32 ssa_9 = fadd ssa_7, ssa_6.y
	vec1 32 ssa_10 = fadd ssa_8, ssa_6.w
	vec1 32 ssa_11 = f2i32 ssa_9
	vec1 32 ssa_12 = f2i32 ssa_10
	vec1 32 ssa_13 = deref_var &src_z (shader_in uint) 
	vec1 32 ssa_14 = intrinsic load_deref (ssa_13) (0) /* access=0 */
	vec3 32 ssa_15 = vec3 ssa_11, ssa_12, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_17 = (uint)txf ssa_15 (coord), ssa_16 (lod), 0 (texture), 0 (sampler)
	vec1 32 ssa_18 = deref_var &gl_FragColor (shader_out vec4) 
	intrinsic store_deref (ssa_18, ssa_17) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_lower_doubles
nir_lower_int64
nir_lower_bit_size
nir_lower_load_const_to_scalar
nir_lower_var_copies
nir_opt_large_constants
nir_lower_system_values
nir_lower_compute_system_values
nir_lower_subgroups
nir_lower_clip_cull_distance_arrays
nir_lower_vars_to_scratch
nir_lower_indirect_derefs
nir_lower_array_deref_of_vec
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
brw_nir_apply_sampler_key
nir_lower_subgroups
brw_nir_demote_sample_qualifiers
shader: MESA_SHADER_FRAGMENT
name: BLORP-blit
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_FLAT vec4 coord_transform (VARYING_SLOT_VAR3.xyzw, 35, 0)
decl_var shader_in INTERP_MODE_FLAT uint src_z (VARYING_SLOT_VAR5.z, 37, 0)
decl_var shader_out INTERP_MODE_NONE vec4 gl_FragColor (FRAG_RESULT_COLOR.xyzw, 4, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec4 32 ssa_0 = intrinsic load_frag_coord () ()
	vec1 32 ssa_1 = ftrunc ssa_0.x
	vec1 32 ssa_2 = ftrunc ssa_0.y
	vec1 32 ssa_3 = deref_var &coord_transform (shader_in vec4) 
	vec1 32 ssa_17 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_21 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_18 = intrinsic load_input (ssa_21) (35, 0, 160, 291) /* base=35 */ /* component=0 */ /* type=float32 */ /* location=35 slots=2 */	/* coord_transform */
	vec1 32 ssa_5 = fmul ssa_1, ssa_18.x
	vec1 32 ssa_6 = fmul ssa_2, ssa_18.z
	vec1 32 ssa_7 = fadd ssa_5, ssa_18.y
	vec1 32 ssa_8 = fadd ssa_6, ssa_18.w
	vec1 32 ssa_9 = f2i32 ssa_7
	vec1 32 ssa_10 = f2i32 ssa_8
	vec1 32 ssa_11 = deref_var &src_z (shader_in uint) 
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = intrinsic load_input (ssa_22) (37, 2, 36, 165) /* base=37 */ /* component=2 */ /* type=uint32 */ /* location=37 slots=1 */	/* src_z */
	vec3 32 ssa_13 = vec3 ssa_9, ssa_10, ssa_20
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_15 = (uint)txf ssa_13 (coord), ssa_14 (lod), 0 (texture), 0 (sampler)
	vec1 32 ssa_16 = deref_var &gl_FragColor (shader_out vec4) 
	vec1 32 ssa_23 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_15, ssa_23) (4, 15, 0, 160, 130) /* base=4 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=2 slots=1 */	/* gl_FragColor */
	/* succs: block_1 */
	block block_1:
}

brw_nir_move_interpolation_to_top
shader: MESA_SHADER_FRAGMENT
name: BLORP-blit
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_FLAT vec4 coord_transform (VARYING_SLOT_VAR3.xyzw, 35, 0)
decl_var shader_in INTERP_MODE_FLAT uint src_z (VARYING_SLOT_VAR5.z, 37, 0)
decl_var shader_out INTERP_MODE_NONE vec4 gl_FragColor (FRAG_RESULT_COLOR.xyzw, 4, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec4 32 ssa_0 = intrinsic load_frag_coord () ()
	vec1 32 ssa_1 = ftrunc ssa_0.x
	vec1 32 ssa_2 = ftrunc ssa_0.y
	vec1 32 ssa_3 = deref_var &coord_transform (shader_in vec4) 
	vec1 32 ssa_17 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_21 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_18 = intrinsic load_input (ssa_21) (35, 0, 160, 291) /* base=35 */ /* component=0 */ /* type=float32 */ /* location=35 slots=2 */	/* coord_transform */
	vec1 32 ssa_5 = fmul ssa_1, ssa_18.x
	vec1 32 ssa_6 = fmul ssa_2, ssa_18.z
	vec1 32 ssa_7 = fadd ssa_5, ssa_18.y
	vec1 32 ssa_8 = fadd ssa_6, ssa_18.w
	vec1 32 ssa_9 = f2i32 ssa_7
	vec1 32 ssa_10 = f2i32 ssa_8
	vec1 32 ssa_11 = deref_var &src_z (shader_in uint) 
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = intrinsic load_input (ssa_22) (37, 2, 36, 165) /* base=37 */ /* component=2 */ /* type=uint32 */ /* location=37 slots=1 */	/* src_z */
	vec3 32 ssa_13 = vec3 ssa_9, ssa_10, ssa_20
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_15 = (uint)txf ssa_13 (coord), ssa_14 (lod), 0 (texture), 0 (sampler)
	vec1 32 ssa_16 = deref_var &gl_FragColor (shader_out vec4) 
	vec1 32 ssa_23 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_15, ssa_23) (4, 15, 0, 160, 130) /* base=4 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=2 slots=1 */	/* gl_FragColor */
	/* succs: block_1 */
	block block_1:
}

brw_nir_lower_scoped_barriers
nir_opt_combine_memory_barriers
nir_opt_algebraic_before_ffma
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
name: BLORP-blit
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_FLAT vec4 coord_transform (VARYING_SLOT_VAR3.xyzw, 35, 0)
decl_var shader_in INTERP_MODE_FLAT uint src_z (VARYING_SLOT_VAR5.z, 37, 0)
decl_var shader_out INTERP_MODE_NONE vec4 gl_FragColor (FRAG_RESULT_COLOR.xyzw, 4, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec4 32 ssa_0 = intrinsic load_frag_coord () ()
	vec1 32 ssa_1 = ftrunc ssa_0.x
	vec1 32 ssa_2 = ftrunc ssa_0.y
	vec1 32 ssa_21 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_18 = intrinsic load_input (ssa_21) (35, 0, 160, 291) /* base=35 */ /* component=0 */ /* type=float32 */ /* location=35 slots=2 */	/* coord_transform */
	vec1 32 ssa_5 = fmul ssa_1, ssa_18.x
	vec1 32 ssa_6 = fmul ssa_2, ssa_18.z
	vec1 32 ssa_7 = fadd ssa_5, ssa_18.y
	vec1 32 ssa_8 = fadd ssa_6, ssa_18.w
	vec1 32 ssa_9 = f2i32 ssa_7
	vec1 32 ssa_10 = f2i32 ssa_8
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = intrinsic load_input (ssa_22) (37, 2, 36, 165) /* base=37 */ /* component=2 */ /* type=uint32 */ /* location=37 slots=1 */	/* src_z */
	vec3 32 ssa_13 = vec3 ssa_9, ssa_10, ssa_20
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_15 = (uint)txf ssa_13 (coord), ssa_14 (lod), 0 (texture), 0 (sampler)
	vec1 32 ssa_23 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_15, ssa_23) (4, 15, 0, 160, 130) /* base=4 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=2 slots=1 */	/* gl_FragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_FRAGMENT
name: BLORP-blit
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_FLAT vec4 coord_transform (VARYING_SLOT_VAR3.xyzw, 35, 0)
decl_var shader_in INTERP_MODE_FLAT uint src_z (VARYING_SLOT_VAR5.z, 37, 0)
decl_var shader_out INTERP_MODE_NONE vec4 gl_FragColor (FRAG_RESULT_COLOR.xyzw, 4, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec4 32 ssa_0 = intrinsic load_frag_coord () ()
	vec1 32 ssa_1 = ftrunc ssa_0.x
	vec1 32 ssa_2 = ftrunc ssa_0.y
	vec1 32 ssa_21 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_18 = intrinsic load_input (ssa_21) (35, 0, 160, 291) /* base=35 */ /* component=0 */ /* type=float32 */ /* location=35 slots=2 */	/* coord_transform */
	vec1 32 ssa_5 = fmul ssa_1, ssa_18.x
	vec1 32 ssa_6 = fmul ssa_2, ssa_18.z
	vec1 32 ssa_7 = fadd ssa_5, ssa_18.y
	vec1 32 ssa_8 = fadd ssa_6, ssa_18.w
	vec1 32 ssa_9 = f2i32 ssa_7
	vec1 32 ssa_10 = f2i32 ssa_8
	vec1 32 ssa_20 = intrinsic load_input (ssa_21) (37, 2, 36, 165) /* base=37 */ /* component=2 */ /* type=uint32 */ /* location=37 slots=1 */	/* src_z */
	vec3 32 ssa_13 = vec3 ssa_9, ssa_10, ssa_20
	vec4 32 ssa_15 = (uint)txf ssa_13 (coord), ssa_21 (lod), 0 (texture), 0 (sampler)
	intrinsic store_output (ssa_15, ssa_21) (4, 15, 0, 160, 130) /* base=4 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=2 slots=1 */	/* gl_FragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_opt_load_store_vectorize
brw_nir_lower_mem_access_bit_sizes
nir_lower_int64
brw_nir_opt_peephole_ffma
shader: MESA_SHADER_FRAGMENT
name: BLORP-blit
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_FLAT vec4 coord_transform (VARYING_SLOT_VAR3.xyzw, 35, 0)
decl_var shader_in INTERP_MODE_FLAT uint src_z (VARYING_SLOT_VAR5.z, 37, 0)
decl_var shader_out INTERP_MODE_NONE vec4 gl_FragColor (FRAG_RESULT_COLOR.xyzw, 4, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec4 32 ssa_0 = intrinsic load_frag_coord () ()
	vec1 32 ssa_1 = ftrunc ssa_0.x
	vec1 32 ssa_2 = ftrunc ssa_0.y
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_4 = intrinsic load_input (ssa_3) (35, 0, 160, 291) /* base=35 */ /* component=0 */ /* type=float32 */ /* location=35 slots=2 */	/* coord_transform */
	vec1 32 ssa_5 = fmul ssa_1, ssa_4.x
	vec1 32 ssa_6 = fmul ssa_2, ssa_4.z
	vec1 32 ssa_14 = ffma ssa_1, ssa_4.x, ssa_4.y
	vec1 32 ssa_15 = ffma ssa_2, ssa_4.z, ssa_4.w
	vec1 32 ssa_9 = f2i32 ssa_14
	vec1 32 ssa_10 = f2i32 ssa_15
	vec1 32 ssa_11 = intrinsic load_input (ssa_3) (37, 2, 36, 165) /* base=37 */ /* component=2 */ /* type=uint32 */ /* location=37 slots=1 */	/* src_z */
	vec3 32 ssa_12 = vec3 ssa_9, ssa_10, ssa_11
	vec4 32 ssa_13 = (uint)txf ssa_12 (coord), ssa_3 (lod), 0 (texture), 0 (sampler)
	intrinsic store_output (ssa_13, ssa_3) (4, 15, 0, 160, 130) /* base=4 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=2 slots=1 */	/* gl_FragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_comparison_pre
nir_opt_algebraic_late
brw_nir_lower_conversions
nir_lower_alu_to_scalar
nir_opt_algebraic_distribute_src_mods
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
name: BLORP-blit
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_FLAT vec4 coord_transform (VARYING_SLOT_VAR3.xyzw, 35, 0)
decl_var shader_in INTERP_MODE_FLAT uint src_z (VARYING_SLOT_VAR5.z, 37, 0)
decl_var shader_out INTERP_MODE_NONE vec4 gl_FragColor (FRAG_RESULT_COLOR.xyzw, 4, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec4 32 ssa_0 = intrinsic load_frag_coord () ()
	vec1 32 ssa_1 = ftrunc ssa_0.x
	vec1 32 ssa_2 = ftrunc ssa_0.y
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_4 = intrinsic load_input (ssa_3) (35, 0, 160, 291) /* base=35 */ /* component=0 */ /* type=float32 */ /* location=35 slots=2 */	/* coord_transform */
	vec1 32 ssa_14 = ffma ssa_1, ssa_4.x, ssa_4.y
	vec1 32 ssa_15 = ffma ssa_2, ssa_4.z, ssa_4.w
	vec1 32 ssa_9 = f2i32 ssa_14
	vec1 32 ssa_10 = f2i32 ssa_15
	vec1 32 ssa_11 = intrinsic load_input (ssa_3) (37, 2, 36, 165) /* base=37 */ /* component=2 */ /* type=uint32 */ /* location=37 slots=1 */	/* src_z */
	vec3 32 ssa_12 = vec3 ssa_9, ssa_10, ssa_11
	vec4 32 ssa_13 = (uint)txf ssa_12 (coord), ssa_3 (lod), 0 (texture), 0 (sampler)
	intrinsic store_output (ssa_13, ssa_3) (4, 15, 0, 160, 130) /* base=4 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=2 slots=1 */	/* gl_FragColor */
	/* succs: block_1 */
	block block_1:
}


Instructions before scheduling (reg_alloc 0)
{  1}    0: add(16) vgrf2:UW, g1<0>:UW, 11001010V NoMask group0 
{  2}    1: pixel_x(8) vgrf0:F, vgrf2:UW 
{  3}    2: pixel_y(8) vgrf1:F, vgrf2:UW 
{  3}    3: rndz(8) vgrf3:F, vgrf0:F 
{  3}    4: rndz(8) vgrf4:F, vgrf1:F 
{  3}    5: mad(8) vgrf5:F, g4<0>:F, g4<0>:F, vgrf3:F 
{  3}    6: mad(8) vgrf6:F, g5<0>:F, g5<0>:F, vgrf4:F 
{  5}    7: mov(8) vgrf8+0.0:D, vgrf5:F 
{  4}    8: mov(8) vgrf8+1.0:D, vgrf6:F 
{  3}    9: mov(8) vgrf8+2.0:F, g7<0>:F 
{  7}   10: send(8) (mlen: 3) vgrf9:UD, 0u, 0u, vgrf8:F 
{  4}   11: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf9:F 
Maximum   7 registers live at once.
clock    4, scheduled: add(16) vgrf2:UW, g1<0>:UW, 11001010V NoMask group0 
(register pressure 6)
	child 2, 11 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf9:F 
	child 1, 1 parents: pixel_y(8) vgrf1:F, vgrf2:UW 
		now available
	child 0, 1 parents: pixel_x(8) vgrf0:F, vgrf2:UW 
		now available
clock    6, scheduled: mov(8) vgrf8+2.0:F, g7<0>:F 
(register pressure 8)
	child 1, 10 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf9:F 
	child 0, 3 parents: send(8) (mlen: 3) vgrf9:UD, 0u, 0u, vgrf8:F 
clock    8, scheduled: pixel_x(8) vgrf0:F, vgrf2:UW 
(register pressure 9)
	child 1, 9 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf9:F 
	child 0, 1 parents: rndz(8) vgrf3:F, vgrf0:F 
		now available
clock   10, scheduled: pixel_y(8) vgrf1:F, vgrf2:UW 
(register pressure 9)
	child 1, 8 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf9:F 
	child 0, 1 parents: rndz(8) vgrf4:F, vgrf1:F 
		now available
clock   12, scheduled: rndz(8) vgrf3:F, vgrf0:F 
(register pressure 9)
	child 1, 7 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf9:F 
	child 0, 1 parents: mad(8) vgrf5:F, g4<0>:F, g4<0>:F, vgrf3:F 
		now available
clock   14, scheduled: rndz(8) vgrf4:F, vgrf1:F 
(register pressure 9)
	child 1, 6 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf9:F 
	child 0, 1 parents: mad(8) vgrf6:F, g5<0>:F, g5<0>:F, vgrf4:F 
		now available
clock   16, scheduled: mad(8) vgrf5:F, g4<0>:F, g4<0>:F, vgrf3:F 
(register pressure 9)
	child 1, 5 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf9:F 
	child 0, 1 parents: mov(8) vgrf8+0.0:D, vgrf5:F 
		now available
clock   18, scheduled: mad(8) vgrf6:F, g5<0>:F, g5<0>:F, vgrf4:F 
(register pressure 9)
	child 1, 4 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf9:F 
	child 0, 1 parents: mov(8) vgrf8+1.0:D, vgrf6:F 
		now available
clock   20, scheduled: mov(8) vgrf8+0.0:D, vgrf5:F 
(register pressure 8)
	child 1, 3 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf9:F 
	child 0, 2 parents: send(8) (mlen: 3) vgrf9:UD, 0u, 0u, vgrf8:F 
clock   22, scheduled: mov(8) vgrf8+1.0:D, vgrf6:F 
(register pressure 7)
	child 1, 2 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf9:F 
	child 0, 1 parents: send(8) (mlen: 3) vgrf9:UD, 0u, 0u, vgrf8:F 
		now available
clock   25, scheduled: send(8) (mlen: 3) vgrf9:UD, 0u, 0u, vgrf8:F 
(register pressure 8)
	child 0, 1 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf9:F 
		now available
clock   28, scheduled: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf9:F 
(register pressure 4)

Instructions after scheduling (reg_alloc 0)
{  1}    0: add(16) vgrf2:UW, g1<0>:UW, 11001010V NoMask group0 
{  2}    1: mov(8) vgrf8+2.0:F, g7<0>:F 
{  3}    2: pixel_x(8) vgrf0:F, vgrf2:UW 
{  3}    3: pixel_y(8) vgrf1:F, vgrf2:UW 
{  3}    4: rndz(8) vgrf3:F, vgrf0:F 
{  3}    5: rndz(8) vgrf4:F, vgrf1:F 
{  3}    6: mad(8) vgrf5:F, g4<0>:F, g4<0>:F, vgrf3:F 
{  5}    7: mad(8) vgrf6:F, g5<0>:F, g5<0>:F, vgrf4:F 
{  4}    8: mov(8) vgrf8+0.0:D, vgrf5:F 
{  3}    9: mov(8) vgrf8+1.0:D, vgrf6:F 
{  7}   10: send(8) (mlen: 3) vgrf9:UD, 0u, 0u, vgrf8:F 
{  4}   11: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf9:F 
Maximum   7 registers live at once.
clock    4, scheduled: add(16) vgrf6:UW, g1<0>:UW, 11001010V NoMask group0 
	child 2, 11 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 1, 1 parents: pixel_y(8) vgrf3:F, vgrf6:UW 
		now available
	child 0, 1 parents: pixel_x(8) vgrf2:F, vgrf6:UW 
		now available
clock    6, scheduled: mov(8) vgrf13:F, g7<0>:F 
	child 2, 2 parents: rndz(8) vgrf7:F, vgrf2:F 
	child 1, 10 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 3 parents: send(8) (mlen: 3) vgrf123+0.0:UD, 0u, 0u, vgrf11+0.0:F 
clock   20, scheduled: pixel_x(8) vgrf2:F, vgrf6:UW 
	child 1, 9 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: rndz(8) vgrf7:F, vgrf2:F 
		now available
clock   22, scheduled: pixel_y(8) vgrf3:F, vgrf6:UW 
	child 1, 8 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: rndz(8) vgrf8+0.0:F, vgrf3:F 
		now available
clock   36, scheduled: rndz(8) vgrf7:F, vgrf2:F 
	child 1, 7 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mad(8) vgrf9+0.0:F, g4<0>:F, g4<0>:F, vgrf7:F 
		now available
clock   38, scheduled: rndz(8) vgrf8+0.0:F, vgrf3:F 
	child 1, 6 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mad(8) vgrf10:F, g5<0>:F, g5<0>:F, vgrf8+0.0:F 
		now available
clock   52, scheduled: mad(8) vgrf9+0.0:F, g4<0>:F, g4<0>:F, vgrf7:F 
	child 1, 5 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mov(8) vgrf11:D, vgrf9+0.0:F 
		now available
clock   54, scheduled: mad(8) vgrf10:F, g5<0>:F, g5<0>:F, vgrf8+0.0:F 
	child 1, 4 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mov(8) vgrf12:D, vgrf10:F 
		now available
clock   72, scheduled: mov(8) vgrf11:D, vgrf9+0.0:F 
	child 1, 3 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 2 parents: send(8) (mlen: 3) vgrf123+0.0:UD, 0u, 0u, vgrf11+0.0:F 
clock   74, scheduled: mov(8) vgrf12:D, vgrf10:F 
	child 1, 2 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: send(8) (mlen: 3) vgrf123+0.0:UD, 0u, 0u, vgrf11+0.0:F 
		now available
clock   90, scheduled: send(8) (mlen: 3) vgrf123+0.0:UD, 0u, 0u, vgrf11+0.0:F 
	child 0, 1 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
		now available
clock  292, scheduled: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 

Instructions before scheduling (reg_alloc 0)
{  2}    0: add(32) vgrf2:UW, g1<0>:UW, 11001010V NoMask group0 
{  4}    1: pixel_x(16) vgrf0:F, vgrf2:UW 
{  6}    2: pixel_y(16) vgrf1:F, vgrf2:UW 
{  6}    3: rndz(16) vgrf3:F, vgrf0:F 
{  6}    4: rndz(16) vgrf4:F, vgrf1:F 
{  6}    5: mad(16) vgrf5:F, g6<0>:F, g6<0>:F, vgrf3:F 
{  6}    6: mad(16) vgrf6:F, g7<0>:F, g7<0>:F, vgrf4:F 
{ 10}    7: mov(16) vgrf8+0.0:D, vgrf5:F 
{  8}    8: mov(16) vgrf8+2.0:D, vgrf6:F 
{  6}    9: mov(16) vgrf8+4.0:F, g9<0>:F 
{ 14}   10: send(16) (mlen: 6) vgrf9:UD, 0u, 0u, vgrf8:F 
{  8}   11: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf9:F 
Maximum  14 registers live at once.
clock    2, scheduled: add(32) vgrf2:UW, g1<0>:UW, 11001010V NoMask group0 
(register pressure 7)
	child 2, 11 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf9:F 
	child 1, 1 parents: pixel_y(16) vgrf1:F, vgrf2:UW 
		now available
	child 0, 1 parents: pixel_x(16) vgrf0:F, vgrf2:UW 
		now available
clock    6, scheduled: mov(16) vgrf8+4.0:F, g9<0>:F 
(register pressure 12)
	child 1, 10 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf9:F 
	child 0, 3 parents: send(16) (mlen: 6) vgrf9:UD, 0u, 0u, vgrf8:F 
clock   10, scheduled: pixel_x(16) vgrf0:F, vgrf2:UW 
(register pressure 14)
	child 1, 9 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf9:F 
	child 0, 1 parents: rndz(16) vgrf3:F, vgrf0:F 
		now available
clock   14, scheduled: pixel_y(16) vgrf1:F, vgrf2:UW 
(register pressure 14)
	child 1, 8 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf9:F 
	child 0, 1 parents: rndz(16) vgrf4:F, vgrf1:F 
		now available
clock   18, scheduled: rndz(16) vgrf3:F, vgrf0:F 
(register pressure 14)
	child 1, 7 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf9:F 
	child 0, 1 parents: mad(16) vgrf5:F, g6<0>:F, g6<0>:F, vgrf3:F 
		now available
clock   22, scheduled: rndz(16) vgrf4:F, vgrf1:F 
(register pressure 14)
	child 1, 6 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf9:F 
	child 0, 1 parents: mad(16) vgrf6:F, g7<0>:F, g7<0>:F, vgrf4:F 
		now available
clock   26, scheduled: mad(16) vgrf5:F, g6<0>:F, g6<0>:F, vgrf3:F 
(register pressure 14)
	child 1, 5 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf9:F 
	child 0, 1 parents: mov(16) vgrf8+0.0:D, vgrf5:F 
		now available
clock   30, scheduled: mad(16) vgrf6:F, g7<0>:F, g7<0>:F, vgrf4:F 
(register pressure 14)
	child 1, 4 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf9:F 
	child 0, 1 parents: mov(16) vgrf8+2.0:D, vgrf6:F 
		now available
clock   34, scheduled: mov(16) vgrf8+0.0:D, vgrf5:F 
(register pressure 12)
	child 1, 3 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf9:F 
	child 0, 2 parents: send(16) (mlen: 6) vgrf9:UD, 0u, 0u, vgrf8:F 
clock   38, scheduled: mov(16) vgrf8+2.0:D, vgrf6:F 
(register pressure 10)
	child 1, 2 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf9:F 
	child 0, 1 parents: send(16) (mlen: 6) vgrf9:UD, 0u, 0u, vgrf8:F 
		now available
clock   43, scheduled: send(16) (mlen: 6) vgrf9:UD, 0u, 0u, vgrf8:F 
(register pressure 12)
	child 0, 1 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf9:F 
		now available
clock   48, scheduled: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf9:F 
(register pressure 4)

Instructions after scheduling (reg_alloc 0)
{  2}    0: add(32) vgrf2:UW, g1<0>:UW, 11001010V NoMask group0 
{  4}    1: mov(16) vgrf8+4.0:F, g9<0>:F 
{  6}    2: pixel_x(16) vgrf0:F, vgrf2:UW 
{  6}    3: pixel_y(16) vgrf1:F, vgrf2:UW 
{  6}    4: rndz(16) vgrf3:F, vgrf0:F 
{  6}    5: rndz(16) vgrf4:F, vgrf1:F 
{  6}    6: mad(16) vgrf5:F, g6<0>:F, g6<0>:F, vgrf3:F 
{ 10}    7: mad(16) vgrf6:F, g7<0>:F, g7<0>:F, vgrf4:F 
{  8}    8: mov(16) vgrf8+0.0:D, vgrf5:F 
{  6}    9: mov(16) vgrf8+2.0:D, vgrf6:F 
{ 14}   10: send(16) (mlen: 6) vgrf9:UD, 0u, 0u, vgrf8:F 
{  8}   11: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf9:F 
Maximum  14 registers live at once.
clock    2, scheduled: add(32) vgrf10:UW, g1<0>:UW, 11001010V NoMask group0 
	child 3, 11 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 3 parents: rndz(16) vgrf11:F, vgrf2:F 
	child 1, 1 parents: pixel_y(16) vgrf4:F, vgrf10:UW 
		now available
	child 0, 1 parents: pixel_x(16) vgrf2:F, vgrf10:UW 
		now available
clock    6, scheduled: mov(16) vgrf23:F, g9<0>:F 
	child 1, 10 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 3 parents: send(16) (mlen: 6) vgrf119+0.0:UD, 0u, 0u, vgrf19+0.0:F 
clock   20, scheduled: pixel_x(16) vgrf2:F, vgrf10:UW 
	child 1, 9 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 2 parents: rndz(16) vgrf11:F, vgrf2:F 
clock   24, scheduled: pixel_y(16) vgrf4:F, vgrf10:UW 
	child 2, 1 parents: rndz(16) vgrf11:F, vgrf2:F 
		now available
	child 1, 8 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: rndz(16) vgrf13:F, vgrf4:F 
		now available
clock   38, scheduled: rndz(16) vgrf11:F, vgrf2:F 
	child 1, 7 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mad(16) vgrf15:F, g6<0>:F, g6<0>:F, vgrf11:F 
		now available
clock   42, scheduled: rndz(16) vgrf13:F, vgrf4:F 
	child 1, 6 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mad(16) vgrf17:F, g7<0>:F, g7<0>:F, vgrf13:F 
		now available
clock   56, scheduled: mad(16) vgrf15:F, g6<0>:F, g6<0>:F, vgrf11:F 
	child 1, 5 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mov(16) vgrf19:D, vgrf15:F 
		now available
clock   60, scheduled: mad(16) vgrf17:F, g7<0>:F, g7<0>:F, vgrf13:F 
	child 1, 4 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mov(16) vgrf21+0.0:D, vgrf17:F 
		now available
clock   78, scheduled: mov(16) vgrf19:D, vgrf15:F 
	child 1, 3 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 2 parents: send(16) (mlen: 6) vgrf119+0.0:UD, 0u, 0u, vgrf19+0.0:F 
clock   82, scheduled: mov(16) vgrf21+0.0:D, vgrf17:F 
	child 1, 2 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: send(16) (mlen: 6) vgrf119+0.0:UD, 0u, 0u, vgrf19+0.0:F 
		now available
clock  100, scheduled: send(16) (mlen: 6) vgrf119+0.0:UD, 0u, 0u, vgrf19+0.0:F 
	child 0, 1 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
		now available
clock  304, scheduled: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 

Instructions before scheduling (reg_alloc 0)
{  2}    0: add(32) vgrf2:UW, g1<0>:UW, 11001010V NoMask 
{  4}    1: pixel_x(16) vgrf13:F, vgrf2:UW group0 
{  6}    2: pixel_y(16) vgrf14:F, vgrf2:UW group0 
{  6}    3: add(32) vgrf3:UW, g2<0>:UW, 11001010V NoMask 
{  8}    4: pixel_x(16) vgrf0:F, vgrf3:UW group16 
{ 10}    5: pixel_y(16) vgrf1:F, vgrf3:UW group16 
{ 10}    6: rndz(16) vgrf15:F, vgrf13:F group0 
{ 10}    7: rndz(16) vgrf4:F, vgrf0:F group16 
{ 10}    8: rndz(16) vgrf16:F, vgrf14:F group0 
{ 10}    9: rndz(16) vgrf5:F, vgrf1:F group16 
{ 10}   10: mad(16) vgrf17:F, g11<0>:F, g11<0>:F, vgrf15:F group0 
{ 10}   11: mad(16) vgrf6:F, g11<0>:F, g11<0>:F, vgrf4:F group16 
{ 10}   12: mad(16) vgrf18:F, g12<0>:F, g12<0>:F, vgrf16:F group0 
{ 10}   13: mad(16) vgrf7:F, g12<0>:F, g12<0>:F, vgrf5:F group16 
{ 14}   14: mov(16) vgrf9+0.0:D, vgrf17:F group0 
{ 18}   15: mov(16) vgrf10+0.0:D, vgrf6:F group16 
{ 16}   16: mov(16) vgrf9+2.0:D, vgrf18:F group0 
{ 14}   17: mov(16) vgrf10+2.0:D, vgrf7:F group16 
{ 12}   18: mov(16) vgrf9+4.0:F, g14<0>:F group0 
{ 20}   19: send(16) (mlen: 6) vgrf11:UD, 0u, 0u, vgrf9:F group0 
{ 14}   20: mov(16) vgrf10+4.0:F, g14<0>:F group16 
{ 22}   21: send(16) (mlen: 6) vgrf12:UD, 0u, 0u, vgrf10:F group16 
{ 16}   22: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
{  8}   23: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf12:F group16 
Maximum  22 registers live at once.
clock    2, scheduled: add(32) vgrf2:UW, g1<0>:UW, 11001010V NoMask 
(register pressure 8)
	child 2, 22 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 1, 1 parents: pixel_y(16) vgrf14:F, vgrf2:UW group0 
		now available
	child 0, 1 parents: pixel_x(16) vgrf13:F, vgrf2:UW group0 
		now available
clock    4, scheduled: add(32) vgrf3:UW, g2<0>:UW, 11001010V NoMask 
(register pressure 9)
	child 2, 21 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 1, 1 parents: pixel_y(16) vgrf1:F, vgrf3:UW group16 
		now available
	child 0, 1 parents: pixel_x(16) vgrf0:F, vgrf3:UW group16 
		now available
clock    8, scheduled: mov(16) vgrf9+4.0:F, g14<0>:F group0 
(register pressure 15)
	child 1, 20 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 3 parents: send(16) (mlen: 6) vgrf11:UD, 0u, 0u, vgrf9:F group0 
clock   12, scheduled: mov(16) vgrf10+4.0:F, g14<0>:F group16 
(register pressure 20)
	child 1, 19 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 3 parents: send(16) (mlen: 6) vgrf12:UD, 0u, 0u, vgrf10:F group16 
clock   16, scheduled: pixel_x(16) vgrf13:F, vgrf2:UW group0 
(register pressure 22)
	child 1, 18 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 1 parents: rndz(16) vgrf15:F, vgrf13:F group0 
		now available
clock   20, scheduled: pixel_y(16) vgrf14:F, vgrf2:UW group0 
(register pressure 22)
	child 1, 17 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 1 parents: rndz(16) vgrf16:F, vgrf14:F group0 
		now available
clock   24, scheduled: pixel_x(16) vgrf0:F, vgrf3:UW group16 
(register pressure 24)
	child 1, 16 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 1 parents: rndz(16) vgrf4:F, vgrf0:F group16 
		now available
clock   28, scheduled: pixel_y(16) vgrf1:F, vgrf3:UW group16 
(register pressure 24)
	child 1, 15 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 1 parents: rndz(16) vgrf5:F, vgrf1:F group16 
		now available
clock   32, scheduled: rndz(16) vgrf15:F, vgrf13:F group0 
(register pressure 24)
	child 1, 14 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 1 parents: mad(16) vgrf17:F, g11<0>:F, g11<0>:F, vgrf15:F group0 
		now available
clock   36, scheduled: rndz(16) vgrf16:F, vgrf14:F group0 
(register pressure 24)
	child 1, 13 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 1 parents: mad(16) vgrf18:F, g12<0>:F, g12<0>:F, vgrf16:F group0 
		now available
clock   40, scheduled: rndz(16) vgrf4:F, vgrf0:F group16 
(register pressure 24)
	child 1, 12 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 1 parents: mad(16) vgrf6:F, g11<0>:F, g11<0>:F, vgrf4:F group16 
		now available
clock   44, scheduled: rndz(16) vgrf5:F, vgrf1:F group16 
(register pressure 24)
	child 1, 11 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 1 parents: mad(16) vgrf7:F, g12<0>:F, g12<0>:F, vgrf5:F group16 
		now available
clock   48, scheduled: mad(16) vgrf17:F, g11<0>:F, g11<0>:F, vgrf15:F group0 
(register pressure 24)
	child 1, 10 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 1 parents: mov(16) vgrf9+0.0:D, vgrf17:F group0 
		now available
clock   52, scheduled: mad(16) vgrf18:F, g12<0>:F, g12<0>:F, vgrf16:F group0 
(register pressure 24)
	child 1, 9 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 1 parents: mov(16) vgrf9+2.0:D, vgrf18:F group0 
		now available
clock   56, scheduled: mad(16) vgrf6:F, g11<0>:F, g11<0>:F, vgrf4:F group16 
(register pressure 24)
	child 1, 8 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 1 parents: mov(16) vgrf10+0.0:D, vgrf6:F group16 
		now available
clock   60, scheduled: mad(16) vgrf7:F, g12<0>:F, g12<0>:F, vgrf5:F group16 
(register pressure 24)
	child 1, 7 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 1 parents: mov(16) vgrf10+2.0:D, vgrf7:F group16 
		now available
clock   64, scheduled: mov(16) vgrf9+0.0:D, vgrf17:F group0 
(register pressure 22)
	child 1, 6 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 2 parents: send(16) (mlen: 6) vgrf11:UD, 0u, 0u, vgrf9:F group0 
clock   68, scheduled: mov(16) vgrf9+2.0:D, vgrf18:F group0 
(register pressure 20)
	child 1, 5 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 1 parents: send(16) (mlen: 6) vgrf11:UD, 0u, 0u, vgrf9:F group0 
		now available
clock   72, scheduled: mov(16) vgrf10+0.0:D, vgrf6:F group16 
(register pressure 18)
	child 1, 4 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 2 parents: send(16) (mlen: 6) vgrf12:UD, 0u, 0u, vgrf10:F group16 
clock   76, scheduled: mov(16) vgrf10+2.0:D, vgrf7:F group16 
(register pressure 16)
	child 1, 3 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
	child 0, 1 parents: send(16) (mlen: 6) vgrf12:UD, 0u, 0u, vgrf10:F group16 
		now available
clock   80, scheduled: send(16) (mlen: 6) vgrf11:UD, 0u, 0u, vgrf9:F group0 
(register pressure 18)
	child 0, 2 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
clock   84, scheduled: send(16) (mlen: 6) vgrf12:UD, 0u, 0u, vgrf10:F group16 
(register pressure 20)
	child 1, 2 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf12:F group16 
	child 0, 1 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
		now available
clock   88, scheduled: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
(register pressure 12)
	child 0, 1 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf12:F group16 
		now available
clock   92, scheduled: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf12:F group16 
(register pressure 4)

Instructions after scheduling (reg_alloc 0)
{  2}    0: add(32) vgrf2:UW, g1<0>:UW, 11001010V NoMask 
{  4}    1: add(32) vgrf3:UW, g2<0>:UW, 11001010V NoMask 
{  6}    2: mov(16) vgrf9+4.0:F, g14<0>:F group0 
{  6}    3: mov(16) vgrf10+4.0:F, g14<0>:F group16 
{  8}    4: pixel_x(16) vgrf13:F, vgrf2:UW group0 
{ 10}    5: pixel_y(16) vgrf14:F, vgrf2:UW group0 
{ 10}    6: pixel_x(16) vgrf0:F, vgrf3:UW group16 
{ 10}    7: pixel_y(16) vgrf1:F, vgrf3:UW group16 
{ 10}    8: rndz(16) vgrf15:F, vgrf13:F group0 
{ 10}    9: rndz(16) vgrf16:F, vgrf14:F group0 
{ 10}   10: rndz(16) vgrf4:F, vgrf0:F group16 
{ 10}   11: rndz(16) vgrf5:F, vgrf1:F group16 
{ 10}   12: mad(16) vgrf17:F, g11<0>:F, g11<0>:F, vgrf15:F group0 
{ 10}   13: mad(16) vgrf18:F, g12<0>:F, g12<0>:F, vgrf16:F group0 
{ 14}   14: mad(16) vgrf6:F, g11<0>:F, g11<0>:F, vgrf4:F group16 
{ 18}   15: mad(16) vgrf7:F, g12<0>:F, g12<0>:F, vgrf5:F group16 
{ 16}   16: mov(16) vgrf9+0.0:D, vgrf17:F group0 
{ 14}   17: mov(16) vgrf9+2.0:D, vgrf18:F group0 
{ 12}   18: mov(16) vgrf10+0.0:D, vgrf6:F group16 
{ 20}   19: mov(16) vgrf10+2.0:D, vgrf7:F group16 
{ 14}   20: send(16) (mlen: 6) vgrf11:UD, 0u, 0u, vgrf9:F group0 
{ 22}   21: send(16) (mlen: 6) vgrf12:UD, 0u, 0u, vgrf10:F group16 
{ 16}   22: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf11:F group0 
{  8}   23: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf12:F group16 
Maximum  22 registers live at once.
clock    2, scheduled: add(32) vgrf5:UW, g1<0>:UW, 11001010V NoMask 
	child 4, 22 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 3, 12 parents: send(16) (mlen: 6) vgrf2+0.0:UD, 0u, 0u, vgrf19+0.0:F group0 
	child 2, 4 parents: pixel_y(16) vgrf4:F, vgrf7:UW group16 
	child 1, 3 parents: pixel_y(16) vgrf13:F, vgrf5:UW group0 
	child 0, 1 parents: pixel_x(16) vgrf9+0.0:F, vgrf5:UW group0 
		now available
clock    4, scheduled: add(32) vgrf7:UW, g2<0>:UW, 11001010V NoMask 
	child 4, 21 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 3, 11 parents: send(16) (mlen: 6) vgrf2+0.0:UD, 0u, 0u, vgrf19+0.0:F group0 
	child 2, 5 parents: rndz(16) vgrf8+0.0:F, vgrf2:F group16 
	child 1, 3 parents: pixel_y(16) vgrf4:F, vgrf7:UW group16 
	child 0, 1 parents: pixel_x(16) vgrf2:F, vgrf7:UW group16 
		now available
clock    8, scheduled: mov(16) vgrf23+0.0:F, g14<0>:F group0 
	child 2, 2 parents: pixel_y(16) vgrf13:F, vgrf5:UW group0 
	child 1, 20 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 10 parents: send(16) (mlen: 6) vgrf2+0.0:UD, 0u, 0u, vgrf19+0.0:F group0 
clock   12, scheduled: mov(16) vgrf29:F, g14<0>:F group16 
	child 2, 1 parents: pixel_y(16) vgrf13:F, vgrf5:UW group0 
		now available
	child 1, 19 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 3 parents: send(16) (mlen: 6) vgrf119+0.0:UD, 0u, 0u, vgrf25+0.0:F group16 
clock   20, scheduled: pixel_y(16) vgrf13:F, vgrf5:UW group0 
	child 4, 9 parents: send(16) (mlen: 6) vgrf2+0.0:UD, 0u, 0u, vgrf19+0.0:F group0 
	child 3, 2 parents: pixel_y(16) vgrf4:F, vgrf7:UW group16 
	child 2, 18 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 1, 3 parents: rndz(16) vgrf13:F, vgrf4:F group16 
	child 0, 1 parents: rndz(16) vgrf17:F, vgrf13:F group0 
		now available
clock   24, scheduled: pixel_x(16) vgrf9+0.0:F, vgrf5:UW group0 
	child 4, 8 parents: send(16) (mlen: 6) vgrf2+0.0:UD, 0u, 0u, vgrf19+0.0:F group0 
	child 3, 1 parents: pixel_y(16) vgrf4:F, vgrf7:UW group16 
		now available
	child 2, 17 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 1, 4 parents: rndz(16) vgrf8+0.0:F, vgrf2:F group16 
	child 0, 1 parents: rndz(16) vgrf15:F, vgrf9+0.0:F group0 
		now available
clock   28, scheduled: pixel_x(16) vgrf2:F, vgrf7:UW group16 
	child 2, 16 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 1, 7 parents: send(16) (mlen: 6) vgrf2+0.0:UD, 0u, 0u, vgrf19+0.0:F group0 
	child 0, 3 parents: rndz(16) vgrf8+0.0:F, vgrf2:F group16 
clock   32, scheduled: pixel_y(16) vgrf4:F, vgrf7:UW group16 
	child 3, 2 parents: rndz(16) vgrf8+0.0:F, vgrf2:F group16 
	child 2, 15 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 1, 6 parents: send(16) (mlen: 6) vgrf2+0.0:UD, 0u, 0u, vgrf19+0.0:F group0 
	child 0, 2 parents: rndz(16) vgrf13:F, vgrf4:F group16 
clock   38, scheduled: rndz(16) vgrf17:F, vgrf13:F group0 
	child 3, 1 parents: rndz(16) vgrf13:F, vgrf4:F group16 
		now available
	child 2, 14 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 1, 3 parents: mad(16) vgrf17:F, g12<0>:F, g12<0>:F, vgrf13:F group16 
	child 0, 1 parents: mad(16) vgrf33:F, g12<0>:F, g12<0>:F, vgrf17:F group0 
		now available
clock   42, scheduled: rndz(16) vgrf15:F, vgrf9+0.0:F group0 
	child 3, 1 parents: rndz(16) vgrf8+0.0:F, vgrf2:F group16 
		now available
	child 2, 13 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 1, 3 parents: mad(16) vgrf15:F, g11<0>:F, g11<0>:F, vgrf8+0.0:F group16 
	child 0, 1 parents: mad(16) vgrf31:F, g11<0>:F, g11<0>:F, vgrf15:F group0 
		now available
clock   46, scheduled: rndz(16) vgrf8+0.0:F, vgrf2:F group16 
	child 2, 12 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 1, 5 parents: send(16) (mlen: 6) vgrf2+0.0:UD, 0u, 0u, vgrf19+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf15:F, g11<0>:F, g11<0>:F, vgrf8+0.0:F group16 
clock   50, scheduled: rndz(16) vgrf13:F, vgrf4:F group16 
	child 2, 4 parents: send(16) (mlen: 6) vgrf2+0.0:UD, 0u, 0u, vgrf19+0.0:F group0 
	child 1, 11 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf17:F, g12<0>:F, g12<0>:F, vgrf13:F group16 
clock   56, scheduled: mad(16) vgrf33:F, g12<0>:F, g12<0>:F, vgrf17:F group0 
	child 2, 1 parents: mad(16) vgrf17:F, g12<0>:F, g12<0>:F, vgrf13:F group16 
		now available
	child 1, 10 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: mov(16) vgrf21:D, vgrf33:F group0 
		now available
clock   60, scheduled: mad(16) vgrf31:F, g11<0>:F, g11<0>:F, vgrf15:F group0 
	child 2, 1 parents: mad(16) vgrf15:F, g11<0>:F, g11<0>:F, vgrf8+0.0:F group16 
		now available
	child 1, 9 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: mov(16) vgrf19:D, vgrf31:F group0 
		now available
clock   64, scheduled: mad(16) vgrf15:F, g11<0>:F, g11<0>:F, vgrf8+0.0:F group16 
	child 2, 3 parents: send(16) (mlen: 6) vgrf2+0.0:UD, 0u, 0u, vgrf19+0.0:F group0 
	child 1, 8 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: mov(16) vgrf25+0.0:D, vgrf15:F group16 
		now available
clock   68, scheduled: mad(16) vgrf17:F, g12<0>:F, g12<0>:F, vgrf13:F group16 
	child 1, 7 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: mov(16) vgrf27+0.0:D, vgrf17:F group16 
		now available
clock   78, scheduled: mov(16) vgrf21:D, vgrf33:F group0 
	child 1, 6 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 2 parents: send(16) (mlen: 6) vgrf2+0.0:UD, 0u, 0u, vgrf19+0.0:F group0 
clock   82, scheduled: mov(16) vgrf19:D, vgrf31:F group0 
	child 1, 5 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: send(16) (mlen: 6) vgrf2+0.0:UD, 0u, 0u, vgrf19+0.0:F group0 
		now available
clock   86, scheduled: mov(16) vgrf25+0.0:D, vgrf15:F group16 
	child 1, 4 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 2 parents: send(16) (mlen: 6) vgrf119+0.0:UD, 0u, 0u, vgrf25+0.0:F group16 
clock   90, scheduled: mov(16) vgrf27+0.0:D, vgrf17:F group16 
	child 1, 3 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: send(16) (mlen: 6) vgrf119+0.0:UD, 0u, 0u, vgrf25+0.0:F group16 
		now available
clock  100, scheduled: send(16) (mlen: 6) vgrf2+0.0:UD, 0u, 0u, vgrf19+0.0:F group0 
	child 0, 2 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
clock  108, scheduled: send(16) (mlen: 6) vgrf119+0.0:UD, 0u, 0u, vgrf25+0.0:F group16 
	child 1, 2 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
	child 0, 1 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
		now available
clock  304, scheduled: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
		now available
clock  312, scheduled: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
nir_opt_move
nir_lower_bool_to_int32
nir_copy_prop
nir_opt_dce
nir_lower_locals_to_regs
nir_convert_from_ssa
nir_opt_dce
nir_opt_rematerialize_compares
nir_lower_variable_initializers
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_2, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_5, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_12 = fmul ssa_7, ssa_11
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_19 = fadd ssa_12, ssa_18
	vec1 32 ssa_20 = mov ssa_19.x
	vec1 32 ssa_21 = mov ssa_19.y
	vec4 32 ssa_24 = vec4 ssa_20, ssa_21, ssa_22, ssa_23
	vec1 32 ssa_25 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_26 = deref_struct &ssa_25->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_26, ssa_24) (15, 0) /* wrmask=xyzw */ /* access=0 */
	return
	/* succs: block_1 */
	block block_1:
}

nir_lower_returns
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_2, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_5, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_12 = fmul ssa_7, ssa_11
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_19 = fadd ssa_12, ssa_18
	vec1 32 ssa_20 = mov ssa_19.x
	vec1 32 ssa_21 = mov ssa_19.y
	vec4 32 ssa_24 = vec4 ssa_20, ssa_21, ssa_22, ssa_23
	vec1 32 ssa_25 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_26 = deref_struct &ssa_25->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_26, ssa_24) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_inline_functions
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_2, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_5, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_12 = fmul ssa_7, ssa_11
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_19 = fadd ssa_12, ssa_18
	vec1 32 ssa_20 = mov ssa_19.x
	vec1 32 ssa_21 = mov ssa_19.y
	vec4 32 ssa_24 = vec4 ssa_20, ssa_21, ssa_22, ssa_23
	vec1 32 ssa_25 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_26 = deref_struct &ssa_25->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_26, ssa_24) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_copy_prop
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_2, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_5, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_12 = fmul ssa_7, ssa_11
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_19 = fadd ssa_12, ssa_18
	vec1 32 ssa_20 = mov ssa_19.x
	vec1 32 ssa_21 = mov ssa_19.y
	vec4 32 ssa_24 = vec4 ssa_19.x, ssa_19.y, ssa_22, ssa_23
	vec1 32 ssa_25 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_26 = deref_struct &ssa_25->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_26, ssa_24) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_deref
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_2, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_5, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_12 = fmul ssa_7, ssa_11
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_19 = fadd ssa_12, ssa_18
	vec1 32 ssa_20 = mov ssa_19.x
	vec1 32 ssa_21 = mov ssa_19.y
	vec4 32 ssa_24 = vec4 ssa_19.x, ssa_19.y, ssa_22, ssa_23
	vec1 32 ssa_25 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_26 = deref_struct &ssa_25->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_26, ssa_24) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_variable_initializers
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_2, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_5, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_12 = fmul ssa_7, ssa_11
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_19 = fadd ssa_12, ssa_18
	vec1 32 ssa_20 = mov ssa_19.x
	vec1 32 ssa_21 = mov ssa_19.y
	vec4 32 ssa_24 = vec4 ssa_19.x, ssa_19.y, ssa_22, ssa_23
	vec1 32 ssa_25 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_26 = deref_struct &ssa_25->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_26, ssa_24) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_var_copies
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_2, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_5, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_12 = fmul ssa_7, ssa_11
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_19 = fadd ssa_12, ssa_18
	vec1 32 ssa_20 = mov ssa_19.x
	vec1 32 ssa_21 = mov ssa_19.y
	vec4 32 ssa_24 = vec4 ssa_19.x, ssa_19.y, ssa_22, ssa_23
	vec1 32 ssa_25 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_26 = deref_struct &ssa_25->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_26, ssa_24) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_per_member_structs
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_2, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_5, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_12 = fmul ssa_7, ssa_11
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_19 = fadd ssa_12, ssa_18
	vec1 32 ssa_20 = mov ssa_19.x
	vec1 32 ssa_21 = mov ssa_19.y
	vec4 32 ssa_24 = vec4 ssa_19.x, ssa_19.y, ssa_22, ssa_23
	vec1 32 ssa_27 = deref_var &.field0 (shader_out vec4) 
	intrinsic store_deref (ssa_27, ssa_24) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_remove_dead_variables
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_2, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_5, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_12 = fmul ssa_7, ssa_11
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_19 = fadd ssa_12, ssa_18
	vec1 32 ssa_20 = mov ssa_19.x
	vec1 32 ssa_21 = mov ssa_19.y
	vec4 32 ssa_24 = vec4 ssa_19.x, ssa_19.y, ssa_22, ssa_23
	vec1 32 ssa_27 = deref_var &.field0 (shader_out vec4) 
	intrinsic store_deref (ssa_27, ssa_24) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_propagate_invariant
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_2, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_5, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_12 = fmul ssa_7, ssa_11
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_19 = fadd ssa_12, ssa_18
	vec1 32 ssa_20 = mov ssa_19.x
	vec1 32 ssa_21 = mov ssa_19.y
	vec4 32 ssa_24 = vec4 ssa_19.x, ssa_19.y, ssa_22, ssa_23
	vec1 32 ssa_27 = deref_var &.field0 (shader_out vec4) 
	intrinsic store_deref (ssa_27, ssa_24) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_io_to_temporaries
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var  INTERP_MODE_NONE vec2 out@outUV-temp
decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUV-temp (shader_temp vec2) 
	intrinsic store_deref (ssa_2, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &out@outColor-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_5, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_12 = fmul ssa_7, ssa_11
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_19 = fadd ssa_12, ssa_18
	vec1 32 ssa_20 = mov ssa_19.x
	vec1 32 ssa_21 = mov ssa_19.y
	vec4 32 ssa_24 = vec4 ssa_19.x, ssa_19.y, ssa_22, ssa_23
	vec1 32 ssa_27 = deref_var &out@.field0-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_27, ssa_24) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_28 = deref_var &out@outUV-temp (shader_temp vec2) 
	vec1 32 ssa_29 = deref_var &outUV (shader_out vec2) 
	intrinsic copy_deref (ssa_29, ssa_28) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_30 = deref_var &out@outColor-temp (shader_temp vec4) 
	vec1 32 ssa_31 = deref_var &outColor (shader_out vec4) 
	intrinsic copy_deref (ssa_31, ssa_30) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_32 = deref_var &out@.field0-temp (shader_temp vec4) 
	vec1 32 ssa_33 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_33, ssa_32) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_frexp
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var  INTERP_MODE_NONE vec2 out@outUV-temp
decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUV-temp (shader_temp vec2) 
	intrinsic store_deref (ssa_2, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &out@outColor-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_5, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_12 = fmul ssa_7, ssa_11
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec2 32 ssa_19 = fadd ssa_12, ssa_18
	vec1 32 ssa_20 = mov ssa_19.x
	vec1 32 ssa_21 = mov ssa_19.y
	vec4 32 ssa_24 = vec4 ssa_19.x, ssa_19.y, ssa_22, ssa_23
	vec1 32 ssa_27 = deref_var &out@.field0-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_27, ssa_24) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_28 = deref_var &out@outUV-temp (shader_temp vec2) 
	vec1 32 ssa_29 = deref_var &outUV (shader_out vec2) 
	intrinsic copy_deref (ssa_29, ssa_28) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_30 = deref_var &out@outColor-temp (shader_temp vec4) 
	vec1 32 ssa_31 = deref_var &outColor (shader_out vec4) 
	intrinsic copy_deref (ssa_31, ssa_30) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_32 = deref_var &out@.field0-temp (shader_temp vec4) 
	vec1 32 ssa_33 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_33, ssa_32) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_alu_to_scalar
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var  INTERP_MODE_NONE vec2 out@outUV-temp
decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUV-temp (shader_temp vec2) 
	intrinsic store_deref (ssa_2, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &out@outColor-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_5, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_34 = fmul ssa_7.x, ssa_11.x
	vec1 32 ssa_35 = fmul ssa_7.y, ssa_11.y
	vec2 32 ssa_36 = vec2 ssa_34, ssa_35
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_37 = fadd ssa_36.x, ssa_18.x
	vec1 32 ssa_38 = fadd ssa_36.y, ssa_18.y
	vec2 32 ssa_39 = vec2 ssa_37, ssa_38
	vec1 32 ssa_20 = mov ssa_39.x
	vec1 32 ssa_21 = mov ssa_39.y
	vec4 32 ssa_24 = vec4 ssa_39.x, ssa_39.y, ssa_22, ssa_23
	vec1 32 ssa_27 = deref_var &out@.field0-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_27, ssa_24) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_28 = deref_var &out@outUV-temp (shader_temp vec2) 
	vec1 32 ssa_29 = deref_var &outUV (shader_out vec2) 
	intrinsic copy_deref (ssa_29, ssa_28) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_30 = deref_var &out@outColor-temp (shader_temp vec4) 
	vec1 32 ssa_31 = deref_var &outColor (shader_out vec4) 
	intrinsic copy_deref (ssa_31, ssa_30) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_32 = deref_var &out@.field0-temp (shader_temp vec4) 
	vec1 32 ssa_33 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_33, ssa_32) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_tex
nir_normalize_cubemap_coords
nir_lower_global_vars_to_local
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUV-temp (function_temp vec2) 
	intrinsic store_deref (ssa_2, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &out@outColor-temp (function_temp vec4) 
	intrinsic store_deref (ssa_5, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_34 = fmul ssa_7.x, ssa_11.x
	vec1 32 ssa_35 = fmul ssa_7.y, ssa_11.y
	vec2 32 ssa_36 = vec2 ssa_34, ssa_35
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_37 = fadd ssa_36.x, ssa_18.x
	vec1 32 ssa_38 = fadd ssa_36.y, ssa_18.y
	vec2 32 ssa_39 = vec2 ssa_37, ssa_38
	vec1 32 ssa_20 = mov ssa_39.x
	vec1 32 ssa_21 = mov ssa_39.y
	vec4 32 ssa_24 = vec4 ssa_39.x, ssa_39.y, ssa_22, ssa_23
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	intrinsic store_deref (ssa_27, ssa_24) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_28 = deref_var &out@outUV-temp (function_temp vec2) 
	vec1 32 ssa_29 = deref_var &outUV (shader_out vec2) 
	intrinsic copy_deref (ssa_29, ssa_28) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_30 = deref_var &out@outColor-temp (function_temp vec4) 
	vec1 32 ssa_31 = deref_var &outColor (shader_out vec4) 
	intrinsic copy_deref (ssa_31, ssa_30) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_32 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_33 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_33, ssa_32) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_var_copies
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUV-temp (function_temp vec2) 
	intrinsic store_deref (ssa_2, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &out@outColor-temp (function_temp vec4) 
	intrinsic store_deref (ssa_5, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_34 = fmul ssa_7.x, ssa_11.x
	vec1 32 ssa_35 = fmul ssa_7.y, ssa_11.y
	vec2 32 ssa_36 = vec2 ssa_34, ssa_35
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_37 = fadd ssa_36.x, ssa_18.x
	vec1 32 ssa_38 = fadd ssa_36.y, ssa_18.y
	vec2 32 ssa_39 = vec2 ssa_37, ssa_38
	vec1 32 ssa_20 = mov ssa_39.x
	vec1 32 ssa_21 = mov ssa_39.y
	vec4 32 ssa_24 = vec4 ssa_39.x, ssa_39.y, ssa_22, ssa_23
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	intrinsic store_deref (ssa_27, ssa_24) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_28 = deref_var &out@outUV-temp (function_temp vec2) 
	vec1 32 ssa_29 = deref_var &outUV (shader_out vec2) 
	intrinsic copy_deref (ssa_29, ssa_28) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_30 = deref_var &out@outColor-temp (function_temp vec4) 
	vec1 32 ssa_31 = deref_var &outColor (shader_out vec4) 
	intrinsic copy_deref (ssa_31, ssa_30) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_32 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_33 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_33, ssa_32) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_struct_vars
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUV-temp (function_temp vec2) 
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &out@outColor-temp (function_temp vec4) 
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_34 = fmul ssa_7.x, ssa_11.x
	vec1 32 ssa_35 = fmul ssa_7.y, ssa_11.y
	vec2 32 ssa_36 = vec2 ssa_34, ssa_35
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_37 = fadd ssa_36.x, ssa_18.x
	vec1 32 ssa_38 = fadd ssa_36.y, ssa_18.y
	vec2 32 ssa_39 = vec2 ssa_37, ssa_38
	vec1 32 ssa_20 = mov ssa_39.x
	vec1 32 ssa_21 = mov ssa_39.y
	vec4 32 ssa_24 = vec4 ssa_39.x, ssa_39.y, ssa_22, ssa_23
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_28 = deref_var &out@outUV-temp (function_temp vec2) 
	vec1 32 ssa_29 = deref_var &outUV (shader_out vec2) 
	vec2 32 ssa_43 = mov ssa_1
	intrinsic store_deref (ssa_29, ssa_43) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_30 = deref_var &out@outColor-temp (function_temp vec4) 
	vec1 32 ssa_31 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_44 = mov ssa_4
	intrinsic store_deref (ssa_31, ssa_44) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_32 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_33 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_45 = mov ssa_24
	intrinsic store_deref (ssa_33, ssa_45) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUV-temp (function_temp vec2) 
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &out@outColor-temp (function_temp vec4) 
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_34 = fmul ssa_7.x, ssa_11.x
	vec1 32 ssa_35 = fmul ssa_7.y, ssa_11.y
	vec2 32 ssa_36 = vec2 ssa_34, ssa_35
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_37 = fadd ssa_36.x, ssa_18.x
	vec1 32 ssa_38 = fadd ssa_36.y, ssa_18.y
	vec2 32 ssa_39 = vec2 ssa_37, ssa_38
	vec1 32 ssa_20 = mov ssa_39.x
	vec1 32 ssa_21 = mov ssa_39.y
	vec4 32 ssa_24 = vec4 ssa_39.x, ssa_39.y, ssa_22, ssa_23
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_28 = deref_var &out@outUV-temp (function_temp vec2) 
	vec1 32 ssa_29 = deref_var &outUV (shader_out vec2) 
	vec1 32 ssa_46 = mov ssa_1.x
	vec1 32 ssa_47 = mov ssa_1.y
	vec2 32 ssa_48 = vec2 ssa_46, ssa_47
	intrinsic store_deref (ssa_29, ssa_48) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_30 = deref_var &out@outColor-temp (function_temp vec4) 
	vec1 32 ssa_31 = deref_var &outColor (shader_out vec4) 
	vec1 32 ssa_49 = mov ssa_4.x
	vec1 32 ssa_50 = mov ssa_4.y
	vec1 32 ssa_51 = mov ssa_4.z
	vec1 32 ssa_52 = mov ssa_4.w
	vec4 32 ssa_53 = vec4 ssa_49, ssa_50, ssa_51, ssa_52
	intrinsic store_deref (ssa_31, ssa_53) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_32 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_33 = deref_var &.field0 (shader_out vec4) 
	vec1 32 ssa_54 = mov ssa_24.x
	vec1 32 ssa_55 = mov ssa_24.y
	vec1 32 ssa_56 = mov ssa_24.z
	vec1 32 ssa_57 = mov ssa_24.w
	vec4 32 ssa_58 = vec4 ssa_54, ssa_55, ssa_56, ssa_57
	intrinsic store_deref (ssa_33, ssa_58) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_copy_prop
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUV-temp (function_temp vec2) 
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &out@outColor-temp (function_temp vec4) 
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_34 = fmul ssa_7.x, ssa_11.x
	vec1 32 ssa_35 = fmul ssa_7.y, ssa_11.y
	vec2 32 ssa_36 = vec2 ssa_34, ssa_35
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_37 = fadd ssa_34, ssa_18.x
	vec1 32 ssa_38 = fadd ssa_35, ssa_18.y
	vec2 32 ssa_39 = vec2 ssa_37, ssa_38
	vec1 32 ssa_20 = mov ssa_37
	vec1 32 ssa_21 = mov ssa_38
	vec4 32 ssa_24 = vec4 ssa_37, ssa_38, ssa_22, ssa_23
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_28 = deref_var &out@outUV-temp (function_temp vec2) 
	vec1 32 ssa_29 = deref_var &outUV (shader_out vec2) 
	vec1 32 ssa_46 = mov ssa_1.x
	vec1 32 ssa_47 = mov ssa_1.y
	vec2 32 ssa_48 = vec2 ssa_1.x, ssa_1.y
	intrinsic store_deref (ssa_29, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_30 = deref_var &out@outColor-temp (function_temp vec4) 
	vec1 32 ssa_31 = deref_var &outColor (shader_out vec4) 
	vec1 32 ssa_49 = mov ssa_4.x
	vec1 32 ssa_50 = mov ssa_4.y
	vec1 32 ssa_51 = mov ssa_4.z
	vec1 32 ssa_52 = mov ssa_4.w
	vec4 32 ssa_53 = vec4 ssa_4.x, ssa_4.y, ssa_4.z, ssa_4.w
	intrinsic store_deref (ssa_31, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_32 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_33 = deref_var &.field0 (shader_out vec4) 
	vec1 32 ssa_54 = mov ssa_37
	vec1 32 ssa_55 = mov ssa_38
	vec1 32 ssa_56 = mov ssa_22
	vec1 32 ssa_57 = mov ssa_23
	vec4 32 ssa_58 = vec4 ssa_37, ssa_38, ssa_22, ssa_23
	intrinsic store_deref (ssa_33, ssa_58) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_34 = fmul ssa_7.x, ssa_11.x
	vec1 32 ssa_35 = fmul ssa_7.y, ssa_11.y
	vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_13, ssa_14
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = isub ssa_15, ssa_16
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_37 = fadd ssa_34, ssa_18.x
	vec1 32 ssa_38 = fadd ssa_35, ssa_18.y
	vec1 32 ssa_29 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_29, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_31 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_31, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_33 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_58 = vec4 ssa_37, ssa_38, ssa_22, ssa_23
	intrinsic store_deref (ssa_33, ssa_58) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_10 = isub ssa_22, ssa_22
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_34 = fmul ssa_7.x, ssa_11.x
	vec1 32 ssa_35 = fmul ssa_7.y, ssa_11.y
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_15 = iadd ssa_22, ssa_14
	vec1 32 ssa_17 = isub ssa_15, ssa_22
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_37 = fadd ssa_34, ssa_18.x
	vec1 32 ssa_38 = fadd ssa_35, ssa_18.y
	vec1 32 ssa_29 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_29, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_31 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_31, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_33 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_58 = vec4 ssa_37, ssa_38, ssa_22, ssa_23
	intrinsic store_deref (ssa_33, ssa_58) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_61 = ineg ssa_22
	vec1 32 ssa_62 = iadd ssa_22, ssa_61
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_62) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_34 = fmul ssa_7.x, ssa_11.x
	vec1 32 ssa_35 = fmul ssa_7.y, ssa_11.y
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_59 = ineg ssa_22
	vec1 32 ssa_60 = iadd ssa_14, ssa_59
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_60) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_37 = fadd ssa_34, ssa_18.x
	vec1 32 ssa_38 = fadd ssa_35, ssa_18.y
	vec1 32 ssa_29 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_29, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_31 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_31, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_33 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_58 = vec4 ssa_37, ssa_38, ssa_22, ssa_23
	intrinsic store_deref (ssa_33, ssa_58) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_constant_folding
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_23 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_22 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_63 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_64 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_11 = intrinsic load_push_constant (ssa_64) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_34 = fmul ssa_7.x, ssa_11.x
	vec1 32 ssa_35 = fmul ssa_7.y, ssa_11.y
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec1 32 ssa_65 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_66 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_18 = intrinsic load_push_constant (ssa_66) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_37 = fadd ssa_34, ssa_18.x
	vec1 32 ssa_38 = fadd ssa_35, ssa_18.y
	vec1 32 ssa_29 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_29, ssa_1) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_31 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_31, ssa_4) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_33 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_58 = vec4 ssa_37, ssa_38, ssa_22, ssa_23
	intrinsic store_deref (ssa_33, ssa_58) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_10 = intrinsic load_push_constant (ssa_9) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_11 = fmul ssa_7.x, ssa_10.x
	vec1 32 ssa_12 = fmul ssa_7.y, ssa_10.y
	vec1 32 ssa_15 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_17 = fadd ssa_11, ssa_16.x
	vec1 32 ssa_18 = fadd ssa_12, ssa_16.y
	vec1 32 ssa_19 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_19, ssa_3) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_20 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_20, ssa_5) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_21 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_22 = vec4 ssa_17, ssa_18, ssa_1, ssa_0
	intrinsic store_deref (ssa_21, ssa_22) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_10 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_11 = fmul ssa_7.x, ssa_10.x
	vec1 32 ssa_12 = fmul ssa_7.y, ssa_10.y
	vec1 32 ssa_15 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_17 = fadd ssa_11, ssa_16.x
	vec1 32 ssa_18 = fadd ssa_12, ssa_16.y
	vec1 32 ssa_19 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_19, ssa_3) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_20 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_20, ssa_5) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_21 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_22 = vec4 ssa_17, ssa_18, ssa_1, ssa_0
	intrinsic store_deref (ssa_21, ssa_22) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &outUV (shader_out vec2) 
	intrinsic store_deref (ssa_15, ssa_3) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_16 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_16, ssa_5) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_17 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_18 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_17, ssa_18) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_doubles
nir_lower_int64
nir_lower_bit_size
nir_lower_load_const_to_scalar
nir_lower_var_copies
nir_opt_large_constants
nir_lower_system_values
nir_lower_compute_system_values
nir_lower_subgroups
nir_lower_clip_cull_distance_arrays
nir_lower_vars_to_scratch
nir_lower_indirect_derefs
nir_lower_array_deref_of_vec
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_lower_variable_initializers
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_4.x
	vec1 32 ssa_8 = deref_cast (sampler2D *)ssa_7 (uniform sampler2D)  /* ptr_stride=0 */
	vec1 32 ssa_9 = mov ssa_4.y
	vec1 32 ssa_10 = deref_cast (sampler *)ssa_9 (uniform sampler)  /* ptr_stride=0 */
	vec4 32 ssa_11 = (float)tex ssa_8 (texture_deref), ssa_10 (sampler_deref), ssa_6 (coord)
	vec4 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_13, ssa_12) (15, 0) /* wrmask=xyzw */ /* access=0 */
	return
	/* succs: block_1 */
	block block_1:
}

nir_lower_returns
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_4.x
	vec1 32 ssa_8 = deref_cast (sampler2D *)ssa_7 (uniform sampler2D)  /* ptr_stride=0 */
	vec1 32 ssa_9 = mov ssa_4.y
	vec1 32 ssa_10 = deref_cast (sampler *)ssa_9 (uniform sampler)  /* ptr_stride=0 */
	vec4 32 ssa_11 = (float)tex ssa_8 (texture_deref), ssa_10 (sampler_deref), ssa_6 (coord)
	vec4 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_13, ssa_12) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_inline_functions
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_4.x
	vec1 32 ssa_8 = deref_cast (sampler2D *)ssa_7 (uniform sampler2D)  /* ptr_stride=0 */
	vec1 32 ssa_9 = mov ssa_4.y
	vec1 32 ssa_10 = deref_cast (sampler *)ssa_9 (uniform sampler)  /* ptr_stride=0 */
	vec4 32 ssa_11 = (float)tex ssa_8 (texture_deref), ssa_10 (sampler_deref), ssa_6 (coord)
	vec4 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_13, ssa_12) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_copy_prop
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_2
	vec1 32 ssa_8 = deref_cast (sampler2D *)ssa_2 (uniform sampler2D)  /* ptr_stride=0 */
	vec1 32 ssa_9 = mov ssa_3
	vec1 32 ssa_10 = deref_cast (sampler *)ssa_3 (uniform sampler)  /* ptr_stride=0 */
	vec4 32 ssa_11 = (float)tex ssa_8 (texture_deref), ssa_10 (sampler_deref), ssa_6 (coord)
	vec4 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_13, ssa_12) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_deref
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_2
	vec1 32 ssa_9 = mov ssa_3
	vec4 32 ssa_11 = (float)tex ssa_2 (texture_deref), ssa_3 (sampler_deref), ssa_6 (coord)
	vec4 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_13, ssa_12) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_variable_initializers
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_2
	vec1 32 ssa_9 = mov ssa_3
	vec4 32 ssa_11 = (float)tex ssa_2 (texture_deref), ssa_3 (sampler_deref), ssa_6 (coord)
	vec4 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_13, ssa_12) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_var_copies
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_2
	vec1 32 ssa_9 = mov ssa_3
	vec4 32 ssa_11 = (float)tex ssa_2 (texture_deref), ssa_3 (sampler_deref), ssa_6 (coord)
	vec4 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_13, ssa_12) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_per_member_structs
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_2
	vec1 32 ssa_9 = mov ssa_3
	vec4 32 ssa_11 = (float)tex ssa_2 (texture_deref), ssa_3 (sampler_deref), ssa_6 (coord)
	vec4 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_13, ssa_12) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_remove_dead_variables
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_2
	vec1 32 ssa_9 = mov ssa_3
	vec4 32 ssa_11 = (float)tex ssa_2 (texture_deref), ssa_3 (sampler_deref), ssa_6 (coord)
	vec4 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_13, ssa_12) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_propagate_invariant
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_2
	vec1 32 ssa_9 = mov ssa_3
	vec4 32 ssa_11 = (float)tex ssa_2 (texture_deref), ssa_3 (sampler_deref), ssa_6 (coord)
	vec4 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = deref_var &outColor (shader_out vec4) 
	intrinsic store_deref (ssa_13, ssa_12) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_io_to_temporaries
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_2
	vec1 32 ssa_9 = mov ssa_3
	vec4 32 ssa_11 = (float)tex ssa_2 (texture_deref), ssa_3 (sampler_deref), ssa_6 (coord)
	vec4 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = deref_var &out@outColor-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_13, ssa_12) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_14 = deref_var &out@outColor-temp (shader_temp vec4) 
	vec1 32 ssa_15 = deref_var &outColor (shader_out vec4) 
	intrinsic copy_deref (ssa_15, ssa_14) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_frexp
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_2
	vec1 32 ssa_9 = mov ssa_3
	vec4 32 ssa_11 = (float)tex ssa_2 (texture_deref), ssa_3 (sampler_deref), ssa_6 (coord)
	vec4 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = deref_var &out@outColor-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_13, ssa_12) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_14 = deref_var &out@outColor-temp (shader_temp vec4) 
	vec1 32 ssa_15 = deref_var &outColor (shader_out vec4) 
	intrinsic copy_deref (ssa_15, ssa_14) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_alu_to_scalar
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_2
	vec1 32 ssa_9 = mov ssa_3
	vec4 32 ssa_11 = (float)tex ssa_2 (texture_deref), ssa_3 (sampler_deref), ssa_6 (coord)
	vec1 32 ssa_16 = fmul ssa_1.x, ssa_11.x
	vec1 32 ssa_17 = fmul ssa_1.y, ssa_11.y
	vec1 32 ssa_18 = fmul ssa_1.z, ssa_11.z
	vec1 32 ssa_19 = fmul ssa_1.w, ssa_11.w
	vec4 32 ssa_20 = vec4 ssa_16, ssa_17, ssa_18, ssa_19
	vec1 32 ssa_13 = deref_var &out@outColor-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_13, ssa_20) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_14 = deref_var &out@outColor-temp (shader_temp vec4) 
	vec1 32 ssa_15 = deref_var &outColor (shader_out vec4) 
	intrinsic copy_deref (ssa_15, ssa_14) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_tex
nir_normalize_cubemap_coords
nir_lower_global_vars_to_local
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_2
	vec1 32 ssa_9 = mov ssa_3
	vec4 32 ssa_11 = (float)tex ssa_2 (texture_deref), ssa_3 (sampler_deref), ssa_6 (coord)
	vec1 32 ssa_16 = fmul ssa_1.x, ssa_11.x
	vec1 32 ssa_17 = fmul ssa_1.y, ssa_11.y
	vec1 32 ssa_18 = fmul ssa_1.z, ssa_11.z
	vec1 32 ssa_19 = fmul ssa_1.w, ssa_11.w
	vec4 32 ssa_20 = vec4 ssa_16, ssa_17, ssa_18, ssa_19
	vec1 32 ssa_13 = deref_var &out@outColor-temp (function_temp vec4) 
	intrinsic store_deref (ssa_13, ssa_20) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_14 = deref_var &out@outColor-temp (function_temp vec4) 
	vec1 32 ssa_15 = deref_var &outColor (shader_out vec4) 
	intrinsic copy_deref (ssa_15, ssa_14) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_var_copies
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_2
	vec1 32 ssa_9 = mov ssa_3
	vec4 32 ssa_11 = (float)tex ssa_2 (texture_deref), ssa_3 (sampler_deref), ssa_6 (coord)
	vec1 32 ssa_16 = fmul ssa_1.x, ssa_11.x
	vec1 32 ssa_17 = fmul ssa_1.y, ssa_11.y
	vec1 32 ssa_18 = fmul ssa_1.z, ssa_11.z
	vec1 32 ssa_19 = fmul ssa_1.w, ssa_11.w
	vec4 32 ssa_20 = vec4 ssa_16, ssa_17, ssa_18, ssa_19
	vec1 32 ssa_13 = deref_var &out@outColor-temp (function_temp vec4) 
	intrinsic store_deref (ssa_13, ssa_20) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_14 = deref_var &out@outColor-temp (function_temp vec4) 
	vec1 32 ssa_15 = deref_var &outColor (shader_out vec4) 
	intrinsic copy_deref (ssa_15, ssa_14) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_struct_vars
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_2
	vec1 32 ssa_9 = mov ssa_3
	vec4 32 ssa_11 = (float)tex ssa_2 (texture_deref), ssa_3 (sampler_deref), ssa_6 (coord)
	vec1 32 ssa_16 = fmul ssa_1.x, ssa_11.x
	vec1 32 ssa_17 = fmul ssa_1.y, ssa_11.y
	vec1 32 ssa_18 = fmul ssa_1.z, ssa_11.z
	vec1 32 ssa_19 = fmul ssa_1.w, ssa_11.w
	vec4 32 ssa_20 = vec4 ssa_16, ssa_17, ssa_18, ssa_19
	vec1 32 ssa_13 = deref_var &out@outColor-temp (function_temp vec4) 
	vec1 32 ssa_14 = deref_var &out@outColor-temp (function_temp vec4) 
	vec1 32 ssa_15 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_22 = mov ssa_20
	intrinsic store_deref (ssa_15, ssa_22) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_2
	vec1 32 ssa_9 = mov ssa_3
	vec4 32 ssa_11 = (float)tex ssa_2 (texture_deref), ssa_3 (sampler_deref), ssa_6 (coord)
	vec1 32 ssa_16 = fmul ssa_1.x, ssa_11.x
	vec1 32 ssa_17 = fmul ssa_1.y, ssa_11.y
	vec1 32 ssa_18 = fmul ssa_1.z, ssa_11.z
	vec1 32 ssa_19 = fmul ssa_1.w, ssa_11.w
	vec4 32 ssa_20 = vec4 ssa_16, ssa_17, ssa_18, ssa_19
	vec1 32 ssa_13 = deref_var &out@outColor-temp (function_temp vec4) 
	vec1 32 ssa_14 = deref_var &out@outColor-temp (function_temp vec4) 
	vec1 32 ssa_15 = deref_var &outColor (shader_out vec4) 
	vec1 32 ssa_23 = mov ssa_20.x
	vec1 32 ssa_24 = mov ssa_20.y
	vec1 32 ssa_25 = mov ssa_20.z
	vec1 32 ssa_26 = mov ssa_20.w
	vec4 32 ssa_27 = vec4 ssa_23, ssa_24, ssa_25, ssa_26
	intrinsic store_deref (ssa_15, ssa_27) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_copy_prop
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec2 32 ssa_4 = vec2 ssa_2, ssa_3
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_2
	vec1 32 ssa_9 = mov ssa_3
	vec4 32 ssa_11 = (float)tex ssa_2 (texture_deref), ssa_3 (sampler_deref), ssa_6 (coord)
	vec1 32 ssa_16 = fmul ssa_1.x, ssa_11.x
	vec1 32 ssa_17 = fmul ssa_1.y, ssa_11.y
	vec1 32 ssa_18 = fmul ssa_1.z, ssa_11.z
	vec1 32 ssa_19 = fmul ssa_1.w, ssa_11.w
	vec4 32 ssa_20 = vec4 ssa_16, ssa_17, ssa_18, ssa_19
	vec1 32 ssa_13 = deref_var &out@outColor-temp (function_temp vec4) 
	vec1 32 ssa_14 = deref_var &out@outColor-temp (function_temp vec4) 
	vec1 32 ssa_15 = deref_var &outColor (shader_out vec4) 
	vec1 32 ssa_23 = mov ssa_16
	vec1 32 ssa_24 = mov ssa_17
	vec1 32 ssa_25 = mov ssa_18
	vec1 32 ssa_26 = mov ssa_19
	vec4 32 ssa_27 = vec4 ssa_16, ssa_17, ssa_18, ssa_19
	intrinsic store_deref (ssa_15, ssa_27) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec4 32 ssa_11 = (float)tex ssa_2 (texture_deref), ssa_3 (sampler_deref), ssa_6 (coord)
	vec1 32 ssa_16 = fmul ssa_1.x, ssa_11.x
	vec1 32 ssa_17 = fmul ssa_1.y, ssa_11.y
	vec1 32 ssa_18 = fmul ssa_1.z, ssa_11.z
	vec1 32 ssa_19 = fmul ssa_1.w, ssa_11.w
	vec1 32 ssa_15 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_27 = vec4 ssa_16, ssa_17, ssa_18, ssa_19
	intrinsic store_deref (ssa_15, ssa_27) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_5 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec4 32 ssa_11 = (float)tex ssa_2 (texture_deref), ssa_2 (sampler_deref), ssa_6 (coord)
	vec1 32 ssa_16 = fmul ssa_1.x, ssa_11.x
	vec1 32 ssa_17 = fmul ssa_1.y, ssa_11.y
	vec1 32 ssa_18 = fmul ssa_1.z, ssa_11.z
	vec1 32 ssa_19 = fmul ssa_1.w, ssa_11.w
	vec1 32 ssa_15 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_27 = vec4 ssa_16, ssa_17, ssa_18, ssa_19
	intrinsic store_deref (ssa_15, ssa_27) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_3 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec4 32 ssa_5 = (float)tex ssa_2 (texture_deref), ssa_2 (sampler_deref), ssa_4 (coord)
	vec1 32 ssa_6 = fmul ssa_1.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_1.y, ssa_5.y
	vec1 32 ssa_8 = fmul ssa_1.z, ssa_5.z
	vec1 32 ssa_9 = fmul ssa_1.w, ssa_5.w
	vec1 32 ssa_10 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_11 = vec4 ssa_6, ssa_7, ssa_8, ssa_9
	intrinsic store_deref (ssa_10, ssa_11) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_doubles
nir_lower_int64
nir_lower_bit_size
nir_lower_load_const_to_scalar
nir_lower_var_copies
nir_opt_large_constants
nir_lower_system_values
nir_lower_compute_system_values
nir_lower_subgroups
nir_lower_clip_cull_distance_arrays
nir_lower_vars_to_scratch
nir_lower_indirect_derefs
nir_lower_array_deref_of_vec
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_lower_io_to_scalar_early
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_19 = deref_var &outUV (shader_out float) 
	vec1 32 ssa_20 = mov ssa_3.x
	intrinsic store_deref (ssa_19, ssa_20) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_21 = deref_var &outUV@0 (shader_out float) 
	vec1 32 ssa_22 = mov ssa_3.y
	intrinsic store_deref (ssa_21, ssa_22) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_23 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_24 = mov ssa_5.x
	intrinsic store_deref (ssa_23, ssa_24) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_25 = deref_var &outColor@1 (shader_out float) 
	vec1 32 ssa_26 = mov ssa_5.y
	intrinsic store_deref (ssa_25, ssa_26) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_27 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_28 = mov ssa_5.z
	intrinsic store_deref (ssa_27, ssa_28) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_29 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_30 = mov ssa_5.w
	intrinsic store_deref (ssa_29, ssa_30) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_17 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_18 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_17, ssa_18) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_io_to_scalar_early
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@0 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@1 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@2 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV@3 (VARYING_SLOT_VAR0.y, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_12 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_15 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_16 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_17 = intrinsic load_deref (ssa_16) (0) /* access=0 */
	vec1 32 ssa_18 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec4 32 ssa_20 = vec4 ssa_13, ssa_15, ssa_17, ssa_19
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_21 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_24 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec2 32 ssa_25 = vec2 ssa_22, ssa_24
	vec4 32 ssa_5 = (float)tex ssa_2 (texture_deref), ssa_2 (sampler_deref), ssa_25 (coord)
	vec1 32 ssa_6 = fmul ssa_20.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_20.y, ssa_5.y
	vec1 32 ssa_8 = fmul ssa_20.z, ssa_5.z
	vec1 32 ssa_9 = fmul ssa_20.w, ssa_5.w
	vec1 32 ssa_10 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_11 = vec4 ssa_6, ssa_7, ssa_8, ssa_9
	intrinsic store_deref (ssa_10, ssa_11) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@0 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@1 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@2 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV@3 (VARYING_SLOT_VAR0.y, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_12 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_15 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_16 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_17 = intrinsic load_deref (ssa_16) (0) /* access=0 */
	vec1 32 ssa_18 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec4 32 ssa_20 = vec4 ssa_13, ssa_15, ssa_17, ssa_19
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_21 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_24 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec2 32 ssa_25 = vec2 ssa_22, ssa_24
	vec4 32 ssa_5 = (float)tex ssa_2 (texture_deref), ssa_2 (sampler_deref), ssa_25 (coord)
	vec1 32 ssa_6 = fmul ssa_13, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_15, ssa_5.y
	vec1 32 ssa_8 = fmul ssa_17, ssa_5.z
	vec1 32 ssa_9 = fmul ssa_19, ssa_5.w
	vec1 32 ssa_10 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_11 = vec4 ssa_6, ssa_7, ssa_8, ssa_9
	intrinsic store_deref (ssa_10, ssa_11) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@0 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@1 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@2 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV@3 (VARYING_SLOT_VAR0.y, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_12 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_15 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_16 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_17 = intrinsic load_deref (ssa_16) (0) /* access=0 */
	vec1 32 ssa_18 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_21 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_24 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec2 32 ssa_25 = vec2 ssa_22, ssa_24
	vec4 32 ssa_5 = (float)tex ssa_2 (texture_deref), ssa_2 (sampler_deref), ssa_25 (coord)
	vec1 32 ssa_6 = fmul ssa_13, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_15, ssa_5.y
	vec1 32 ssa_8 = fmul ssa_17, ssa_5.z
	vec1 32 ssa_9 = fmul ssa_19, ssa_5.w
	vec1 32 ssa_10 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_11 = vec4 ssa_6, ssa_7, ssa_8, ssa_9
	intrinsic store_deref (ssa_10, ssa_11) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_remove_dead_variables
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &outUV (shader_out float) 
	vec1 32 ssa_16 = mov ssa_3.x
	intrinsic store_deref (ssa_15, ssa_16) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_17 = deref_var &outUV@0 (shader_out float) 
	vec1 32 ssa_18 = mov ssa_3.y
	intrinsic store_deref (ssa_17, ssa_18) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_19 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_20 = mov ssa_5.x
	intrinsic store_deref (ssa_19, ssa_20) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_21 = deref_var &outColor@1 (shader_out float) 
	vec1 32 ssa_22 = mov ssa_5.y
	intrinsic store_deref (ssa_21, ssa_22) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_23 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_24 = mov ssa_5.z
	intrinsic store_deref (ssa_23, ssa_24) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_25 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_26 = mov ssa_5.w
	intrinsic store_deref (ssa_25, ssa_26) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_27 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_27, ssa_28) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_remove_dead_variables
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@0 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@1 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@2 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV@3 (VARYING_SLOT_VAR0.y, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_9 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_12 = intrinsic load_deref (ssa_11) (0) /* access=0 */
	vec2 32 ssa_13 = vec2 ssa_10, ssa_12
	vec4 32 ssa_14 = (float)tex ssa_8 (texture_deref), ssa_8 (sampler_deref), ssa_13 (coord)
	vec1 32 ssa_15 = fmul ssa_1, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_3, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_5, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_7, ssa_14.w
	vec1 32 ssa_19 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	intrinsic store_deref (ssa_19, ssa_20) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_io_to_vector
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &outUV (shader_out float) 
	vec1 32 ssa_16 = mov ssa_3.x
	vec1 32 ssa_29 = deref_var &outUV@4 (shader_out vec2) 
	vec2 32 ssa_31 = vec2 ssa_16, ssa_30
	intrinsic store_deref (ssa_29, ssa_31) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_17 = deref_var &outUV@0 (shader_out float) 
	vec1 32 ssa_18 = mov ssa_3.y
	vec1 32 ssa_32 = deref_var &outUV@4 (shader_out vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_18
	intrinsic store_deref (ssa_32, ssa_34) (2, 0) /* wrmask=y */ /* access=0 */
	vec1 32 ssa_19 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_20 = mov ssa_5.x
	vec1 32 ssa_35 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_39 = vec4 ssa_20, ssa_36, ssa_37, ssa_38
	intrinsic store_deref (ssa_35, ssa_39) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_21 = deref_var &outColor@1 (shader_out float) 
	vec1 32 ssa_22 = mov ssa_5.y
	vec1 32 ssa_40 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_22, ssa_42, ssa_43
	intrinsic store_deref (ssa_40, ssa_44) (2, 0) /* wrmask=y */ /* access=0 */
	vec1 32 ssa_23 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_24 = mov ssa_5.z
	vec1 32 ssa_45 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_24, ssa_48
	intrinsic store_deref (ssa_45, ssa_49) (4, 0) /* wrmask=z */ /* access=0 */
	vec1 32 ssa_25 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_26 = mov ssa_5.w
	vec1 32 ssa_50 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_26
	intrinsic store_deref (ssa_50, ssa_54) (8, 0) /* wrmask=w */ /* access=0 */
	vec1 32 ssa_27 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_27, ssa_28) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &outUV (shader_out float) 
	vec1 32 ssa_16 = mov ssa_3.x
	vec1 32 ssa_29 = deref_var &outUV@4 (shader_out vec2) 
	vec2 32 ssa_31 = vec2 ssa_16, ssa_30
	vec1 32 ssa_17 = deref_var &outUV@0 (shader_out float) 
	vec1 32 ssa_18 = mov ssa_3.y
	vec1 32 ssa_32 = deref_var &outUV@4 (shader_out vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_18
	vec1 32 ssa_60 = mov ssa_31.x
	vec1 32 ssa_61 = mov ssa_34.y
	vec2 32 ssa_62 = vec2 ssa_60, ssa_61
	intrinsic store_deref (ssa_32, ssa_62) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_19 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_20 = mov ssa_5.x
	vec1 32 ssa_35 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_39 = vec4 ssa_20, ssa_36, ssa_37, ssa_38
	vec1 32 ssa_21 = deref_var &outColor@1 (shader_out float) 
	vec1 32 ssa_22 = mov ssa_5.y
	vec1 32 ssa_40 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_22, ssa_42, ssa_43
	vec1 32 ssa_23 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_24 = mov ssa_5.z
	vec1 32 ssa_45 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_24, ssa_48
	vec1 32 ssa_25 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_26 = mov ssa_5.w
	vec1 32 ssa_50 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_26
	vec1 32 ssa_55 = mov ssa_39.x
	vec1 32 ssa_56 = mov ssa_44.y
	vec1 32 ssa_57 = mov ssa_49.z
	vec1 32 ssa_58 = mov ssa_54.w
	vec4 32 ssa_59 = vec4 ssa_55, ssa_56, ssa_57, ssa_58
	intrinsic store_deref (ssa_50, ssa_59) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_27 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_27, ssa_28) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_io_to_vector
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@0 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@1 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@2 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV@3 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_21 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_22 = mov ssa_1.x
	vec1 32 ssa_2 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_23 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_3 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_3.y
	vec1 32 ssa_4 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_25 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_25) (0) /* access=0 */
	vec1 32 ssa_26 = mov ssa_5.z
	vec1 32 ssa_6 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_27 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_7 = intrinsic load_deref (ssa_27) (0) /* access=0 */
	vec1 32 ssa_28 = mov ssa_7.w
	vec1 32 ssa_8 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_9 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_29 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_10 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_30 = mov ssa_10.x
	vec1 32 ssa_11 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_31 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_12 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_12.y
	vec2 32 ssa_13 = vec2 ssa_30, ssa_32
	vec4 32 ssa_14 = (float)tex ssa_8 (texture_deref), ssa_8 (sampler_deref), ssa_13 (coord)
	vec1 32 ssa_15 = fmul ssa_22, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_24, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_26, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_28, ssa_14.w
	vec1 32 ssa_19 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	intrinsic store_deref (ssa_19, ssa_20) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_io_to_temporaries
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
decl_var  INTERP_MODE_NONE float out@outUV-temp
decl_var  INTERP_MODE_NONE float out@outUV-temp@0
decl_var  INTERP_MODE_NONE float out@outColor-temp
decl_var  INTERP_MODE_NONE float out@outColor-temp@1
decl_var  INTERP_MODE_NONE float out@outColor-temp@2
decl_var  INTERP_MODE_NONE float out@outColor-temp@3
decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@4
decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@5
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@6 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@7 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@8 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@9 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@10 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@11 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &out@outUV-temp (shader_temp float) 
	vec1 32 ssa_16 = mov ssa_3.x
	vec1 32 ssa_29 = deref_var &out@outUV-temp@4 (shader_temp vec2) 
	vec2 32 ssa_31 = vec2 ssa_16, ssa_30
	vec1 32 ssa_17 = deref_var &out@outUV-temp@0 (shader_temp float) 
	vec1 32 ssa_18 = mov ssa_3.y
	vec1 32 ssa_32 = deref_var &out@outUV-temp@4 (shader_temp vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_18
	vec1 32 ssa_60 = mov ssa_31.x
	vec1 32 ssa_61 = mov ssa_34.y
	vec2 32 ssa_62 = vec2 ssa_60, ssa_61
	intrinsic store_deref (ssa_32, ssa_62) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_19 = deref_var &out@outColor-temp (shader_temp float) 
	vec1 32 ssa_20 = mov ssa_5.x
	vec1 32 ssa_35 = deref_var &out@outColor-temp@5 (shader_temp vec4) 
	vec4 32 ssa_39 = vec4 ssa_20, ssa_36, ssa_37, ssa_38
	vec1 32 ssa_21 = deref_var &out@outColor-temp@1 (shader_temp float) 
	vec1 32 ssa_22 = mov ssa_5.y
	vec1 32 ssa_40 = deref_var &out@outColor-temp@5 (shader_temp vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_22, ssa_42, ssa_43
	vec1 32 ssa_23 = deref_var &out@outColor-temp@2 (shader_temp float) 
	vec1 32 ssa_24 = mov ssa_5.z
	vec1 32 ssa_45 = deref_var &out@outColor-temp@5 (shader_temp vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_24, ssa_48
	vec1 32 ssa_25 = deref_var &out@outColor-temp@3 (shader_temp float) 
	vec1 32 ssa_26 = mov ssa_5.w
	vec1 32 ssa_50 = deref_var &out@outColor-temp@5 (shader_temp vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_26
	vec1 32 ssa_55 = mov ssa_39.x
	vec1 32 ssa_56 = mov ssa_44.y
	vec1 32 ssa_57 = mov ssa_49.z
	vec1 32 ssa_58 = mov ssa_54.w
	vec4 32 ssa_59 = vec4 ssa_55, ssa_56, ssa_57, ssa_58
	intrinsic store_deref (ssa_50, ssa_59) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_27 = deref_var &out@.field0-temp (shader_temp vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_27, ssa_28) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@.field0-temp (shader_temp vec4) 
	vec1 32 ssa_64 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_64, ssa_63) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_65 = deref_var &out@outUV-temp (shader_temp float) 
	vec1 32 ssa_66 = deref_var &outUV (shader_out float) 
	intrinsic copy_deref (ssa_66, ssa_65) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_67 = deref_var &out@outUV-temp@0 (shader_temp float) 
	vec1 32 ssa_68 = deref_var &outUV@6 (shader_out float) 
	intrinsic copy_deref (ssa_68, ssa_67) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_69 = deref_var &out@outColor-temp (shader_temp float) 
	vec1 32 ssa_70 = deref_var &outColor (shader_out float) 
	intrinsic copy_deref (ssa_70, ssa_69) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_71 = deref_var &out@outColor-temp@1 (shader_temp float) 
	vec1 32 ssa_72 = deref_var &outColor@7 (shader_out float) 
	intrinsic copy_deref (ssa_72, ssa_71) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_73 = deref_var &out@outColor-temp@2 (shader_temp float) 
	vec1 32 ssa_74 = deref_var &outColor@8 (shader_out float) 
	intrinsic copy_deref (ssa_74, ssa_73) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_75 = deref_var &out@outColor-temp@3 (shader_temp float) 
	vec1 32 ssa_76 = deref_var &outColor@9 (shader_out float) 
	intrinsic copy_deref (ssa_76, ssa_75) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_77 = deref_var &out@outUV-temp@4 (shader_temp vec2) 
	vec1 32 ssa_78 = deref_var &outUV@10 (shader_out vec2) 
	intrinsic copy_deref (ssa_78, ssa_77) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_79 = deref_var &out@outColor-temp@5 (shader_temp vec4) 
	vec1 32 ssa_80 = deref_var &outColor@11 (shader_out vec4) 
	intrinsic copy_deref (ssa_80, ssa_79) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_global_vars_to_local
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_16 = mov ssa_3.x
	vec1 32 ssa_29 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_31 = vec2 ssa_16, ssa_30
	vec1 32 ssa_17 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_18 = mov ssa_3.y
	vec1 32 ssa_32 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_18
	vec1 32 ssa_60 = mov ssa_31.x
	vec1 32 ssa_61 = mov ssa_34.y
	vec2 32 ssa_62 = vec2 ssa_60, ssa_61
	intrinsic store_deref (ssa_32, ssa_62) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_19 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_20 = mov ssa_5.x
	vec1 32 ssa_35 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_39 = vec4 ssa_20, ssa_36, ssa_37, ssa_38
	vec1 32 ssa_21 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_22 = mov ssa_5.y
	vec1 32 ssa_40 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_22, ssa_42, ssa_43
	vec1 32 ssa_23 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_24 = mov ssa_5.z
	vec1 32 ssa_45 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_24, ssa_48
	vec1 32 ssa_25 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_26 = mov ssa_5.w
	vec1 32 ssa_50 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_26
	vec1 32 ssa_55 = mov ssa_39.x
	vec1 32 ssa_56 = mov ssa_44.y
	vec1 32 ssa_57 = mov ssa_49.z
	vec1 32 ssa_58 = mov ssa_54.w
	vec4 32 ssa_59 = vec4 ssa_55, ssa_56, ssa_57, ssa_58
	intrinsic store_deref (ssa_50, ssa_59) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_27, ssa_28) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_64, ssa_63) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_65 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_66 = deref_var &outUV (shader_out float) 
	intrinsic copy_deref (ssa_66, ssa_65) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_67 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_68 = deref_var &outUV@0 (shader_out float) 
	intrinsic copy_deref (ssa_68, ssa_67) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_69 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_70 = deref_var &outColor (shader_out float) 
	intrinsic copy_deref (ssa_70, ssa_69) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_71 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_72 = deref_var &outColor@1 (shader_out float) 
	intrinsic copy_deref (ssa_72, ssa_71) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_73 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_74 = deref_var &outColor@2 (shader_out float) 
	intrinsic copy_deref (ssa_74, ssa_73) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_75 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_76 = deref_var &outColor@3 (shader_out float) 
	intrinsic copy_deref (ssa_76, ssa_75) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_77 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec1 32 ssa_78 = deref_var &outUV@4 (shader_out vec2) 
	intrinsic copy_deref (ssa_78, ssa_77) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_79 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec1 32 ssa_80 = deref_var &outColor@5 (shader_out vec4) 
	intrinsic copy_deref (ssa_80, ssa_79) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_var_copies
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_16 = mov ssa_3.x
	vec1 32 ssa_29 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_31 = vec2 ssa_16, ssa_30
	vec1 32 ssa_17 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_18 = mov ssa_3.y
	vec1 32 ssa_32 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_18
	vec1 32 ssa_60 = mov ssa_31.x
	vec1 32 ssa_61 = mov ssa_34.y
	vec2 32 ssa_62 = vec2 ssa_60, ssa_61
	intrinsic store_deref (ssa_32, ssa_62) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_19 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_20 = mov ssa_5.x
	vec1 32 ssa_35 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_39 = vec4 ssa_20, ssa_36, ssa_37, ssa_38
	vec1 32 ssa_21 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_22 = mov ssa_5.y
	vec1 32 ssa_40 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_22, ssa_42, ssa_43
	vec1 32 ssa_23 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_24 = mov ssa_5.z
	vec1 32 ssa_45 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_24, ssa_48
	vec1 32 ssa_25 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_26 = mov ssa_5.w
	vec1 32 ssa_50 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_26
	vec1 32 ssa_55 = mov ssa_39.x
	vec1 32 ssa_56 = mov ssa_44.y
	vec1 32 ssa_57 = mov ssa_49.z
	vec1 32 ssa_58 = mov ssa_54.w
	vec4 32 ssa_59 = vec4 ssa_55, ssa_56, ssa_57, ssa_58
	intrinsic store_deref (ssa_50, ssa_59) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_27, ssa_28) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_64, ssa_63) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_65 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_66 = deref_var &outUV (shader_out float) 
	intrinsic copy_deref (ssa_66, ssa_65) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_67 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_68 = deref_var &outUV@0 (shader_out float) 
	intrinsic copy_deref (ssa_68, ssa_67) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_69 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_70 = deref_var &outColor (shader_out float) 
	intrinsic copy_deref (ssa_70, ssa_69) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_71 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_72 = deref_var &outColor@1 (shader_out float) 
	intrinsic copy_deref (ssa_72, ssa_71) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_73 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_74 = deref_var &outColor@2 (shader_out float) 
	intrinsic copy_deref (ssa_74, ssa_73) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_75 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_76 = deref_var &outColor@3 (shader_out float) 
	intrinsic copy_deref (ssa_76, ssa_75) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_77 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec1 32 ssa_78 = deref_var &outUV@4 (shader_out vec2) 
	intrinsic copy_deref (ssa_78, ssa_77) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_79 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec1 32 ssa_80 = deref_var &outColor@5 (shader_out vec4) 
	intrinsic copy_deref (ssa_80, ssa_79) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_var_copies
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_16 = mov ssa_3.x
	vec1 32 ssa_29 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_31 = vec2 ssa_16, ssa_30
	vec1 32 ssa_17 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_18 = mov ssa_3.y
	vec1 32 ssa_32 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_18
	vec1 32 ssa_60 = mov ssa_31.x
	vec1 32 ssa_61 = mov ssa_34.y
	vec2 32 ssa_62 = vec2 ssa_60, ssa_61
	intrinsic store_deref (ssa_32, ssa_62) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_19 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_20 = mov ssa_5.x
	vec1 32 ssa_35 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_39 = vec4 ssa_20, ssa_36, ssa_37, ssa_38
	vec1 32 ssa_21 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_22 = mov ssa_5.y
	vec1 32 ssa_40 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_22, ssa_42, ssa_43
	vec1 32 ssa_23 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_24 = mov ssa_5.z
	vec1 32 ssa_45 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_24, ssa_48
	vec1 32 ssa_25 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_26 = mov ssa_5.w
	vec1 32 ssa_50 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_26
	vec1 32 ssa_55 = mov ssa_39.x
	vec1 32 ssa_56 = mov ssa_44.y
	vec1 32 ssa_57 = mov ssa_49.z
	vec1 32 ssa_58 = mov ssa_54.w
	vec4 32 ssa_59 = vec4 ssa_55, ssa_56, ssa_57, ssa_58
	intrinsic store_deref (ssa_50, ssa_59) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_27, ssa_28) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_81 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	intrinsic store_deref (ssa_64, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_65 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_66 = deref_var &outUV (shader_out float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	intrinsic store_deref (ssa_66, ssa_82) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_67 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_68 = deref_var &outUV@0 (shader_out float) 
	vec1 32 ssa_83 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	intrinsic store_deref (ssa_68, ssa_83) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_69 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_70 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_84 = intrinsic load_deref (ssa_69) (0) /* access=0 */
	intrinsic store_deref (ssa_70, ssa_84) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_71 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_72 = deref_var &outColor@1 (shader_out float) 
	vec1 32 ssa_85 = intrinsic load_deref (ssa_71) (0) /* access=0 */
	intrinsic store_deref (ssa_72, ssa_85) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_73 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_74 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_86 = intrinsic load_deref (ssa_73) (0) /* access=0 */
	intrinsic store_deref (ssa_74, ssa_86) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_75 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_76 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_87 = intrinsic load_deref (ssa_75) (0) /* access=0 */
	intrinsic store_deref (ssa_76, ssa_87) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec1 32 ssa_78 = deref_var &outUV@4 (shader_out vec2) 
	vec2 32 ssa_88 = intrinsic load_deref (ssa_77) (0) /* access=0 */
	intrinsic store_deref (ssa_78, ssa_88) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec1 32 ssa_80 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_89 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	intrinsic store_deref (ssa_80, ssa_89) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

anv_nir_lower_ycbcr_textures
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_16 = mov ssa_3.x
	vec1 32 ssa_29 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_31 = vec2 ssa_16, ssa_30
	vec1 32 ssa_17 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_18 = mov ssa_3.y
	vec1 32 ssa_32 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_18
	vec1 32 ssa_60 = mov ssa_31.x
	vec1 32 ssa_61 = mov ssa_34.y
	vec2 32 ssa_62 = vec2 ssa_60, ssa_61
	intrinsic store_deref (ssa_32, ssa_62) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_19 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_20 = mov ssa_5.x
	vec1 32 ssa_35 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_39 = vec4 ssa_20, ssa_36, ssa_37, ssa_38
	vec1 32 ssa_21 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_22 = mov ssa_5.y
	vec1 32 ssa_40 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_22, ssa_42, ssa_43
	vec1 32 ssa_23 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_24 = mov ssa_5.z
	vec1 32 ssa_45 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_24, ssa_48
	vec1 32 ssa_25 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_26 = mov ssa_5.w
	vec1 32 ssa_50 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_26
	vec1 32 ssa_55 = mov ssa_39.x
	vec1 32 ssa_56 = mov ssa_44.y
	vec1 32 ssa_57 = mov ssa_49.z
	vec1 32 ssa_58 = mov ssa_54.w
	vec4 32 ssa_59 = vec4 ssa_55, ssa_56, ssa_57, ssa_58
	intrinsic store_deref (ssa_50, ssa_59) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_27, ssa_28) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_81 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	intrinsic store_deref (ssa_64, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_65 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_66 = deref_var &outUV (shader_out float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	intrinsic store_deref (ssa_66, ssa_82) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_67 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_68 = deref_var &outUV@0 (shader_out float) 
	vec1 32 ssa_83 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	intrinsic store_deref (ssa_68, ssa_83) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_69 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_70 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_84 = intrinsic load_deref (ssa_69) (0) /* access=0 */
	intrinsic store_deref (ssa_70, ssa_84) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_71 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_72 = deref_var &outColor@1 (shader_out float) 
	vec1 32 ssa_85 = intrinsic load_deref (ssa_71) (0) /* access=0 */
	intrinsic store_deref (ssa_72, ssa_85) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_73 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_74 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_86 = intrinsic load_deref (ssa_73) (0) /* access=0 */
	intrinsic store_deref (ssa_74, ssa_86) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_75 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_76 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_87 = intrinsic load_deref (ssa_75) (0) /* access=0 */
	intrinsic store_deref (ssa_76, ssa_87) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec1 32 ssa_78 = deref_var &outUV@4 (shader_out vec2) 
	vec2 32 ssa_88 = intrinsic load_deref (ssa_77) (0) /* access=0 */
	intrinsic store_deref (ssa_78, ssa_88) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec1 32 ssa_80 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_89 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	intrinsic store_deref (ssa_80, ssa_89) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

anv_nir_lower_multiview
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_16 = mov ssa_3.x
	vec1 32 ssa_29 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_31 = vec2 ssa_16, ssa_30
	vec1 32 ssa_17 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_18 = mov ssa_3.y
	vec1 32 ssa_32 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_18
	vec1 32 ssa_60 = mov ssa_31.x
	vec1 32 ssa_61 = mov ssa_34.y
	vec2 32 ssa_62 = vec2 ssa_60, ssa_61
	intrinsic store_deref (ssa_32, ssa_62) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_19 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_20 = mov ssa_5.x
	vec1 32 ssa_35 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_39 = vec4 ssa_20, ssa_36, ssa_37, ssa_38
	vec1 32 ssa_21 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_22 = mov ssa_5.y
	vec1 32 ssa_40 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_22, ssa_42, ssa_43
	vec1 32 ssa_23 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_24 = mov ssa_5.z
	vec1 32 ssa_45 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_24, ssa_48
	vec1 32 ssa_25 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_26 = mov ssa_5.w
	vec1 32 ssa_50 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_26
	vec1 32 ssa_55 = mov ssa_39.x
	vec1 32 ssa_56 = mov ssa_44.y
	vec1 32 ssa_57 = mov ssa_49.z
	vec1 32 ssa_58 = mov ssa_54.w
	vec4 32 ssa_59 = vec4 ssa_55, ssa_56, ssa_57, ssa_58
	intrinsic store_deref (ssa_50, ssa_59) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_27, ssa_28) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_81 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	intrinsic store_deref (ssa_64, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_65 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_66 = deref_var &outUV (shader_out float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	intrinsic store_deref (ssa_66, ssa_82) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_67 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_68 = deref_var &outUV@0 (shader_out float) 
	vec1 32 ssa_83 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	intrinsic store_deref (ssa_68, ssa_83) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_69 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_70 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_84 = intrinsic load_deref (ssa_69) (0) /* access=0 */
	intrinsic store_deref (ssa_70, ssa_84) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_71 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_72 = deref_var &outColor@1 (shader_out float) 
	vec1 32 ssa_85 = intrinsic load_deref (ssa_71) (0) /* access=0 */
	intrinsic store_deref (ssa_72, ssa_85) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_73 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_74 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_86 = intrinsic load_deref (ssa_73) (0) /* access=0 */
	intrinsic store_deref (ssa_74, ssa_86) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_75 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_76 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_87 = intrinsic load_deref (ssa_75) (0) /* access=0 */
	intrinsic store_deref (ssa_76, ssa_87) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec1 32 ssa_78 = deref_var &outUV@4 (shader_out vec2) 
	vec2 32 ssa_88 = intrinsic load_deref (ssa_77) (0) /* access=0 */
	intrinsic store_deref (ssa_78, ssa_88) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec1 32 ssa_80 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_89 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	intrinsic store_deref (ssa_80, ssa_89) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

brw_nir_lower_image_load_store
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_16 = mov ssa_3.x
	vec1 32 ssa_29 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_31 = vec2 ssa_16, ssa_30
	vec1 32 ssa_17 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_18 = mov ssa_3.y
	vec1 32 ssa_32 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_18
	vec1 32 ssa_60 = mov ssa_31.x
	vec1 32 ssa_61 = mov ssa_34.y
	vec2 32 ssa_62 = vec2 ssa_60, ssa_61
	intrinsic store_deref (ssa_32, ssa_62) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_19 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_20 = mov ssa_5.x
	vec1 32 ssa_35 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_39 = vec4 ssa_20, ssa_36, ssa_37, ssa_38
	vec1 32 ssa_21 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_22 = mov ssa_5.y
	vec1 32 ssa_40 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_22, ssa_42, ssa_43
	vec1 32 ssa_23 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_24 = mov ssa_5.z
	vec1 32 ssa_45 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_24, ssa_48
	vec1 32 ssa_25 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_26 = mov ssa_5.w
	vec1 32 ssa_50 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_26
	vec1 32 ssa_55 = mov ssa_39.x
	vec1 32 ssa_56 = mov ssa_44.y
	vec1 32 ssa_57 = mov ssa_49.z
	vec1 32 ssa_58 = mov ssa_54.w
	vec4 32 ssa_59 = vec4 ssa_55, ssa_56, ssa_57, ssa_58
	intrinsic store_deref (ssa_50, ssa_59) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_27, ssa_28) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_81 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	intrinsic store_deref (ssa_64, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_65 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_66 = deref_var &outUV (shader_out float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	intrinsic store_deref (ssa_66, ssa_82) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_67 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_68 = deref_var &outUV@0 (shader_out float) 
	vec1 32 ssa_83 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	intrinsic store_deref (ssa_68, ssa_83) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_69 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_70 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_84 = intrinsic load_deref (ssa_69) (0) /* access=0 */
	intrinsic store_deref (ssa_70, ssa_84) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_71 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_72 = deref_var &outColor@1 (shader_out float) 
	vec1 32 ssa_85 = intrinsic load_deref (ssa_71) (0) /* access=0 */
	intrinsic store_deref (ssa_72, ssa_85) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_73 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_74 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_86 = intrinsic load_deref (ssa_73) (0) /* access=0 */
	intrinsic store_deref (ssa_74, ssa_86) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_75 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_76 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_87 = intrinsic load_deref (ssa_75) (0) /* access=0 */
	intrinsic store_deref (ssa_76, ssa_87) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec1 32 ssa_78 = deref_var &outUV@4 (shader_out vec2) 
	vec2 32 ssa_88 = intrinsic load_deref (ssa_77) (0) /* access=0 */
	intrinsic store_deref (ssa_78, ssa_88) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec1 32 ssa_80 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_89 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	intrinsic store_deref (ssa_80, ssa_89) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_explicit_io
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_16 = mov ssa_3.x
	vec1 32 ssa_29 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_31 = vec2 ssa_16, ssa_30
	vec1 32 ssa_17 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_18 = mov ssa_3.y
	vec1 32 ssa_32 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_18
	vec1 32 ssa_60 = mov ssa_31.x
	vec1 32 ssa_61 = mov ssa_34.y
	vec2 32 ssa_62 = vec2 ssa_60, ssa_61
	intrinsic store_deref (ssa_32, ssa_62) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_19 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_20 = mov ssa_5.x
	vec1 32 ssa_35 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_39 = vec4 ssa_20, ssa_36, ssa_37, ssa_38
	vec1 32 ssa_21 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_22 = mov ssa_5.y
	vec1 32 ssa_40 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_22, ssa_42, ssa_43
	vec1 32 ssa_23 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_24 = mov ssa_5.z
	vec1 32 ssa_45 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_24, ssa_48
	vec1 32 ssa_25 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_26 = mov ssa_5.w
	vec1 32 ssa_50 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_26
	vec1 32 ssa_55 = mov ssa_39.x
	vec1 32 ssa_56 = mov ssa_44.y
	vec1 32 ssa_57 = mov ssa_49.z
	vec1 32 ssa_58 = mov ssa_54.w
	vec4 32 ssa_59 = vec4 ssa_55, ssa_56, ssa_57, ssa_58
	intrinsic store_deref (ssa_50, ssa_59) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_27, ssa_28) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_81 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	intrinsic store_deref (ssa_64, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_65 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_66 = deref_var &outUV (shader_out float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	intrinsic store_deref (ssa_66, ssa_82) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_67 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_68 = deref_var &outUV@0 (shader_out float) 
	vec1 32 ssa_83 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	intrinsic store_deref (ssa_68, ssa_83) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_69 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_70 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_84 = intrinsic load_deref (ssa_69) (0) /* access=0 */
	intrinsic store_deref (ssa_70, ssa_84) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_71 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_72 = deref_var &outColor@1 (shader_out float) 
	vec1 32 ssa_85 = intrinsic load_deref (ssa_71) (0) /* access=0 */
	intrinsic store_deref (ssa_72, ssa_85) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_73 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_74 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_86 = intrinsic load_deref (ssa_73) (0) /* access=0 */
	intrinsic store_deref (ssa_74, ssa_86) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_75 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_76 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_87 = intrinsic load_deref (ssa_75) (0) /* access=0 */
	intrinsic store_deref (ssa_76, ssa_87) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec1 32 ssa_78 = deref_var &outUV@4 (shader_out vec2) 
	vec2 32 ssa_88 = intrinsic load_deref (ssa_77) (0) /* access=0 */
	intrinsic store_deref (ssa_78, ssa_88) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec1 32 ssa_80 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_89 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	intrinsic store_deref (ssa_80, ssa_89) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_explicit_io
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_16 = mov ssa_3.x
	vec1 32 ssa_29 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_31 = vec2 ssa_16, ssa_30
	vec1 32 ssa_17 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_18 = mov ssa_3.y
	vec1 32 ssa_32 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_18
	vec1 32 ssa_60 = mov ssa_31.x
	vec1 32 ssa_61 = mov ssa_34.y
	vec2 32 ssa_62 = vec2 ssa_60, ssa_61
	intrinsic store_deref (ssa_32, ssa_62) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_19 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_20 = mov ssa_5.x
	vec1 32 ssa_35 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_39 = vec4 ssa_20, ssa_36, ssa_37, ssa_38
	vec1 32 ssa_21 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_22 = mov ssa_5.y
	vec1 32 ssa_40 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_22, ssa_42, ssa_43
	vec1 32 ssa_23 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_24 = mov ssa_5.z
	vec1 32 ssa_45 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_24, ssa_48
	vec1 32 ssa_25 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_26 = mov ssa_5.w
	vec1 32 ssa_50 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_26
	vec1 32 ssa_55 = mov ssa_39.x
	vec1 32 ssa_56 = mov ssa_44.y
	vec1 32 ssa_57 = mov ssa_49.z
	vec1 32 ssa_58 = mov ssa_54.w
	vec4 32 ssa_59 = vec4 ssa_55, ssa_56, ssa_57, ssa_58
	intrinsic store_deref (ssa_50, ssa_59) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_27, ssa_28) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_81 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	intrinsic store_deref (ssa_64, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_65 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_66 = deref_var &outUV (shader_out float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	intrinsic store_deref (ssa_66, ssa_82) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_67 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_68 = deref_var &outUV@0 (shader_out float) 
	vec1 32 ssa_83 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	intrinsic store_deref (ssa_68, ssa_83) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_69 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_70 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_84 = intrinsic load_deref (ssa_69) (0) /* access=0 */
	intrinsic store_deref (ssa_70, ssa_84) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_71 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_72 = deref_var &outColor@1 (shader_out float) 
	vec1 32 ssa_85 = intrinsic load_deref (ssa_71) (0) /* access=0 */
	intrinsic store_deref (ssa_72, ssa_85) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_73 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_74 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_86 = intrinsic load_deref (ssa_73) (0) /* access=0 */
	intrinsic store_deref (ssa_74, ssa_86) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_75 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_76 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_87 = intrinsic load_deref (ssa_75) (0) /* access=0 */
	intrinsic store_deref (ssa_76, ssa_87) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec1 32 ssa_78 = deref_var &outUV@4 (shader_out vec2) 
	vec2 32 ssa_88 = intrinsic load_deref (ssa_77) (0) /* access=0 */
	intrinsic store_deref (ssa_78, ssa_88) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec1 32 ssa_80 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_89 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	intrinsic store_deref (ssa_80, ssa_89) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_explicit_io
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_16 = mov ssa_3.x
	vec1 32 ssa_29 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_31 = vec2 ssa_16, ssa_30
	vec1 32 ssa_17 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_18 = mov ssa_3.y
	vec1 32 ssa_32 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_18
	vec1 32 ssa_60 = mov ssa_31.x
	vec1 32 ssa_61 = mov ssa_34.y
	vec2 32 ssa_62 = vec2 ssa_60, ssa_61
	intrinsic store_deref (ssa_32, ssa_62) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_19 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_20 = mov ssa_5.x
	vec1 32 ssa_35 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_39 = vec4 ssa_20, ssa_36, ssa_37, ssa_38
	vec1 32 ssa_21 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_22 = mov ssa_5.y
	vec1 32 ssa_40 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_22, ssa_42, ssa_43
	vec1 32 ssa_23 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_24 = mov ssa_5.z
	vec1 32 ssa_45 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_24, ssa_48
	vec1 32 ssa_25 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_26 = mov ssa_5.w
	vec1 32 ssa_50 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_26
	vec1 32 ssa_55 = mov ssa_39.x
	vec1 32 ssa_56 = mov ssa_44.y
	vec1 32 ssa_57 = mov ssa_49.z
	vec1 32 ssa_58 = mov ssa_54.w
	vec4 32 ssa_59 = vec4 ssa_55, ssa_56, ssa_57, ssa_58
	intrinsic store_deref (ssa_50, ssa_59) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_27, ssa_28) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_81 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	intrinsic store_deref (ssa_64, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_65 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_66 = deref_var &outUV (shader_out float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	intrinsic store_deref (ssa_66, ssa_82) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_67 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_68 = deref_var &outUV@0 (shader_out float) 
	vec1 32 ssa_83 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	intrinsic store_deref (ssa_68, ssa_83) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_69 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_70 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_84 = intrinsic load_deref (ssa_69) (0) /* access=0 */
	intrinsic store_deref (ssa_70, ssa_84) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_71 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_72 = deref_var &outColor@1 (shader_out float) 
	vec1 32 ssa_85 = intrinsic load_deref (ssa_71) (0) /* access=0 */
	intrinsic store_deref (ssa_72, ssa_85) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_73 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_74 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_86 = intrinsic load_deref (ssa_73) (0) /* access=0 */
	intrinsic store_deref (ssa_74, ssa_86) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_75 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_76 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_87 = intrinsic load_deref (ssa_75) (0) /* access=0 */
	intrinsic store_deref (ssa_76, ssa_87) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec1 32 ssa_78 = deref_var &outUV@4 (shader_out vec2) 
	vec2 32 ssa_88 = intrinsic load_deref (ssa_77) (0) /* access=0 */
	intrinsic store_deref (ssa_78, ssa_88) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec1 32 ssa_80 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_89 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	intrinsic store_deref (ssa_80, ssa_89) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_constant_folding
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_16 = mov ssa_3.x
	vec1 32 ssa_29 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_31 = vec2 ssa_16, ssa_30
	vec1 32 ssa_17 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_18 = mov ssa_3.y
	vec1 32 ssa_32 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_18
	vec1 32 ssa_60 = mov ssa_31.x
	vec1 32 ssa_61 = mov ssa_34.y
	vec2 32 ssa_62 = vec2 ssa_60, ssa_61
	intrinsic store_deref (ssa_32, ssa_62) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_19 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_20 = mov ssa_5.x
	vec1 32 ssa_35 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_39 = vec4 ssa_20, ssa_36, ssa_37, ssa_38
	vec1 32 ssa_21 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_22 = mov ssa_5.y
	vec1 32 ssa_40 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_22, ssa_42, ssa_43
	vec1 32 ssa_23 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_24 = mov ssa_5.z
	vec1 32 ssa_45 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_24, ssa_48
	vec1 32 ssa_25 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_26 = mov ssa_5.w
	vec1 32 ssa_50 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_26
	vec1 32 ssa_55 = mov ssa_39.x
	vec1 32 ssa_56 = mov ssa_44.y
	vec1 32 ssa_57 = mov ssa_49.z
	vec1 32 ssa_58 = mov ssa_54.w
	vec4 32 ssa_59 = vec4 ssa_55, ssa_56, ssa_57, ssa_58
	intrinsic store_deref (ssa_50, ssa_59) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_27, ssa_28) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_81 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	intrinsic store_deref (ssa_64, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_65 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_66 = deref_var &outUV (shader_out float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	intrinsic store_deref (ssa_66, ssa_82) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_67 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_68 = deref_var &outUV@0 (shader_out float) 
	vec1 32 ssa_83 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	intrinsic store_deref (ssa_68, ssa_83) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_69 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_70 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_84 = intrinsic load_deref (ssa_69) (0) /* access=0 */
	intrinsic store_deref (ssa_70, ssa_84) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_71 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_72 = deref_var &outColor@1 (shader_out float) 
	vec1 32 ssa_85 = intrinsic load_deref (ssa_71) (0) /* access=0 */
	intrinsic store_deref (ssa_72, ssa_85) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_73 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_74 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_86 = intrinsic load_deref (ssa_73) (0) /* access=0 */
	intrinsic store_deref (ssa_74, ssa_86) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_75 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_76 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_87 = intrinsic load_deref (ssa_75) (0) /* access=0 */
	intrinsic store_deref (ssa_76, ssa_87) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec1 32 ssa_78 = deref_var &outUV@4 (shader_out vec2) 
	vec2 32 ssa_88 = intrinsic load_deref (ssa_77) (0) /* access=0 */
	intrinsic store_deref (ssa_78, ssa_88) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec1 32 ssa_80 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_89 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	intrinsic store_deref (ssa_80, ssa_89) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_non_uniform_access
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec2 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec2 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec2 32 ssa_8 = intrinsic load_push_constant (ssa_1) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_9 = fmul ssa_7.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_7.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 16) /* base=0 */ /* range=16 */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_16 = mov ssa_3.x
	vec1 32 ssa_29 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_31 = vec2 ssa_16, ssa_30
	vec1 32 ssa_17 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_18 = mov ssa_3.y
	vec1 32 ssa_32 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_18
	vec1 32 ssa_60 = mov ssa_31.x
	vec1 32 ssa_61 = mov ssa_34.y
	vec2 32 ssa_62 = vec2 ssa_60, ssa_61
	intrinsic store_deref (ssa_32, ssa_62) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_19 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_20 = mov ssa_5.x
	vec1 32 ssa_35 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_39 = vec4 ssa_20, ssa_36, ssa_37, ssa_38
	vec1 32 ssa_21 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_22 = mov ssa_5.y
	vec1 32 ssa_40 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_22, ssa_42, ssa_43
	vec1 32 ssa_23 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_24 = mov ssa_5.z
	vec1 32 ssa_45 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_24, ssa_48
	vec1 32 ssa_25 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_26 = mov ssa_5.w
	vec1 32 ssa_50 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_26
	vec1 32 ssa_55 = mov ssa_39.x
	vec1 32 ssa_56 = mov ssa_44.y
	vec1 32 ssa_57 = mov ssa_49.z
	vec1 32 ssa_58 = mov ssa_54.w
	vec4 32 ssa_59 = vec4 ssa_55, ssa_56, ssa_57, ssa_58
	intrinsic store_deref (ssa_50, ssa_59) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_deref (ssa_27, ssa_28) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_81 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	intrinsic store_deref (ssa_64, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_65 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_66 = deref_var &outUV (shader_out float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	intrinsic store_deref (ssa_66, ssa_82) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_67 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_68 = deref_var &outUV@0 (shader_out float) 
	vec1 32 ssa_83 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	intrinsic store_deref (ssa_68, ssa_83) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_69 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_70 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_84 = intrinsic load_deref (ssa_69) (0) /* access=0 */
	intrinsic store_deref (ssa_70, ssa_84) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_71 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_72 = deref_var &outColor@1 (shader_out float) 
	vec1 32 ssa_85 = intrinsic load_deref (ssa_71) (0) /* access=0 */
	intrinsic store_deref (ssa_72, ssa_85) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_73 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_74 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_86 = intrinsic load_deref (ssa_73) (0) /* access=0 */
	intrinsic store_deref (ssa_74, ssa_86) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_75 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_76 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_87 = intrinsic load_deref (ssa_75) (0) /* access=0 */
	intrinsic store_deref (ssa_76, ssa_87) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec1 32 ssa_78 = deref_var &outUV@4 (shader_out vec2) 
	vec2 32 ssa_88 = intrinsic load_deref (ssa_77) (0) /* access=0 */
	intrinsic store_deref (ssa_78, ssa_88) (3, 0) /* wrmask=xy */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec1 32 ssa_80 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_89 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	intrinsic store_deref (ssa_80, ssa_89) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_wpos_center
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@0 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@1 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@2 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV@3 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_21 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_22 = mov ssa_1.x
	vec1 32 ssa_2 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_23 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_3 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_3.y
	vec1 32 ssa_4 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_25 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_25) (0) /* access=0 */
	vec1 32 ssa_26 = mov ssa_5.z
	vec1 32 ssa_6 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_27 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_7 = intrinsic load_deref (ssa_27) (0) /* access=0 */
	vec1 32 ssa_28 = mov ssa_7.w
	vec1 32 ssa_8 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_9 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_29 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_10 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_30 = mov ssa_10.x
	vec1 32 ssa_11 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_31 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_12 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_12.y
	vec2 32 ssa_13 = vec2 ssa_30, ssa_32
	vec4 32 ssa_14 = (float)tex ssa_8 (texture_deref), ssa_8 (sampler_deref), ssa_13 (coord)
	vec1 32 ssa_15 = fmul ssa_22, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_24, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_26, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_28, ssa_14.w
	vec1 32 ssa_19 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	intrinsic store_deref (ssa_19, ssa_20) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_input_attachments
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@0 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@1 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@2 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV@3 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_21 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_22 = mov ssa_1.x
	vec1 32 ssa_2 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_23 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_3 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_3.y
	vec1 32 ssa_4 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_25 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_25) (0) /* access=0 */
	vec1 32 ssa_26 = mov ssa_5.z
	vec1 32 ssa_6 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_27 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_7 = intrinsic load_deref (ssa_27) (0) /* access=0 */
	vec1 32 ssa_28 = mov ssa_7.w
	vec1 32 ssa_8 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_9 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_29 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_10 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_30 = mov ssa_10.x
	vec1 32 ssa_11 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_31 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_12 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_12.y
	vec2 32 ssa_13 = vec2 ssa_30, ssa_32
	vec4 32 ssa_14 = (float)tex ssa_8 (texture_deref), ssa_8 (sampler_deref), ssa_13 (coord)
	vec1 32 ssa_15 = fmul ssa_22, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_24, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_26, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_28, ssa_14.w
	vec1 32 ssa_19 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	intrinsic store_deref (ssa_19, ssa_20) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

anv_nir_lower_ycbcr_textures
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@0 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@1 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@2 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV@3 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_21 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_22 = mov ssa_1.x
	vec1 32 ssa_2 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_23 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_3 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_3.y
	vec1 32 ssa_4 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_25 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_25) (0) /* access=0 */
	vec1 32 ssa_26 = mov ssa_5.z
	vec1 32 ssa_6 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_27 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_7 = intrinsic load_deref (ssa_27) (0) /* access=0 */
	vec1 32 ssa_28 = mov ssa_7.w
	vec1 32 ssa_8 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_9 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_29 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_10 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_30 = mov ssa_10.x
	vec1 32 ssa_11 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_31 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_12 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_12.y
	vec2 32 ssa_13 = vec2 ssa_30, ssa_32
	vec4 32 ssa_14 = (float)tex ssa_8 (texture_deref), ssa_8 (sampler_deref), ssa_13 (coord)
	vec1 32 ssa_15 = fmul ssa_22, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_24, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_26, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_28, ssa_14.w
	vec1 32 ssa_19 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	intrinsic store_deref (ssa_19, ssa_20) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

anv_nir_lower_multiview
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@0 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@1 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@2 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV@3 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_21 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_22 = mov ssa_1.x
	vec1 32 ssa_2 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_23 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_3 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_3.y
	vec1 32 ssa_4 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_25 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_25) (0) /* access=0 */
	vec1 32 ssa_26 = mov ssa_5.z
	vec1 32 ssa_6 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_27 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_7 = intrinsic load_deref (ssa_27) (0) /* access=0 */
	vec1 32 ssa_28 = mov ssa_7.w
	vec1 32 ssa_8 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_9 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_29 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_10 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_30 = mov ssa_10.x
	vec1 32 ssa_11 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_31 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_12 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_12.y
	vec2 32 ssa_13 = vec2 ssa_30, ssa_32
	vec4 32 ssa_14 = (float)tex ssa_8 (texture_deref), ssa_8 (sampler_deref), ssa_13 (coord)
	vec1 32 ssa_15 = fmul ssa_22, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_24, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_26, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_28, ssa_14.w
	vec1 32 ssa_19 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	intrinsic store_deref (ssa_19, ssa_20) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

brw_nir_lower_image_load_store
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@0 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@1 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@2 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV@3 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_21 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_22 = mov ssa_1.x
	vec1 32 ssa_2 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_23 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_3 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_3.y
	vec1 32 ssa_4 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_25 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_25) (0) /* access=0 */
	vec1 32 ssa_26 = mov ssa_5.z
	vec1 32 ssa_6 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_27 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_7 = intrinsic load_deref (ssa_27) (0) /* access=0 */
	vec1 32 ssa_28 = mov ssa_7.w
	vec1 32 ssa_8 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_9 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_29 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_10 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_30 = mov ssa_10.x
	vec1 32 ssa_11 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_31 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_12 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_12.y
	vec2 32 ssa_13 = vec2 ssa_30, ssa_32
	vec4 32 ssa_14 = (float)tex ssa_8 (texture_deref), ssa_8 (sampler_deref), ssa_13 (coord)
	vec1 32 ssa_15 = fmul ssa_22, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_24, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_26, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_28, ssa_14.w
	vec1 32 ssa_19 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	intrinsic store_deref (ssa_19, ssa_20) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_explicit_io
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@0 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@1 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@2 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV@3 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_21 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_22 = mov ssa_1.x
	vec1 32 ssa_2 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_23 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_3 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_3.y
	vec1 32 ssa_4 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_25 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_25) (0) /* access=0 */
	vec1 32 ssa_26 = mov ssa_5.z
	vec1 32 ssa_6 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_27 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_7 = intrinsic load_deref (ssa_27) (0) /* access=0 */
	vec1 32 ssa_28 = mov ssa_7.w
	vec1 32 ssa_8 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_9 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_29 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_10 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_30 = mov ssa_10.x
	vec1 32 ssa_11 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_31 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_12 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_12.y
	vec2 32 ssa_13 = vec2 ssa_30, ssa_32
	vec4 32 ssa_14 = (float)tex ssa_8 (texture_deref), ssa_8 (sampler_deref), ssa_13 (coord)
	vec1 32 ssa_15 = fmul ssa_22, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_24, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_26, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_28, ssa_14.w
	vec1 32 ssa_19 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	intrinsic store_deref (ssa_19, ssa_20) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_explicit_io
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@0 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@1 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@2 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV@3 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_21 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_22 = mov ssa_1.x
	vec1 32 ssa_2 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_23 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_3 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_3.y
	vec1 32 ssa_4 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_25 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_25) (0) /* access=0 */
	vec1 32 ssa_26 = mov ssa_5.z
	vec1 32 ssa_6 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_27 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_7 = intrinsic load_deref (ssa_27) (0) /* access=0 */
	vec1 32 ssa_28 = mov ssa_7.w
	vec1 32 ssa_8 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_9 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_29 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_10 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_30 = mov ssa_10.x
	vec1 32 ssa_11 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_31 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_12 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_12.y
	vec2 32 ssa_13 = vec2 ssa_30, ssa_32
	vec4 32 ssa_14 = (float)tex ssa_13 (coord), 2 (texture), 0 (sampler)
	vec1 32 ssa_15 = fmul ssa_22, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_24, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_26, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_28, ssa_14.w
	vec1 32 ssa_19 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	intrinsic store_deref (ssa_19, ssa_20) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_explicit_io
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@0 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@1 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@2 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV@3 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_21 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_22 = mov ssa_1.x
	vec1 32 ssa_2 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_23 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_3 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_3.y
	vec1 32 ssa_4 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_25 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_25) (0) /* access=0 */
	vec1 32 ssa_26 = mov ssa_5.z
	vec1 32 ssa_6 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_27 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_7 = intrinsic load_deref (ssa_27) (0) /* access=0 */
	vec1 32 ssa_28 = mov ssa_7.w
	vec1 32 ssa_8 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_9 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_29 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_10 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_30 = mov ssa_10.x
	vec1 32 ssa_11 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_31 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_12 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_12.y
	vec2 32 ssa_13 = vec2 ssa_30, ssa_32
	vec4 32 ssa_14 = (float)tex ssa_13 (coord), 2 (texture), 0 (sampler)
	vec1 32 ssa_15 = fmul ssa_22, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_24, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_26, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_28, ssa_14.w
	vec1 32 ssa_19 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	intrinsic store_deref (ssa_19, ssa_20) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_constant_folding
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@0 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@1 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@2 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV@3 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_21 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_22 = mov ssa_1.x
	vec1 32 ssa_2 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_23 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_3 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_3.y
	vec1 32 ssa_4 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_25 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_25) (0) /* access=0 */
	vec1 32 ssa_26 = mov ssa_5.z
	vec1 32 ssa_6 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_27 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_7 = intrinsic load_deref (ssa_27) (0) /* access=0 */
	vec1 32 ssa_28 = mov ssa_7.w
	vec1 32 ssa_8 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_9 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_29 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_10 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_30 = mov ssa_10.x
	vec1 32 ssa_11 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_31 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_12 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_12.y
	vec2 32 ssa_13 = vec2 ssa_30, ssa_32
	vec4 32 ssa_14 = (float)tex ssa_13 (coord), 2 (texture), 0 (sampler)
	vec1 32 ssa_15 = fmul ssa_22, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_24, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_26, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_28, ssa_14.w
	vec1 32 ssa_19 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	intrinsic store_deref (ssa_19, ssa_20) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_non_uniform_access
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@0 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@1 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@2 (VARYING_SLOT_VAR1.w, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUV@3 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_21 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_1 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_22 = mov ssa_1.x
	vec1 32 ssa_2 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_23 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_3 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_3.y
	vec1 32 ssa_4 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_25 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_5 = intrinsic load_deref (ssa_25) (0) /* access=0 */
	vec1 32 ssa_26 = mov ssa_5.z
	vec1 32 ssa_6 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_27 = deref_var &inColor@5 (shader_in vec4) 
	vec4 32 ssa_7 = intrinsic load_deref (ssa_27) (0) /* access=0 */
	vec1 32 ssa_28 = mov ssa_7.w
	vec1 32 ssa_8 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_9 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_29 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_10 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_30 = mov ssa_10.x
	vec1 32 ssa_11 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_31 = deref_var &inUV@4 (shader_in vec2) 
	vec2 32 ssa_12 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_12.y
	vec2 32 ssa_13 = vec2 ssa_30, ssa_32
	vec4 32 ssa_14 = (float)tex ssa_13 (coord), 2 (texture), 0 (sampler)
	vec1 32 ssa_15 = fmul ssa_22, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_24, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_26, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_28, ssa_14.w
	vec1 32 ssa_19 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	intrinsic store_deref (ssa_19, ssa_20) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

brw_nir_apply_sampler_key
nir_lower_subgroups
brw_nir_lower_scoped_barriers
nir_opt_combine_memory_barriers
nir_opt_algebraic_before_ffma
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_119 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_115 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_111 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec1 32 ssa_90 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_96 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_91 = intrinsic load_input (ssa_96) (1, 0, 160, 145) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=1 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec1 32 ssa_92 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_97 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_93 = intrinsic load_input (ssa_97) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec1 32 ssa_94 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_98 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_95 = intrinsic load_input (ssa_98) (0, 0, 160, 144) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=1 */
	vec2 32 ssa_8 = intrinsic load_uniform (ssa_1) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_9 = fmul ssa_95.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_95.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_uniform (ssa_11) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_16 = mov ssa_91.x
	vec1 32 ssa_29 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_31 = vec2 ssa_16, ssa_30
	vec1 32 ssa_17 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_18 = mov ssa_91.y
	vec1 32 ssa_32 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_18
	vec1 32 ssa_60 = mov ssa_31.x
	vec1 32 ssa_61 = mov ssa_34.y
	vec2 32 ssa_62 = vec2 ssa_60, ssa_61
	vec1 32 ssa_19 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_20 = mov ssa_93.x
	vec1 32 ssa_35 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_39 = vec4 ssa_20, ssa_36, ssa_37, ssa_38
	vec1 32 ssa_21 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_22 = mov ssa_93.y
	vec1 32 ssa_40 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_22, ssa_42, ssa_43
	vec1 32 ssa_23 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_24 = mov ssa_93.z
	vec1 32 ssa_45 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_24, ssa_48
	vec1 32 ssa_25 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_26 = mov ssa_93.w
	vec1 32 ssa_50 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_26
	vec1 32 ssa_55 = mov ssa_39.x
	vec1 32 ssa_56 = mov ssa_44.y
	vec1 32 ssa_57 = mov ssa_49.z
	vec1 32 ssa_58 = mov ssa_54.w
	vec4 32 ssa_59 = vec4 ssa_55, ssa_56, ssa_57, ssa_58
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	vec1 32 ssa_63 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_108 = mov ssa_28
	vec1 32 ssa_99 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_108, ssa_99) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec1 32 ssa_65 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_66 = deref_var &outUV (shader_out float) 
	vec1 32 ssa_110 = mov ssa_109
	vec1 32 ssa_100 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_110, ssa_100) (32, 1, 0, 160, 160) /* base=32 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	vec1 32 ssa_67 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_68 = deref_var &outUV@0 (shader_out float) 
	vec1 32 ssa_112 = mov ssa_111
	vec1 32 ssa_101 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_112, ssa_101) (32, 1, 1, 160, 160) /* base=32 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	vec1 32 ssa_69 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_70 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_114 = mov ssa_113
	vec1 32 ssa_102 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_114, ssa_102) (33, 1, 0, 160, 161) /* base=33 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_71 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_72 = deref_var &outColor@1 (shader_out float) 
	vec1 32 ssa_116 = mov ssa_115
	vec1 32 ssa_103 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_116, ssa_103) (33, 1, 1, 160, 161) /* base=33 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_73 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_74 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_118 = mov ssa_117
	vec1 32 ssa_104 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_118, ssa_104) (33, 1, 2, 160, 161) /* base=33 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_75 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_76 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_120 = mov ssa_119
	vec1 32 ssa_105 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_120, ssa_105) (33, 1, 3, 160, 161) /* base=33 */ /* wrmask=x */ /* component=3 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_77 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec1 32 ssa_78 = deref_var &outUV@4 (shader_out vec2) 
	vec2 32 ssa_121 = mov ssa_62
	vec1 32 ssa_106 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_121, ssa_106) (32, 3, 0, 160, 160) /* base=32 */ /* wrmask=xy */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	vec1 32 ssa_79 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec1 32 ssa_80 = deref_var &outColor@5 (shader_out vec4) 
	vec4 32 ssa_122 = mov ssa_59
	vec1 32 ssa_107 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_122, ssa_107) (33, 15, 0, 160, 161) /* base=33 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_119 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_115 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_111 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec1 32 ssa_90 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_96 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_91 = intrinsic load_input (ssa_96) (1, 0, 160, 145) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=1 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec1 32 ssa_92 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_97 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_93 = intrinsic load_input (ssa_97) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec1 32 ssa_94 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_98 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_95 = intrinsic load_input (ssa_98) (0, 0, 160, 144) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=1 */
	vec2 32 ssa_8 = intrinsic load_uniform (ssa_1) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_9 = fmul ssa_95.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_95.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_uniform (ssa_11) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_16 = mov ssa_91.x
	vec1 32 ssa_29 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_31 = vec2 ssa_16, ssa_30
	vec1 32 ssa_17 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_18 = mov ssa_91.y
	vec1 32 ssa_32 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_18
	vec1 32 ssa_60 = mov ssa_31.x
	vec1 32 ssa_61 = mov ssa_34.y
	vec2 32 ssa_62 = vec2 ssa_60, ssa_61
	vec1 32 ssa_19 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_20 = mov ssa_93.x
	vec1 32 ssa_35 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_39 = vec4 ssa_20, ssa_36, ssa_37, ssa_38
	vec1 32 ssa_21 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_22 = mov ssa_93.y
	vec1 32 ssa_40 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_22, ssa_42, ssa_43
	vec1 32 ssa_23 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_24 = mov ssa_93.z
	vec1 32 ssa_45 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_24, ssa_48
	vec1 32 ssa_25 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_26 = mov ssa_93.w
	vec1 32 ssa_50 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_26
	vec1 32 ssa_55 = mov ssa_39.x
	vec1 32 ssa_56 = mov ssa_44.y
	vec1 32 ssa_57 = mov ssa_49.z
	vec1 32 ssa_58 = mov ssa_54.w
	vec4 32 ssa_59 = vec4 ssa_55, ssa_56, ssa_57, ssa_58
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	vec1 32 ssa_63 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &.field0 (shader_out vec4) 
	vec1 32 ssa_123 = mov ssa_28.x
	vec1 32 ssa_124 = mov ssa_28.y
	vec1 32 ssa_125 = mov ssa_28.z
	vec1 32 ssa_126 = mov ssa_28.w
	vec4 32 ssa_127 = vec4 ssa_123, ssa_124, ssa_125, ssa_126
	vec1 32 ssa_99 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_127, ssa_99) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec1 32 ssa_65 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_66 = deref_var &outUV (shader_out float) 
	vec1 32 ssa_110 = mov ssa_109
	vec1 32 ssa_100 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_110, ssa_100) (32, 1, 0, 160, 160) /* base=32 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	vec1 32 ssa_67 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_68 = deref_var &outUV@0 (shader_out float) 
	vec1 32 ssa_112 = mov ssa_111
	vec1 32 ssa_101 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_112, ssa_101) (32, 1, 1, 160, 160) /* base=32 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	vec1 32 ssa_69 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_70 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_114 = mov ssa_113
	vec1 32 ssa_102 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_114, ssa_102) (33, 1, 0, 160, 161) /* base=33 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_71 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_72 = deref_var &outColor@1 (shader_out float) 
	vec1 32 ssa_116 = mov ssa_115
	vec1 32 ssa_103 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_116, ssa_103) (33, 1, 1, 160, 161) /* base=33 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_73 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_74 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_118 = mov ssa_117
	vec1 32 ssa_104 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_118, ssa_104) (33, 1, 2, 160, 161) /* base=33 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_75 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_76 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_120 = mov ssa_119
	vec1 32 ssa_105 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_120, ssa_105) (33, 1, 3, 160, 161) /* base=33 */ /* wrmask=x */ /* component=3 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_77 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec1 32 ssa_78 = deref_var &outUV@4 (shader_out vec2) 
	vec1 32 ssa_128 = mov ssa_62.x
	vec1 32 ssa_129 = mov ssa_62.y
	vec2 32 ssa_130 = vec2 ssa_128, ssa_129
	vec1 32 ssa_106 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_130, ssa_106) (32, 3, 0, 160, 160) /* base=32 */ /* wrmask=xy */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	vec1 32 ssa_79 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec1 32 ssa_80 = deref_var &outColor@5 (shader_out vec4) 
	vec1 32 ssa_131 = mov ssa_59.x
	vec1 32 ssa_132 = mov ssa_59.y
	vec1 32 ssa_133 = mov ssa_59.z
	vec1 32 ssa_134 = mov ssa_59.w
	vec4 32 ssa_135 = vec4 ssa_131, ssa_132, ssa_133, ssa_134
	vec1 32 ssa_107 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_135, ssa_107) (33, 15, 0, 160, 161) /* base=33 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}

nir_copy_prop
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_119 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_115 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_111 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_53 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_46 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_42 = undefined
	vec1 32 ssa_41 = undefined
	vec1 32 ssa_38 = undefined
	vec1 32 ssa_37 = undefined
	vec1 32 ssa_36 = undefined
	vec1 32 ssa_33 = undefined
	vec1 32 ssa_30 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inUV (shader_in vec2) 
	vec1 32 ssa_90 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_96 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_91 = intrinsic load_input (ssa_96) (1, 0, 160, 145) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=1 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec4) 
	vec1 32 ssa_92 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_97 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_93 = intrinsic load_input (ssa_97) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 32 ssa_6 = deref_var &inPos (shader_in vec2) 
	vec1 32 ssa_94 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_98 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_95 = intrinsic load_input (ssa_98) (0, 0, 160, 144) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=1 */
	vec2 32 ssa_8 = intrinsic load_uniform (ssa_1) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_9 = fmul ssa_95.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_95.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_uniform (ssa_11) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec1 32 ssa_15 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_16 = mov ssa_91.x
	vec1 32 ssa_29 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_31 = vec2 ssa_91.x, ssa_30
	vec1 32 ssa_17 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_18 = mov ssa_91.y
	vec1 32 ssa_32 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec2 32 ssa_34 = vec2 ssa_33, ssa_91.y
	vec1 32 ssa_60 = mov ssa_91.x
	vec1 32 ssa_61 = mov ssa_91.y
	vec2 32 ssa_62 = vec2 ssa_91.x, ssa_91.y
	vec1 32 ssa_19 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_20 = mov ssa_93.x
	vec1 32 ssa_35 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_39 = vec4 ssa_93.x, ssa_36, ssa_37, ssa_38
	vec1 32 ssa_21 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_22 = mov ssa_93.y
	vec1 32 ssa_40 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_44 = vec4 ssa_41, ssa_93.y, ssa_42, ssa_43
	vec1 32 ssa_23 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_24 = mov ssa_93.z
	vec1 32 ssa_45 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_49 = vec4 ssa_46, ssa_47, ssa_93.z, ssa_48
	vec1 32 ssa_25 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_26 = mov ssa_93.w
	vec1 32 ssa_50 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec4 32 ssa_54 = vec4 ssa_51, ssa_52, ssa_53, ssa_93.w
	vec1 32 ssa_55 = mov ssa_93.x
	vec1 32 ssa_56 = mov ssa_93.y
	vec1 32 ssa_57 = mov ssa_93.z
	vec1 32 ssa_58 = mov ssa_93.w
	vec4 32 ssa_59 = vec4 ssa_93.x, ssa_93.y, ssa_93.z, ssa_93.w
	vec1 32 ssa_27 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_28 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	vec1 32 ssa_63 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &.field0 (shader_out vec4) 
	vec1 32 ssa_123 = mov ssa_13
	vec1 32 ssa_124 = mov ssa_14
	vec1 32 ssa_125 = mov ssa_1
	vec1 32 ssa_126 = mov ssa_0
	vec4 32 ssa_127 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	vec1 32 ssa_99 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_127, ssa_99) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec1 32 ssa_65 = deref_var &out@outUV-temp (function_temp float) 
	vec1 32 ssa_66 = deref_var &outUV (shader_out float) 
	vec1 32 ssa_110 = mov ssa_109
	vec1 32 ssa_100 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_109, ssa_100) (32, 1, 0, 160, 160) /* base=32 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	vec1 32 ssa_67 = deref_var &out@outUV-temp@6 (function_temp float) 
	vec1 32 ssa_68 = deref_var &outUV@0 (shader_out float) 
	vec1 32 ssa_112 = mov ssa_111
	vec1 32 ssa_101 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_111, ssa_101) (32, 1, 1, 160, 160) /* base=32 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	vec1 32 ssa_69 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_70 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_114 = mov ssa_113
	vec1 32 ssa_102 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_113, ssa_102) (33, 1, 0, 160, 161) /* base=33 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_71 = deref_var &out@outColor-temp@7 (function_temp float) 
	vec1 32 ssa_72 = deref_var &outColor@1 (shader_out float) 
	vec1 32 ssa_116 = mov ssa_115
	vec1 32 ssa_103 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_115, ssa_103) (33, 1, 1, 160, 161) /* base=33 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_73 = deref_var &out@outColor-temp@8 (function_temp float) 
	vec1 32 ssa_74 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_118 = mov ssa_117
	vec1 32 ssa_104 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_117, ssa_104) (33, 1, 2, 160, 161) /* base=33 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_75 = deref_var &out@outColor-temp@9 (function_temp float) 
	vec1 32 ssa_76 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_120 = mov ssa_119
	vec1 32 ssa_105 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_119, ssa_105) (33, 1, 3, 160, 161) /* base=33 */ /* wrmask=x */ /* component=3 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_77 = deref_var &out@outUV-temp@10 (function_temp vec2) 
	vec1 32 ssa_78 = deref_var &outUV@4 (shader_out vec2) 
	vec1 32 ssa_128 = mov ssa_91.x
	vec1 32 ssa_129 = mov ssa_91.y
	vec2 32 ssa_130 = vec2 ssa_91.x, ssa_91.y
	vec1 32 ssa_106 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_91, ssa_106) (32, 3, 0, 160, 160) /* base=32 */ /* wrmask=xy */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	vec1 32 ssa_79 = deref_var &out@outColor-temp@11 (function_temp vec4) 
	vec1 32 ssa_80 = deref_var &outColor@5 (shader_out vec4) 
	vec1 32 ssa_131 = mov ssa_93.x
	vec1 32 ssa_132 = mov ssa_93.y
	vec1 32 ssa_133 = mov ssa_93.z
	vec1 32 ssa_134 = mov ssa_93.w
	vec4 32 ssa_135 = vec4 ssa_93.x, ssa_93.y, ssa_93.z, ssa_93.w
	vec1 32 ssa_107 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_93, ssa_107) (33, 15, 0, 160, 161) /* base=33 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_119 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_115 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_111 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_96 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_91 = intrinsic load_input (ssa_96) (1, 0, 160, 145) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=1 */
	vec1 32 ssa_97 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_93 = intrinsic load_input (ssa_97) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 32 ssa_98 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_95 = intrinsic load_input (ssa_98) (0, 0, 160, 144) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=1 */
	vec2 32 ssa_8 = intrinsic load_uniform (ssa_1) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_9 = fmul ssa_95.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_95.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_uniform (ssa_11) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec4 32 ssa_127 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	vec1 32 ssa_99 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_127, ssa_99) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec1 32 ssa_100 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_109, ssa_100) (32, 1, 0, 160, 160) /* base=32 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	vec1 32 ssa_101 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_111, ssa_101) (32, 1, 1, 160, 160) /* base=32 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	vec1 32 ssa_102 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_113, ssa_102) (33, 1, 0, 160, 161) /* base=33 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_103 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_115, ssa_103) (33, 1, 1, 160, 161) /* base=33 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_104 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_117, ssa_104) (33, 1, 2, 160, 161) /* base=33 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_105 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_119, ssa_105) (33, 1, 3, 160, 161) /* base=33 */ /* wrmask=x */ /* component=3 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_106 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_91, ssa_106) (32, 3, 0, 160, 160) /* base=32 */ /* wrmask=xy */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	vec1 32 ssa_107 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_93, ssa_107) (33, 15, 0, 160, 161) /* base=33 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_119 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_115 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_111 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_91 = intrinsic load_input (ssa_1) (1, 0, 160, 145) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=1 */
	vec4 32 ssa_93 = intrinsic load_input (ssa_1) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec2 32 ssa_95 = intrinsic load_input (ssa_1) (0, 0, 160, 144) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=1 */
	vec2 32 ssa_8 = intrinsic load_uniform (ssa_1) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_9 = fmul ssa_95.x, ssa_8.x
	vec1 32 ssa_10 = fmul ssa_95.y, ssa_8.y
	vec1 32 ssa_11 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_12 = intrinsic load_uniform (ssa_11) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_13 = fadd ssa_9, ssa_12.x
	vec1 32 ssa_14 = fadd ssa_10, ssa_12.y
	vec4 32 ssa_127 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_output (ssa_127, ssa_1) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	intrinsic store_output (ssa_109, ssa_1) (32, 1, 0, 160, 160) /* base=32 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	intrinsic store_output (ssa_111, ssa_1) (32, 1, 1, 160, 160) /* base=32 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	intrinsic store_output (ssa_113, ssa_1) (33, 1, 0, 160, 161) /* base=33 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	intrinsic store_output (ssa_115, ssa_1) (33, 1, 1, 160, 161) /* base=33 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	intrinsic store_output (ssa_117, ssa_1) (33, 1, 2, 160, 161) /* base=33 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	intrinsic store_output (ssa_119, ssa_1) (33, 1, 3, 160, 161) /* base=33 */ /* wrmask=x */ /* component=3 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	intrinsic store_output (ssa_91, ssa_1) (32, 3, 0, 160, 160) /* base=32 */ /* wrmask=xy */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	intrinsic store_output (ssa_93, ssa_1) (33, 15, 0, 160, 161) /* base=33 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = undefined
	vec1 32 ssa_1 = undefined
	vec1 32 ssa_2 = undefined
	vec1 32 ssa_3 = undefined
	vec1 32 ssa_4 = undefined
	vec1 32 ssa_5 = undefined
	vec1 32 ssa_6 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_7 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_8 = intrinsic load_input (ssa_7) (1, 0, 160, 145) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=1 */
	vec4 32 ssa_9 = intrinsic load_input (ssa_7) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec2 32 ssa_10 = intrinsic load_input (ssa_7) (0, 0, 160, 144) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=1 */
	vec2 32 ssa_11 = intrinsic load_uniform (ssa_7) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_12 = fmul ssa_10.x, ssa_11.x
	vec1 32 ssa_13 = fmul ssa_10.y, ssa_11.y
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_15 = intrinsic load_uniform (ssa_14) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_16 = fadd ssa_12, ssa_15.x
	vec1 32 ssa_17 = fadd ssa_13, ssa_15.y
	vec4 32 ssa_18 = vec4 ssa_16, ssa_17, ssa_7, ssa_6
	intrinsic store_output (ssa_18, ssa_7) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	intrinsic store_output (ssa_8, ssa_7) (32, 3, 0, 160, 160) /* base=32 */ /* wrmask=xy */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	intrinsic store_output (ssa_9, ssa_7) (33, 15, 0, 160, 161) /* base=33 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}

nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp
	decl_var  INTERP_MODE_NONE float out@outUV-temp@6
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@7
	decl_var  INTERP_MODE_NONE float out@outColor-temp@8
	decl_var  INTERP_MODE_NONE float out@outColor-temp@9
	decl_var  INTERP_MODE_NONE vec2 out@outUV-temp@10
	decl_var  INTERP_MODE_NONE vec4 out@outColor-temp@11
	block block_0:
	/* preds: */
	vec1 32 ssa_6 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_7 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_8 = intrinsic load_input (ssa_7) (1, 0, 160, 145) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=1 */
	vec4 32 ssa_9 = intrinsic load_input (ssa_7) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec2 32 ssa_10 = intrinsic load_input (ssa_7) (0, 0, 160, 144) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=1 */
	vec2 32 ssa_11 = intrinsic load_uniform (ssa_7) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_12 = fmul ssa_10.x, ssa_11.x
	vec1 32 ssa_13 = fmul ssa_10.y, ssa_11.y
	vec1 32 ssa_14 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_15 = intrinsic load_uniform (ssa_14) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_16 = fadd ssa_12, ssa_15.x
	vec1 32 ssa_17 = fadd ssa_13, ssa_15.y
	vec4 32 ssa_18 = vec4 ssa_16, ssa_17, ssa_7, ssa_6
	intrinsic store_output (ssa_18, ssa_7) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	intrinsic store_output (ssa_8, ssa_7) (32, 3, 0, 160, 160) /* base=32 */ /* wrmask=xy */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	intrinsic store_output (ssa_9, ssa_7) (33, 15, 0, 160, 161) /* base=33 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_2 = intrinsic load_input (ssa_1) (1, 0, 160, 145) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=1 */
	vec4 32 ssa_3 = intrinsic load_input (ssa_1) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec2 32 ssa_4 = intrinsic load_input (ssa_1) (0, 0, 160, 144) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=1 */
	vec2 32 ssa_5 = intrinsic load_uniform (ssa_1) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_6 = fmul ssa_4.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_4.y, ssa_5.y
	vec1 32 ssa_8 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_9 = intrinsic load_uniform (ssa_8) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_10 = fadd ssa_6, ssa_9.x
	vec1 32 ssa_11 = fadd ssa_7, ssa_9.y
	vec4 32 ssa_12 = vec4 ssa_10, ssa_11, ssa_1, ssa_0
	intrinsic store_output (ssa_12, ssa_1) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	intrinsic store_output (ssa_2, ssa_1) (32, 3, 0, 160, 160) /* base=32 */ /* wrmask=xy */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	intrinsic store_output (ssa_3, ssa_1) (33, 15, 0, 160, 161) /* base=33 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_load_store_vectorize
brw_nir_lower_mem_access_bit_sizes
nir_lower_int64
brw_nir_opt_peephole_ffma
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_2 = intrinsic load_input (ssa_1) (1, 0, 160, 145) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=1 */
	vec4 32 ssa_3 = intrinsic load_input (ssa_1) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec2 32 ssa_4 = intrinsic load_input (ssa_1) (0, 0, 160, 144) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=1 */
	vec2 32 ssa_5 = intrinsic load_uniform (ssa_1) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_6 = fmul ssa_4.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_4.y, ssa_5.y
	vec1 32 ssa_8 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_9 = intrinsic load_uniform (ssa_8) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_13 = ffma ssa_4.x, ssa_5.x, ssa_9.x
	vec1 32 ssa_14 = ffma ssa_4.y, ssa_5.y, ssa_9.y
	vec4 32 ssa_12 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_output (ssa_12, ssa_1) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	intrinsic store_output (ssa_2, ssa_1) (32, 3, 0, 160, 160) /* base=32 */ /* wrmask=xy */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	intrinsic store_output (ssa_3, ssa_1) (33, 15, 0, 160, 161) /* base=33 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_comparison_pre
nir_opt_algebraic_late
brw_nir_lower_conversions
nir_lower_alu_to_scalar
nir_opt_algebraic_distribute_src_mods
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 16
shared: 0
decl_var shader_in INTERP_MODE_NONE vec2 inUV (VERT_ATTRIB_GENERIC1.xy, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec4 inColor (VERT_ATTRIB_GENERIC2.xyzw, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec2 inPos (VERT_ATTRIB_GENERIC0.xy, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUV@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@1 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec2 outUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_2 = intrinsic load_input (ssa_1) (1, 0, 160, 145) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=1 */
	vec4 32 ssa_3 = intrinsic load_input (ssa_1) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec2 32 ssa_4 = intrinsic load_input (ssa_1) (0, 0, 160, 144) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=1 */
	vec2 32 ssa_5 = intrinsic load_uniform (ssa_1) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_8 = load_const (0x00000008 /* 0.000000 */)
	vec2 32 ssa_9 = intrinsic load_uniform (ssa_8) (0, 16, 0) /* base=0 */ /* range=16 */ /* type=invalid */
	vec1 32 ssa_13 = ffma ssa_4.x, ssa_5.x, ssa_9.x
	vec1 32 ssa_14 = ffma ssa_4.y, ssa_5.y, ssa_9.y
	vec4 32 ssa_12 = vec4 ssa_13, ssa_14, ssa_1, ssa_0
	intrinsic store_output (ssa_12, ssa_1) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	intrinsic store_output (ssa_2, ssa_1) (32, 3, 0, 160, 160) /* base=32 */ /* wrmask=xy */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUV */
	intrinsic store_output (ssa_3, ssa_1) (33, 15, 0, 160, 161) /* base=33 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}


Instructions before scheduling (reg_alloc 0)
{  5}    0: mad(8) vgrf3+1.0:F, g2<0>:F, g2<0>:F, g3:F 
{  5}    1: mad(8) vgrf3+2.0:F, g2<0>:F, g2<0>:F, g4:F 
{  5}    2: mov(8) vgrf3+0.0:UD, g1:UD NoMask 
{  5}    3: mov(8) vgrf3+3.0:F, 0f 
{  5}    4: mov(8) vgrf3+4.0:F, 1f 
{  5}    5: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf3:F 
{  9}    6: mov(8) vgrf4+0.0:UD, g1:UD NoMask 
{  9}    7: mov(8) vgrf4+1.0:F, g7:F 
{  9}    8: mov(8) vgrf4+2.0:F, g8:F 
{  9}    9: mov(8) vgrf4+5.0:F, g11:F 
{  9}   10: mov(8) vgrf4+6.0:F, g12:F 
{  9}   11: mov(8) vgrf4+7.0:F, g13:F 
{  9}   12: mov(8) vgrf4+8.0:F, g14:F 
{  9}   13: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf4:F 
Maximum   9 registers live at once.
clock    2, scheduled: mad(8) vgrf3+1.0:F, g2<0>:F, g2<0>:F, g3:F 
(register pressure 24)
	child 0, 5 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf3:F 
clock    4, scheduled: mad(8) vgrf3+2.0:F, g2<0>:F, g2<0>:F, g4:F 
(register pressure 23)
	child 0, 4 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf3:F 
clock    6, scheduled: mov(8) vgrf3+0.0:UD, g1:UD NoMask 
(register pressure 23)
	child 0, 3 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf3:F 
clock    8, scheduled: mov(8) vgrf3+3.0:F, 0f 
(register pressure 23)
	child 0, 2 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf3:F 
clock   10, scheduled: mov(8) vgrf3+4.0:F, 1f 
(register pressure 23)
	child 0, 1 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf3:F 
		now available
clock   13, scheduled: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf3:F 
(register pressure 18)
	child 7, 8 parents: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf4:F 
	child 6, 1 parents: mov(8) vgrf4+8.0:F, g14:F 
		now available
	child 5, 1 parents: mov(8) vgrf4+7.0:F, g13:F 
		now available
	child 4, 1 parents: mov(8) vgrf4+6.0:F, g12:F 
		now available
	child 3, 1 parents: mov(8) vgrf4+5.0:F, g11:F 
		now available
	child 2, 1 parents: mov(8) vgrf4+2.0:F, g8:F 
		now available
	child 1, 1 parents: mov(8) vgrf4+1.0:F, g7:F 
		now available
	child 0, 1 parents: mov(8) vgrf4+0.0:UD, g1:UD NoMask 
		now available
clock   15, scheduled: mov(8) vgrf4+0.0:UD, g1:UD NoMask 
(register pressure 18)
	child 0, 7 parents: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf4:F 
clock   17, scheduled: mov(8) vgrf4+1.0:F, g7:F 
(register pressure 17)
	child 0, 6 parents: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf4:F 
clock   19, scheduled: mov(8) vgrf4+2.0:F, g8:F 
(register pressure 16)
	child 0, 5 parents: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf4:F 
clock   21, scheduled: mov(8) vgrf4+5.0:F, g11:F 
(register pressure 15)
	child 0, 4 parents: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf4:F 
clock   23, scheduled: mov(8) vgrf4+6.0:F, g12:F 
(register pressure 14)
	child 0, 3 parents: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf4:F 
clock   25, scheduled: mov(8) vgrf4+7.0:F, g13:F 
(register pressure 13)
	child 0, 2 parents: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf4:F 
clock   27, scheduled: mov(8) vgrf4+8.0:F, g14:F 
(register pressure 12)
	child 0, 1 parents: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf4:F 
		now available
clock   30, scheduled: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf4:F 
(register pressure 3)

Instructions after scheduling (reg_alloc 0)
{  5}    0: mad(8) vgrf3+1.0:F, g2<0>:F, g2<0>:F, g3:F 
{  5}    1: mad(8) vgrf3+2.0:F, g2<0>:F, g2<0>:F, g4:F 
{  5}    2: mov(8) vgrf3+0.0:UD, g1:UD NoMask 
{  5}    3: mov(8) vgrf3+3.0:F, 0f 
{  5}    4: mov(8) vgrf3+4.0:F, 1f 
{  5}    5: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf3:F 
{  9}    6: mov(8) vgrf4+0.0:UD, g1:UD NoMask 
{  9}    7: mov(8) vgrf4+1.0:F, g7:F 
{  9}    8: mov(8) vgrf4+2.0:F, g8:F 
{  9}    9: mov(8) vgrf4+5.0:F, g11:F 
{  9}   10: mov(8) vgrf4+6.0:F, g12:F 
{  9}   11: mov(8) vgrf4+7.0:F, g13:F 
{  9}   12: mov(8) vgrf4+8.0:F, g14:F 
{  9}   13: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf4:F 
Maximum   9 registers live at once.
clock    2, scheduled: mad(8) vgrf16:F, g2<0>:F, g2<0>:F, g3:F 
	child 0, 5 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf15+0.0:F 
clock    4, scheduled: mad(8) vgrf17+0.0:F, g2<0>:F, g2<0>:F, g4:F 
	child 0, 4 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf15+0.0:F 
clock    6, scheduled: mov(8) vgrf15:UD, g1:UD NoMask 
	child 0, 3 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf15+0.0:F 
clock    8, scheduled: mov(8) vgrf18+0.0:F, 0f 
	child 0, 2 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf15+0.0:F 
clock   10, scheduled: mov(8) vgrf19:F, 1f 
	child 0, 1 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf15+0.0:F 
		now available
clock   26, scheduled: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf15+0.0:F 
	child 7, 8 parents: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf118+0.0:F 
	child 6, 1 parents: mov(8) vgrf126+0.0:F, g14:F 
		now available
	child 5, 1 parents: mov(8) vgrf125+0.0:F, g13:F 
		now available
	child 4, 1 parents: mov(8) vgrf124+0.0:F, g12:F 
		now available
	child 3, 1 parents: mov(8) vgrf123+0.0:F, g11:F 
		now available
	child 2, 1 parents: mov(8) vgrf120+0.0:F, g8:F 
		now available
	child 1, 1 parents: mov(8) vgrf119+0.0:F, g7:F 
		now available
	child 0, 1 parents: mov(8) vgrf118+0.0:UD, g1:UD NoMask 
		now available
clock   28, scheduled: mov(8) vgrf118+0.0:UD, g1:UD NoMask 
	child 0, 7 parents: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf118+0.0:F 
clock   30, scheduled: mov(8) vgrf119+0.0:F, g7:F 
	child 0, 6 parents: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf118+0.0:F 
clock   32, scheduled: mov(8) vgrf120+0.0:F, g8:F 
	child 0, 5 parents: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf118+0.0:F 
clock   34, scheduled: mov(8) vgrf123+0.0:F, g11:F 
	child 0, 4 parents: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf118+0.0:F 
clock   36, scheduled: mov(8) vgrf124+0.0:F, g12:F 
	child 0, 3 parents: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf118+0.0:F 
clock   38, scheduled: mov(8) vgrf125+0.0:F, g13:F 
	child 0, 2 parents: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf118+0.0:F 
clock   40, scheduled: mov(8) vgrf126+0.0:F, g14:F 
	child 0, 1 parents: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf118+0.0:F 
		now available
clock   56, scheduled: gen8_urb_write_simd8(8) (mlen: 9) (EOT) (null):UD, vgrf118+0.0:F 
nir_opt_move
nir_lower_bool_to_int32
nir_copy_prop
nir_opt_dce
nir_lower_locals_to_regs
nir_convert_from_ssa
nir_opt_dce
nir_opt_rematerialize_compares
brw_nir_apply_sampler_key
nir_lower_subgroups
brw_nir_demote_sample_qualifiers
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@0 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@1 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@2 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUV@3 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_21 = deref_var &inColor@5 (shader_in vec4) 
	vec1 32 ssa_33 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_34 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_51 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_35 = intrinsic load_interpolated_input (ssa_34, ssa_51) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_22 = mov ssa_35.x
	vec1 32 ssa_2 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_23 = deref_var &inColor@5 (shader_in vec4) 
	vec1 32 ssa_36 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_37 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_52 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_38 = intrinsic load_interpolated_input (ssa_37, ssa_52) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_24 = mov ssa_38.y
	vec1 32 ssa_4 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_25 = deref_var &inColor@5 (shader_in vec4) 
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_40 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_53 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_41 = intrinsic load_interpolated_input (ssa_40, ssa_53) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_26 = mov ssa_41.z
	vec1 32 ssa_6 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_27 = deref_var &inColor@5 (shader_in vec4) 
	vec1 32 ssa_42 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_43 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_44 = intrinsic load_interpolated_input (ssa_43, ssa_54) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_28 = mov ssa_44.w
	vec1 32 ssa_8 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_9 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_29 = deref_var &inUV@4 (shader_in vec2) 
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_46 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_55 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_47 = intrinsic load_interpolated_input (ssa_46, ssa_55) (32, 0, 160) /* base=32 */ /* component=0 */ /* location=32 slots=1 */	/* inUV */
	vec1 32 ssa_30 = mov ssa_47.x
	vec1 32 ssa_11 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_31 = deref_var &inUV@4 (shader_in vec2) 
	vec1 32 ssa_48 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_49 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_50 = intrinsic load_interpolated_input (ssa_49, ssa_56) (32, 0, 160) /* base=32 */ /* component=0 */ /* location=32 slots=1 */	/* inUV */
	vec1 32 ssa_32 = mov ssa_50.y
	vec2 32 ssa_13 = vec2 ssa_30, ssa_32
	vec4 32 ssa_14 = (float)tex ssa_13 (coord), 2 (texture), 0 (sampler)
	vec1 32 ssa_15 = fmul ssa_22, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_24, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_26, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_28, ssa_14.w
	vec1 32 ssa_19 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	vec1 32 ssa_57 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_20, ssa_57) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}

brw_nir_move_interpolation_to_top
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@0 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@1 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@2 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUV@3 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_21 = deref_var &inColor@5 (shader_in vec4) 
	vec1 32 ssa_33 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_34 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_51 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_35 = intrinsic load_interpolated_input (ssa_34, ssa_51) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_22 = mov ssa_35.x
	vec1 32 ssa_2 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_23 = deref_var &inColor@5 (shader_in vec4) 
	vec1 32 ssa_36 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_37 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_52 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_38 = intrinsic load_interpolated_input (ssa_37, ssa_52) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_24 = mov ssa_38.y
	vec1 32 ssa_4 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_25 = deref_var &inColor@5 (shader_in vec4) 
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_40 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_53 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_41 = intrinsic load_interpolated_input (ssa_40, ssa_53) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_26 = mov ssa_41.z
	vec1 32 ssa_6 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_27 = deref_var &inColor@5 (shader_in vec4) 
	vec1 32 ssa_42 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_43 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_44 = intrinsic load_interpolated_input (ssa_43, ssa_54) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_28 = mov ssa_44.w
	vec1 32 ssa_8 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_9 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_29 = deref_var &inUV@4 (shader_in vec2) 
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_46 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_55 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_47 = intrinsic load_interpolated_input (ssa_46, ssa_55) (32, 0, 160) /* base=32 */ /* component=0 */ /* location=32 slots=1 */	/* inUV */
	vec1 32 ssa_30 = mov ssa_47.x
	vec1 32 ssa_11 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_31 = deref_var &inUV@4 (shader_in vec2) 
	vec1 32 ssa_48 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_49 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_50 = intrinsic load_interpolated_input (ssa_49, ssa_56) (32, 0, 160) /* base=32 */ /* component=0 */ /* location=32 slots=1 */	/* inUV */
	vec1 32 ssa_32 = mov ssa_50.y
	vec2 32 ssa_13 = vec2 ssa_30, ssa_32
	vec4 32 ssa_14 = (float)tex ssa_13 (coord), 2 (texture), 0 (sampler)
	vec1 32 ssa_15 = fmul ssa_22, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_24, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_26, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_28, ssa_14.w
	vec1 32 ssa_19 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	vec1 32 ssa_57 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_20, ssa_57) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}

brw_nir_lower_scoped_barriers
nir_opt_combine_memory_barriers
nir_opt_algebraic_before_ffma
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@0 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@1 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@2 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUV@3 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_21 = deref_var &inColor@5 (shader_in vec4) 
	vec1 32 ssa_33 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_34 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_51 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_35 = intrinsic load_interpolated_input (ssa_34, ssa_51) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_22 = mov ssa_35.x
	vec1 32 ssa_2 = deref_var &inColor@0 (shader_in float) 
	vec1 32 ssa_23 = deref_var &inColor@5 (shader_in vec4) 
	vec1 32 ssa_36 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_37 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_52 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_38 = intrinsic load_interpolated_input (ssa_37, ssa_52) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_24 = mov ssa_38.y
	vec1 32 ssa_4 = deref_var &inColor@1 (shader_in float) 
	vec1 32 ssa_25 = deref_var &inColor@5 (shader_in vec4) 
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_40 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_53 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_41 = intrinsic load_interpolated_input (ssa_40, ssa_53) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_26 = mov ssa_41.z
	vec1 32 ssa_6 = deref_var &inColor@2 (shader_in float) 
	vec1 32 ssa_27 = deref_var &inColor@5 (shader_in vec4) 
	vec1 32 ssa_42 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_43 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_44 = intrinsic load_interpolated_input (ssa_43, ssa_54) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_28 = mov ssa_44.w
	vec1 32 ssa_8 = deref_var &fontSampler (uniform sampler2D) 
	vec1 32 ssa_9 = deref_var &inUV (shader_in float) 
	vec1 32 ssa_29 = deref_var &inUV@4 (shader_in vec2) 
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_46 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_55 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_47 = intrinsic load_interpolated_input (ssa_46, ssa_55) (32, 0, 160) /* base=32 */ /* component=0 */ /* location=32 slots=1 */	/* inUV */
	vec1 32 ssa_30 = mov ssa_47.x
	vec1 32 ssa_11 = deref_var &inUV@3 (shader_in float) 
	vec1 32 ssa_31 = deref_var &inUV@4 (shader_in vec2) 
	vec1 32 ssa_48 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_49 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_50 = intrinsic load_interpolated_input (ssa_49, ssa_56) (32, 0, 160) /* base=32 */ /* component=0 */ /* location=32 slots=1 */	/* inUV */
	vec1 32 ssa_32 = mov ssa_50.y
	vec2 32 ssa_13 = vec2 ssa_47.x, ssa_50.y
	vec4 32 ssa_14 = (float)tex ssa_13 (coord), 2 (texture), 0 (sampler)
	vec1 32 ssa_15 = fmul ssa_35.x, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_38.y, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_41.z, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_44.w, ssa_14.w
	vec1 32 ssa_19 = deref_var &outColor (shader_out vec4) 
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	vec1 32 ssa_57 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_20, ssa_57) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@0 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@1 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@2 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUV@3 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec2 32 ssa_34 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_51 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_35 = intrinsic load_interpolated_input (ssa_34, ssa_51) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec2 32 ssa_37 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_52 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_38 = intrinsic load_interpolated_input (ssa_37, ssa_52) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec2 32 ssa_40 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_53 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_41 = intrinsic load_interpolated_input (ssa_40, ssa_53) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec2 32 ssa_43 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_44 = intrinsic load_interpolated_input (ssa_43, ssa_54) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec2 32 ssa_46 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_55 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_47 = intrinsic load_interpolated_input (ssa_46, ssa_55) (32, 0, 160) /* base=32 */ /* component=0 */ /* location=32 slots=1 */	/* inUV */
	vec2 32 ssa_49 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_50 = intrinsic load_interpolated_input (ssa_49, ssa_56) (32, 0, 160) /* base=32 */ /* component=0 */ /* location=32 slots=1 */	/* inUV */
	vec2 32 ssa_13 = vec2 ssa_47.x, ssa_50.y
	vec4 32 ssa_14 = (float)tex ssa_13 (coord), 2 (texture), 0 (sampler)
	vec1 32 ssa_15 = fmul ssa_35.x, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_38.y, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_41.z, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_44.w, ssa_14.w
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	vec1 32 ssa_57 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_20, ssa_57) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@0 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@1 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@2 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUV@3 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec2 32 ssa_34 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_51 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_35 = intrinsic load_interpolated_input (ssa_34, ssa_51) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec2 32 ssa_47 = intrinsic load_interpolated_input (ssa_34, ssa_51) (32, 0, 160) /* base=32 */ /* component=0 */ /* location=32 slots=1 */	/* inUV */
	vec2 32 ssa_13 = vec2 ssa_47.x, ssa_47.y
	vec4 32 ssa_14 = (float)tex ssa_13 (coord), 2 (texture), 0 (sampler)
	vec1 32 ssa_15 = fmul ssa_35.x, ssa_14.x
	vec1 32 ssa_16 = fmul ssa_35.y, ssa_14.y
	vec1 32 ssa_17 = fmul ssa_35.z, ssa_14.z
	vec1 32 ssa_18 = fmul ssa_35.w, ssa_14.w
	vec4 32 ssa_20 = vec4 ssa_15, ssa_16, ssa_17, ssa_18
	intrinsic store_output (ssa_20, ssa_51) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@0 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@1 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@2 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUV@3 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec2 32 ssa_0 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_2 = intrinsic load_interpolated_input (ssa_0, ssa_1) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec2 32 ssa_3 = intrinsic load_interpolated_input (ssa_0, ssa_1) (32, 0, 160) /* base=32 */ /* component=0 */ /* location=32 slots=1 */	/* inUV */
	vec2 32 ssa_4 = vec2 ssa_3.x, ssa_3.y
	vec4 32 ssa_5 = (float)tex ssa_3 (coord), 2 (texture), 0 (sampler)
	vec1 32 ssa_6 = fmul ssa_2.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_2.y, ssa_5.y
	vec1 32 ssa_8 = fmul ssa_2.z, ssa_5.z
	vec1 32 ssa_9 = fmul ssa_2.w, ssa_5.w
	vec4 32 ssa_10 = vec4 ssa_6, ssa_7, ssa_8, ssa_9
	intrinsic store_output (ssa_10, ssa_1) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var uniform INTERP_MODE_NONE restrict sampler2D fontSampler (~0, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@0 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@1 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@2 (VARYING_SLOT_VAR1.w, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUV (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUV@3 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec2 inUV@4 (VARYING_SLOT_VAR0.xy, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec4 inColor@5 (VARYING_SLOT_VAR1.xyzw, 33, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec2 32 ssa_0 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_2 = intrinsic load_interpolated_input (ssa_0, ssa_1) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec2 32 ssa_3 = intrinsic load_interpolated_input (ssa_0, ssa_1) (32, 0, 160) /* base=32 */ /* component=0 */ /* location=32 slots=1 */	/* inUV */
	vec4 32 ssa_5 = (float)tex ssa_3 (coord), 2 (texture), 0 (sampler)
	vec1 32 ssa_6 = fmul ssa_2.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_2.y, ssa_5.y
	vec1 32 ssa_8 = fmul ssa_2.z, ssa_5.z
	vec1 32 ssa_9 = fmul ssa_2.w, ssa_5.w
	vec4 32 ssa_10 = vec4 ssa_6, ssa_7, ssa_8, ssa_9
	intrinsic store_output (ssa_10, ssa_1) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outColor */
	/* succs: block_1 */
	block block_1:
}


Instructions before scheduling (reg_alloc 0)
{  1}    0: linterp(8) vgrf4:F, g2:F, g6<0>:F 
{  2}    1: linterp(8) vgrf5:F, g2:F, g6<0>:F 
{  3}    2: linterp(8) vgrf6:F, g2:F, g7<0>:F 
{  4}    3: linterp(8) vgrf0:F, g2:F, g7<0>:F 
{  6}    4: linterp(8) vgrf18+0.0:F, g2:F, g4<0>:F 
{  6}    5: linterp(8) vgrf18+1.0:F, g2:F, g4<0>:F 
{ 10}    6: send(8) (mlen: 2) vgrf2:F, 0u, 0u, vgrf18:F 
{ 12}    7: mul(8) vgrf19+0.0:F, vgrf4:F, vgrf2+0.0:F 
{ 11}    8: mul(8) vgrf19+1.0:F, vgrf5:F, vgrf2+1.0:F 
{ 10}    9: mul(8) vgrf19+2.0:F, vgrf6:F, vgrf2+2.0:F 
{  9}   10: mul(8) vgrf19+3.0:F, vgrf0:F, vgrf2+3.0:F 
{  4}   11: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf19:F 
Maximum  12 registers live at once.
clock    2, scheduled: linterp(8) vgrf4:F, g2:F, g6<0>:F 
(register pressure 8)
	child 1, 11 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf19:F 
	child 0, 2 parents: mul(8) vgrf19+0.0:F, vgrf4:F, vgrf2+0.0:F 
clock    4, scheduled: linterp(8) vgrf5:F, g2:F, g6<0>:F 
(register pressure 8)
	child 1, 10 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf19:F 
	child 0, 2 parents: mul(8) vgrf19+1.0:F, vgrf5:F, vgrf2+1.0:F 
clock    6, scheduled: linterp(8) vgrf6:F, g2:F, g7<0>:F 
(register pressure 9)
	child 1, 9 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf19:F 
	child 0, 2 parents: mul(8) vgrf19+2.0:F, vgrf6:F, vgrf2+2.0:F 
clock    8, scheduled: linterp(8) vgrf0:F, g2:F, g7<0>:F 
(register pressure 9)
	child 1, 8 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf19:F 
	child 0, 2 parents: mul(8) vgrf19+3.0:F, vgrf0:F, vgrf2+3.0:F 
clock   10, scheduled: linterp(8) vgrf18+0.0:F, g2:F, g4<0>:F 
(register pressure 11)
	child 1, 7 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf19:F 
	child 0, 2 parents: send(8) (mlen: 2) vgrf2:F, 0u, 0u, vgrf18:F 
clock   12, scheduled: linterp(8) vgrf18+1.0:F, g2:F, g4<0>:F 
(register pressure 8)
	child 1, 6 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf19:F 
	child 0, 1 parents: send(8) (mlen: 2) vgrf2:F, 0u, 0u, vgrf18:F 
		now available
clock   15, scheduled: send(8) (mlen: 2) vgrf2:F, 0u, 0u, vgrf18:F 
(register pressure 10)
	child 4, 5 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf19:F 
	child 3, 1 parents: mul(8) vgrf19+3.0:F, vgrf0:F, vgrf2+3.0:F 
		now available
	child 2, 1 parents: mul(8) vgrf19+2.0:F, vgrf6:F, vgrf2+2.0:F 
		now available
	child 1, 1 parents: mul(8) vgrf19+1.0:F, vgrf5:F, vgrf2+1.0:F 
		now available
	child 0, 1 parents: mul(8) vgrf19+0.0:F, vgrf4:F, vgrf2+0.0:F 
		now available
clock   18, scheduled: mul(8) vgrf19+0.0:F, vgrf4:F, vgrf2+0.0:F 
(register pressure 13)
	child 0, 4 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf19:F 
clock   20, scheduled: mul(8) vgrf19+1.0:F, vgrf5:F, vgrf2+1.0:F 
(register pressure 12)
	child 0, 3 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf19:F 
clock   22, scheduled: mul(8) vgrf19+2.0:F, vgrf6:F, vgrf2+2.0:F 
(register pressure 11)
	child 0, 2 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf19:F 
clock   24, scheduled: mul(8) vgrf19+3.0:F, vgrf0:F, vgrf2+3.0:F 
(register pressure 6)
	child 0, 1 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf19:F 
		now available
clock   27, scheduled: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf19:F 
(register pressure 2)

Instructions after scheduling (reg_alloc 0)
{  1}    0: linterp(8) vgrf4:F, g2:F, g6<0>:F 
{  2}    1: linterp(8) vgrf5:F, g2:F, g6<0>:F 
{  3}    2: linterp(8) vgrf6:F, g2:F, g7<0>:F 
{  4}    3: linterp(8) vgrf0:F, g2:F, g7<0>:F 
{  6}    4: linterp(8) vgrf18+0.0:F, g2:F, g4<0>:F 
{  6}    5: linterp(8) vgrf18+1.0:F, g2:F, g4<0>:F 
{ 10}    6: send(8) (mlen: 2) vgrf2:F, 0u, 0u, vgrf18:F 
{ 12}    7: mul(8) vgrf19+0.0:F, vgrf4:F, vgrf2+0.0:F 
{ 11}    8: mul(8) vgrf19+1.0:F, vgrf5:F, vgrf2+1.0:F 
{ 10}    9: mul(8) vgrf19+2.0:F, vgrf6:F, vgrf2+2.0:F 
{  9}   10: mul(8) vgrf19+3.0:F, vgrf0:F, vgrf2+3.0:F 
{  4}   11: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf19:F 
Maximum  12 registers live at once.
clock    2, scheduled: linterp(8) vgrf10:F, g2:F, g6<0>:F 
	child 2, 2 parents: linterp(8) vgrf6:F, g2:F, g4<0>:F 
	child 1, 11 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 2 parents: mul(8) vgrf123+0.0:F, vgrf10:F, vgrf6:F 
clock    4, scheduled: linterp(8) vgrf11:F, g2:F, g6<0>:F 
	child 2, 1 parents: linterp(8) vgrf6:F, g2:F, g4<0>:F 
		now available
	child 1, 10 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 2 parents: mul(8) vgrf124+0.0:F, vgrf11:F, vgrf7:F 
clock    6, scheduled: linterp(8) vgrf12:F, g2:F, g7<0>:F 
	child 2, 2 parents: linterp(8) vgrf7:F, g2:F, g4<0>:F 
	child 1, 9 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 2 parents: mul(8) vgrf125+0.0:F, vgrf12:F, vgrf8:F 
clock    8, scheduled: linterp(8) vgrf5:F, g2:F, g7<0>:F 
	child 2, 1 parents: linterp(8) vgrf7:F, g2:F, g4<0>:F 
		now available
	child 1, 8 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 2 parents: mul(8) vgrf126+0.0:F, vgrf5:F, vgrf9:F 
clock   10, scheduled: linterp(8) vgrf6:F, g2:F, g4<0>:F 
	child 1, 7 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 2 parents: send(8) (mlen: 2) vgrf6+0.0:F, 0u, 0u, vgrf6+0.0:F 
clock   12, scheduled: linterp(8) vgrf7:F, g2:F, g4<0>:F 
	child 1, 6 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: send(8) (mlen: 2) vgrf6+0.0:F, 0u, 0u, vgrf6+0.0:F 
		now available
clock   28, scheduled: send(8) (mlen: 2) vgrf6+0.0:F, 0u, 0u, vgrf6+0.0:F 
	child 4, 5 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 3, 1 parents: mul(8) vgrf126+0.0:F, vgrf5:F, vgrf9:F 
		now available
	child 2, 1 parents: mul(8) vgrf125+0.0:F, vgrf12:F, vgrf8:F 
		now available
	child 1, 1 parents: mul(8) vgrf124+0.0:F, vgrf11:F, vgrf7:F 
		now available
	child 0, 1 parents: mul(8) vgrf123+0.0:F, vgrf10:F, vgrf6:F 
		now available
clock  230, scheduled: mul(8) vgrf123+0.0:F, vgrf10:F, vgrf6:F 
	child 0, 4 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
clock  232, scheduled: mul(8) vgrf124+0.0:F, vgrf11:F, vgrf7:F 
	child 0, 3 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
clock  234, scheduled: mul(8) vgrf125+0.0:F, vgrf12:F, vgrf8:F 
	child 0, 2 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
clock  236, scheduled: mul(8) vgrf126+0.0:F, vgrf5:F, vgrf9:F 
	child 0, 1 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
		now available
clock  252, scheduled: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 

Instructions before scheduling (reg_alloc 0)
{  2}    0: linterp(16) vgrf5:F, g2:F, g8<0>:F 
{  4}    1: linterp(16) vgrf6:F, g2:F, g8<0>:F 
{  6}    2: linterp(16) vgrf7:F, g2:F, g9<0>:F 
{  8}    3: linterp(16) vgrf1:F, g2:F, g9<0>:F 
{ 12}    4: linterp(16) vgrf25+0.0:F, g2:F, g6<0>:F 
{ 12}    5: linterp(16) vgrf25+2.0:F, g2:F, g6<0>:F 
{ 20}    6: send(16) (mlen: 4) vgrf3:F, 0u, 0u, vgrf25:F 
{ 24}    7: mul(16) vgrf26+0.0:F, vgrf5:F, vgrf3+0.0:F 
{ 22}    8: mul(16) vgrf26+2.0:F, vgrf6:F, vgrf3+2.0:F 
{ 20}    9: mul(16) vgrf26+4.0:F, vgrf7:F, vgrf3+4.0:F 
{ 18}   10: mul(16) vgrf26+6.0:F, vgrf1:F, vgrf3+6.0:F 
{  8}   11: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf26:F 
Maximum  24 registers live at once.
clock    4, scheduled: linterp(16) vgrf5:F, g2:F, g8<0>:F 
(register pressure 11)
	child 1, 11 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf26:F 
	child 0, 2 parents: mul(16) vgrf26+0.0:F, vgrf5:F, vgrf3+0.0:F 
clock    8, scheduled: linterp(16) vgrf6:F, g2:F, g8<0>:F 
(register pressure 12)
	child 1, 10 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf26:F 
	child 0, 2 parents: mul(16) vgrf26+2.0:F, vgrf6:F, vgrf3+2.0:F 
clock   12, scheduled: linterp(16) vgrf7:F, g2:F, g9<0>:F 
(register pressure 14)
	child 1, 9 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf26:F 
	child 0, 2 parents: mul(16) vgrf26+4.0:F, vgrf7:F, vgrf3+4.0:F 
clock   16, scheduled: linterp(16) vgrf1:F, g2:F, g9<0>:F 
(register pressure 15)
	child 1, 8 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf26:F 
	child 0, 2 parents: mul(16) vgrf26+6.0:F, vgrf1:F, vgrf3+6.0:F 
clock   20, scheduled: linterp(16) vgrf25+0.0:F, g2:F, g6<0>:F 
(register pressure 19)
	child 1, 7 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf26:F 
	child 0, 2 parents: send(16) (mlen: 4) vgrf3:F, 0u, 0u, vgrf25:F 
clock   24, scheduled: linterp(16) vgrf25+2.0:F, g2:F, g6<0>:F 
(register pressure 14)
	child 1, 6 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf26:F 
	child 0, 1 parents: send(16) (mlen: 4) vgrf3:F, 0u, 0u, vgrf25:F 
		now available
clock   29, scheduled: send(16) (mlen: 4) vgrf3:F, 0u, 0u, vgrf25:F 
(register pressure 18)
	child 4, 5 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf26:F 
	child 3, 1 parents: mul(16) vgrf26+6.0:F, vgrf1:F, vgrf3+6.0:F 
		now available
	child 2, 1 parents: mul(16) vgrf26+4.0:F, vgrf7:F, vgrf3+4.0:F 
		now available
	child 1, 1 parents: mul(16) vgrf26+2.0:F, vgrf6:F, vgrf3+2.0:F 
		now available
	child 0, 1 parents: mul(16) vgrf26+0.0:F, vgrf5:F, vgrf3+0.0:F 
		now available
clock   34, scheduled: mul(16) vgrf26+0.0:F, vgrf5:F, vgrf3+0.0:F 
(register pressure 24)
	child 0, 4 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf26:F 
clock   38, scheduled: mul(16) vgrf26+2.0:F, vgrf6:F, vgrf3+2.0:F 
(register pressure 22)
	child 0, 3 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf26:F 
clock   42, scheduled: mul(16) vgrf26+4.0:F, vgrf7:F, vgrf3+4.0:F 
(register pressure 20)
	child 0, 2 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf26:F 
clock   46, scheduled: mul(16) vgrf26+6.0:F, vgrf1:F, vgrf3+6.0:F 
(register pressure 10)
	child 0, 1 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf26:F 
		now available
clock   51, scheduled: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf26:F 
(register pressure 2)

Instructions after scheduling (reg_alloc 0)
{  2}    0: linterp(16) vgrf5:F, g2:F, g8<0>:F 
{  4}    1: linterp(16) vgrf6:F, g2:F, g8<0>:F 
{  6}    2: linterp(16) vgrf7:F, g2:F, g9<0>:F 
{  8}    3: linterp(16) vgrf1:F, g2:F, g9<0>:F 
{ 12}    4: linterp(16) vgrf25+0.0:F, g2:F, g6<0>:F 
{ 12}    5: linterp(16) vgrf25+2.0:F, g2:F, g6<0>:F 
{ 20}    6: send(16) (mlen: 4) vgrf3:F, 0u, 0u, vgrf25:F 
{ 24}    7: mul(16) vgrf26+0.0:F, vgrf5:F, vgrf3+0.0:F 
{ 22}    8: mul(16) vgrf26+2.0:F, vgrf6:F, vgrf3+2.0:F 
{ 20}    9: mul(16) vgrf26+4.0:F, vgrf7:F, vgrf3+4.0:F 
{ 18}   10: mul(16) vgrf26+6.0:F, vgrf1:F, vgrf3+6.0:F 
{  8}   11: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf26:F 
Maximum  24 registers live at once.
clock    4, scheduled: linterp(16) vgrf17:F, g2:F, g8<0>:F 
	child 2, 2 parents: linterp(16) vgrf7:F, g2:F, g9<0>:F 
	child 1, 11 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 2 parents: mul(16) vgrf119+0.0:F, vgrf17:F, vgrf9+0.0:F 
clock    8, scheduled: linterp(16) vgrf19:F, g2:F, g8<0>:F 
	child 2, 1 parents: linterp(16) vgrf7:F, g2:F, g9<0>:F 
		now available
	child 1, 10 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 2 parents: mul(16) vgrf121+0.0:F, vgrf19:F, vgrf11+0.0:F 
clock   12, scheduled: linterp(16) vgrf21:F, g2:F, g9<0>:F 
	child 2, 4 parents: send(16) (mlen: 4) vgrf9+0.0:F, 0u, 0u, vgrf23+0.0:F 
	child 1, 9 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 2 parents: mul(16) vgrf123+0.0:F, vgrf21:F, vgrf13+0.0:F 
clock   16, scheduled: linterp(16) vgrf23:F, g2:F, g6<0>:F 
	child 1, 8 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 3 parents: send(16) (mlen: 4) vgrf9+0.0:F, 0u, 0u, vgrf23+0.0:F 
clock   20, scheduled: linterp(16) vgrf25+0.0:F, g2:F, g6<0>:F 
	child 1, 7 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 2 parents: send(16) (mlen: 4) vgrf9+0.0:F, 0u, 0u, vgrf23+0.0:F 
clock   24, scheduled: linterp(16) vgrf7:F, g2:F, g9<0>:F 
	child 2, 1 parents: send(16) (mlen: 4) vgrf9+0.0:F, 0u, 0u, vgrf23+0.0:F 
		now available
	child 1, 6 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 2 parents: mul(16) vgrf125+0.0:F, vgrf7:F, vgrf15:F 
clock   38, scheduled: send(16) (mlen: 4) vgrf9+0.0:F, 0u, 0u, vgrf23+0.0:F 
	child 4, 5 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 3, 1 parents: mul(16) vgrf125+0.0:F, vgrf7:F, vgrf15:F 
		now available
	child 2, 1 parents: mul(16) vgrf123+0.0:F, vgrf21:F, vgrf13+0.0:F 
		now available
	child 1, 1 parents: mul(16) vgrf121+0.0:F, vgrf19:F, vgrf11+0.0:F 
		now available
	child 0, 1 parents: mul(16) vgrf119+0.0:F, vgrf17:F, vgrf9+0.0:F 
		now available
clock  242, scheduled: mul(16) vgrf119+0.0:F, vgrf17:F, vgrf9+0.0:F 
	child 0, 4 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
clock  246, scheduled: mul(16) vgrf121+0.0:F, vgrf19:F, vgrf11+0.0:F 
	child 0, 3 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
clock  250, scheduled: mul(16) vgrf123+0.0:F, vgrf21:F, vgrf13+0.0:F 
	child 0, 2 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
clock  254, scheduled: mul(16) vgrf125+0.0:F, vgrf7:F, vgrf15:F 
	child 0, 1 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
		now available
clock  272, scheduled: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 

Instructions before scheduling (reg_alloc 0)
{  2}    0: linterp(16) vgrf23:F, g3:F, g13<0>:F group0 
{  4}    1: linterp(16) vgrf3:F, g7:F, g13<0>:F group16 
{  6}    2: linterp(16) vgrf24:F, g3:F, g13<0>:F group0 
{  8}    3: linterp(16) vgrf4:F, g7:F, g13<0>:F group16 
{ 10}    4: linterp(16) vgrf25:F, g3:F, g14<0>:F group0 
{ 12}    5: linterp(16) vgrf5:F, g7:F, g14<0>:F group16 
{ 14}    6: linterp(16) vgrf12:F, g3:F, g14<0>:F group0 
{ 16}    7: linterp(16) vgrf0:F, g7:F, g14<0>:F group16 
{ 20}    8: linterp(16) vgrf8+0.0:F, g3:F, g11<0>:F group0 
{ 24}    9: linterp(16) vgrf9+0.0:F, g7:F, g11<0>:F group16 
{ 24}   10: linterp(16) vgrf8+2.0:F, g3:F, g11<0>:F group0 
{ 24}   11: linterp(16) vgrf9+2.0:F, g7:F, g11<0>:F group16 
{ 32}   12: send(16) (mlen: 4) vgrf7:F, 0u, 0u, vgrf8:F group0 
{ 36}   13: send(16) (mlen: 4) vgrf6:F, 0u, 0u, vgrf9:F group16 
{ 40}   14: mul(16) vgrf10+0.0:F, vgrf23:F, vgrf7+0.0:F group0 
{ 46}   15: mul(16) vgrf11+0.0:F, vgrf3:F, vgrf6+0.0:F group16 
{ 44}   16: mul(16) vgrf10+2.0:F, vgrf24:F, vgrf7+2.0:F group0 
{ 42}   17: mul(16) vgrf11+2.0:F, vgrf4:F, vgrf6+2.0:F group16 
{ 40}   18: mul(16) vgrf10+4.0:F, vgrf25:F, vgrf7+4.0:F group0 
{ 38}   19: mul(16) vgrf11+4.0:F, vgrf5:F, vgrf6+4.0:F group16 
{ 36}   20: mul(16) vgrf10+6.0:F, vgrf12:F, vgrf7+6.0:F group0 
{ 26}   21: mul(16) vgrf11+6.0:F, vgrf0:F, vgrf6+6.0:F group16 
{ 16}   22: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
{  8}   23: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf11:F group16 
Maximum  46 registers live at once.
clock    4, scheduled: linterp(16) vgrf23:F, g3:F, g13<0>:F group0 
(register pressure 15)
	child 1, 22 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
	child 0, 2 parents: mul(16) vgrf10+0.0:F, vgrf23:F, vgrf7+0.0:F group0 
clock    8, scheduled: linterp(16) vgrf3:F, g7:F, g13<0>:F group16 
(register pressure 17)
	child 1, 21 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
	child 0, 2 parents: mul(16) vgrf11+0.0:F, vgrf3:F, vgrf6+0.0:F group16 
clock   12, scheduled: linterp(16) vgrf24:F, g3:F, g13<0>:F group0 
(register pressure 19)
	child 1, 20 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
	child 0, 2 parents: mul(16) vgrf10+2.0:F, vgrf24:F, vgrf7+2.0:F group0 
clock   16, scheduled: linterp(16) vgrf4:F, g7:F, g13<0>:F group16 
(register pressure 20)
	child 1, 19 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
	child 0, 2 parents: mul(16) vgrf11+2.0:F, vgrf4:F, vgrf6+2.0:F group16 
clock   20, scheduled: linterp(16) vgrf25:F, g3:F, g14<0>:F group0 
(register pressure 22)
	child 1, 18 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
	child 0, 2 parents: mul(16) vgrf10+4.0:F, vgrf25:F, vgrf7+4.0:F group0 
clock   24, scheduled: linterp(16) vgrf5:F, g7:F, g14<0>:F group16 
(register pressure 24)
	child 1, 17 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
	child 0, 2 parents: mul(16) vgrf11+4.0:F, vgrf5:F, vgrf6+4.0:F group16 
clock   28, scheduled: linterp(16) vgrf12:F, g3:F, g14<0>:F group0 
(register pressure 26)
	child 1, 16 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
	child 0, 2 parents: mul(16) vgrf10+6.0:F, vgrf12:F, vgrf7+6.0:F group0 
clock   32, scheduled: linterp(16) vgrf0:F, g7:F, g14<0>:F group16 
(register pressure 27)
	child 1, 15 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
	child 0, 2 parents: mul(16) vgrf11+6.0:F, vgrf0:F, vgrf6+6.0:F group16 
clock   36, scheduled: linterp(16) vgrf8+0.0:F, g3:F, g11<0>:F group0 
(register pressure 31)
	child 1, 14 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
	child 0, 2 parents: send(16) (mlen: 4) vgrf7:F, 0u, 0u, vgrf8:F group0 
clock   40, scheduled: linterp(16) vgrf9+0.0:F, g7:F, g11<0>:F group16 
(register pressure 35)
	child 1, 13 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
	child 0, 2 parents: send(16) (mlen: 4) vgrf6:F, 0u, 0u, vgrf9:F group16 
clock   44, scheduled: linterp(16) vgrf8+2.0:F, g3:F, g11<0>:F group0 
(register pressure 31)
	child 1, 12 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
	child 0, 1 parents: send(16) (mlen: 4) vgrf7:F, 0u, 0u, vgrf8:F group0 
		now available
clock   48, scheduled: linterp(16) vgrf9+2.0:F, g7:F, g11<0>:F group16 
(register pressure 26)
	child 1, 11 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
	child 0, 1 parents: send(16) (mlen: 4) vgrf6:F, 0u, 0u, vgrf9:F group16 
		now available
clock   52, scheduled: send(16) (mlen: 4) vgrf7:F, 0u, 0u, vgrf8:F group0 
(register pressure 30)
	child 4, 10 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
	child 3, 1 parents: mul(16) vgrf10+6.0:F, vgrf12:F, vgrf7+6.0:F group0 
		now available
	child 2, 1 parents: mul(16) vgrf10+4.0:F, vgrf25:F, vgrf7+4.0:F group0 
		now available
	child 1, 1 parents: mul(16) vgrf10+2.0:F, vgrf24:F, vgrf7+2.0:F group0 
		now available
	child 0, 1 parents: mul(16) vgrf10+0.0:F, vgrf23:F, vgrf7+0.0:F group0 
		now available
clock   56, scheduled: send(16) (mlen: 4) vgrf6:F, 0u, 0u, vgrf9:F group16 
(register pressure 34)
	child 4, 9 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
	child 3, 1 parents: mul(16) vgrf11+6.0:F, vgrf0:F, vgrf6+6.0:F group16 
		now available
	child 2, 1 parents: mul(16) vgrf11+4.0:F, vgrf5:F, vgrf6+4.0:F group16 
		now available
	child 1, 1 parents: mul(16) vgrf11+2.0:F, vgrf4:F, vgrf6+2.0:F group16 
		now available
	child 0, 1 parents: mul(16) vgrf11+0.0:F, vgrf3:F, vgrf6+0.0:F group16 
		now available
clock   60, scheduled: mul(16) vgrf10+0.0:F, vgrf23:F, vgrf7+0.0:F group0 
(register pressure 40)
	child 0, 8 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
clock   64, scheduled: mul(16) vgrf10+2.0:F, vgrf24:F, vgrf7+2.0:F group0 
(register pressure 38)
	child 0, 7 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
clock   68, scheduled: mul(16) vgrf10+4.0:F, vgrf25:F, vgrf7+4.0:F group0 
(register pressure 36)
	child 0, 6 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
clock   72, scheduled: mul(16) vgrf10+6.0:F, vgrf12:F, vgrf7+6.0:F group0 
(register pressure 26)
	child 0, 5 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
clock   76, scheduled: mul(16) vgrf11+0.0:F, vgrf3:F, vgrf6+0.0:F group16 
(register pressure 32)
	child 1, 5 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf11:F group16 
	child 0, 4 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
clock   80, scheduled: mul(16) vgrf11+2.0:F, vgrf4:F, vgrf6+2.0:F group16 
(register pressure 30)
	child 1, 4 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf11:F group16 
	child 0, 3 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
clock   84, scheduled: mul(16) vgrf11+4.0:F, vgrf5:F, vgrf6+4.0:F group16 
(register pressure 28)
	child 1, 3 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf11:F group16 
	child 0, 2 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
clock   88, scheduled: mul(16) vgrf11+6.0:F, vgrf0:F, vgrf6+6.0:F group16 
(register pressure 18)
	child 1, 2 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf11:F group16 
	child 0, 1 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
		now available
clock   92, scheduled: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
(register pressure 10)
	child 0, 1 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf11:F group16 
		now available
clock   96, scheduled: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf11:F group16 
(register pressure 2)

Instructions after scheduling (reg_alloc 0)
{  2}    0: linterp(16) vgrf23:F, g3:F, g13<0>:F group0 
{  4}    1: linterp(16) vgrf3:F, g7:F, g13<0>:F group16 
{  6}    2: linterp(16) vgrf24:F, g3:F, g13<0>:F group0 
{  8}    3: linterp(16) vgrf4:F, g7:F, g13<0>:F group16 
{ 10}    4: linterp(16) vgrf25:F, g3:F, g14<0>:F group0 
{ 12}    5: linterp(16) vgrf5:F, g7:F, g14<0>:F group16 
{ 14}    6: linterp(16) vgrf12:F, g3:F, g14<0>:F group0 
{ 16}    7: linterp(16) vgrf0:F, g7:F, g14<0>:F group16 
{ 20}    8: linterp(16) vgrf8+0.0:F, g3:F, g11<0>:F group0 
{ 24}    9: linterp(16) vgrf9+0.0:F, g7:F, g11<0>:F group16 
{ 24}   10: linterp(16) vgrf8+2.0:F, g3:F, g11<0>:F group0 
{ 24}   11: linterp(16) vgrf9+2.0:F, g7:F, g11<0>:F group16 
{ 32}   12: send(16) (mlen: 4) vgrf7:F, 0u, 0u, vgrf8:F group0 
{ 36}   13: send(16) (mlen: 4) vgrf6:F, 0u, 0u, vgrf9:F group16 
{ 40}   14: mul(16) vgrf10+0.0:F, vgrf23:F, vgrf7+0.0:F group0 
{ 46}   15: mul(16) vgrf10+2.0:F, vgrf24:F, vgrf7+2.0:F group0 
{ 44}   16: mul(16) vgrf10+4.0:F, vgrf25:F, vgrf7+4.0:F group0 
{ 42}   17: mul(16) vgrf10+6.0:F, vgrf12:F, vgrf7+6.0:F group0 
{ 40}   18: mul(16) vgrf11+0.0:F, vgrf3:F, vgrf6+0.0:F group16 
{ 38}   19: mul(16) vgrf11+2.0:F, vgrf4:F, vgrf6+2.0:F group16 
{ 36}   20: mul(16) vgrf11+4.0:F, vgrf5:F, vgrf6+4.0:F group16 
{ 26}   21: mul(16) vgrf11+6.0:F, vgrf0:F, vgrf6+6.0:F group16 
{ 16}   22: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf10:F group0 
{  8}   23: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf11:F group16 
Maximum  46 registers live at once.
clock    4, scheduled: linterp(16) vgrf48:F, g3:F, g13<0>:F group0 
	child 3, 4 parents: linterp(16) vgrf12:F, g7:F, g14<0>:F group16 
	child 2, 12 parents: send(16) (mlen: 4) vgrf2+0.0:F, 0u, 0u, vgrf33:F group16 
	child 1, 22 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
	child 0, 3 parents: mul(16) vgrf29+0.0:F, vgrf48:F, vgrf21:F group0 
clock    8, scheduled: linterp(16) vgrf15:F, g7:F, g13<0>:F group16 
	child 3, 3 parents: linterp(16) vgrf12:F, g7:F, g14<0>:F group16 
	child 2, 11 parents: send(16) (mlen: 4) vgrf2+0.0:F, 0u, 0u, vgrf33:F group16 
	child 1, 21 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
	child 0, 2 parents: mul(16) vgrf119+0.0:F, vgrf15:F, vgrf2:F group16 
clock   12, scheduled: linterp(16) vgrf50:F, g3:F, g13<0>:F group0 
	child 3, 2 parents: linterp(16) vgrf12:F, g7:F, g14<0>:F group16 
	child 2, 10 parents: send(16) (mlen: 4) vgrf2+0.0:F, 0u, 0u, vgrf33:F group16 
	child 1, 20 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
	child 0, 3 parents: mul(16) vgrf31+0.0:F, vgrf50:F, vgrf23:F group0 
clock   16, scheduled: linterp(16) vgrf17:F, g7:F, g13<0>:F group16 
	child 3, 1 parents: linterp(16) vgrf12:F, g7:F, g14<0>:F group16 
		now available
	child 2, 9 parents: send(16) (mlen: 4) vgrf2+0.0:F, 0u, 0u, vgrf33:F group16 
	child 1, 19 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
	child 0, 2 parents: mul(16) vgrf121+0.0:F, vgrf17:F, vgrf4:F group16 
clock   20, scheduled: linterp(16) vgrf52:F, g3:F, g14<0>:F group0 
	child 2, 8 parents: send(16) (mlen: 4) vgrf2+0.0:F, 0u, 0u, vgrf33:F group16 
	child 1, 18 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
	child 0, 4 parents: mul(16) vgrf33+0.0:F, vgrf52:F, vgrf25:F group0 
clock   24, scheduled: linterp(16) vgrf19:F, g7:F, g14<0>:F group16 
	child 2, 7 parents: send(16) (mlen: 4) vgrf2+0.0:F, 0u, 0u, vgrf33:F group16 
	child 1, 17 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
	child 0, 2 parents: mul(16) vgrf123+0.0:F, vgrf19:F, vgrf6+0.0:F group16 
clock   28, scheduled: linterp(16) vgrf37+0.0:F, g3:F, g14<0>:F group0 
	child 2, 6 parents: send(16) (mlen: 4) vgrf2+0.0:F, 0u, 0u, vgrf33:F group16 
	child 1, 16 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
	child 0, 4 parents: mul(16) vgrf35+0.0:F, vgrf37+0.0:F, vgrf27+0.0:F group0 
clock   32, scheduled: linterp(16) vgrf29+0.0:F, g3:F, g11<0>:F group0 
	child 3, 5 parents: send(16) (mlen: 4) vgrf2+0.0:F, 0u, 0u, vgrf33:F group16 
	child 2, 15 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
	child 1, 2 parents: mul(16) vgrf29+0.0:F, vgrf48:F, vgrf21:F group0 
	child 0, 2 parents: send(16) (mlen: 4) vgrf21+0.0:F, 0u, 0u, vgrf29:F group0 
clock   36, scheduled: linterp(16) vgrf33+0.0:F, g7:F, g11<0>:F group16 
	child 2, 14 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
	child 1, 3 parents: mul(16) vgrf33+0.0:F, vgrf52:F, vgrf25:F group0 
	child 0, 4 parents: send(16) (mlen: 4) vgrf2+0.0:F, 0u, 0u, vgrf33:F group16 
clock   40, scheduled: linterp(16) vgrf31+0.0:F, g3:F, g11<0>:F group0 
	child 3, 3 parents: send(16) (mlen: 4) vgrf2+0.0:F, 0u, 0u, vgrf33:F group16 
	child 2, 13 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
	child 1, 2 parents: mul(16) vgrf31+0.0:F, vgrf50:F, vgrf23:F group0 
	child 0, 1 parents: send(16) (mlen: 4) vgrf21+0.0:F, 0u, 0u, vgrf29:F group0 
		now available
clock   44, scheduled: linterp(16) vgrf35+0.0:F, g7:F, g11<0>:F group16 
	child 2, 12 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
	child 1, 3 parents: mul(16) vgrf35+0.0:F, vgrf37+0.0:F, vgrf27+0.0:F group0 
	child 0, 2 parents: send(16) (mlen: 4) vgrf2+0.0:F, 0u, 0u, vgrf33:F group16 
clock   48, scheduled: linterp(16) vgrf12:F, g7:F, g14<0>:F group16 
	child 2, 1 parents: send(16) (mlen: 4) vgrf2+0.0:F, 0u, 0u, vgrf33:F group16 
		now available
	child 1, 11 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
	child 0, 2 parents: mul(16) vgrf125+0.0:F, vgrf12:F, vgrf8+0.0:F group16 
clock   58, scheduled: send(16) (mlen: 4) vgrf21+0.0:F, 0u, 0u, vgrf29:F group0 
	child 4, 10 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
	child 3, 2 parents: mul(16) vgrf35+0.0:F, vgrf37+0.0:F, vgrf27+0.0:F group0 
	child 2, 2 parents: mul(16) vgrf33+0.0:F, vgrf52:F, vgrf25:F group0 
	child 1, 1 parents: mul(16) vgrf31+0.0:F, vgrf50:F, vgrf23:F group0 
		now available
	child 0, 1 parents: mul(16) vgrf29+0.0:F, vgrf48:F, vgrf21:F group0 
		now available
clock   62, scheduled: send(16) (mlen: 4) vgrf2+0.0:F, 0u, 0u, vgrf33:F group16 
	child 6, 1 parents: mul(16) vgrf35+0.0:F, vgrf37+0.0:F, vgrf27+0.0:F group0 
		now available
	child 5, 1 parents: mul(16) vgrf33+0.0:F, vgrf52:F, vgrf25:F group0 
		now available
	child 4, 9 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
	child 3, 1 parents: mul(16) vgrf125+0.0:F, vgrf12:F, vgrf8+0.0:F group16 
		now available
	child 2, 1 parents: mul(16) vgrf123+0.0:F, vgrf19:F, vgrf6+0.0:F group16 
		now available
	child 1, 1 parents: mul(16) vgrf121+0.0:F, vgrf17:F, vgrf4:F group16 
		now available
	child 0, 1 parents: mul(16) vgrf119+0.0:F, vgrf15:F, vgrf2:F group16 
		now available
clock  262, scheduled: mul(16) vgrf33+0.0:F, vgrf52:F, vgrf25:F group0 
	child 0, 8 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
clock  266, scheduled: mul(16) vgrf35+0.0:F, vgrf37+0.0:F, vgrf27+0.0:F group0 
	child 0, 7 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
clock  270, scheduled: mul(16) vgrf29+0.0:F, vgrf48:F, vgrf21:F group0 
	child 0, 6 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
clock  274, scheduled: mul(16) vgrf31+0.0:F, vgrf50:F, vgrf23:F group0 
	child 0, 5 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
clock  278, scheduled: mul(16) vgrf119+0.0:F, vgrf15:F, vgrf2:F group16 
	child 1, 5 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
	child 0, 4 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
clock  282, scheduled: mul(16) vgrf121+0.0:F, vgrf17:F, vgrf4:F group16 
	child 1, 4 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
	child 0, 3 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
clock  286, scheduled: mul(16) vgrf123+0.0:F, vgrf19:F, vgrf6+0.0:F group16 
	child 1, 3 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
	child 0, 2 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
clock  290, scheduled: mul(16) vgrf125+0.0:F, vgrf12:F, vgrf8+0.0:F group16 
	child 1, 2 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
	child 0, 1 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
		now available
clock  294, scheduled: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf29+0.0:F group0 
	child 0, 1 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
		now available
clock  308, scheduled: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_opt_load_store_vectorize
brw_nir_lower_mem_access_bit_sizes
nir_lower_int64
brw_nir_opt_peephole_ffma
nir_opt_comparison_pre
nir_opt_algebraic_late
brw_nir_lower_conversions
nir_lower_alu_to_scalar
nir_opt_algebraic_distribute_src_mods
nir_copy_prop
nir_opt_dce
nir_opt_move
nir_lower_bool_to_int32
nir_copy_prop
nir_opt_dce
nir_lower_locals_to_regs
nir_convert_from_ssa
nir_opt_dce
nir_opt_rematerialize_compares
nir_lower_variable_initializers
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_7, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	intrinsic store_deref (ssa_162, ssa_9) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_13 = intrinsic load_deref (ssa_10) (0) /* access=0 */
		vec1 32 ssa_14 = mov ssa_13.y
		vec1 1 ssa_16 = feq ssa_14, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		intrinsic store_deref (ssa_163, ssa_16) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	intrinsic store_deref (ssa_164, ssa_18) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_4 block_5 */
	if ssa_18 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_22 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_23 = mov ssa_22.z
		vec1 1 ssa_25 = feq ssa_23, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		intrinsic store_deref (ssa_165, ssa_25) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	/* succs: block_7 block_8 */
	if ssa_27 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_34, ssa_33) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_36 = intrinsic load_deref (ssa_35) (0) /* access=0 */
		vec1 32 ssa_37 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_37, ssa_36) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_59, ssa_60, ssa_61, ssa_62
	vec1 32 ssa_64 = mov ssa_63.x
	vec4 32 ssa_65 = fmul ssa_41, ssa_64.xxxx
	vec1 32 ssa_66 = mov ssa_63.y
	vec4 32 ssa_67 = fmul ssa_46, ssa_66.xxxx
	vec4 32 ssa_68 = fadd ssa_65, ssa_67
	vec1 32 ssa_69 = mov ssa_63.z
	vec4 32 ssa_70 = fmul ssa_51, ssa_69.xxxx
	vec4 32 ssa_71 = fadd ssa_68, ssa_70
	vec1 32 ssa_72 = mov ssa_63.w
	vec4 32 ssa_73 = fmul ssa_56, ssa_72.xxxx
	vec4 32 ssa_74 = fadd ssa_71, ssa_73
	vec1 32 ssa_75 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_76 = deref_struct &ssa_75->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_76, ssa_74) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_97.x
	vec1 32 ssa_99 = mov ssa_97.y
	vec1 32 ssa_100 = mov ssa_97.z
	vec4 32 ssa_102 = vec4 ssa_98, ssa_99, ssa_100, ssa_101
	vec1 32 ssa_103 = mov ssa_102.x
	vec4 32 ssa_104 = fmul ssa_80, ssa_103.xxxx
	vec1 32 ssa_105 = mov ssa_102.y
	vec4 32 ssa_106 = fmul ssa_85, ssa_105.xxxx
	vec4 32 ssa_107 = fadd ssa_104, ssa_106
	vec1 32 ssa_108 = mov ssa_102.z
	vec4 32 ssa_109 = fmul ssa_90, ssa_108.xxxx
	vec4 32 ssa_110 = fadd ssa_107, ssa_109
	vec1 32 ssa_111 = mov ssa_102.w
	vec4 32 ssa_112 = fmul ssa_95, ssa_111.xxxx
	vec4 32 ssa_113 = fadd ssa_110, ssa_112
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	intrinsic store_deref (ssa_114, ssa_113) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_138 = intrinsic load_deref (ssa_137) (0) /* access=0 */
	vec1 32 ssa_139 = mov ssa_138.x
	vec3 32 ssa_140 = fmul ssa_134, ssa_139.xxx
	vec1 32 ssa_141 = mov ssa_138.y
	vec3 32 ssa_142 = fmul ssa_135, ssa_141.xxx
	vec3 32 ssa_143 = fadd ssa_140, ssa_142
	vec1 32 ssa_144 = mov ssa_138.z
	vec3 32 ssa_145 = fmul ssa_136, ssa_144.xxx
	vec3 32 ssa_146 = fadd ssa_143, ssa_145
	vec1 32 ssa_147 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_147, ssa_146) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	intrinsic store_deref (ssa_149, ssa_148) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_151 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_153 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	vec3 32 ssa_154 = vec3 ssa_153.x, ssa_153.y, ssa_153.z
	vec3 32 ssa_155 = fsub ssa_151, ssa_154
	vec1 32 ssa_156 = deref_var &outLightVec (shader_out vec3) 
	intrinsic store_deref (ssa_156, ssa_155) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_157) (0) /* access=0 */
	vec3 32 ssa_159 = vec3 ssa_158.x, ssa_158.y, ssa_158.z
	vec3 32 ssa_160 = fneg ssa_159
	vec1 32 ssa_161 = deref_var &outViewVec (shader_out vec3) 
	intrinsic store_deref (ssa_161, ssa_160) (7, 0) /* wrmask=xyz */ /* access=0 */
	return
	/* succs: block_10 */
	block block_10:
}

nir_lower_returns
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_7, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	intrinsic store_deref (ssa_162, ssa_9) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_13 = intrinsic load_deref (ssa_10) (0) /* access=0 */
		vec1 32 ssa_14 = mov ssa_13.y
		vec1 1 ssa_16 = feq ssa_14, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		intrinsic store_deref (ssa_163, ssa_16) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	intrinsic store_deref (ssa_164, ssa_18) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_4 block_5 */
	if ssa_18 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_22 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_23 = mov ssa_22.z
		vec1 1 ssa_25 = feq ssa_23, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		intrinsic store_deref (ssa_165, ssa_25) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	/* succs: block_7 block_8 */
	if ssa_27 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_34, ssa_33) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_36 = intrinsic load_deref (ssa_35) (0) /* access=0 */
		vec1 32 ssa_37 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_37, ssa_36) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_59, ssa_60, ssa_61, ssa_62
	vec1 32 ssa_64 = mov ssa_63.x
	vec4 32 ssa_65 = fmul ssa_41, ssa_64.xxxx
	vec1 32 ssa_66 = mov ssa_63.y
	vec4 32 ssa_67 = fmul ssa_46, ssa_66.xxxx
	vec4 32 ssa_68 = fadd ssa_65, ssa_67
	vec1 32 ssa_69 = mov ssa_63.z
	vec4 32 ssa_70 = fmul ssa_51, ssa_69.xxxx
	vec4 32 ssa_71 = fadd ssa_68, ssa_70
	vec1 32 ssa_72 = mov ssa_63.w
	vec4 32 ssa_73 = fmul ssa_56, ssa_72.xxxx
	vec4 32 ssa_74 = fadd ssa_71, ssa_73
	vec1 32 ssa_75 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_76 = deref_struct &ssa_75->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_76, ssa_74) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_97.x
	vec1 32 ssa_99 = mov ssa_97.y
	vec1 32 ssa_100 = mov ssa_97.z
	vec4 32 ssa_102 = vec4 ssa_98, ssa_99, ssa_100, ssa_101
	vec1 32 ssa_103 = mov ssa_102.x
	vec4 32 ssa_104 = fmul ssa_80, ssa_103.xxxx
	vec1 32 ssa_105 = mov ssa_102.y
	vec4 32 ssa_106 = fmul ssa_85, ssa_105.xxxx
	vec4 32 ssa_107 = fadd ssa_104, ssa_106
	vec1 32 ssa_108 = mov ssa_102.z
	vec4 32 ssa_109 = fmul ssa_90, ssa_108.xxxx
	vec4 32 ssa_110 = fadd ssa_107, ssa_109
	vec1 32 ssa_111 = mov ssa_102.w
	vec4 32 ssa_112 = fmul ssa_95, ssa_111.xxxx
	vec4 32 ssa_113 = fadd ssa_110, ssa_112
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	intrinsic store_deref (ssa_114, ssa_113) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_138 = intrinsic load_deref (ssa_137) (0) /* access=0 */
	vec1 32 ssa_139 = mov ssa_138.x
	vec3 32 ssa_140 = fmul ssa_134, ssa_139.xxx
	vec1 32 ssa_141 = mov ssa_138.y
	vec3 32 ssa_142 = fmul ssa_135, ssa_141.xxx
	vec3 32 ssa_143 = fadd ssa_140, ssa_142
	vec1 32 ssa_144 = mov ssa_138.z
	vec3 32 ssa_145 = fmul ssa_136, ssa_144.xxx
	vec3 32 ssa_146 = fadd ssa_143, ssa_145
	vec1 32 ssa_147 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_147, ssa_146) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	intrinsic store_deref (ssa_149, ssa_148) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_151 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_153 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	vec3 32 ssa_154 = vec3 ssa_153.x, ssa_153.y, ssa_153.z
	vec3 32 ssa_155 = fsub ssa_151, ssa_154
	vec1 32 ssa_156 = deref_var &outLightVec (shader_out vec3) 
	intrinsic store_deref (ssa_156, ssa_155) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_157) (0) /* access=0 */
	vec3 32 ssa_159 = vec3 ssa_158.x, ssa_158.y, ssa_158.z
	vec3 32 ssa_160 = fneg ssa_159
	vec1 32 ssa_161 = deref_var &outViewVec (shader_out vec3) 
	intrinsic store_deref (ssa_161, ssa_160) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_inline_functions
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_7, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	intrinsic store_deref (ssa_162, ssa_9) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_13 = intrinsic load_deref (ssa_10) (0) /* access=0 */
		vec1 32 ssa_14 = mov ssa_13.y
		vec1 1 ssa_16 = feq ssa_14, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		intrinsic store_deref (ssa_163, ssa_16) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	intrinsic store_deref (ssa_164, ssa_18) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_4 block_5 */
	if ssa_18 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_22 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_23 = mov ssa_22.z
		vec1 1 ssa_25 = feq ssa_23, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		intrinsic store_deref (ssa_165, ssa_25) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	/* succs: block_7 block_8 */
	if ssa_27 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_34, ssa_33) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_36 = intrinsic load_deref (ssa_35) (0) /* access=0 */
		vec1 32 ssa_37 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_37, ssa_36) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_59, ssa_60, ssa_61, ssa_62
	vec1 32 ssa_64 = mov ssa_63.x
	vec4 32 ssa_65 = fmul ssa_41, ssa_64.xxxx
	vec1 32 ssa_66 = mov ssa_63.y
	vec4 32 ssa_67 = fmul ssa_46, ssa_66.xxxx
	vec4 32 ssa_68 = fadd ssa_65, ssa_67
	vec1 32 ssa_69 = mov ssa_63.z
	vec4 32 ssa_70 = fmul ssa_51, ssa_69.xxxx
	vec4 32 ssa_71 = fadd ssa_68, ssa_70
	vec1 32 ssa_72 = mov ssa_63.w
	vec4 32 ssa_73 = fmul ssa_56, ssa_72.xxxx
	vec4 32 ssa_74 = fadd ssa_71, ssa_73
	vec1 32 ssa_75 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_76 = deref_struct &ssa_75->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_76, ssa_74) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_97.x
	vec1 32 ssa_99 = mov ssa_97.y
	vec1 32 ssa_100 = mov ssa_97.z
	vec4 32 ssa_102 = vec4 ssa_98, ssa_99, ssa_100, ssa_101
	vec1 32 ssa_103 = mov ssa_102.x
	vec4 32 ssa_104 = fmul ssa_80, ssa_103.xxxx
	vec1 32 ssa_105 = mov ssa_102.y
	vec4 32 ssa_106 = fmul ssa_85, ssa_105.xxxx
	vec4 32 ssa_107 = fadd ssa_104, ssa_106
	vec1 32 ssa_108 = mov ssa_102.z
	vec4 32 ssa_109 = fmul ssa_90, ssa_108.xxxx
	vec4 32 ssa_110 = fadd ssa_107, ssa_109
	vec1 32 ssa_111 = mov ssa_102.w
	vec4 32 ssa_112 = fmul ssa_95, ssa_111.xxxx
	vec4 32 ssa_113 = fadd ssa_110, ssa_112
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	intrinsic store_deref (ssa_114, ssa_113) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_138 = intrinsic load_deref (ssa_137) (0) /* access=0 */
	vec1 32 ssa_139 = mov ssa_138.x
	vec3 32 ssa_140 = fmul ssa_134, ssa_139.xxx
	vec1 32 ssa_141 = mov ssa_138.y
	vec3 32 ssa_142 = fmul ssa_135, ssa_141.xxx
	vec3 32 ssa_143 = fadd ssa_140, ssa_142
	vec1 32 ssa_144 = mov ssa_138.z
	vec3 32 ssa_145 = fmul ssa_136, ssa_144.xxx
	vec3 32 ssa_146 = fadd ssa_143, ssa_145
	vec1 32 ssa_147 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_147, ssa_146) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	intrinsic store_deref (ssa_149, ssa_148) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_151 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_153 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	vec3 32 ssa_154 = vec3 ssa_153.x, ssa_153.y, ssa_153.z
	vec3 32 ssa_155 = fsub ssa_151, ssa_154
	vec1 32 ssa_156 = deref_var &outLightVec (shader_out vec3) 
	intrinsic store_deref (ssa_156, ssa_155) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_157) (0) /* access=0 */
	vec3 32 ssa_159 = vec3 ssa_158.x, ssa_158.y, ssa_158.z
	vec3 32 ssa_160 = fneg ssa_159
	vec1 32 ssa_161 = deref_var &outViewVec (shader_out vec3) 
	intrinsic store_deref (ssa_161, ssa_160) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_copy_prop
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	intrinsic store_deref (ssa_162, ssa_9) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_13 = intrinsic load_deref (ssa_10) (0) /* access=0 */
		vec1 32 ssa_14 = mov ssa_13.y
		vec1 1 ssa_16 = feq ssa_13.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		intrinsic store_deref (ssa_163, ssa_16) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	intrinsic store_deref (ssa_164, ssa_18) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_4 block_5 */
	if ssa_18 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_22 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_23 = mov ssa_22.z
		vec1 1 ssa_25 = feq ssa_22.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		intrinsic store_deref (ssa_165, ssa_25) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	/* succs: block_7 block_8 */
	if ssa_27 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_34, ssa_33) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_36 = intrinsic load_deref (ssa_35) (0) /* access=0 */
		vec1 32 ssa_37 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_37, ssa_36) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec4 32 ssa_65 = fmul ssa_41, ssa_58.xxxx
	vec1 32 ssa_66 = mov ssa_58.y
	vec4 32 ssa_67 = fmul ssa_46, ssa_58.yyyy
	vec4 32 ssa_68 = fadd ssa_65, ssa_67
	vec1 32 ssa_69 = mov ssa_58.z
	vec4 32 ssa_70 = fmul ssa_51, ssa_58.zzzz
	vec4 32 ssa_71 = fadd ssa_68, ssa_70
	vec1 32 ssa_72 = mov ssa_62
	vec4 32 ssa_73 = fmul ssa_56, ssa_62.xxxx
	vec4 32 ssa_74 = fadd ssa_71, ssa_73
	vec1 32 ssa_75 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_76 = deref_struct &ssa_75->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_76, ssa_74) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_97.x
	vec1 32 ssa_99 = mov ssa_97.y
	vec1 32 ssa_100 = mov ssa_97.z
	vec4 32 ssa_102 = vec4 ssa_97.x, ssa_97.y, ssa_97.z, ssa_101
	vec1 32 ssa_103 = mov ssa_97.x
	vec4 32 ssa_104 = fmul ssa_80, ssa_97.xxxx
	vec1 32 ssa_105 = mov ssa_97.y
	vec4 32 ssa_106 = fmul ssa_85, ssa_97.yyyy
	vec4 32 ssa_107 = fadd ssa_104, ssa_106
	vec1 32 ssa_108 = mov ssa_97.z
	vec4 32 ssa_109 = fmul ssa_90, ssa_97.zzzz
	vec4 32 ssa_110 = fadd ssa_107, ssa_109
	vec1 32 ssa_111 = mov ssa_101
	vec4 32 ssa_112 = fmul ssa_95, ssa_101.xxxx
	vec4 32 ssa_113 = fadd ssa_110, ssa_112
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	intrinsic store_deref (ssa_114, ssa_113) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_138 = intrinsic load_deref (ssa_137) (0) /* access=0 */
	vec1 32 ssa_139 = mov ssa_138.x
	vec3 32 ssa_140 = fmul ssa_118.xyz, ssa_138.xxx
	vec1 32 ssa_141 = mov ssa_138.y
	vec3 32 ssa_142 = fmul ssa_123.xyz, ssa_138.yyy
	vec3 32 ssa_143 = fadd ssa_140, ssa_142
	vec1 32 ssa_144 = mov ssa_138.z
	vec3 32 ssa_145 = fmul ssa_128.xyz, ssa_138.zzz
	vec3 32 ssa_146 = fadd ssa_143, ssa_145
	vec1 32 ssa_147 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_147, ssa_146) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	intrinsic store_deref (ssa_149, ssa_148) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_151 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_153 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	vec3 32 ssa_154 = vec3 ssa_153.x, ssa_153.y, ssa_153.z
	vec3 32 ssa_155 = fsub ssa_151, ssa_153.xyz
	vec1 32 ssa_156 = deref_var &outLightVec (shader_out vec3) 
	intrinsic store_deref (ssa_156, ssa_155) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_157) (0) /* access=0 */
	vec3 32 ssa_159 = vec3 ssa_158.x, ssa_158.y, ssa_158.z
	vec3 32 ssa_160 = fneg ssa_158.xyz
	vec1 32 ssa_161 = deref_var &outViewVec (shader_out vec3) 
	intrinsic store_deref (ssa_161, ssa_160) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_opt_deref
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	intrinsic store_deref (ssa_162, ssa_9) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_13 = intrinsic load_deref (ssa_10) (0) /* access=0 */
		vec1 32 ssa_14 = mov ssa_13.y
		vec1 1 ssa_16 = feq ssa_13.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		intrinsic store_deref (ssa_163, ssa_16) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	intrinsic store_deref (ssa_164, ssa_18) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_4 block_5 */
	if ssa_18 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_22 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_23 = mov ssa_22.z
		vec1 1 ssa_25 = feq ssa_22.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		intrinsic store_deref (ssa_165, ssa_25) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	/* succs: block_7 block_8 */
	if ssa_27 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_34, ssa_33) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_36 = intrinsic load_deref (ssa_35) (0) /* access=0 */
		vec1 32 ssa_37 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_37, ssa_36) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec4 32 ssa_65 = fmul ssa_41, ssa_58.xxxx
	vec1 32 ssa_66 = mov ssa_58.y
	vec4 32 ssa_67 = fmul ssa_46, ssa_58.yyyy
	vec4 32 ssa_68 = fadd ssa_65, ssa_67
	vec1 32 ssa_69 = mov ssa_58.z
	vec4 32 ssa_70 = fmul ssa_51, ssa_58.zzzz
	vec4 32 ssa_71 = fadd ssa_68, ssa_70
	vec1 32 ssa_72 = mov ssa_62
	vec4 32 ssa_73 = fmul ssa_56, ssa_62.xxxx
	vec4 32 ssa_74 = fadd ssa_71, ssa_73
	vec1 32 ssa_75 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_76 = deref_struct &ssa_75->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_76, ssa_74) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_97.x
	vec1 32 ssa_99 = mov ssa_97.y
	vec1 32 ssa_100 = mov ssa_97.z
	vec4 32 ssa_102 = vec4 ssa_97.x, ssa_97.y, ssa_97.z, ssa_101
	vec1 32 ssa_103 = mov ssa_97.x
	vec4 32 ssa_104 = fmul ssa_80, ssa_97.xxxx
	vec1 32 ssa_105 = mov ssa_97.y
	vec4 32 ssa_106 = fmul ssa_85, ssa_97.yyyy
	vec4 32 ssa_107 = fadd ssa_104, ssa_106
	vec1 32 ssa_108 = mov ssa_97.z
	vec4 32 ssa_109 = fmul ssa_90, ssa_97.zzzz
	vec4 32 ssa_110 = fadd ssa_107, ssa_109
	vec1 32 ssa_111 = mov ssa_101
	vec4 32 ssa_112 = fmul ssa_95, ssa_101.xxxx
	vec4 32 ssa_113 = fadd ssa_110, ssa_112
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	intrinsic store_deref (ssa_114, ssa_113) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_138 = intrinsic load_deref (ssa_137) (0) /* access=0 */
	vec1 32 ssa_139 = mov ssa_138.x
	vec3 32 ssa_140 = fmul ssa_118.xyz, ssa_138.xxx
	vec1 32 ssa_141 = mov ssa_138.y
	vec3 32 ssa_142 = fmul ssa_123.xyz, ssa_138.yyy
	vec3 32 ssa_143 = fadd ssa_140, ssa_142
	vec1 32 ssa_144 = mov ssa_138.z
	vec3 32 ssa_145 = fmul ssa_128.xyz, ssa_138.zzz
	vec3 32 ssa_146 = fadd ssa_143, ssa_145
	vec1 32 ssa_147 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_147, ssa_146) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	intrinsic store_deref (ssa_149, ssa_148) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_151 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_153 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	vec3 32 ssa_154 = vec3 ssa_153.x, ssa_153.y, ssa_153.z
	vec3 32 ssa_155 = fsub ssa_151, ssa_153.xyz
	vec1 32 ssa_156 = deref_var &outLightVec (shader_out vec3) 
	intrinsic store_deref (ssa_156, ssa_155) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_157) (0) /* access=0 */
	vec3 32 ssa_159 = vec3 ssa_158.x, ssa_158.y, ssa_158.z
	vec3 32 ssa_160 = fneg ssa_158.xyz
	vec1 32 ssa_161 = deref_var &outViewVec (shader_out vec3) 
	intrinsic store_deref (ssa_161, ssa_160) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_lower_variable_initializers
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	intrinsic store_deref (ssa_162, ssa_9) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_13 = intrinsic load_deref (ssa_10) (0) /* access=0 */
		vec1 32 ssa_14 = mov ssa_13.y
		vec1 1 ssa_16 = feq ssa_13.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		intrinsic store_deref (ssa_163, ssa_16) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	intrinsic store_deref (ssa_164, ssa_18) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_4 block_5 */
	if ssa_18 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_22 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_23 = mov ssa_22.z
		vec1 1 ssa_25 = feq ssa_22.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		intrinsic store_deref (ssa_165, ssa_25) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	/* succs: block_7 block_8 */
	if ssa_27 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_34, ssa_33) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_36 = intrinsic load_deref (ssa_35) (0) /* access=0 */
		vec1 32 ssa_37 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_37, ssa_36) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec4 32 ssa_65 = fmul ssa_41, ssa_58.xxxx
	vec1 32 ssa_66 = mov ssa_58.y
	vec4 32 ssa_67 = fmul ssa_46, ssa_58.yyyy
	vec4 32 ssa_68 = fadd ssa_65, ssa_67
	vec1 32 ssa_69 = mov ssa_58.z
	vec4 32 ssa_70 = fmul ssa_51, ssa_58.zzzz
	vec4 32 ssa_71 = fadd ssa_68, ssa_70
	vec1 32 ssa_72 = mov ssa_62
	vec4 32 ssa_73 = fmul ssa_56, ssa_62.xxxx
	vec4 32 ssa_74 = fadd ssa_71, ssa_73
	vec1 32 ssa_75 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_76 = deref_struct &ssa_75->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_76, ssa_74) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_97.x
	vec1 32 ssa_99 = mov ssa_97.y
	vec1 32 ssa_100 = mov ssa_97.z
	vec4 32 ssa_102 = vec4 ssa_97.x, ssa_97.y, ssa_97.z, ssa_101
	vec1 32 ssa_103 = mov ssa_97.x
	vec4 32 ssa_104 = fmul ssa_80, ssa_97.xxxx
	vec1 32 ssa_105 = mov ssa_97.y
	vec4 32 ssa_106 = fmul ssa_85, ssa_97.yyyy
	vec4 32 ssa_107 = fadd ssa_104, ssa_106
	vec1 32 ssa_108 = mov ssa_97.z
	vec4 32 ssa_109 = fmul ssa_90, ssa_97.zzzz
	vec4 32 ssa_110 = fadd ssa_107, ssa_109
	vec1 32 ssa_111 = mov ssa_101
	vec4 32 ssa_112 = fmul ssa_95, ssa_101.xxxx
	vec4 32 ssa_113 = fadd ssa_110, ssa_112
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	intrinsic store_deref (ssa_114, ssa_113) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_138 = intrinsic load_deref (ssa_137) (0) /* access=0 */
	vec1 32 ssa_139 = mov ssa_138.x
	vec3 32 ssa_140 = fmul ssa_118.xyz, ssa_138.xxx
	vec1 32 ssa_141 = mov ssa_138.y
	vec3 32 ssa_142 = fmul ssa_123.xyz, ssa_138.yyy
	vec3 32 ssa_143 = fadd ssa_140, ssa_142
	vec1 32 ssa_144 = mov ssa_138.z
	vec3 32 ssa_145 = fmul ssa_128.xyz, ssa_138.zzz
	vec3 32 ssa_146 = fadd ssa_143, ssa_145
	vec1 32 ssa_147 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_147, ssa_146) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	intrinsic store_deref (ssa_149, ssa_148) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_151 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_153 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	vec3 32 ssa_154 = vec3 ssa_153.x, ssa_153.y, ssa_153.z
	vec3 32 ssa_155 = fsub ssa_151, ssa_153.xyz
	vec1 32 ssa_156 = deref_var &outLightVec (shader_out vec3) 
	intrinsic store_deref (ssa_156, ssa_155) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_157) (0) /* access=0 */
	vec3 32 ssa_159 = vec3 ssa_158.x, ssa_158.y, ssa_158.z
	vec3 32 ssa_160 = fneg ssa_158.xyz
	vec1 32 ssa_161 = deref_var &outViewVec (shader_out vec3) 
	intrinsic store_deref (ssa_161, ssa_160) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_split_var_copies
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	intrinsic store_deref (ssa_162, ssa_9) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_13 = intrinsic load_deref (ssa_10) (0) /* access=0 */
		vec1 32 ssa_14 = mov ssa_13.y
		vec1 1 ssa_16 = feq ssa_13.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		intrinsic store_deref (ssa_163, ssa_16) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	intrinsic store_deref (ssa_164, ssa_18) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_4 block_5 */
	if ssa_18 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_22 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_23 = mov ssa_22.z
		vec1 1 ssa_25 = feq ssa_22.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		intrinsic store_deref (ssa_165, ssa_25) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	/* succs: block_7 block_8 */
	if ssa_27 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_34, ssa_33) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_36 = intrinsic load_deref (ssa_35) (0) /* access=0 */
		vec1 32 ssa_37 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_37, ssa_36) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec4 32 ssa_65 = fmul ssa_41, ssa_58.xxxx
	vec1 32 ssa_66 = mov ssa_58.y
	vec4 32 ssa_67 = fmul ssa_46, ssa_58.yyyy
	vec4 32 ssa_68 = fadd ssa_65, ssa_67
	vec1 32 ssa_69 = mov ssa_58.z
	vec4 32 ssa_70 = fmul ssa_51, ssa_58.zzzz
	vec4 32 ssa_71 = fadd ssa_68, ssa_70
	vec1 32 ssa_72 = mov ssa_62
	vec4 32 ssa_73 = fmul ssa_56, ssa_62.xxxx
	vec4 32 ssa_74 = fadd ssa_71, ssa_73
	vec1 32 ssa_75 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_76 = deref_struct &ssa_75->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_76, ssa_74) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_97.x
	vec1 32 ssa_99 = mov ssa_97.y
	vec1 32 ssa_100 = mov ssa_97.z
	vec4 32 ssa_102 = vec4 ssa_97.x, ssa_97.y, ssa_97.z, ssa_101
	vec1 32 ssa_103 = mov ssa_97.x
	vec4 32 ssa_104 = fmul ssa_80, ssa_97.xxxx
	vec1 32 ssa_105 = mov ssa_97.y
	vec4 32 ssa_106 = fmul ssa_85, ssa_97.yyyy
	vec4 32 ssa_107 = fadd ssa_104, ssa_106
	vec1 32 ssa_108 = mov ssa_97.z
	vec4 32 ssa_109 = fmul ssa_90, ssa_97.zzzz
	vec4 32 ssa_110 = fadd ssa_107, ssa_109
	vec1 32 ssa_111 = mov ssa_101
	vec4 32 ssa_112 = fmul ssa_95, ssa_101.xxxx
	vec4 32 ssa_113 = fadd ssa_110, ssa_112
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	intrinsic store_deref (ssa_114, ssa_113) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_138 = intrinsic load_deref (ssa_137) (0) /* access=0 */
	vec1 32 ssa_139 = mov ssa_138.x
	vec3 32 ssa_140 = fmul ssa_118.xyz, ssa_138.xxx
	vec1 32 ssa_141 = mov ssa_138.y
	vec3 32 ssa_142 = fmul ssa_123.xyz, ssa_138.yyy
	vec3 32 ssa_143 = fadd ssa_140, ssa_142
	vec1 32 ssa_144 = mov ssa_138.z
	vec3 32 ssa_145 = fmul ssa_128.xyz, ssa_138.zzz
	vec3 32 ssa_146 = fadd ssa_143, ssa_145
	vec1 32 ssa_147 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_147, ssa_146) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	intrinsic store_deref (ssa_149, ssa_148) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_151 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_153 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	vec3 32 ssa_154 = vec3 ssa_153.x, ssa_153.y, ssa_153.z
	vec3 32 ssa_155 = fsub ssa_151, ssa_153.xyz
	vec1 32 ssa_156 = deref_var &outLightVec (shader_out vec3) 
	intrinsic store_deref (ssa_156, ssa_155) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_157) (0) /* access=0 */
	vec3 32 ssa_159 = vec3 ssa_158.x, ssa_158.y, ssa_158.z
	vec3 32 ssa_160 = fneg ssa_158.xyz
	vec1 32 ssa_161 = deref_var &outViewVec (shader_out vec3) 
	intrinsic store_deref (ssa_161, ssa_160) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_split_per_member_structs
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float .field1 (VARYING_SLOT_PSIZ.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float[1] .field2 (VARYING_SLOT_CLIP_DIST0.x, 0, 0) compact
decl_var shader_out INTERP_MODE_NONE float[1] .field3 (VARYING_SLOT_CULL_DIST0.x, 0, 0) compact
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	intrinsic store_deref (ssa_162, ssa_9) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_13 = intrinsic load_deref (ssa_10) (0) /* access=0 */
		vec1 32 ssa_14 = mov ssa_13.y
		vec1 1 ssa_16 = feq ssa_13.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		intrinsic store_deref (ssa_163, ssa_16) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	intrinsic store_deref (ssa_164, ssa_18) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_4 block_5 */
	if ssa_18 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_22 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_23 = mov ssa_22.z
		vec1 1 ssa_25 = feq ssa_22.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		intrinsic store_deref (ssa_165, ssa_25) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	/* succs: block_7 block_8 */
	if ssa_27 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_34, ssa_33) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_36 = intrinsic load_deref (ssa_35) (0) /* access=0 */
		vec1 32 ssa_37 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_37, ssa_36) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec4 32 ssa_65 = fmul ssa_41, ssa_58.xxxx
	vec1 32 ssa_66 = mov ssa_58.y
	vec4 32 ssa_67 = fmul ssa_46, ssa_58.yyyy
	vec4 32 ssa_68 = fadd ssa_65, ssa_67
	vec1 32 ssa_69 = mov ssa_58.z
	vec4 32 ssa_70 = fmul ssa_51, ssa_58.zzzz
	vec4 32 ssa_71 = fadd ssa_68, ssa_70
	vec1 32 ssa_72 = mov ssa_62
	vec4 32 ssa_73 = fmul ssa_56, ssa_62.xxxx
	vec4 32 ssa_74 = fadd ssa_71, ssa_73
	vec1 32 ssa_166 = deref_var &.field0 (shader_out vec4) 
	intrinsic store_deref (ssa_166, ssa_74) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_97.x
	vec1 32 ssa_99 = mov ssa_97.y
	vec1 32 ssa_100 = mov ssa_97.z
	vec4 32 ssa_102 = vec4 ssa_97.x, ssa_97.y, ssa_97.z, ssa_101
	vec1 32 ssa_103 = mov ssa_97.x
	vec4 32 ssa_104 = fmul ssa_80, ssa_97.xxxx
	vec1 32 ssa_105 = mov ssa_97.y
	vec4 32 ssa_106 = fmul ssa_85, ssa_97.yyyy
	vec4 32 ssa_107 = fadd ssa_104, ssa_106
	vec1 32 ssa_108 = mov ssa_97.z
	vec4 32 ssa_109 = fmul ssa_90, ssa_97.zzzz
	vec4 32 ssa_110 = fadd ssa_107, ssa_109
	vec1 32 ssa_111 = mov ssa_101
	vec4 32 ssa_112 = fmul ssa_95, ssa_101.xxxx
	vec4 32 ssa_113 = fadd ssa_110, ssa_112
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	intrinsic store_deref (ssa_114, ssa_113) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_138 = intrinsic load_deref (ssa_137) (0) /* access=0 */
	vec1 32 ssa_139 = mov ssa_138.x
	vec3 32 ssa_140 = fmul ssa_118.xyz, ssa_138.xxx
	vec1 32 ssa_141 = mov ssa_138.y
	vec3 32 ssa_142 = fmul ssa_123.xyz, ssa_138.yyy
	vec3 32 ssa_143 = fadd ssa_140, ssa_142
	vec1 32 ssa_144 = mov ssa_138.z
	vec3 32 ssa_145 = fmul ssa_128.xyz, ssa_138.zzz
	vec3 32 ssa_146 = fadd ssa_143, ssa_145
	vec1 32 ssa_147 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_147, ssa_146) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	intrinsic store_deref (ssa_149, ssa_148) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_151 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_153 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	vec3 32 ssa_154 = vec3 ssa_153.x, ssa_153.y, ssa_153.z
	vec3 32 ssa_155 = fsub ssa_151, ssa_153.xyz
	vec1 32 ssa_156 = deref_var &outLightVec (shader_out vec3) 
	intrinsic store_deref (ssa_156, ssa_155) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_157) (0) /* access=0 */
	vec3 32 ssa_159 = vec3 ssa_158.x, ssa_158.y, ssa_158.z
	vec3 32 ssa_160 = fneg ssa_158.xyz
	vec1 32 ssa_161 = deref_var &outViewVec (shader_out vec3) 
	intrinsic store_deref (ssa_161, ssa_160) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_remove_dead_variables
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	intrinsic store_deref (ssa_162, ssa_9) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_13 = intrinsic load_deref (ssa_10) (0) /* access=0 */
		vec1 32 ssa_14 = mov ssa_13.y
		vec1 1 ssa_16 = feq ssa_13.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		intrinsic store_deref (ssa_163, ssa_16) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	intrinsic store_deref (ssa_164, ssa_18) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_4 block_5 */
	if ssa_18 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_22 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_23 = mov ssa_22.z
		vec1 1 ssa_25 = feq ssa_22.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		intrinsic store_deref (ssa_165, ssa_25) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	/* succs: block_7 block_8 */
	if ssa_27 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_34, ssa_33) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_36 = intrinsic load_deref (ssa_35) (0) /* access=0 */
		vec1 32 ssa_37 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_37, ssa_36) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec4 32 ssa_65 = fmul ssa_41, ssa_58.xxxx
	vec1 32 ssa_66 = mov ssa_58.y
	vec4 32 ssa_67 = fmul ssa_46, ssa_58.yyyy
	vec4 32 ssa_68 = fadd ssa_65, ssa_67
	vec1 32 ssa_69 = mov ssa_58.z
	vec4 32 ssa_70 = fmul ssa_51, ssa_58.zzzz
	vec4 32 ssa_71 = fadd ssa_68, ssa_70
	vec1 32 ssa_72 = mov ssa_62
	vec4 32 ssa_73 = fmul ssa_56, ssa_62.xxxx
	vec4 32 ssa_74 = fadd ssa_71, ssa_73
	vec1 32 ssa_166 = deref_var &.field0 (shader_out vec4) 
	intrinsic store_deref (ssa_166, ssa_74) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_97.x
	vec1 32 ssa_99 = mov ssa_97.y
	vec1 32 ssa_100 = mov ssa_97.z
	vec4 32 ssa_102 = vec4 ssa_97.x, ssa_97.y, ssa_97.z, ssa_101
	vec1 32 ssa_103 = mov ssa_97.x
	vec4 32 ssa_104 = fmul ssa_80, ssa_97.xxxx
	vec1 32 ssa_105 = mov ssa_97.y
	vec4 32 ssa_106 = fmul ssa_85, ssa_97.yyyy
	vec4 32 ssa_107 = fadd ssa_104, ssa_106
	vec1 32 ssa_108 = mov ssa_97.z
	vec4 32 ssa_109 = fmul ssa_90, ssa_97.zzzz
	vec4 32 ssa_110 = fadd ssa_107, ssa_109
	vec1 32 ssa_111 = mov ssa_101
	vec4 32 ssa_112 = fmul ssa_95, ssa_101.xxxx
	vec4 32 ssa_113 = fadd ssa_110, ssa_112
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	intrinsic store_deref (ssa_114, ssa_113) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_138 = intrinsic load_deref (ssa_137) (0) /* access=0 */
	vec1 32 ssa_139 = mov ssa_138.x
	vec3 32 ssa_140 = fmul ssa_118.xyz, ssa_138.xxx
	vec1 32 ssa_141 = mov ssa_138.y
	vec3 32 ssa_142 = fmul ssa_123.xyz, ssa_138.yyy
	vec3 32 ssa_143 = fadd ssa_140, ssa_142
	vec1 32 ssa_144 = mov ssa_138.z
	vec3 32 ssa_145 = fmul ssa_128.xyz, ssa_138.zzz
	vec3 32 ssa_146 = fadd ssa_143, ssa_145
	vec1 32 ssa_147 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_147, ssa_146) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	intrinsic store_deref (ssa_149, ssa_148) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_151 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_153 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	vec3 32 ssa_154 = vec3 ssa_153.x, ssa_153.y, ssa_153.z
	vec3 32 ssa_155 = fsub ssa_151, ssa_153.xyz
	vec1 32 ssa_156 = deref_var &outLightVec (shader_out vec3) 
	intrinsic store_deref (ssa_156, ssa_155) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_157) (0) /* access=0 */
	vec3 32 ssa_159 = vec3 ssa_158.x, ssa_158.y, ssa_158.z
	vec3 32 ssa_160 = fneg ssa_158.xyz
	vec1 32 ssa_161 = deref_var &outViewVec (shader_out vec3) 
	intrinsic store_deref (ssa_161, ssa_160) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_propagate_invariant
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	intrinsic store_deref (ssa_162, ssa_9) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_13 = intrinsic load_deref (ssa_10) (0) /* access=0 */
		vec1 32 ssa_14 = mov ssa_13.y
		vec1 1 ssa_16 = feq ssa_13.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		intrinsic store_deref (ssa_163, ssa_16) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	intrinsic store_deref (ssa_164, ssa_18) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_4 block_5 */
	if ssa_18 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_22 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_23 = mov ssa_22.z
		vec1 1 ssa_25 = feq ssa_22.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		intrinsic store_deref (ssa_165, ssa_25) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	/* succs: block_7 block_8 */
	if ssa_27 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_34, ssa_33) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_36 = intrinsic load_deref (ssa_35) (0) /* access=0 */
		vec1 32 ssa_37 = deref_var &outColor (shader_out vec3) 
		intrinsic store_deref (ssa_37, ssa_36) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec4 32 ssa_65 = fmul ssa_41, ssa_58.xxxx
	vec1 32 ssa_66 = mov ssa_58.y
	vec4 32 ssa_67 = fmul ssa_46, ssa_58.yyyy
	vec4 32 ssa_68 = fadd ssa_65, ssa_67
	vec1 32 ssa_69 = mov ssa_58.z
	vec4 32 ssa_70 = fmul ssa_51, ssa_58.zzzz
	vec4 32 ssa_71 = fadd ssa_68, ssa_70
	vec1 32 ssa_72 = mov ssa_62
	vec4 32 ssa_73 = fmul ssa_56, ssa_62.xxxx
	vec4 32 ssa_74 = fadd ssa_71, ssa_73
	vec1 32 ssa_166 = deref_var &.field0 (shader_out vec4) 
	intrinsic store_deref (ssa_166, ssa_74) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_97.x
	vec1 32 ssa_99 = mov ssa_97.y
	vec1 32 ssa_100 = mov ssa_97.z
	vec4 32 ssa_102 = vec4 ssa_97.x, ssa_97.y, ssa_97.z, ssa_101
	vec1 32 ssa_103 = mov ssa_97.x
	vec4 32 ssa_104 = fmul ssa_80, ssa_97.xxxx
	vec1 32 ssa_105 = mov ssa_97.y
	vec4 32 ssa_106 = fmul ssa_85, ssa_97.yyyy
	vec4 32 ssa_107 = fadd ssa_104, ssa_106
	vec1 32 ssa_108 = mov ssa_97.z
	vec4 32 ssa_109 = fmul ssa_90, ssa_97.zzzz
	vec4 32 ssa_110 = fadd ssa_107, ssa_109
	vec1 32 ssa_111 = mov ssa_101
	vec4 32 ssa_112 = fmul ssa_95, ssa_101.xxxx
	vec4 32 ssa_113 = fadd ssa_110, ssa_112
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	intrinsic store_deref (ssa_114, ssa_113) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_138 = intrinsic load_deref (ssa_137) (0) /* access=0 */
	vec1 32 ssa_139 = mov ssa_138.x
	vec3 32 ssa_140 = fmul ssa_118.xyz, ssa_138.xxx
	vec1 32 ssa_141 = mov ssa_138.y
	vec3 32 ssa_142 = fmul ssa_123.xyz, ssa_138.yyy
	vec3 32 ssa_143 = fadd ssa_140, ssa_142
	vec1 32 ssa_144 = mov ssa_138.z
	vec3 32 ssa_145 = fmul ssa_128.xyz, ssa_138.zzz
	vec3 32 ssa_146 = fadd ssa_143, ssa_145
	vec1 32 ssa_147 = deref_var &outNormal (shader_out vec3) 
	intrinsic store_deref (ssa_147, ssa_146) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	intrinsic store_deref (ssa_149, ssa_148) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_151 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_153 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	vec3 32 ssa_154 = vec3 ssa_153.x, ssa_153.y, ssa_153.z
	vec3 32 ssa_155 = fsub ssa_151, ssa_153.xyz
	vec1 32 ssa_156 = deref_var &outLightVec (shader_out vec3) 
	intrinsic store_deref (ssa_156, ssa_155) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_157) (0) /* access=0 */
	vec3 32 ssa_159 = vec3 ssa_158.x, ssa_158.y, ssa_158.z
	vec3 32 ssa_160 = fneg ssa_158.xyz
	vec1 32 ssa_161 = deref_var &outViewVec (shader_out vec3) 
	intrinsic store_deref (ssa_161, ssa_160) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_lower_io_to_temporaries
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outNormal-temp (shader_temp vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	intrinsic store_deref (ssa_162, ssa_9) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_13 = intrinsic load_deref (ssa_10) (0) /* access=0 */
		vec1 32 ssa_14 = mov ssa_13.y
		vec1 1 ssa_16 = feq ssa_13.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		intrinsic store_deref (ssa_163, ssa_16) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	intrinsic store_deref (ssa_164, ssa_18) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_4 block_5 */
	if ssa_18 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_22 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_23 = mov ssa_22.z
		vec1 1 ssa_25 = feq ssa_22.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		intrinsic store_deref (ssa_165, ssa_25) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	/* succs: block_7 block_8 */
	if ssa_27 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &out@outColor-temp (shader_temp vec3) 
		intrinsic store_deref (ssa_34, ssa_33) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_36 = intrinsic load_deref (ssa_35) (0) /* access=0 */
		vec1 32 ssa_37 = deref_var &out@outColor-temp (shader_temp vec3) 
		intrinsic store_deref (ssa_37, ssa_36) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec4 32 ssa_65 = fmul ssa_41, ssa_58.xxxx
	vec1 32 ssa_66 = mov ssa_58.y
	vec4 32 ssa_67 = fmul ssa_46, ssa_58.yyyy
	vec4 32 ssa_68 = fadd ssa_65, ssa_67
	vec1 32 ssa_69 = mov ssa_58.z
	vec4 32 ssa_70 = fmul ssa_51, ssa_58.zzzz
	vec4 32 ssa_71 = fadd ssa_68, ssa_70
	vec1 32 ssa_72 = mov ssa_62
	vec4 32 ssa_73 = fmul ssa_56, ssa_62.xxxx
	vec4 32 ssa_74 = fadd ssa_71, ssa_73
	vec1 32 ssa_166 = deref_var &out@.field0-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_166, ssa_74) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_97.x
	vec1 32 ssa_99 = mov ssa_97.y
	vec1 32 ssa_100 = mov ssa_97.z
	vec4 32 ssa_102 = vec4 ssa_97.x, ssa_97.y, ssa_97.z, ssa_101
	vec1 32 ssa_103 = mov ssa_97.x
	vec4 32 ssa_104 = fmul ssa_80, ssa_97.xxxx
	vec1 32 ssa_105 = mov ssa_97.y
	vec4 32 ssa_106 = fmul ssa_85, ssa_97.yyyy
	vec4 32 ssa_107 = fadd ssa_104, ssa_106
	vec1 32 ssa_108 = mov ssa_97.z
	vec4 32 ssa_109 = fmul ssa_90, ssa_97.zzzz
	vec4 32 ssa_110 = fadd ssa_107, ssa_109
	vec1 32 ssa_111 = mov ssa_101
	vec4 32 ssa_112 = fmul ssa_95, ssa_101.xxxx
	vec4 32 ssa_113 = fadd ssa_110, ssa_112
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	intrinsic store_deref (ssa_114, ssa_113) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_138 = intrinsic load_deref (ssa_137) (0) /* access=0 */
	vec1 32 ssa_139 = mov ssa_138.x
	vec3 32 ssa_140 = fmul ssa_118.xyz, ssa_138.xxx
	vec1 32 ssa_141 = mov ssa_138.y
	vec3 32 ssa_142 = fmul ssa_123.xyz, ssa_138.yyy
	vec3 32 ssa_143 = fadd ssa_140, ssa_142
	vec1 32 ssa_144 = mov ssa_138.z
	vec3 32 ssa_145 = fmul ssa_128.xyz, ssa_138.zzz
	vec3 32 ssa_146 = fadd ssa_143, ssa_145
	vec1 32 ssa_147 = deref_var &out@outNormal-temp (shader_temp vec3) 
	intrinsic store_deref (ssa_147, ssa_146) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	intrinsic store_deref (ssa_149, ssa_148) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_151 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_153 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	vec3 32 ssa_154 = vec3 ssa_153.x, ssa_153.y, ssa_153.z
	vec3 32 ssa_155 = fsub ssa_151, ssa_153.xyz
	vec1 32 ssa_156 = deref_var &out@outLightVec-temp (shader_temp vec3) 
	intrinsic store_deref (ssa_156, ssa_155) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_157) (0) /* access=0 */
	vec3 32 ssa_159 = vec3 ssa_158.x, ssa_158.y, ssa_158.z
	vec3 32 ssa_160 = fneg ssa_158.xyz
	vec1 32 ssa_161 = deref_var &out@outViewVec-temp (shader_temp vec3) 
	intrinsic store_deref (ssa_161, ssa_160) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_167 = deref_var &out@outNormal-temp (shader_temp vec3) 
	vec1 32 ssa_168 = deref_var &outNormal (shader_out vec3) 
	intrinsic copy_deref (ssa_168, ssa_167) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_169 = deref_var &out@outColor-temp (shader_temp vec3) 
	vec1 32 ssa_170 = deref_var &outColor (shader_out vec3) 
	intrinsic copy_deref (ssa_170, ssa_169) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_171 = deref_var &out@outLightVec-temp (shader_temp vec3) 
	vec1 32 ssa_172 = deref_var &outLightVec (shader_out vec3) 
	intrinsic copy_deref (ssa_172, ssa_171) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_173 = deref_var &out@outViewVec-temp (shader_temp vec3) 
	vec1 32 ssa_174 = deref_var &outViewVec (shader_out vec3) 
	intrinsic copy_deref (ssa_174, ssa_173) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_175 = deref_var &out@.field0-temp (shader_temp vec4) 
	vec1 32 ssa_176 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_176, ssa_175) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_lower_frexp
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outNormal-temp (shader_temp vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	intrinsic store_deref (ssa_162, ssa_9) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_13 = intrinsic load_deref (ssa_10) (0) /* access=0 */
		vec1 32 ssa_14 = mov ssa_13.y
		vec1 1 ssa_16 = feq ssa_13.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		intrinsic store_deref (ssa_163, ssa_16) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	intrinsic store_deref (ssa_164, ssa_18) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_4 block_5 */
	if ssa_18 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_22 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_23 = mov ssa_22.z
		vec1 1 ssa_25 = feq ssa_22.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		intrinsic store_deref (ssa_165, ssa_25) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	/* succs: block_7 block_8 */
	if ssa_27 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &out@outColor-temp (shader_temp vec3) 
		intrinsic store_deref (ssa_34, ssa_33) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_36 = intrinsic load_deref (ssa_35) (0) /* access=0 */
		vec1 32 ssa_37 = deref_var &out@outColor-temp (shader_temp vec3) 
		intrinsic store_deref (ssa_37, ssa_36) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec4 32 ssa_65 = fmul ssa_41, ssa_58.xxxx
	vec1 32 ssa_66 = mov ssa_58.y
	vec4 32 ssa_67 = fmul ssa_46, ssa_58.yyyy
	vec4 32 ssa_68 = fadd ssa_65, ssa_67
	vec1 32 ssa_69 = mov ssa_58.z
	vec4 32 ssa_70 = fmul ssa_51, ssa_58.zzzz
	vec4 32 ssa_71 = fadd ssa_68, ssa_70
	vec1 32 ssa_72 = mov ssa_62
	vec4 32 ssa_73 = fmul ssa_56, ssa_62.xxxx
	vec4 32 ssa_74 = fadd ssa_71, ssa_73
	vec1 32 ssa_166 = deref_var &out@.field0-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_166, ssa_74) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_97.x
	vec1 32 ssa_99 = mov ssa_97.y
	vec1 32 ssa_100 = mov ssa_97.z
	vec4 32 ssa_102 = vec4 ssa_97.x, ssa_97.y, ssa_97.z, ssa_101
	vec1 32 ssa_103 = mov ssa_97.x
	vec4 32 ssa_104 = fmul ssa_80, ssa_97.xxxx
	vec1 32 ssa_105 = mov ssa_97.y
	vec4 32 ssa_106 = fmul ssa_85, ssa_97.yyyy
	vec4 32 ssa_107 = fadd ssa_104, ssa_106
	vec1 32 ssa_108 = mov ssa_97.z
	vec4 32 ssa_109 = fmul ssa_90, ssa_97.zzzz
	vec4 32 ssa_110 = fadd ssa_107, ssa_109
	vec1 32 ssa_111 = mov ssa_101
	vec4 32 ssa_112 = fmul ssa_95, ssa_101.xxxx
	vec4 32 ssa_113 = fadd ssa_110, ssa_112
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	intrinsic store_deref (ssa_114, ssa_113) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_138 = intrinsic load_deref (ssa_137) (0) /* access=0 */
	vec1 32 ssa_139 = mov ssa_138.x
	vec3 32 ssa_140 = fmul ssa_118.xyz, ssa_138.xxx
	vec1 32 ssa_141 = mov ssa_138.y
	vec3 32 ssa_142 = fmul ssa_123.xyz, ssa_138.yyy
	vec3 32 ssa_143 = fadd ssa_140, ssa_142
	vec1 32 ssa_144 = mov ssa_138.z
	vec3 32 ssa_145 = fmul ssa_128.xyz, ssa_138.zzz
	vec3 32 ssa_146 = fadd ssa_143, ssa_145
	vec1 32 ssa_147 = deref_var &out@outNormal-temp (shader_temp vec3) 
	intrinsic store_deref (ssa_147, ssa_146) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	intrinsic store_deref (ssa_149, ssa_148) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_151 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_153 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	vec3 32 ssa_154 = vec3 ssa_153.x, ssa_153.y, ssa_153.z
	vec3 32 ssa_155 = fsub ssa_151, ssa_153.xyz
	vec1 32 ssa_156 = deref_var &out@outLightVec-temp (shader_temp vec3) 
	intrinsic store_deref (ssa_156, ssa_155) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_157) (0) /* access=0 */
	vec3 32 ssa_159 = vec3 ssa_158.x, ssa_158.y, ssa_158.z
	vec3 32 ssa_160 = fneg ssa_158.xyz
	vec1 32 ssa_161 = deref_var &out@outViewVec-temp (shader_temp vec3) 
	intrinsic store_deref (ssa_161, ssa_160) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_167 = deref_var &out@outNormal-temp (shader_temp vec3) 
	vec1 32 ssa_168 = deref_var &outNormal (shader_out vec3) 
	intrinsic copy_deref (ssa_168, ssa_167) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_169 = deref_var &out@outColor-temp (shader_temp vec3) 
	vec1 32 ssa_170 = deref_var &outColor (shader_out vec3) 
	intrinsic copy_deref (ssa_170, ssa_169) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_171 = deref_var &out@outLightVec-temp (shader_temp vec3) 
	vec1 32 ssa_172 = deref_var &outLightVec (shader_out vec3) 
	intrinsic copy_deref (ssa_172, ssa_171) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_173 = deref_var &out@outViewVec-temp (shader_temp vec3) 
	vec1 32 ssa_174 = deref_var &outViewVec (shader_out vec3) 
	intrinsic copy_deref (ssa_174, ssa_173) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_175 = deref_var &out@.field0-temp (shader_temp vec4) 
	vec1 32 ssa_176 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_176, ssa_175) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_lower_alu_to_scalar
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outNormal-temp (shader_temp vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	intrinsic store_deref (ssa_162, ssa_9) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_13 = intrinsic load_deref (ssa_10) (0) /* access=0 */
		vec1 32 ssa_14 = mov ssa_13.y
		vec1 1 ssa_16 = feq ssa_13.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		intrinsic store_deref (ssa_163, ssa_16) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	intrinsic store_deref (ssa_164, ssa_18) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_4 block_5 */
	if ssa_18 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_22 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_23 = mov ssa_22.z
		vec1 1 ssa_25 = feq ssa_22.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		intrinsic store_deref (ssa_165, ssa_25) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	/* succs: block_7 block_8 */
	if ssa_27 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &out@outColor-temp (shader_temp vec3) 
		intrinsic store_deref (ssa_34, ssa_33) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_36 = intrinsic load_deref (ssa_35) (0) /* access=0 */
		vec1 32 ssa_37 = deref_var &out@outColor-temp (shader_temp vec3) 
		intrinsic store_deref (ssa_37, ssa_36) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec1 32 ssa_177 = fmul ssa_41.x, ssa_58.x
	vec1 32 ssa_178 = fmul ssa_41.y, ssa_58.x
	vec1 32 ssa_179 = fmul ssa_41.z, ssa_58.x
	vec1 32 ssa_180 = fmul ssa_41.w, ssa_58.x
	vec4 32 ssa_181 = vec4 ssa_177, ssa_178, ssa_179, ssa_180
	vec1 32 ssa_66 = mov ssa_58.y
	vec1 32 ssa_182 = fmul ssa_46.x, ssa_58.y
	vec1 32 ssa_183 = fmul ssa_46.y, ssa_58.y
	vec1 32 ssa_184 = fmul ssa_46.z, ssa_58.y
	vec1 32 ssa_185 = fmul ssa_46.w, ssa_58.y
	vec4 32 ssa_186 = vec4 ssa_182, ssa_183, ssa_184, ssa_185
	vec1 32 ssa_187 = fadd ssa_181.x, ssa_186.x
	vec1 32 ssa_188 = fadd ssa_181.y, ssa_186.y
	vec1 32 ssa_189 = fadd ssa_181.z, ssa_186.z
	vec1 32 ssa_190 = fadd ssa_181.w, ssa_186.w
	vec4 32 ssa_191 = vec4 ssa_187, ssa_188, ssa_189, ssa_190
	vec1 32 ssa_69 = mov ssa_58.z
	vec1 32 ssa_192 = fmul ssa_51.x, ssa_58.z
	vec1 32 ssa_193 = fmul ssa_51.y, ssa_58.z
	vec1 32 ssa_194 = fmul ssa_51.z, ssa_58.z
	vec1 32 ssa_195 = fmul ssa_51.w, ssa_58.z
	vec4 32 ssa_196 = vec4 ssa_192, ssa_193, ssa_194, ssa_195
	vec1 32 ssa_197 = fadd ssa_191.x, ssa_196.x
	vec1 32 ssa_198 = fadd ssa_191.y, ssa_196.y
	vec1 32 ssa_199 = fadd ssa_191.z, ssa_196.z
	vec1 32 ssa_200 = fadd ssa_191.w, ssa_196.w
	vec4 32 ssa_201 = vec4 ssa_197, ssa_198, ssa_199, ssa_200
	vec1 32 ssa_72 = mov ssa_62
	vec1 32 ssa_202 = fmul ssa_56.x, ssa_62
	vec1 32 ssa_203 = fmul ssa_56.y, ssa_62
	vec1 32 ssa_204 = fmul ssa_56.z, ssa_62
	vec1 32 ssa_205 = fmul ssa_56.w, ssa_62
	vec4 32 ssa_206 = vec4 ssa_202, ssa_203, ssa_204, ssa_205
	vec1 32 ssa_207 = fadd ssa_201.x, ssa_206.x
	vec1 32 ssa_208 = fadd ssa_201.y, ssa_206.y
	vec1 32 ssa_209 = fadd ssa_201.z, ssa_206.z
	vec1 32 ssa_210 = fadd ssa_201.w, ssa_206.w
	vec4 32 ssa_211 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	vec1 32 ssa_166 = deref_var &out@.field0-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_166, ssa_211) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_97.x
	vec1 32 ssa_99 = mov ssa_97.y
	vec1 32 ssa_100 = mov ssa_97.z
	vec4 32 ssa_102 = vec4 ssa_97.x, ssa_97.y, ssa_97.z, ssa_101
	vec1 32 ssa_103 = mov ssa_97.x
	vec1 32 ssa_212 = fmul ssa_80.x, ssa_97.x
	vec1 32 ssa_213 = fmul ssa_80.y, ssa_97.x
	vec1 32 ssa_214 = fmul ssa_80.z, ssa_97.x
	vec1 32 ssa_215 = fmul ssa_80.w, ssa_97.x
	vec4 32 ssa_216 = vec4 ssa_212, ssa_213, ssa_214, ssa_215
	vec1 32 ssa_105 = mov ssa_97.y
	vec1 32 ssa_217 = fmul ssa_85.x, ssa_97.y
	vec1 32 ssa_218 = fmul ssa_85.y, ssa_97.y
	vec1 32 ssa_219 = fmul ssa_85.z, ssa_97.y
	vec1 32 ssa_220 = fmul ssa_85.w, ssa_97.y
	vec4 32 ssa_221 = vec4 ssa_217, ssa_218, ssa_219, ssa_220
	vec1 32 ssa_222 = fadd ssa_216.x, ssa_221.x
	vec1 32 ssa_223 = fadd ssa_216.y, ssa_221.y
	vec1 32 ssa_224 = fadd ssa_216.z, ssa_221.z
	vec1 32 ssa_225 = fadd ssa_216.w, ssa_221.w
	vec4 32 ssa_226 = vec4 ssa_222, ssa_223, ssa_224, ssa_225
	vec1 32 ssa_108 = mov ssa_97.z
	vec1 32 ssa_227 = fmul ssa_90.x, ssa_97.z
	vec1 32 ssa_228 = fmul ssa_90.y, ssa_97.z
	vec1 32 ssa_229 = fmul ssa_90.z, ssa_97.z
	vec1 32 ssa_230 = fmul ssa_90.w, ssa_97.z
	vec4 32 ssa_231 = vec4 ssa_227, ssa_228, ssa_229, ssa_230
	vec1 32 ssa_232 = fadd ssa_226.x, ssa_231.x
	vec1 32 ssa_233 = fadd ssa_226.y, ssa_231.y
	vec1 32 ssa_234 = fadd ssa_226.z, ssa_231.z
	vec1 32 ssa_235 = fadd ssa_226.w, ssa_231.w
	vec4 32 ssa_236 = vec4 ssa_232, ssa_233, ssa_234, ssa_235
	vec1 32 ssa_111 = mov ssa_101
	vec1 32 ssa_237 = fmul ssa_95.x, ssa_101
	vec1 32 ssa_238 = fmul ssa_95.y, ssa_101
	vec1 32 ssa_239 = fmul ssa_95.z, ssa_101
	vec1 32 ssa_240 = fmul ssa_95.w, ssa_101
	vec4 32 ssa_241 = vec4 ssa_237, ssa_238, ssa_239, ssa_240
	vec1 32 ssa_242 = fadd ssa_236.x, ssa_241.x
	vec1 32 ssa_243 = fadd ssa_236.y, ssa_241.y
	vec1 32 ssa_244 = fadd ssa_236.z, ssa_241.z
	vec1 32 ssa_245 = fadd ssa_236.w, ssa_241.w
	vec4 32 ssa_246 = vec4 ssa_242, ssa_243, ssa_244, ssa_245
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	intrinsic store_deref (ssa_114, ssa_246) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_138 = intrinsic load_deref (ssa_137) (0) /* access=0 */
	vec1 32 ssa_139 = mov ssa_138.x
	vec1 32 ssa_247 = fmul ssa_118.x, ssa_138.x
	vec1 32 ssa_248 = fmul ssa_118.y, ssa_138.x
	vec1 32 ssa_249 = fmul ssa_118.z, ssa_138.x
	vec3 32 ssa_250 = vec3 ssa_247, ssa_248, ssa_249
	vec1 32 ssa_141 = mov ssa_138.y
	vec1 32 ssa_251 = fmul ssa_123.x, ssa_138.y
	vec1 32 ssa_252 = fmul ssa_123.y, ssa_138.y
	vec1 32 ssa_253 = fmul ssa_123.z, ssa_138.y
	vec3 32 ssa_254 = vec3 ssa_251, ssa_252, ssa_253
	vec1 32 ssa_255 = fadd ssa_250.x, ssa_254.x
	vec1 32 ssa_256 = fadd ssa_250.y, ssa_254.y
	vec1 32 ssa_257 = fadd ssa_250.z, ssa_254.z
	vec3 32 ssa_258 = vec3 ssa_255, ssa_256, ssa_257
	vec1 32 ssa_144 = mov ssa_138.z
	vec1 32 ssa_259 = fmul ssa_128.x, ssa_138.z
	vec1 32 ssa_260 = fmul ssa_128.y, ssa_138.z
	vec1 32 ssa_261 = fmul ssa_128.z, ssa_138.z
	vec3 32 ssa_262 = vec3 ssa_259, ssa_260, ssa_261
	vec1 32 ssa_263 = fadd ssa_258.x, ssa_262.x
	vec1 32 ssa_264 = fadd ssa_258.y, ssa_262.y
	vec1 32 ssa_265 = fadd ssa_258.z, ssa_262.z
	vec3 32 ssa_266 = vec3 ssa_263, ssa_264, ssa_265
	vec1 32 ssa_147 = deref_var &out@outNormal-temp (shader_temp vec3) 
	intrinsic store_deref (ssa_147, ssa_266) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	intrinsic store_deref (ssa_149, ssa_148) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_151 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_153 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	vec3 32 ssa_154 = vec3 ssa_153.x, ssa_153.y, ssa_153.z
	vec1 32 ssa_267 = fsub ssa_151.x, ssa_153.x
	vec1 32 ssa_268 = fsub ssa_151.y, ssa_153.y
	vec1 32 ssa_269 = fsub ssa_151.z, ssa_153.z
	vec3 32 ssa_270 = vec3 ssa_267, ssa_268, ssa_269
	vec1 32 ssa_156 = deref_var &out@outLightVec-temp (shader_temp vec3) 
	intrinsic store_deref (ssa_156, ssa_270) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_157) (0) /* access=0 */
	vec3 32 ssa_159 = vec3 ssa_158.x, ssa_158.y, ssa_158.z
	vec1 32 ssa_271 = fneg ssa_158.x
	vec1 32 ssa_272 = fneg ssa_158.y
	vec1 32 ssa_273 = fneg ssa_158.z
	vec3 32 ssa_274 = vec3 ssa_271, ssa_272, ssa_273
	vec1 32 ssa_161 = deref_var &out@outViewVec-temp (shader_temp vec3) 
	intrinsic store_deref (ssa_161, ssa_274) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_167 = deref_var &out@outNormal-temp (shader_temp vec3) 
	vec1 32 ssa_168 = deref_var &outNormal (shader_out vec3) 
	intrinsic copy_deref (ssa_168, ssa_167) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_169 = deref_var &out@outColor-temp (shader_temp vec3) 
	vec1 32 ssa_170 = deref_var &outColor (shader_out vec3) 
	intrinsic copy_deref (ssa_170, ssa_169) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_171 = deref_var &out@outLightVec-temp (shader_temp vec3) 
	vec1 32 ssa_172 = deref_var &outLightVec (shader_out vec3) 
	intrinsic copy_deref (ssa_172, ssa_171) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_173 = deref_var &out@outViewVec-temp (shader_temp vec3) 
	vec1 32 ssa_174 = deref_var &outViewVec (shader_out vec3) 
	intrinsic copy_deref (ssa_174, ssa_173) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_175 = deref_var &out@.field0-temp (shader_temp vec4) 
	vec1 32 ssa_176 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_176, ssa_175) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_lower_tex
nir_normalize_cubemap_coords
nir_lower_global_vars_to_local
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outNormal-temp (function_temp vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	intrinsic store_deref (ssa_162, ssa_9) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_13 = intrinsic load_deref (ssa_10) (0) /* access=0 */
		vec1 32 ssa_14 = mov ssa_13.y
		vec1 1 ssa_16 = feq ssa_13.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		intrinsic store_deref (ssa_163, ssa_16) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	intrinsic store_deref (ssa_164, ssa_18) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_4 block_5 */
	if ssa_18 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_22 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_23 = mov ssa_22.z
		vec1 1 ssa_25 = feq ssa_22.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		intrinsic store_deref (ssa_165, ssa_25) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	/* succs: block_7 block_8 */
	if ssa_27 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &out@outColor-temp (function_temp vec3) 
		intrinsic store_deref (ssa_34, ssa_33) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_36 = intrinsic load_deref (ssa_35) (0) /* access=0 */
		vec1 32 ssa_37 = deref_var &out@outColor-temp (function_temp vec3) 
		intrinsic store_deref (ssa_37, ssa_36) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec1 32 ssa_177 = fmul ssa_41.x, ssa_58.x
	vec1 32 ssa_178 = fmul ssa_41.y, ssa_58.x
	vec1 32 ssa_179 = fmul ssa_41.z, ssa_58.x
	vec1 32 ssa_180 = fmul ssa_41.w, ssa_58.x
	vec4 32 ssa_181 = vec4 ssa_177, ssa_178, ssa_179, ssa_180
	vec1 32 ssa_66 = mov ssa_58.y
	vec1 32 ssa_182 = fmul ssa_46.x, ssa_58.y
	vec1 32 ssa_183 = fmul ssa_46.y, ssa_58.y
	vec1 32 ssa_184 = fmul ssa_46.z, ssa_58.y
	vec1 32 ssa_185 = fmul ssa_46.w, ssa_58.y
	vec4 32 ssa_186 = vec4 ssa_182, ssa_183, ssa_184, ssa_185
	vec1 32 ssa_187 = fadd ssa_181.x, ssa_186.x
	vec1 32 ssa_188 = fadd ssa_181.y, ssa_186.y
	vec1 32 ssa_189 = fadd ssa_181.z, ssa_186.z
	vec1 32 ssa_190 = fadd ssa_181.w, ssa_186.w
	vec4 32 ssa_191 = vec4 ssa_187, ssa_188, ssa_189, ssa_190
	vec1 32 ssa_69 = mov ssa_58.z
	vec1 32 ssa_192 = fmul ssa_51.x, ssa_58.z
	vec1 32 ssa_193 = fmul ssa_51.y, ssa_58.z
	vec1 32 ssa_194 = fmul ssa_51.z, ssa_58.z
	vec1 32 ssa_195 = fmul ssa_51.w, ssa_58.z
	vec4 32 ssa_196 = vec4 ssa_192, ssa_193, ssa_194, ssa_195
	vec1 32 ssa_197 = fadd ssa_191.x, ssa_196.x
	vec1 32 ssa_198 = fadd ssa_191.y, ssa_196.y
	vec1 32 ssa_199 = fadd ssa_191.z, ssa_196.z
	vec1 32 ssa_200 = fadd ssa_191.w, ssa_196.w
	vec4 32 ssa_201 = vec4 ssa_197, ssa_198, ssa_199, ssa_200
	vec1 32 ssa_72 = mov ssa_62
	vec1 32 ssa_202 = fmul ssa_56.x, ssa_62
	vec1 32 ssa_203 = fmul ssa_56.y, ssa_62
	vec1 32 ssa_204 = fmul ssa_56.z, ssa_62
	vec1 32 ssa_205 = fmul ssa_56.w, ssa_62
	vec4 32 ssa_206 = vec4 ssa_202, ssa_203, ssa_204, ssa_205
	vec1 32 ssa_207 = fadd ssa_201.x, ssa_206.x
	vec1 32 ssa_208 = fadd ssa_201.y, ssa_206.y
	vec1 32 ssa_209 = fadd ssa_201.z, ssa_206.z
	vec1 32 ssa_210 = fadd ssa_201.w, ssa_206.w
	vec4 32 ssa_211 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	vec1 32 ssa_166 = deref_var &out@.field0-temp (function_temp vec4) 
	intrinsic store_deref (ssa_166, ssa_211) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_97.x
	vec1 32 ssa_99 = mov ssa_97.y
	vec1 32 ssa_100 = mov ssa_97.z
	vec4 32 ssa_102 = vec4 ssa_97.x, ssa_97.y, ssa_97.z, ssa_101
	vec1 32 ssa_103 = mov ssa_97.x
	vec1 32 ssa_212 = fmul ssa_80.x, ssa_97.x
	vec1 32 ssa_213 = fmul ssa_80.y, ssa_97.x
	vec1 32 ssa_214 = fmul ssa_80.z, ssa_97.x
	vec1 32 ssa_215 = fmul ssa_80.w, ssa_97.x
	vec4 32 ssa_216 = vec4 ssa_212, ssa_213, ssa_214, ssa_215
	vec1 32 ssa_105 = mov ssa_97.y
	vec1 32 ssa_217 = fmul ssa_85.x, ssa_97.y
	vec1 32 ssa_218 = fmul ssa_85.y, ssa_97.y
	vec1 32 ssa_219 = fmul ssa_85.z, ssa_97.y
	vec1 32 ssa_220 = fmul ssa_85.w, ssa_97.y
	vec4 32 ssa_221 = vec4 ssa_217, ssa_218, ssa_219, ssa_220
	vec1 32 ssa_222 = fadd ssa_216.x, ssa_221.x
	vec1 32 ssa_223 = fadd ssa_216.y, ssa_221.y
	vec1 32 ssa_224 = fadd ssa_216.z, ssa_221.z
	vec1 32 ssa_225 = fadd ssa_216.w, ssa_221.w
	vec4 32 ssa_226 = vec4 ssa_222, ssa_223, ssa_224, ssa_225
	vec1 32 ssa_108 = mov ssa_97.z
	vec1 32 ssa_227 = fmul ssa_90.x, ssa_97.z
	vec1 32 ssa_228 = fmul ssa_90.y, ssa_97.z
	vec1 32 ssa_229 = fmul ssa_90.z, ssa_97.z
	vec1 32 ssa_230 = fmul ssa_90.w, ssa_97.z
	vec4 32 ssa_231 = vec4 ssa_227, ssa_228, ssa_229, ssa_230
	vec1 32 ssa_232 = fadd ssa_226.x, ssa_231.x
	vec1 32 ssa_233 = fadd ssa_226.y, ssa_231.y
	vec1 32 ssa_234 = fadd ssa_226.z, ssa_231.z
	vec1 32 ssa_235 = fadd ssa_226.w, ssa_231.w
	vec4 32 ssa_236 = vec4 ssa_232, ssa_233, ssa_234, ssa_235
	vec1 32 ssa_111 = mov ssa_101
	vec1 32 ssa_237 = fmul ssa_95.x, ssa_101
	vec1 32 ssa_238 = fmul ssa_95.y, ssa_101
	vec1 32 ssa_239 = fmul ssa_95.z, ssa_101
	vec1 32 ssa_240 = fmul ssa_95.w, ssa_101
	vec4 32 ssa_241 = vec4 ssa_237, ssa_238, ssa_239, ssa_240
	vec1 32 ssa_242 = fadd ssa_236.x, ssa_241.x
	vec1 32 ssa_243 = fadd ssa_236.y, ssa_241.y
	vec1 32 ssa_244 = fadd ssa_236.z, ssa_241.z
	vec1 32 ssa_245 = fadd ssa_236.w, ssa_241.w
	vec4 32 ssa_246 = vec4 ssa_242, ssa_243, ssa_244, ssa_245
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	intrinsic store_deref (ssa_114, ssa_246) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_138 = intrinsic load_deref (ssa_137) (0) /* access=0 */
	vec1 32 ssa_139 = mov ssa_138.x
	vec1 32 ssa_247 = fmul ssa_118.x, ssa_138.x
	vec1 32 ssa_248 = fmul ssa_118.y, ssa_138.x
	vec1 32 ssa_249 = fmul ssa_118.z, ssa_138.x
	vec3 32 ssa_250 = vec3 ssa_247, ssa_248, ssa_249
	vec1 32 ssa_141 = mov ssa_138.y
	vec1 32 ssa_251 = fmul ssa_123.x, ssa_138.y
	vec1 32 ssa_252 = fmul ssa_123.y, ssa_138.y
	vec1 32 ssa_253 = fmul ssa_123.z, ssa_138.y
	vec3 32 ssa_254 = vec3 ssa_251, ssa_252, ssa_253
	vec1 32 ssa_255 = fadd ssa_250.x, ssa_254.x
	vec1 32 ssa_256 = fadd ssa_250.y, ssa_254.y
	vec1 32 ssa_257 = fadd ssa_250.z, ssa_254.z
	vec3 32 ssa_258 = vec3 ssa_255, ssa_256, ssa_257
	vec1 32 ssa_144 = mov ssa_138.z
	vec1 32 ssa_259 = fmul ssa_128.x, ssa_138.z
	vec1 32 ssa_260 = fmul ssa_128.y, ssa_138.z
	vec1 32 ssa_261 = fmul ssa_128.z, ssa_138.z
	vec3 32 ssa_262 = vec3 ssa_259, ssa_260, ssa_261
	vec1 32 ssa_263 = fadd ssa_258.x, ssa_262.x
	vec1 32 ssa_264 = fadd ssa_258.y, ssa_262.y
	vec1 32 ssa_265 = fadd ssa_258.z, ssa_262.z
	vec3 32 ssa_266 = vec3 ssa_263, ssa_264, ssa_265
	vec1 32 ssa_147 = deref_var &out@outNormal-temp (function_temp vec3) 
	intrinsic store_deref (ssa_147, ssa_266) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	intrinsic store_deref (ssa_149, ssa_148) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_151 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_153 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	vec3 32 ssa_154 = vec3 ssa_153.x, ssa_153.y, ssa_153.z
	vec1 32 ssa_267 = fsub ssa_151.x, ssa_153.x
	vec1 32 ssa_268 = fsub ssa_151.y, ssa_153.y
	vec1 32 ssa_269 = fsub ssa_151.z, ssa_153.z
	vec3 32 ssa_270 = vec3 ssa_267, ssa_268, ssa_269
	vec1 32 ssa_156 = deref_var &out@outLightVec-temp (function_temp vec3) 
	intrinsic store_deref (ssa_156, ssa_270) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_157) (0) /* access=0 */
	vec3 32 ssa_159 = vec3 ssa_158.x, ssa_158.y, ssa_158.z
	vec1 32 ssa_271 = fneg ssa_158.x
	vec1 32 ssa_272 = fneg ssa_158.y
	vec1 32 ssa_273 = fneg ssa_158.z
	vec3 32 ssa_274 = vec3 ssa_271, ssa_272, ssa_273
	vec1 32 ssa_161 = deref_var &out@outViewVec-temp (function_temp vec3) 
	intrinsic store_deref (ssa_161, ssa_274) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_167 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_168 = deref_var &outNormal (shader_out vec3) 
	intrinsic copy_deref (ssa_168, ssa_167) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_169 = deref_var &out@outColor-temp (function_temp vec3) 
	vec1 32 ssa_170 = deref_var &outColor (shader_out vec3) 
	intrinsic copy_deref (ssa_170, ssa_169) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_171 = deref_var &out@outLightVec-temp (function_temp vec3) 
	vec1 32 ssa_172 = deref_var &outLightVec (shader_out vec3) 
	intrinsic copy_deref (ssa_172, ssa_171) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_173 = deref_var &out@outViewVec-temp (function_temp vec3) 
	vec1 32 ssa_174 = deref_var &outViewVec (shader_out vec3) 
	intrinsic copy_deref (ssa_174, ssa_173) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_175 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_176 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_176, ssa_175) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_split_var_copies
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outNormal-temp (function_temp vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	intrinsic store_deref (ssa_162, ssa_9) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_13 = intrinsic load_deref (ssa_10) (0) /* access=0 */
		vec1 32 ssa_14 = mov ssa_13.y
		vec1 1 ssa_16 = feq ssa_13.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		intrinsic store_deref (ssa_163, ssa_16) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	intrinsic store_deref (ssa_164, ssa_18) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_4 block_5 */
	if ssa_18 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_22 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_23 = mov ssa_22.z
		vec1 1 ssa_25 = feq ssa_22.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		intrinsic store_deref (ssa_165, ssa_25) (1, 0) /* wrmask=x */ /* access=0 */
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	/* succs: block_7 block_8 */
	if ssa_27 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &out@outColor-temp (function_temp vec3) 
		intrinsic store_deref (ssa_34, ssa_33) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_36 = intrinsic load_deref (ssa_35) (0) /* access=0 */
		vec1 32 ssa_37 = deref_var &out@outColor-temp (function_temp vec3) 
		intrinsic store_deref (ssa_37, ssa_36) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec1 32 ssa_177 = fmul ssa_41.x, ssa_58.x
	vec1 32 ssa_178 = fmul ssa_41.y, ssa_58.x
	vec1 32 ssa_179 = fmul ssa_41.z, ssa_58.x
	vec1 32 ssa_180 = fmul ssa_41.w, ssa_58.x
	vec4 32 ssa_181 = vec4 ssa_177, ssa_178, ssa_179, ssa_180
	vec1 32 ssa_66 = mov ssa_58.y
	vec1 32 ssa_182 = fmul ssa_46.x, ssa_58.y
	vec1 32 ssa_183 = fmul ssa_46.y, ssa_58.y
	vec1 32 ssa_184 = fmul ssa_46.z, ssa_58.y
	vec1 32 ssa_185 = fmul ssa_46.w, ssa_58.y
	vec4 32 ssa_186 = vec4 ssa_182, ssa_183, ssa_184, ssa_185
	vec1 32 ssa_187 = fadd ssa_181.x, ssa_186.x
	vec1 32 ssa_188 = fadd ssa_181.y, ssa_186.y
	vec1 32 ssa_189 = fadd ssa_181.z, ssa_186.z
	vec1 32 ssa_190 = fadd ssa_181.w, ssa_186.w
	vec4 32 ssa_191 = vec4 ssa_187, ssa_188, ssa_189, ssa_190
	vec1 32 ssa_69 = mov ssa_58.z
	vec1 32 ssa_192 = fmul ssa_51.x, ssa_58.z
	vec1 32 ssa_193 = fmul ssa_51.y, ssa_58.z
	vec1 32 ssa_194 = fmul ssa_51.z, ssa_58.z
	vec1 32 ssa_195 = fmul ssa_51.w, ssa_58.z
	vec4 32 ssa_196 = vec4 ssa_192, ssa_193, ssa_194, ssa_195
	vec1 32 ssa_197 = fadd ssa_191.x, ssa_196.x
	vec1 32 ssa_198 = fadd ssa_191.y, ssa_196.y
	vec1 32 ssa_199 = fadd ssa_191.z, ssa_196.z
	vec1 32 ssa_200 = fadd ssa_191.w, ssa_196.w
	vec4 32 ssa_201 = vec4 ssa_197, ssa_198, ssa_199, ssa_200
	vec1 32 ssa_72 = mov ssa_62
	vec1 32 ssa_202 = fmul ssa_56.x, ssa_62
	vec1 32 ssa_203 = fmul ssa_56.y, ssa_62
	vec1 32 ssa_204 = fmul ssa_56.z, ssa_62
	vec1 32 ssa_205 = fmul ssa_56.w, ssa_62
	vec4 32 ssa_206 = vec4 ssa_202, ssa_203, ssa_204, ssa_205
	vec1 32 ssa_207 = fadd ssa_201.x, ssa_206.x
	vec1 32 ssa_208 = fadd ssa_201.y, ssa_206.y
	vec1 32 ssa_209 = fadd ssa_201.z, ssa_206.z
	vec1 32 ssa_210 = fadd ssa_201.w, ssa_206.w
	vec4 32 ssa_211 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	vec1 32 ssa_166 = deref_var &out@.field0-temp (function_temp vec4) 
	intrinsic store_deref (ssa_166, ssa_211) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_97.x
	vec1 32 ssa_99 = mov ssa_97.y
	vec1 32 ssa_100 = mov ssa_97.z
	vec4 32 ssa_102 = vec4 ssa_97.x, ssa_97.y, ssa_97.z, ssa_101
	vec1 32 ssa_103 = mov ssa_97.x
	vec1 32 ssa_212 = fmul ssa_80.x, ssa_97.x
	vec1 32 ssa_213 = fmul ssa_80.y, ssa_97.x
	vec1 32 ssa_214 = fmul ssa_80.z, ssa_97.x
	vec1 32 ssa_215 = fmul ssa_80.w, ssa_97.x
	vec4 32 ssa_216 = vec4 ssa_212, ssa_213, ssa_214, ssa_215
	vec1 32 ssa_105 = mov ssa_97.y
	vec1 32 ssa_217 = fmul ssa_85.x, ssa_97.y
	vec1 32 ssa_218 = fmul ssa_85.y, ssa_97.y
	vec1 32 ssa_219 = fmul ssa_85.z, ssa_97.y
	vec1 32 ssa_220 = fmul ssa_85.w, ssa_97.y
	vec4 32 ssa_221 = vec4 ssa_217, ssa_218, ssa_219, ssa_220
	vec1 32 ssa_222 = fadd ssa_216.x, ssa_221.x
	vec1 32 ssa_223 = fadd ssa_216.y, ssa_221.y
	vec1 32 ssa_224 = fadd ssa_216.z, ssa_221.z
	vec1 32 ssa_225 = fadd ssa_216.w, ssa_221.w
	vec4 32 ssa_226 = vec4 ssa_222, ssa_223, ssa_224, ssa_225
	vec1 32 ssa_108 = mov ssa_97.z
	vec1 32 ssa_227 = fmul ssa_90.x, ssa_97.z
	vec1 32 ssa_228 = fmul ssa_90.y, ssa_97.z
	vec1 32 ssa_229 = fmul ssa_90.z, ssa_97.z
	vec1 32 ssa_230 = fmul ssa_90.w, ssa_97.z
	vec4 32 ssa_231 = vec4 ssa_227, ssa_228, ssa_229, ssa_230
	vec1 32 ssa_232 = fadd ssa_226.x, ssa_231.x
	vec1 32 ssa_233 = fadd ssa_226.y, ssa_231.y
	vec1 32 ssa_234 = fadd ssa_226.z, ssa_231.z
	vec1 32 ssa_235 = fadd ssa_226.w, ssa_231.w
	vec4 32 ssa_236 = vec4 ssa_232, ssa_233, ssa_234, ssa_235
	vec1 32 ssa_111 = mov ssa_101
	vec1 32 ssa_237 = fmul ssa_95.x, ssa_101
	vec1 32 ssa_238 = fmul ssa_95.y, ssa_101
	vec1 32 ssa_239 = fmul ssa_95.z, ssa_101
	vec1 32 ssa_240 = fmul ssa_95.w, ssa_101
	vec4 32 ssa_241 = vec4 ssa_237, ssa_238, ssa_239, ssa_240
	vec1 32 ssa_242 = fadd ssa_236.x, ssa_241.x
	vec1 32 ssa_243 = fadd ssa_236.y, ssa_241.y
	vec1 32 ssa_244 = fadd ssa_236.z, ssa_241.z
	vec1 32 ssa_245 = fadd ssa_236.w, ssa_241.w
	vec4 32 ssa_246 = vec4 ssa_242, ssa_243, ssa_244, ssa_245
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	intrinsic store_deref (ssa_114, ssa_246) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_138 = intrinsic load_deref (ssa_137) (0) /* access=0 */
	vec1 32 ssa_139 = mov ssa_138.x
	vec1 32 ssa_247 = fmul ssa_118.x, ssa_138.x
	vec1 32 ssa_248 = fmul ssa_118.y, ssa_138.x
	vec1 32 ssa_249 = fmul ssa_118.z, ssa_138.x
	vec3 32 ssa_250 = vec3 ssa_247, ssa_248, ssa_249
	vec1 32 ssa_141 = mov ssa_138.y
	vec1 32 ssa_251 = fmul ssa_123.x, ssa_138.y
	vec1 32 ssa_252 = fmul ssa_123.y, ssa_138.y
	vec1 32 ssa_253 = fmul ssa_123.z, ssa_138.y
	vec3 32 ssa_254 = vec3 ssa_251, ssa_252, ssa_253
	vec1 32 ssa_255 = fadd ssa_250.x, ssa_254.x
	vec1 32 ssa_256 = fadd ssa_250.y, ssa_254.y
	vec1 32 ssa_257 = fadd ssa_250.z, ssa_254.z
	vec3 32 ssa_258 = vec3 ssa_255, ssa_256, ssa_257
	vec1 32 ssa_144 = mov ssa_138.z
	vec1 32 ssa_259 = fmul ssa_128.x, ssa_138.z
	vec1 32 ssa_260 = fmul ssa_128.y, ssa_138.z
	vec1 32 ssa_261 = fmul ssa_128.z, ssa_138.z
	vec3 32 ssa_262 = vec3 ssa_259, ssa_260, ssa_261
	vec1 32 ssa_263 = fadd ssa_258.x, ssa_262.x
	vec1 32 ssa_264 = fadd ssa_258.y, ssa_262.y
	vec1 32 ssa_265 = fadd ssa_258.z, ssa_262.z
	vec3 32 ssa_266 = vec3 ssa_263, ssa_264, ssa_265
	vec1 32 ssa_147 = deref_var &out@outNormal-temp (function_temp vec3) 
	intrinsic store_deref (ssa_147, ssa_266) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	intrinsic store_deref (ssa_149, ssa_148) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_151 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_153 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	vec3 32 ssa_154 = vec3 ssa_153.x, ssa_153.y, ssa_153.z
	vec1 32 ssa_267 = fsub ssa_151.x, ssa_153.x
	vec1 32 ssa_268 = fsub ssa_151.y, ssa_153.y
	vec1 32 ssa_269 = fsub ssa_151.z, ssa_153.z
	vec3 32 ssa_270 = vec3 ssa_267, ssa_268, ssa_269
	vec1 32 ssa_156 = deref_var &out@outLightVec-temp (function_temp vec3) 
	intrinsic store_deref (ssa_156, ssa_270) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_157) (0) /* access=0 */
	vec3 32 ssa_159 = vec3 ssa_158.x, ssa_158.y, ssa_158.z
	vec1 32 ssa_271 = fneg ssa_158.x
	vec1 32 ssa_272 = fneg ssa_158.y
	vec1 32 ssa_273 = fneg ssa_158.z
	vec3 32 ssa_274 = vec3 ssa_271, ssa_272, ssa_273
	vec1 32 ssa_161 = deref_var &out@outViewVec-temp (function_temp vec3) 
	intrinsic store_deref (ssa_161, ssa_274) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_167 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_168 = deref_var &outNormal (shader_out vec3) 
	intrinsic copy_deref (ssa_168, ssa_167) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_169 = deref_var &out@outColor-temp (function_temp vec3) 
	vec1 32 ssa_170 = deref_var &outColor (shader_out vec3) 
	intrinsic copy_deref (ssa_170, ssa_169) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_171 = deref_var &out@outLightVec-temp (function_temp vec3) 
	vec1 32 ssa_172 = deref_var &outLightVec (shader_out vec3) 
	intrinsic copy_deref (ssa_172, ssa_171) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_173 = deref_var &out@outViewVec-temp (function_temp vec3) 
	vec1 32 ssa_174 = deref_var &outViewVec (shader_out vec3) 
	intrinsic copy_deref (ssa_174, ssa_173) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_175 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_176 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_176, ssa_175) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_split_struct_vars
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_13 = intrinsic load_deref (ssa_10) (0) /* access=0 */
		vec1 32 ssa_14 = mov ssa_13.y
		vec1 1 ssa_16 = feq ssa_13.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 1 ssa_290 = phi block_1: ssa_16, block_2: ssa_9
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_280 = mov ssa_290
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	/* succs: block_4 block_5 */
	if ssa_280 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_22 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_23 = mov ssa_22.z
		vec1 1 ssa_25 = feq ssa_22.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 1 ssa_291 = phi block_4: ssa_25, block_5: ssa_280
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_281 = mov ssa_291
	/* succs: block_7 block_8 */
	if ssa_281 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &out@outColor-temp (function_temp vec3) 
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec3 32 ssa_36 = intrinsic load_deref (ssa_35) (0) /* access=0 */
		vec1 32 ssa_37 = deref_var &out@outColor-temp (function_temp vec3) 
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec3 32 ssa_292 = phi block_7: ssa_33, block_8: ssa_36
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec1 32 ssa_177 = fmul ssa_41.x, ssa_58.x
	vec1 32 ssa_178 = fmul ssa_41.y, ssa_58.x
	vec1 32 ssa_179 = fmul ssa_41.z, ssa_58.x
	vec1 32 ssa_180 = fmul ssa_41.w, ssa_58.x
	vec4 32 ssa_181 = vec4 ssa_177, ssa_178, ssa_179, ssa_180
	vec1 32 ssa_66 = mov ssa_58.y
	vec1 32 ssa_182 = fmul ssa_46.x, ssa_58.y
	vec1 32 ssa_183 = fmul ssa_46.y, ssa_58.y
	vec1 32 ssa_184 = fmul ssa_46.z, ssa_58.y
	vec1 32 ssa_185 = fmul ssa_46.w, ssa_58.y
	vec4 32 ssa_186 = vec4 ssa_182, ssa_183, ssa_184, ssa_185
	vec1 32 ssa_187 = fadd ssa_181.x, ssa_186.x
	vec1 32 ssa_188 = fadd ssa_181.y, ssa_186.y
	vec1 32 ssa_189 = fadd ssa_181.z, ssa_186.z
	vec1 32 ssa_190 = fadd ssa_181.w, ssa_186.w
	vec4 32 ssa_191 = vec4 ssa_187, ssa_188, ssa_189, ssa_190
	vec1 32 ssa_69 = mov ssa_58.z
	vec1 32 ssa_192 = fmul ssa_51.x, ssa_58.z
	vec1 32 ssa_193 = fmul ssa_51.y, ssa_58.z
	vec1 32 ssa_194 = fmul ssa_51.z, ssa_58.z
	vec1 32 ssa_195 = fmul ssa_51.w, ssa_58.z
	vec4 32 ssa_196 = vec4 ssa_192, ssa_193, ssa_194, ssa_195
	vec1 32 ssa_197 = fadd ssa_191.x, ssa_196.x
	vec1 32 ssa_198 = fadd ssa_191.y, ssa_196.y
	vec1 32 ssa_199 = fadd ssa_191.z, ssa_196.z
	vec1 32 ssa_200 = fadd ssa_191.w, ssa_196.w
	vec4 32 ssa_201 = vec4 ssa_197, ssa_198, ssa_199, ssa_200
	vec1 32 ssa_72 = mov ssa_62
	vec1 32 ssa_202 = fmul ssa_56.x, ssa_62
	vec1 32 ssa_203 = fmul ssa_56.y, ssa_62
	vec1 32 ssa_204 = fmul ssa_56.z, ssa_62
	vec1 32 ssa_205 = fmul ssa_56.w, ssa_62
	vec4 32 ssa_206 = vec4 ssa_202, ssa_203, ssa_204, ssa_205
	vec1 32 ssa_207 = fadd ssa_201.x, ssa_206.x
	vec1 32 ssa_208 = fadd ssa_201.y, ssa_206.y
	vec1 32 ssa_209 = fadd ssa_201.z, ssa_206.z
	vec1 32 ssa_210 = fadd ssa_201.w, ssa_206.w
	vec4 32 ssa_211 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	vec1 32 ssa_166 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_97.x
	vec1 32 ssa_99 = mov ssa_97.y
	vec1 32 ssa_100 = mov ssa_97.z
	vec4 32 ssa_102 = vec4 ssa_97.x, ssa_97.y, ssa_97.z, ssa_101
	vec1 32 ssa_103 = mov ssa_97.x
	vec1 32 ssa_212 = fmul ssa_80.x, ssa_97.x
	vec1 32 ssa_213 = fmul ssa_80.y, ssa_97.x
	vec1 32 ssa_214 = fmul ssa_80.z, ssa_97.x
	vec1 32 ssa_215 = fmul ssa_80.w, ssa_97.x
	vec4 32 ssa_216 = vec4 ssa_212, ssa_213, ssa_214, ssa_215
	vec1 32 ssa_105 = mov ssa_97.y
	vec1 32 ssa_217 = fmul ssa_85.x, ssa_97.y
	vec1 32 ssa_218 = fmul ssa_85.y, ssa_97.y
	vec1 32 ssa_219 = fmul ssa_85.z, ssa_97.y
	vec1 32 ssa_220 = fmul ssa_85.w, ssa_97.y
	vec4 32 ssa_221 = vec4 ssa_217, ssa_218, ssa_219, ssa_220
	vec1 32 ssa_222 = fadd ssa_216.x, ssa_221.x
	vec1 32 ssa_223 = fadd ssa_216.y, ssa_221.y
	vec1 32 ssa_224 = fadd ssa_216.z, ssa_221.z
	vec1 32 ssa_225 = fadd ssa_216.w, ssa_221.w
	vec4 32 ssa_226 = vec4 ssa_222, ssa_223, ssa_224, ssa_225
	vec1 32 ssa_108 = mov ssa_97.z
	vec1 32 ssa_227 = fmul ssa_90.x, ssa_97.z
	vec1 32 ssa_228 = fmul ssa_90.y, ssa_97.z
	vec1 32 ssa_229 = fmul ssa_90.z, ssa_97.z
	vec1 32 ssa_230 = fmul ssa_90.w, ssa_97.z
	vec4 32 ssa_231 = vec4 ssa_227, ssa_228, ssa_229, ssa_230
	vec1 32 ssa_232 = fadd ssa_226.x, ssa_231.x
	vec1 32 ssa_233 = fadd ssa_226.y, ssa_231.y
	vec1 32 ssa_234 = fadd ssa_226.z, ssa_231.z
	vec1 32 ssa_235 = fadd ssa_226.w, ssa_231.w
	vec4 32 ssa_236 = vec4 ssa_232, ssa_233, ssa_234, ssa_235
	vec1 32 ssa_111 = mov ssa_101
	vec1 32 ssa_237 = fmul ssa_95.x, ssa_101
	vec1 32 ssa_238 = fmul ssa_95.y, ssa_101
	vec1 32 ssa_239 = fmul ssa_95.z, ssa_101
	vec1 32 ssa_240 = fmul ssa_95.w, ssa_101
	vec4 32 ssa_241 = vec4 ssa_237, ssa_238, ssa_239, ssa_240
	vec1 32 ssa_242 = fadd ssa_236.x, ssa_241.x
	vec1 32 ssa_243 = fadd ssa_236.y, ssa_241.y
	vec1 32 ssa_244 = fadd ssa_236.z, ssa_241.z
	vec1 32 ssa_245 = fadd ssa_236.w, ssa_241.w
	vec4 32 ssa_246 = vec4 ssa_242, ssa_243, ssa_244, ssa_245
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_138 = intrinsic load_deref (ssa_137) (0) /* access=0 */
	vec1 32 ssa_139 = mov ssa_138.x
	vec1 32 ssa_247 = fmul ssa_118.x, ssa_138.x
	vec1 32 ssa_248 = fmul ssa_118.y, ssa_138.x
	vec1 32 ssa_249 = fmul ssa_118.z, ssa_138.x
	vec3 32 ssa_250 = vec3 ssa_247, ssa_248, ssa_249
	vec1 32 ssa_141 = mov ssa_138.y
	vec1 32 ssa_251 = fmul ssa_123.x, ssa_138.y
	vec1 32 ssa_252 = fmul ssa_123.y, ssa_138.y
	vec1 32 ssa_253 = fmul ssa_123.z, ssa_138.y
	vec3 32 ssa_254 = vec3 ssa_251, ssa_252, ssa_253
	vec1 32 ssa_255 = fadd ssa_250.x, ssa_254.x
	vec1 32 ssa_256 = fadd ssa_250.y, ssa_254.y
	vec1 32 ssa_257 = fadd ssa_250.z, ssa_254.z
	vec3 32 ssa_258 = vec3 ssa_255, ssa_256, ssa_257
	vec1 32 ssa_144 = mov ssa_138.z
	vec1 32 ssa_259 = fmul ssa_128.x, ssa_138.z
	vec1 32 ssa_260 = fmul ssa_128.y, ssa_138.z
	vec1 32 ssa_261 = fmul ssa_128.z, ssa_138.z
	vec3 32 ssa_262 = vec3 ssa_259, ssa_260, ssa_261
	vec1 32 ssa_263 = fadd ssa_258.x, ssa_262.x
	vec1 32 ssa_264 = fadd ssa_258.y, ssa_262.y
	vec1 32 ssa_265 = fadd ssa_258.z, ssa_262.z
	vec3 32 ssa_266 = vec3 ssa_263, ssa_264, ssa_265
	vec1 32 ssa_147 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_282 = mov ssa_148
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_283 = mov ssa_246
	vec3 32 ssa_154 = vec3 ssa_283.x, ssa_283.y, ssa_283.z
	vec1 32 ssa_267 = fsub ssa_282.x, ssa_283.x
	vec1 32 ssa_268 = fsub ssa_282.y, ssa_283.y
	vec1 32 ssa_269 = fsub ssa_282.z, ssa_283.z
	vec3 32 ssa_270 = vec3 ssa_267, ssa_268, ssa_269
	vec1 32 ssa_156 = deref_var &out@outLightVec-temp (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_284 = mov ssa_246
	vec3 32 ssa_159 = vec3 ssa_284.x, ssa_284.y, ssa_284.z
	vec1 32 ssa_271 = fneg ssa_284.x
	vec1 32 ssa_272 = fneg ssa_284.y
	vec1 32 ssa_273 = fneg ssa_284.z
	vec3 32 ssa_274 = vec3 ssa_271, ssa_272, ssa_273
	vec1 32 ssa_161 = deref_var &out@outViewVec-temp (function_temp vec3) 
	vec1 32 ssa_167 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_168 = deref_var &outNormal (shader_out vec3) 
	vec3 32 ssa_285 = mov ssa_266
	intrinsic store_deref (ssa_168, ssa_285) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_169 = deref_var &out@outColor-temp (function_temp vec3) 
	vec1 32 ssa_170 = deref_var &outColor (shader_out vec3) 
	vec3 32 ssa_286 = mov ssa_292
	intrinsic store_deref (ssa_170, ssa_286) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_171 = deref_var &out@outLightVec-temp (function_temp vec3) 
	vec1 32 ssa_172 = deref_var &outLightVec (shader_out vec3) 
	vec3 32 ssa_287 = mov ssa_270
	intrinsic store_deref (ssa_172, ssa_287) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_173 = deref_var &out@outViewVec-temp (function_temp vec3) 
	vec1 32 ssa_174 = deref_var &outViewVec (shader_out vec3) 
	vec3 32 ssa_288 = mov ssa_274
	intrinsic store_deref (ssa_174, ssa_288) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_175 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_176 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_289 = mov ssa_211
	intrinsic store_deref (ssa_176, ssa_289) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_opt_find_array_copies
nir_opt_copy_prop_vars
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec1 32 ssa_14 = mov ssa_6.y
		vec1 1 ssa_16 = feq ssa_6.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 1 ssa_290 = phi block_1: ssa_16, block_2: ssa_9
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_280 = mov ssa_290
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	/* succs: block_4 block_5 */
	if ssa_280 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec1 32 ssa_23 = mov ssa_6.z
		vec1 1 ssa_25 = feq ssa_6.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 1 ssa_291 = phi block_4: ssa_25, block_5: ssa_280
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_281 = mov ssa_291
	/* succs: block_7 block_8 */
	if ssa_281 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &out@outColor-temp (function_temp vec3) 
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec1 32 ssa_37 = deref_var &out@outColor-temp (function_temp vec3) 
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec3 32 ssa_292 = phi block_7: ssa_33, block_8: ssa_6
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec1 32 ssa_177 = fmul ssa_41.x, ssa_58.x
	vec1 32 ssa_178 = fmul ssa_41.y, ssa_58.x
	vec1 32 ssa_179 = fmul ssa_41.z, ssa_58.x
	vec1 32 ssa_180 = fmul ssa_41.w, ssa_58.x
	vec4 32 ssa_181 = vec4 ssa_177, ssa_178, ssa_179, ssa_180
	vec1 32 ssa_66 = mov ssa_58.y
	vec1 32 ssa_182 = fmul ssa_46.x, ssa_58.y
	vec1 32 ssa_183 = fmul ssa_46.y, ssa_58.y
	vec1 32 ssa_184 = fmul ssa_46.z, ssa_58.y
	vec1 32 ssa_185 = fmul ssa_46.w, ssa_58.y
	vec4 32 ssa_186 = vec4 ssa_182, ssa_183, ssa_184, ssa_185
	vec1 32 ssa_187 = fadd ssa_181.x, ssa_186.x
	vec1 32 ssa_188 = fadd ssa_181.y, ssa_186.y
	vec1 32 ssa_189 = fadd ssa_181.z, ssa_186.z
	vec1 32 ssa_190 = fadd ssa_181.w, ssa_186.w
	vec4 32 ssa_191 = vec4 ssa_187, ssa_188, ssa_189, ssa_190
	vec1 32 ssa_69 = mov ssa_58.z
	vec1 32 ssa_192 = fmul ssa_51.x, ssa_58.z
	vec1 32 ssa_193 = fmul ssa_51.y, ssa_58.z
	vec1 32 ssa_194 = fmul ssa_51.z, ssa_58.z
	vec1 32 ssa_195 = fmul ssa_51.w, ssa_58.z
	vec4 32 ssa_196 = vec4 ssa_192, ssa_193, ssa_194, ssa_195
	vec1 32 ssa_197 = fadd ssa_191.x, ssa_196.x
	vec1 32 ssa_198 = fadd ssa_191.y, ssa_196.y
	vec1 32 ssa_199 = fadd ssa_191.z, ssa_196.z
	vec1 32 ssa_200 = fadd ssa_191.w, ssa_196.w
	vec4 32 ssa_201 = vec4 ssa_197, ssa_198, ssa_199, ssa_200
	vec1 32 ssa_72 = mov ssa_62
	vec1 32 ssa_202 = fmul ssa_56.x, ssa_62
	vec1 32 ssa_203 = fmul ssa_56.y, ssa_62
	vec1 32 ssa_204 = fmul ssa_56.z, ssa_62
	vec1 32 ssa_205 = fmul ssa_56.w, ssa_62
	vec4 32 ssa_206 = vec4 ssa_202, ssa_203, ssa_204, ssa_205
	vec1 32 ssa_207 = fadd ssa_201.x, ssa_206.x
	vec1 32 ssa_208 = fadd ssa_201.y, ssa_206.y
	vec1 32 ssa_209 = fadd ssa_201.z, ssa_206.z
	vec1 32 ssa_210 = fadd ssa_201.w, ssa_206.w
	vec4 32 ssa_211 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	vec1 32 ssa_166 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec1 32 ssa_98 = mov ssa_58.x
	vec1 32 ssa_99 = mov ssa_58.y
	vec1 32 ssa_100 = mov ssa_58.z
	vec4 32 ssa_102 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_101
	vec1 32 ssa_103 = mov ssa_58.x
	vec1 32 ssa_212 = fmul ssa_80.x, ssa_58.x
	vec1 32 ssa_213 = fmul ssa_80.y, ssa_58.x
	vec1 32 ssa_214 = fmul ssa_80.z, ssa_58.x
	vec1 32 ssa_215 = fmul ssa_80.w, ssa_58.x
	vec4 32 ssa_216 = vec4 ssa_212, ssa_213, ssa_214, ssa_215
	vec1 32 ssa_105 = mov ssa_58.y
	vec1 32 ssa_217 = fmul ssa_85.x, ssa_58.y
	vec1 32 ssa_218 = fmul ssa_85.y, ssa_58.y
	vec1 32 ssa_219 = fmul ssa_85.z, ssa_58.y
	vec1 32 ssa_220 = fmul ssa_85.w, ssa_58.y
	vec4 32 ssa_221 = vec4 ssa_217, ssa_218, ssa_219, ssa_220
	vec1 32 ssa_222 = fadd ssa_216.x, ssa_221.x
	vec1 32 ssa_223 = fadd ssa_216.y, ssa_221.y
	vec1 32 ssa_224 = fadd ssa_216.z, ssa_221.z
	vec1 32 ssa_225 = fadd ssa_216.w, ssa_221.w
	vec4 32 ssa_226 = vec4 ssa_222, ssa_223, ssa_224, ssa_225
	vec1 32 ssa_108 = mov ssa_58.z
	vec1 32 ssa_227 = fmul ssa_90.x, ssa_58.z
	vec1 32 ssa_228 = fmul ssa_90.y, ssa_58.z
	vec1 32 ssa_229 = fmul ssa_90.z, ssa_58.z
	vec1 32 ssa_230 = fmul ssa_90.w, ssa_58.z
	vec4 32 ssa_231 = vec4 ssa_227, ssa_228, ssa_229, ssa_230
	vec1 32 ssa_232 = fadd ssa_226.x, ssa_231.x
	vec1 32 ssa_233 = fadd ssa_226.y, ssa_231.y
	vec1 32 ssa_234 = fadd ssa_226.z, ssa_231.z
	vec1 32 ssa_235 = fadd ssa_226.w, ssa_231.w
	vec4 32 ssa_236 = vec4 ssa_232, ssa_233, ssa_234, ssa_235
	vec1 32 ssa_111 = mov ssa_101
	vec1 32 ssa_237 = fmul ssa_95.x, ssa_101
	vec1 32 ssa_238 = fmul ssa_95.y, ssa_101
	vec1 32 ssa_239 = fmul ssa_95.z, ssa_101
	vec1 32 ssa_240 = fmul ssa_95.w, ssa_101
	vec4 32 ssa_241 = vec4 ssa_237, ssa_238, ssa_239, ssa_240
	vec1 32 ssa_242 = fadd ssa_236.x, ssa_241.x
	vec1 32 ssa_243 = fadd ssa_236.y, ssa_241.y
	vec1 32 ssa_244 = fadd ssa_236.z, ssa_241.z
	vec1 32 ssa_245 = fadd ssa_236.w, ssa_241.w
	vec4 32 ssa_246 = vec4 ssa_242, ssa_243, ssa_244, ssa_245
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec1 32 ssa_139 = mov ssa_1.x
	vec1 32 ssa_247 = fmul ssa_118.x, ssa_1.x
	vec1 32 ssa_248 = fmul ssa_118.y, ssa_1.x
	vec1 32 ssa_249 = fmul ssa_118.z, ssa_1.x
	vec3 32 ssa_250 = vec3 ssa_247, ssa_248, ssa_249
	vec1 32 ssa_141 = mov ssa_1.y
	vec1 32 ssa_251 = fmul ssa_123.x, ssa_1.y
	vec1 32 ssa_252 = fmul ssa_123.y, ssa_1.y
	vec1 32 ssa_253 = fmul ssa_123.z, ssa_1.y
	vec3 32 ssa_254 = vec3 ssa_251, ssa_252, ssa_253
	vec1 32 ssa_255 = fadd ssa_250.x, ssa_254.x
	vec1 32 ssa_256 = fadd ssa_250.y, ssa_254.y
	vec1 32 ssa_257 = fadd ssa_250.z, ssa_254.z
	vec3 32 ssa_258 = vec3 ssa_255, ssa_256, ssa_257
	vec1 32 ssa_144 = mov ssa_1.z
	vec1 32 ssa_259 = fmul ssa_128.x, ssa_1.z
	vec1 32 ssa_260 = fmul ssa_128.y, ssa_1.z
	vec1 32 ssa_261 = fmul ssa_128.z, ssa_1.z
	vec3 32 ssa_262 = vec3 ssa_259, ssa_260, ssa_261
	vec1 32 ssa_263 = fadd ssa_258.x, ssa_262.x
	vec1 32 ssa_264 = fadd ssa_258.y, ssa_262.y
	vec1 32 ssa_265 = fadd ssa_258.z, ssa_262.z
	vec3 32 ssa_266 = vec3 ssa_263, ssa_264, ssa_265
	vec1 32 ssa_147 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec3 32 ssa_282 = mov ssa_148
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_283 = mov ssa_246
	vec3 32 ssa_154 = vec3 ssa_283.x, ssa_283.y, ssa_283.z
	vec1 32 ssa_267 = fsub ssa_282.x, ssa_283.x
	vec1 32 ssa_268 = fsub ssa_282.y, ssa_283.y
	vec1 32 ssa_269 = fsub ssa_282.z, ssa_283.z
	vec3 32 ssa_270 = vec3 ssa_267, ssa_268, ssa_269
	vec1 32 ssa_156 = deref_var &out@outLightVec-temp (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec4 32 ssa_284 = mov ssa_246
	vec3 32 ssa_159 = vec3 ssa_284.x, ssa_284.y, ssa_284.z
	vec1 32 ssa_271 = fneg ssa_284.x
	vec1 32 ssa_272 = fneg ssa_284.y
	vec1 32 ssa_273 = fneg ssa_284.z
	vec3 32 ssa_274 = vec3 ssa_271, ssa_272, ssa_273
	vec1 32 ssa_161 = deref_var &out@outViewVec-temp (function_temp vec3) 
	vec1 32 ssa_167 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_168 = deref_var &outNormal (shader_out vec3) 
	vec3 32 ssa_285 = mov ssa_266
	intrinsic store_deref (ssa_168, ssa_285) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_169 = deref_var &out@outColor-temp (function_temp vec3) 
	vec1 32 ssa_170 = deref_var &outColor (shader_out vec3) 
	vec3 32 ssa_286 = mov ssa_292
	intrinsic store_deref (ssa_170, ssa_286) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_171 = deref_var &out@outLightVec-temp (function_temp vec3) 
	vec1 32 ssa_172 = deref_var &outLightVec (shader_out vec3) 
	vec3 32 ssa_287 = mov ssa_270
	intrinsic store_deref (ssa_172, ssa_287) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_173 = deref_var &out@outViewVec-temp (function_temp vec3) 
	vec1 32 ssa_174 = deref_var &outViewVec (shader_out vec3) 
	vec3 32 ssa_288 = mov ssa_274
	intrinsic store_deref (ssa_174, ssa_288) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_175 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_176 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_289 = mov ssa_211
	intrinsic store_deref (ssa_176, ssa_289) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec1 32 ssa_14 = mov ssa_6.y
		vec1 1 ssa_16 = feq ssa_6.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 1 ssa_290 = phi block_1: ssa_16, block_2: ssa_9
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_280 = mov ssa_290
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	/* succs: block_4 block_5 */
	if ssa_280 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec1 32 ssa_23 = mov ssa_6.z
		vec1 1 ssa_25 = feq ssa_6.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 1 ssa_291 = phi block_4: ssa_25, block_5: ssa_280
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_281 = mov ssa_291
	/* succs: block_7 block_8 */
	if ssa_281 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &out@outColor-temp (function_temp vec3) 
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec1 32 ssa_37 = deref_var &out@outColor-temp (function_temp vec3) 
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec3 32 ssa_292 = phi block_7: ssa_33, block_8: ssa_6
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec1 32 ssa_177 = fmul ssa_41.x, ssa_58.x
	vec1 32 ssa_178 = fmul ssa_41.y, ssa_58.x
	vec1 32 ssa_179 = fmul ssa_41.z, ssa_58.x
	vec1 32 ssa_180 = fmul ssa_41.w, ssa_58.x
	vec4 32 ssa_181 = vec4 ssa_177, ssa_178, ssa_179, ssa_180
	vec1 32 ssa_66 = mov ssa_58.y
	vec1 32 ssa_182 = fmul ssa_46.x, ssa_58.y
	vec1 32 ssa_183 = fmul ssa_46.y, ssa_58.y
	vec1 32 ssa_184 = fmul ssa_46.z, ssa_58.y
	vec1 32 ssa_185 = fmul ssa_46.w, ssa_58.y
	vec4 32 ssa_186 = vec4 ssa_182, ssa_183, ssa_184, ssa_185
	vec1 32 ssa_187 = fadd ssa_181.x, ssa_186.x
	vec1 32 ssa_188 = fadd ssa_181.y, ssa_186.y
	vec1 32 ssa_189 = fadd ssa_181.z, ssa_186.z
	vec1 32 ssa_190 = fadd ssa_181.w, ssa_186.w
	vec4 32 ssa_191 = vec4 ssa_187, ssa_188, ssa_189, ssa_190
	vec1 32 ssa_69 = mov ssa_58.z
	vec1 32 ssa_192 = fmul ssa_51.x, ssa_58.z
	vec1 32 ssa_193 = fmul ssa_51.y, ssa_58.z
	vec1 32 ssa_194 = fmul ssa_51.z, ssa_58.z
	vec1 32 ssa_195 = fmul ssa_51.w, ssa_58.z
	vec4 32 ssa_196 = vec4 ssa_192, ssa_193, ssa_194, ssa_195
	vec1 32 ssa_197 = fadd ssa_191.x, ssa_196.x
	vec1 32 ssa_198 = fadd ssa_191.y, ssa_196.y
	vec1 32 ssa_199 = fadd ssa_191.z, ssa_196.z
	vec1 32 ssa_200 = fadd ssa_191.w, ssa_196.w
	vec4 32 ssa_201 = vec4 ssa_197, ssa_198, ssa_199, ssa_200
	vec1 32 ssa_72 = mov ssa_62
	vec1 32 ssa_202 = fmul ssa_56.x, ssa_62
	vec1 32 ssa_203 = fmul ssa_56.y, ssa_62
	vec1 32 ssa_204 = fmul ssa_56.z, ssa_62
	vec1 32 ssa_205 = fmul ssa_56.w, ssa_62
	vec4 32 ssa_206 = vec4 ssa_202, ssa_203, ssa_204, ssa_205
	vec1 32 ssa_207 = fadd ssa_201.x, ssa_206.x
	vec1 32 ssa_208 = fadd ssa_201.y, ssa_206.y
	vec1 32 ssa_209 = fadd ssa_201.z, ssa_206.z
	vec1 32 ssa_210 = fadd ssa_201.w, ssa_206.w
	vec4 32 ssa_211 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	vec1 32 ssa_166 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec1 32 ssa_98 = mov ssa_58.x
	vec1 32 ssa_99 = mov ssa_58.y
	vec1 32 ssa_100 = mov ssa_58.z
	vec4 32 ssa_102 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_101
	vec1 32 ssa_103 = mov ssa_58.x
	vec1 32 ssa_212 = fmul ssa_80.x, ssa_58.x
	vec1 32 ssa_213 = fmul ssa_80.y, ssa_58.x
	vec1 32 ssa_214 = fmul ssa_80.z, ssa_58.x
	vec1 32 ssa_215 = fmul ssa_80.w, ssa_58.x
	vec4 32 ssa_216 = vec4 ssa_212, ssa_213, ssa_214, ssa_215
	vec1 32 ssa_105 = mov ssa_58.y
	vec1 32 ssa_217 = fmul ssa_85.x, ssa_58.y
	vec1 32 ssa_218 = fmul ssa_85.y, ssa_58.y
	vec1 32 ssa_219 = fmul ssa_85.z, ssa_58.y
	vec1 32 ssa_220 = fmul ssa_85.w, ssa_58.y
	vec4 32 ssa_221 = vec4 ssa_217, ssa_218, ssa_219, ssa_220
	vec1 32 ssa_222 = fadd ssa_216.x, ssa_221.x
	vec1 32 ssa_223 = fadd ssa_216.y, ssa_221.y
	vec1 32 ssa_224 = fadd ssa_216.z, ssa_221.z
	vec1 32 ssa_225 = fadd ssa_216.w, ssa_221.w
	vec4 32 ssa_226 = vec4 ssa_222, ssa_223, ssa_224, ssa_225
	vec1 32 ssa_108 = mov ssa_58.z
	vec1 32 ssa_227 = fmul ssa_90.x, ssa_58.z
	vec1 32 ssa_228 = fmul ssa_90.y, ssa_58.z
	vec1 32 ssa_229 = fmul ssa_90.z, ssa_58.z
	vec1 32 ssa_230 = fmul ssa_90.w, ssa_58.z
	vec4 32 ssa_231 = vec4 ssa_227, ssa_228, ssa_229, ssa_230
	vec1 32 ssa_232 = fadd ssa_226.x, ssa_231.x
	vec1 32 ssa_233 = fadd ssa_226.y, ssa_231.y
	vec1 32 ssa_234 = fadd ssa_226.z, ssa_231.z
	vec1 32 ssa_235 = fadd ssa_226.w, ssa_231.w
	vec4 32 ssa_236 = vec4 ssa_232, ssa_233, ssa_234, ssa_235
	vec1 32 ssa_111 = mov ssa_101
	vec1 32 ssa_237 = fmul ssa_95.x, ssa_101
	vec1 32 ssa_238 = fmul ssa_95.y, ssa_101
	vec1 32 ssa_239 = fmul ssa_95.z, ssa_101
	vec1 32 ssa_240 = fmul ssa_95.w, ssa_101
	vec4 32 ssa_241 = vec4 ssa_237, ssa_238, ssa_239, ssa_240
	vec1 32 ssa_242 = fadd ssa_236.x, ssa_241.x
	vec1 32 ssa_243 = fadd ssa_236.y, ssa_241.y
	vec1 32 ssa_244 = fadd ssa_236.z, ssa_241.z
	vec1 32 ssa_245 = fadd ssa_236.w, ssa_241.w
	vec4 32 ssa_246 = vec4 ssa_242, ssa_243, ssa_244, ssa_245
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec1 32 ssa_139 = mov ssa_1.x
	vec1 32 ssa_247 = fmul ssa_118.x, ssa_1.x
	vec1 32 ssa_248 = fmul ssa_118.y, ssa_1.x
	vec1 32 ssa_249 = fmul ssa_118.z, ssa_1.x
	vec3 32 ssa_250 = vec3 ssa_247, ssa_248, ssa_249
	vec1 32 ssa_141 = mov ssa_1.y
	vec1 32 ssa_251 = fmul ssa_123.x, ssa_1.y
	vec1 32 ssa_252 = fmul ssa_123.y, ssa_1.y
	vec1 32 ssa_253 = fmul ssa_123.z, ssa_1.y
	vec3 32 ssa_254 = vec3 ssa_251, ssa_252, ssa_253
	vec1 32 ssa_255 = fadd ssa_250.x, ssa_254.x
	vec1 32 ssa_256 = fadd ssa_250.y, ssa_254.y
	vec1 32 ssa_257 = fadd ssa_250.z, ssa_254.z
	vec3 32 ssa_258 = vec3 ssa_255, ssa_256, ssa_257
	vec1 32 ssa_144 = mov ssa_1.z
	vec1 32 ssa_259 = fmul ssa_128.x, ssa_1.z
	vec1 32 ssa_260 = fmul ssa_128.y, ssa_1.z
	vec1 32 ssa_261 = fmul ssa_128.z, ssa_1.z
	vec3 32 ssa_262 = vec3 ssa_259, ssa_260, ssa_261
	vec1 32 ssa_263 = fadd ssa_258.x, ssa_262.x
	vec1 32 ssa_264 = fadd ssa_258.y, ssa_262.y
	vec1 32 ssa_265 = fadd ssa_258.z, ssa_262.z
	vec3 32 ssa_266 = vec3 ssa_263, ssa_264, ssa_265
	vec1 32 ssa_147 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec1 32 ssa_293 = mov ssa_148.x
	vec1 32 ssa_294 = mov ssa_148.y
	vec1 32 ssa_295 = mov ssa_148.z
	vec3 32 ssa_296 = vec3 ssa_293, ssa_294, ssa_295
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec1 32 ssa_297 = mov ssa_246.x
	vec1 32 ssa_298 = mov ssa_246.y
	vec1 32 ssa_299 = mov ssa_246.z
	vec1 32 ssa_300 = mov ssa_246.w
	vec4 32 ssa_301 = vec4 ssa_297, ssa_298, ssa_299, ssa_300
	vec3 32 ssa_154 = vec3 ssa_301.x, ssa_301.y, ssa_301.z
	vec1 32 ssa_267 = fsub ssa_296.x, ssa_301.x
	vec1 32 ssa_268 = fsub ssa_296.y, ssa_301.y
	vec1 32 ssa_269 = fsub ssa_296.z, ssa_301.z
	vec3 32 ssa_270 = vec3 ssa_267, ssa_268, ssa_269
	vec1 32 ssa_156 = deref_var &out@outLightVec-temp (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec1 32 ssa_302 = mov ssa_246.x
	vec1 32 ssa_303 = mov ssa_246.y
	vec1 32 ssa_304 = mov ssa_246.z
	vec1 32 ssa_305 = mov ssa_246.w
	vec4 32 ssa_306 = vec4 ssa_302, ssa_303, ssa_304, ssa_305
	vec3 32 ssa_159 = vec3 ssa_306.x, ssa_306.y, ssa_306.z
	vec1 32 ssa_271 = fneg ssa_306.x
	vec1 32 ssa_272 = fneg ssa_306.y
	vec1 32 ssa_273 = fneg ssa_306.z
	vec3 32 ssa_274 = vec3 ssa_271, ssa_272, ssa_273
	vec1 32 ssa_161 = deref_var &out@outViewVec-temp (function_temp vec3) 
	vec1 32 ssa_167 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_168 = deref_var &outNormal (shader_out vec3) 
	vec1 32 ssa_307 = mov ssa_266.x
	vec1 32 ssa_308 = mov ssa_266.y
	vec1 32 ssa_309 = mov ssa_266.z
	vec3 32 ssa_310 = vec3 ssa_307, ssa_308, ssa_309
	intrinsic store_deref (ssa_168, ssa_310) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_169 = deref_var &out@outColor-temp (function_temp vec3) 
	vec1 32 ssa_170 = deref_var &outColor (shader_out vec3) 
	vec1 32 ssa_311 = mov ssa_292.x
	vec1 32 ssa_312 = mov ssa_292.y
	vec1 32 ssa_313 = mov ssa_292.z
	vec3 32 ssa_314 = vec3 ssa_311, ssa_312, ssa_313
	intrinsic store_deref (ssa_170, ssa_314) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_171 = deref_var &out@outLightVec-temp (function_temp vec3) 
	vec1 32 ssa_172 = deref_var &outLightVec (shader_out vec3) 
	vec1 32 ssa_315 = mov ssa_270.x
	vec1 32 ssa_316 = mov ssa_270.y
	vec1 32 ssa_317 = mov ssa_270.z
	vec3 32 ssa_318 = vec3 ssa_315, ssa_316, ssa_317
	intrinsic store_deref (ssa_172, ssa_318) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_173 = deref_var &out@outViewVec-temp (function_temp vec3) 
	vec1 32 ssa_174 = deref_var &outViewVec (shader_out vec3) 
	vec1 32 ssa_319 = mov ssa_274.x
	vec1 32 ssa_320 = mov ssa_274.y
	vec1 32 ssa_321 = mov ssa_274.z
	vec3 32 ssa_322 = vec3 ssa_319, ssa_320, ssa_321
	intrinsic store_deref (ssa_174, ssa_322) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_175 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_176 = deref_var &.field0 (shader_out vec4) 
	vec1 32 ssa_323 = mov ssa_211.x
	vec1 32 ssa_324 = mov ssa_211.y
	vec1 32 ssa_325 = mov ssa_211.z
	vec1 32 ssa_326 = mov ssa_211.w
	vec4 32 ssa_327 = vec4 ssa_323, ssa_324, ssa_325, ssa_326
	intrinsic store_deref (ssa_176, ssa_327) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_copy_prop
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec1 32 ssa_14 = mov ssa_6.y
		vec1 1 ssa_16 = feq ssa_6.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 1 ssa_290 = phi block_1: ssa_16, block_2: ssa_9
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_280 = mov ssa_290
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	/* succs: block_4 block_5 */
	if ssa_290 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec1 32 ssa_23 = mov ssa_6.z
		vec1 1 ssa_25 = feq ssa_6.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 1 ssa_291 = phi block_4: ssa_25, block_5: ssa_290
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_281 = mov ssa_291
	/* succs: block_7 block_8 */
	if ssa_291 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &out@outColor-temp (function_temp vec3) 
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec1 32 ssa_37 = deref_var &out@outColor-temp (function_temp vec3) 
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec3 32 ssa_292 = phi block_7: ssa_33, block_8: ssa_6
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec1 32 ssa_177 = fmul ssa_41.x, ssa_58.x
	vec1 32 ssa_178 = fmul ssa_41.y, ssa_58.x
	vec1 32 ssa_179 = fmul ssa_41.z, ssa_58.x
	vec1 32 ssa_180 = fmul ssa_41.w, ssa_58.x
	vec4 32 ssa_181 = vec4 ssa_177, ssa_178, ssa_179, ssa_180
	vec1 32 ssa_66 = mov ssa_58.y
	vec1 32 ssa_182 = fmul ssa_46.x, ssa_58.y
	vec1 32 ssa_183 = fmul ssa_46.y, ssa_58.y
	vec1 32 ssa_184 = fmul ssa_46.z, ssa_58.y
	vec1 32 ssa_185 = fmul ssa_46.w, ssa_58.y
	vec4 32 ssa_186 = vec4 ssa_182, ssa_183, ssa_184, ssa_185
	vec1 32 ssa_187 = fadd ssa_177, ssa_182
	vec1 32 ssa_188 = fadd ssa_178, ssa_183
	vec1 32 ssa_189 = fadd ssa_179, ssa_184
	vec1 32 ssa_190 = fadd ssa_180, ssa_185
	vec4 32 ssa_191 = vec4 ssa_187, ssa_188, ssa_189, ssa_190
	vec1 32 ssa_69 = mov ssa_58.z
	vec1 32 ssa_192 = fmul ssa_51.x, ssa_58.z
	vec1 32 ssa_193 = fmul ssa_51.y, ssa_58.z
	vec1 32 ssa_194 = fmul ssa_51.z, ssa_58.z
	vec1 32 ssa_195 = fmul ssa_51.w, ssa_58.z
	vec4 32 ssa_196 = vec4 ssa_192, ssa_193, ssa_194, ssa_195
	vec1 32 ssa_197 = fadd ssa_187, ssa_192
	vec1 32 ssa_198 = fadd ssa_188, ssa_193
	vec1 32 ssa_199 = fadd ssa_189, ssa_194
	vec1 32 ssa_200 = fadd ssa_190, ssa_195
	vec4 32 ssa_201 = vec4 ssa_197, ssa_198, ssa_199, ssa_200
	vec1 32 ssa_72 = mov ssa_62
	vec1 32 ssa_202 = fmul ssa_56.x, ssa_62
	vec1 32 ssa_203 = fmul ssa_56.y, ssa_62
	vec1 32 ssa_204 = fmul ssa_56.z, ssa_62
	vec1 32 ssa_205 = fmul ssa_56.w, ssa_62
	vec4 32 ssa_206 = vec4 ssa_202, ssa_203, ssa_204, ssa_205
	vec1 32 ssa_207 = fadd ssa_197, ssa_202
	vec1 32 ssa_208 = fadd ssa_198, ssa_203
	vec1 32 ssa_209 = fadd ssa_199, ssa_204
	vec1 32 ssa_210 = fadd ssa_200, ssa_205
	vec4 32 ssa_211 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	vec1 32 ssa_166 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec1 32 ssa_98 = mov ssa_58.x
	vec1 32 ssa_99 = mov ssa_58.y
	vec1 32 ssa_100 = mov ssa_58.z
	vec4 32 ssa_102 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_101
	vec1 32 ssa_103 = mov ssa_58.x
	vec1 32 ssa_212 = fmul ssa_80.x, ssa_58.x
	vec1 32 ssa_213 = fmul ssa_80.y, ssa_58.x
	vec1 32 ssa_214 = fmul ssa_80.z, ssa_58.x
	vec1 32 ssa_215 = fmul ssa_80.w, ssa_58.x
	vec4 32 ssa_216 = vec4 ssa_212, ssa_213, ssa_214, ssa_215
	vec1 32 ssa_105 = mov ssa_58.y
	vec1 32 ssa_217 = fmul ssa_85.x, ssa_58.y
	vec1 32 ssa_218 = fmul ssa_85.y, ssa_58.y
	vec1 32 ssa_219 = fmul ssa_85.z, ssa_58.y
	vec1 32 ssa_220 = fmul ssa_85.w, ssa_58.y
	vec4 32 ssa_221 = vec4 ssa_217, ssa_218, ssa_219, ssa_220
	vec1 32 ssa_222 = fadd ssa_212, ssa_217
	vec1 32 ssa_223 = fadd ssa_213, ssa_218
	vec1 32 ssa_224 = fadd ssa_214, ssa_219
	vec1 32 ssa_225 = fadd ssa_215, ssa_220
	vec4 32 ssa_226 = vec4 ssa_222, ssa_223, ssa_224, ssa_225
	vec1 32 ssa_108 = mov ssa_58.z
	vec1 32 ssa_227 = fmul ssa_90.x, ssa_58.z
	vec1 32 ssa_228 = fmul ssa_90.y, ssa_58.z
	vec1 32 ssa_229 = fmul ssa_90.z, ssa_58.z
	vec1 32 ssa_230 = fmul ssa_90.w, ssa_58.z
	vec4 32 ssa_231 = vec4 ssa_227, ssa_228, ssa_229, ssa_230
	vec1 32 ssa_232 = fadd ssa_222, ssa_227
	vec1 32 ssa_233 = fadd ssa_223, ssa_228
	vec1 32 ssa_234 = fadd ssa_224, ssa_229
	vec1 32 ssa_235 = fadd ssa_225, ssa_230
	vec4 32 ssa_236 = vec4 ssa_232, ssa_233, ssa_234, ssa_235
	vec1 32 ssa_111 = mov ssa_101
	vec1 32 ssa_237 = fmul ssa_95.x, ssa_101
	vec1 32 ssa_238 = fmul ssa_95.y, ssa_101
	vec1 32 ssa_239 = fmul ssa_95.z, ssa_101
	vec1 32 ssa_240 = fmul ssa_95.w, ssa_101
	vec4 32 ssa_241 = vec4 ssa_237, ssa_238, ssa_239, ssa_240
	vec1 32 ssa_242 = fadd ssa_232, ssa_237
	vec1 32 ssa_243 = fadd ssa_233, ssa_238
	vec1 32 ssa_244 = fadd ssa_234, ssa_239
	vec1 32 ssa_245 = fadd ssa_235, ssa_240
	vec4 32 ssa_246 = vec4 ssa_242, ssa_243, ssa_244, ssa_245
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec1 32 ssa_139 = mov ssa_1.x
	vec1 32 ssa_247 = fmul ssa_118.x, ssa_1.x
	vec1 32 ssa_248 = fmul ssa_118.y, ssa_1.x
	vec1 32 ssa_249 = fmul ssa_118.z, ssa_1.x
	vec3 32 ssa_250 = vec3 ssa_247, ssa_248, ssa_249
	vec1 32 ssa_141 = mov ssa_1.y
	vec1 32 ssa_251 = fmul ssa_123.x, ssa_1.y
	vec1 32 ssa_252 = fmul ssa_123.y, ssa_1.y
	vec1 32 ssa_253 = fmul ssa_123.z, ssa_1.y
	vec3 32 ssa_254 = vec3 ssa_251, ssa_252, ssa_253
	vec1 32 ssa_255 = fadd ssa_247, ssa_251
	vec1 32 ssa_256 = fadd ssa_248, ssa_252
	vec1 32 ssa_257 = fadd ssa_249, ssa_253
	vec3 32 ssa_258 = vec3 ssa_255, ssa_256, ssa_257
	vec1 32 ssa_144 = mov ssa_1.z
	vec1 32 ssa_259 = fmul ssa_128.x, ssa_1.z
	vec1 32 ssa_260 = fmul ssa_128.y, ssa_1.z
	vec1 32 ssa_261 = fmul ssa_128.z, ssa_1.z
	vec3 32 ssa_262 = vec3 ssa_259, ssa_260, ssa_261
	vec1 32 ssa_263 = fadd ssa_255, ssa_259
	vec1 32 ssa_264 = fadd ssa_256, ssa_260
	vec1 32 ssa_265 = fadd ssa_257, ssa_261
	vec3 32 ssa_266 = vec3 ssa_263, ssa_264, ssa_265
	vec1 32 ssa_147 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec1 32 ssa_293 = mov ssa_148.x
	vec1 32 ssa_294 = mov ssa_148.y
	vec1 32 ssa_295 = mov ssa_148.z
	vec3 32 ssa_296 = vec3 ssa_148.x, ssa_148.y, ssa_148.z
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec1 32 ssa_297 = mov ssa_242
	vec1 32 ssa_298 = mov ssa_243
	vec1 32 ssa_299 = mov ssa_244
	vec1 32 ssa_300 = mov ssa_245
	vec4 32 ssa_301 = vec4 ssa_242, ssa_243, ssa_244, ssa_245
	vec3 32 ssa_154 = vec3 ssa_242, ssa_243, ssa_244
	vec1 32 ssa_267 = fsub ssa_148.x, ssa_242
	vec1 32 ssa_268 = fsub ssa_148.y, ssa_243
	vec1 32 ssa_269 = fsub ssa_148.z, ssa_244
	vec3 32 ssa_270 = vec3 ssa_267, ssa_268, ssa_269
	vec1 32 ssa_156 = deref_var &out@outLightVec-temp (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec1 32 ssa_302 = mov ssa_242
	vec1 32 ssa_303 = mov ssa_243
	vec1 32 ssa_304 = mov ssa_244
	vec1 32 ssa_305 = mov ssa_245
	vec4 32 ssa_306 = vec4 ssa_242, ssa_243, ssa_244, ssa_245
	vec3 32 ssa_159 = vec3 ssa_242, ssa_243, ssa_244
	vec1 32 ssa_271 = fneg ssa_242
	vec1 32 ssa_272 = fneg ssa_243
	vec1 32 ssa_273 = fneg ssa_244
	vec3 32 ssa_274 = vec3 ssa_271, ssa_272, ssa_273
	vec1 32 ssa_161 = deref_var &out@outViewVec-temp (function_temp vec3) 
	vec1 32 ssa_167 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_168 = deref_var &outNormal (shader_out vec3) 
	vec1 32 ssa_307 = mov ssa_263
	vec1 32 ssa_308 = mov ssa_264
	vec1 32 ssa_309 = mov ssa_265
	vec3 32 ssa_310 = vec3 ssa_263, ssa_264, ssa_265
	intrinsic store_deref (ssa_168, ssa_310) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_169 = deref_var &out@outColor-temp (function_temp vec3) 
	vec1 32 ssa_170 = deref_var &outColor (shader_out vec3) 
	vec1 32 ssa_311 = mov ssa_292.x
	vec1 32 ssa_312 = mov ssa_292.y
	vec1 32 ssa_313 = mov ssa_292.z
	vec3 32 ssa_314 = vec3 ssa_292.x, ssa_292.y, ssa_292.z
	intrinsic store_deref (ssa_170, ssa_292) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_171 = deref_var &out@outLightVec-temp (function_temp vec3) 
	vec1 32 ssa_172 = deref_var &outLightVec (shader_out vec3) 
	vec1 32 ssa_315 = mov ssa_267
	vec1 32 ssa_316 = mov ssa_268
	vec1 32 ssa_317 = mov ssa_269
	vec3 32 ssa_318 = vec3 ssa_267, ssa_268, ssa_269
	intrinsic store_deref (ssa_172, ssa_318) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_173 = deref_var &out@outViewVec-temp (function_temp vec3) 
	vec1 32 ssa_174 = deref_var &outViewVec (shader_out vec3) 
	vec1 32 ssa_319 = mov ssa_271
	vec1 32 ssa_320 = mov ssa_272
	vec1 32 ssa_321 = mov ssa_273
	vec3 32 ssa_322 = vec3 ssa_271, ssa_272, ssa_273
	intrinsic store_deref (ssa_174, ssa_322) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_175 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_176 = deref_var &.field0 (shader_out vec4) 
	vec1 32 ssa_323 = mov ssa_207
	vec1 32 ssa_324 = mov ssa_208
	vec1 32 ssa_325 = mov ssa_209
	vec1 32 ssa_326 = mov ssa_210
	vec4 32 ssa_327 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	intrinsic store_deref (ssa_176, ssa_327) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_lower_phis_to_scalar
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec1 32 ssa_14 = mov ssa_6.y
		vec1 1 ssa_16 = feq ssa_6.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 1 ssa_290 = phi block_1: ssa_16, block_2: ssa_9
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_280 = mov ssa_290
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	/* succs: block_4 block_5 */
	if ssa_290 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec1 32 ssa_23 = mov ssa_6.z
		vec1 1 ssa_25 = feq ssa_6.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 1 ssa_291 = phi block_4: ssa_25, block_5: ssa_290
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_281 = mov ssa_291
	/* succs: block_7 block_8 */
	if ssa_291 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &out@outColor-temp (function_temp vec3) 
		vec1 32 ssa_328 = mov ssa_33.x
		vec1 32 ssa_331 = mov ssa_33.y
		vec1 32 ssa_334 = mov ssa_33.z
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec1 32 ssa_37 = deref_var &out@outColor-temp (function_temp vec3) 
		vec1 32 ssa_329 = mov ssa_6.x
		vec1 32 ssa_332 = mov ssa_6.y
		vec1 32 ssa_335 = mov ssa_6.z
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_330 = phi block_7: ssa_328, block_8: ssa_329
	vec1 32 ssa_333 = phi block_7: ssa_331, block_8: ssa_332
	vec1 32 ssa_336 = phi block_7: ssa_334, block_8: ssa_335
	vec3 32 ssa_337 = vec3 ssa_330, ssa_333, ssa_336
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec1 32 ssa_177 = fmul ssa_41.x, ssa_58.x
	vec1 32 ssa_178 = fmul ssa_41.y, ssa_58.x
	vec1 32 ssa_179 = fmul ssa_41.z, ssa_58.x
	vec1 32 ssa_180 = fmul ssa_41.w, ssa_58.x
	vec4 32 ssa_181 = vec4 ssa_177, ssa_178, ssa_179, ssa_180
	vec1 32 ssa_66 = mov ssa_58.y
	vec1 32 ssa_182 = fmul ssa_46.x, ssa_58.y
	vec1 32 ssa_183 = fmul ssa_46.y, ssa_58.y
	vec1 32 ssa_184 = fmul ssa_46.z, ssa_58.y
	vec1 32 ssa_185 = fmul ssa_46.w, ssa_58.y
	vec4 32 ssa_186 = vec4 ssa_182, ssa_183, ssa_184, ssa_185
	vec1 32 ssa_187 = fadd ssa_177, ssa_182
	vec1 32 ssa_188 = fadd ssa_178, ssa_183
	vec1 32 ssa_189 = fadd ssa_179, ssa_184
	vec1 32 ssa_190 = fadd ssa_180, ssa_185
	vec4 32 ssa_191 = vec4 ssa_187, ssa_188, ssa_189, ssa_190
	vec1 32 ssa_69 = mov ssa_58.z
	vec1 32 ssa_192 = fmul ssa_51.x, ssa_58.z
	vec1 32 ssa_193 = fmul ssa_51.y, ssa_58.z
	vec1 32 ssa_194 = fmul ssa_51.z, ssa_58.z
	vec1 32 ssa_195 = fmul ssa_51.w, ssa_58.z
	vec4 32 ssa_196 = vec4 ssa_192, ssa_193, ssa_194, ssa_195
	vec1 32 ssa_197 = fadd ssa_187, ssa_192
	vec1 32 ssa_198 = fadd ssa_188, ssa_193
	vec1 32 ssa_199 = fadd ssa_189, ssa_194
	vec1 32 ssa_200 = fadd ssa_190, ssa_195
	vec4 32 ssa_201 = vec4 ssa_197, ssa_198, ssa_199, ssa_200
	vec1 32 ssa_72 = mov ssa_62
	vec1 32 ssa_202 = fmul ssa_56.x, ssa_62
	vec1 32 ssa_203 = fmul ssa_56.y, ssa_62
	vec1 32 ssa_204 = fmul ssa_56.z, ssa_62
	vec1 32 ssa_205 = fmul ssa_56.w, ssa_62
	vec4 32 ssa_206 = vec4 ssa_202, ssa_203, ssa_204, ssa_205
	vec1 32 ssa_207 = fadd ssa_197, ssa_202
	vec1 32 ssa_208 = fadd ssa_198, ssa_203
	vec1 32 ssa_209 = fadd ssa_199, ssa_204
	vec1 32 ssa_210 = fadd ssa_200, ssa_205
	vec4 32 ssa_211 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	vec1 32 ssa_166 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec1 32 ssa_98 = mov ssa_58.x
	vec1 32 ssa_99 = mov ssa_58.y
	vec1 32 ssa_100 = mov ssa_58.z
	vec4 32 ssa_102 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_101
	vec1 32 ssa_103 = mov ssa_58.x
	vec1 32 ssa_212 = fmul ssa_80.x, ssa_58.x
	vec1 32 ssa_213 = fmul ssa_80.y, ssa_58.x
	vec1 32 ssa_214 = fmul ssa_80.z, ssa_58.x
	vec1 32 ssa_215 = fmul ssa_80.w, ssa_58.x
	vec4 32 ssa_216 = vec4 ssa_212, ssa_213, ssa_214, ssa_215
	vec1 32 ssa_105 = mov ssa_58.y
	vec1 32 ssa_217 = fmul ssa_85.x, ssa_58.y
	vec1 32 ssa_218 = fmul ssa_85.y, ssa_58.y
	vec1 32 ssa_219 = fmul ssa_85.z, ssa_58.y
	vec1 32 ssa_220 = fmul ssa_85.w, ssa_58.y
	vec4 32 ssa_221 = vec4 ssa_217, ssa_218, ssa_219, ssa_220
	vec1 32 ssa_222 = fadd ssa_212, ssa_217
	vec1 32 ssa_223 = fadd ssa_213, ssa_218
	vec1 32 ssa_224 = fadd ssa_214, ssa_219
	vec1 32 ssa_225 = fadd ssa_215, ssa_220
	vec4 32 ssa_226 = vec4 ssa_222, ssa_223, ssa_224, ssa_225
	vec1 32 ssa_108 = mov ssa_58.z
	vec1 32 ssa_227 = fmul ssa_90.x, ssa_58.z
	vec1 32 ssa_228 = fmul ssa_90.y, ssa_58.z
	vec1 32 ssa_229 = fmul ssa_90.z, ssa_58.z
	vec1 32 ssa_230 = fmul ssa_90.w, ssa_58.z
	vec4 32 ssa_231 = vec4 ssa_227, ssa_228, ssa_229, ssa_230
	vec1 32 ssa_232 = fadd ssa_222, ssa_227
	vec1 32 ssa_233 = fadd ssa_223, ssa_228
	vec1 32 ssa_234 = fadd ssa_224, ssa_229
	vec1 32 ssa_235 = fadd ssa_225, ssa_230
	vec4 32 ssa_236 = vec4 ssa_232, ssa_233, ssa_234, ssa_235
	vec1 32 ssa_111 = mov ssa_101
	vec1 32 ssa_237 = fmul ssa_95.x, ssa_101
	vec1 32 ssa_238 = fmul ssa_95.y, ssa_101
	vec1 32 ssa_239 = fmul ssa_95.z, ssa_101
	vec1 32 ssa_240 = fmul ssa_95.w, ssa_101
	vec4 32 ssa_241 = vec4 ssa_237, ssa_238, ssa_239, ssa_240
	vec1 32 ssa_242 = fadd ssa_232, ssa_237
	vec1 32 ssa_243 = fadd ssa_233, ssa_238
	vec1 32 ssa_244 = fadd ssa_234, ssa_239
	vec1 32 ssa_245 = fadd ssa_235, ssa_240
	vec4 32 ssa_246 = vec4 ssa_242, ssa_243, ssa_244, ssa_245
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec1 32 ssa_139 = mov ssa_1.x
	vec1 32 ssa_247 = fmul ssa_118.x, ssa_1.x
	vec1 32 ssa_248 = fmul ssa_118.y, ssa_1.x
	vec1 32 ssa_249 = fmul ssa_118.z, ssa_1.x
	vec3 32 ssa_250 = vec3 ssa_247, ssa_248, ssa_249
	vec1 32 ssa_141 = mov ssa_1.y
	vec1 32 ssa_251 = fmul ssa_123.x, ssa_1.y
	vec1 32 ssa_252 = fmul ssa_123.y, ssa_1.y
	vec1 32 ssa_253 = fmul ssa_123.z, ssa_1.y
	vec3 32 ssa_254 = vec3 ssa_251, ssa_252, ssa_253
	vec1 32 ssa_255 = fadd ssa_247, ssa_251
	vec1 32 ssa_256 = fadd ssa_248, ssa_252
	vec1 32 ssa_257 = fadd ssa_249, ssa_253
	vec3 32 ssa_258 = vec3 ssa_255, ssa_256, ssa_257
	vec1 32 ssa_144 = mov ssa_1.z
	vec1 32 ssa_259 = fmul ssa_128.x, ssa_1.z
	vec1 32 ssa_260 = fmul ssa_128.y, ssa_1.z
	vec1 32 ssa_261 = fmul ssa_128.z, ssa_1.z
	vec3 32 ssa_262 = vec3 ssa_259, ssa_260, ssa_261
	vec1 32 ssa_263 = fadd ssa_255, ssa_259
	vec1 32 ssa_264 = fadd ssa_256, ssa_260
	vec1 32 ssa_265 = fadd ssa_257, ssa_261
	vec3 32 ssa_266 = vec3 ssa_263, ssa_264, ssa_265
	vec1 32 ssa_147 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec1 32 ssa_293 = mov ssa_148.x
	vec1 32 ssa_294 = mov ssa_148.y
	vec1 32 ssa_295 = mov ssa_148.z
	vec3 32 ssa_296 = vec3 ssa_148.x, ssa_148.y, ssa_148.z
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec1 32 ssa_297 = mov ssa_242
	vec1 32 ssa_298 = mov ssa_243
	vec1 32 ssa_299 = mov ssa_244
	vec1 32 ssa_300 = mov ssa_245
	vec4 32 ssa_301 = vec4 ssa_242, ssa_243, ssa_244, ssa_245
	vec3 32 ssa_154 = vec3 ssa_242, ssa_243, ssa_244
	vec1 32 ssa_267 = fsub ssa_148.x, ssa_242
	vec1 32 ssa_268 = fsub ssa_148.y, ssa_243
	vec1 32 ssa_269 = fsub ssa_148.z, ssa_244
	vec3 32 ssa_270 = vec3 ssa_267, ssa_268, ssa_269
	vec1 32 ssa_156 = deref_var &out@outLightVec-temp (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec1 32 ssa_302 = mov ssa_242
	vec1 32 ssa_303 = mov ssa_243
	vec1 32 ssa_304 = mov ssa_244
	vec1 32 ssa_305 = mov ssa_245
	vec4 32 ssa_306 = vec4 ssa_242, ssa_243, ssa_244, ssa_245
	vec3 32 ssa_159 = vec3 ssa_242, ssa_243, ssa_244
	vec1 32 ssa_271 = fneg ssa_242
	vec1 32 ssa_272 = fneg ssa_243
	vec1 32 ssa_273 = fneg ssa_244
	vec3 32 ssa_274 = vec3 ssa_271, ssa_272, ssa_273
	vec1 32 ssa_161 = deref_var &out@outViewVec-temp (function_temp vec3) 
	vec1 32 ssa_167 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_168 = deref_var &outNormal (shader_out vec3) 
	vec1 32 ssa_307 = mov ssa_263
	vec1 32 ssa_308 = mov ssa_264
	vec1 32 ssa_309 = mov ssa_265
	vec3 32 ssa_310 = vec3 ssa_263, ssa_264, ssa_265
	intrinsic store_deref (ssa_168, ssa_310) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_169 = deref_var &out@outColor-temp (function_temp vec3) 
	vec1 32 ssa_170 = deref_var &outColor (shader_out vec3) 
	vec1 32 ssa_311 = mov ssa_337.x
	vec1 32 ssa_312 = mov ssa_337.y
	vec1 32 ssa_313 = mov ssa_337.z
	vec3 32 ssa_314 = vec3 ssa_337.x, ssa_337.y, ssa_337.z
	intrinsic store_deref (ssa_170, ssa_337) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_171 = deref_var &out@outLightVec-temp (function_temp vec3) 
	vec1 32 ssa_172 = deref_var &outLightVec (shader_out vec3) 
	vec1 32 ssa_315 = mov ssa_267
	vec1 32 ssa_316 = mov ssa_268
	vec1 32 ssa_317 = mov ssa_269
	vec3 32 ssa_318 = vec3 ssa_267, ssa_268, ssa_269
	intrinsic store_deref (ssa_172, ssa_318) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_173 = deref_var &out@outViewVec-temp (function_temp vec3) 
	vec1 32 ssa_174 = deref_var &outViewVec (shader_out vec3) 
	vec1 32 ssa_319 = mov ssa_271
	vec1 32 ssa_320 = mov ssa_272
	vec1 32 ssa_321 = mov ssa_273
	vec3 32 ssa_322 = vec3 ssa_271, ssa_272, ssa_273
	intrinsic store_deref (ssa_174, ssa_322) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_175 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_176 = deref_var &.field0 (shader_out vec4) 
	vec1 32 ssa_323 = mov ssa_207
	vec1 32 ssa_324 = mov ssa_208
	vec1 32 ssa_325 = mov ssa_209
	vec1 32 ssa_326 = mov ssa_210
	vec4 32 ssa_327 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	intrinsic store_deref (ssa_176, ssa_327) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_copy_prop
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_7 = mov ssa_6.x
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	vec1 32 ssa_162 = deref_var &phi (function_temp bool) 
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_10 = deref_var &inColor (shader_in vec3) 
		vec1 32 ssa_14 = mov ssa_6.y
		vec1 1 ssa_16 = feq ssa_6.y, ssa_15
		vec1 32 ssa_163 = deref_var &phi (function_temp bool) 
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 1 ssa_290 = phi block_1: ssa_16, block_2: ssa_9
	vec1 32 ssa_17 = deref_var &phi (function_temp bool) 
	vec1 1 ssa_280 = mov ssa_290
	vec1 32 ssa_164 = deref_var &phi@0 (function_temp bool) 
	/* succs: block_4 block_5 */
	if ssa_290 {
		block block_4:
		/* preds: block_3 */
		vec1 32 ssa_19 = deref_var &inColor (shader_in vec3) 
		vec1 32 ssa_23 = mov ssa_6.z
		vec1 1 ssa_25 = feq ssa_6.z, ssa_24
		vec1 32 ssa_165 = deref_var &phi@0 (function_temp bool) 
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 1 ssa_291 = phi block_4: ssa_25, block_5: ssa_290
	vec1 32 ssa_26 = deref_var &phi@0 (function_temp bool) 
	vec1 1 ssa_281 = mov ssa_291
	/* succs: block_7 block_8 */
	if ssa_291 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_34 = deref_var &out@outColor-temp (function_temp vec3) 
		vec1 32 ssa_328 = mov ssa_33.x
		vec1 32 ssa_331 = mov ssa_33.y
		vec1 32 ssa_334 = mov ssa_33.z
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_35 = deref_var &inColor (shader_in vec3) 
		vec1 32 ssa_37 = deref_var &out@outColor-temp (function_temp vec3) 
		vec1 32 ssa_329 = mov ssa_6.x
		vec1 32 ssa_332 = mov ssa_6.y
		vec1 32 ssa_335 = mov ssa_6.z
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_330 = phi block_7: ssa_328, block_8: ssa_329
	vec1 32 ssa_333 = phi block_7: ssa_331, block_8: ssa_332
	vec1 32 ssa_336 = phi block_7: ssa_334, block_8: ssa_335
	vec3 32 ssa_337 = vec3 ssa_330, ssa_333, ssa_336
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_59 = mov ssa_58.x
	vec1 32 ssa_60 = mov ssa_58.y
	vec1 32 ssa_61 = mov ssa_58.z
	vec4 32 ssa_63 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_62
	vec1 32 ssa_64 = mov ssa_58.x
	vec1 32 ssa_177 = fmul ssa_41.x, ssa_58.x
	vec1 32 ssa_178 = fmul ssa_41.y, ssa_58.x
	vec1 32 ssa_179 = fmul ssa_41.z, ssa_58.x
	vec1 32 ssa_180 = fmul ssa_41.w, ssa_58.x
	vec4 32 ssa_181 = vec4 ssa_177, ssa_178, ssa_179, ssa_180
	vec1 32 ssa_66 = mov ssa_58.y
	vec1 32 ssa_182 = fmul ssa_46.x, ssa_58.y
	vec1 32 ssa_183 = fmul ssa_46.y, ssa_58.y
	vec1 32 ssa_184 = fmul ssa_46.z, ssa_58.y
	vec1 32 ssa_185 = fmul ssa_46.w, ssa_58.y
	vec4 32 ssa_186 = vec4 ssa_182, ssa_183, ssa_184, ssa_185
	vec1 32 ssa_187 = fadd ssa_177, ssa_182
	vec1 32 ssa_188 = fadd ssa_178, ssa_183
	vec1 32 ssa_189 = fadd ssa_179, ssa_184
	vec1 32 ssa_190 = fadd ssa_180, ssa_185
	vec4 32 ssa_191 = vec4 ssa_187, ssa_188, ssa_189, ssa_190
	vec1 32 ssa_69 = mov ssa_58.z
	vec1 32 ssa_192 = fmul ssa_51.x, ssa_58.z
	vec1 32 ssa_193 = fmul ssa_51.y, ssa_58.z
	vec1 32 ssa_194 = fmul ssa_51.z, ssa_58.z
	vec1 32 ssa_195 = fmul ssa_51.w, ssa_58.z
	vec4 32 ssa_196 = vec4 ssa_192, ssa_193, ssa_194, ssa_195
	vec1 32 ssa_197 = fadd ssa_187, ssa_192
	vec1 32 ssa_198 = fadd ssa_188, ssa_193
	vec1 32 ssa_199 = fadd ssa_189, ssa_194
	vec1 32 ssa_200 = fadd ssa_190, ssa_195
	vec4 32 ssa_201 = vec4 ssa_197, ssa_198, ssa_199, ssa_200
	vec1 32 ssa_72 = mov ssa_62
	vec1 32 ssa_202 = fmul ssa_56.x, ssa_62
	vec1 32 ssa_203 = fmul ssa_56.y, ssa_62
	vec1 32 ssa_204 = fmul ssa_56.z, ssa_62
	vec1 32 ssa_205 = fmul ssa_56.w, ssa_62
	vec4 32 ssa_206 = vec4 ssa_202, ssa_203, ssa_204, ssa_205
	vec1 32 ssa_207 = fadd ssa_197, ssa_202
	vec1 32 ssa_208 = fadd ssa_198, ssa_203
	vec1 32 ssa_209 = fadd ssa_199, ssa_204
	vec1 32 ssa_210 = fadd ssa_200, ssa_205
	vec4 32 ssa_211 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	vec1 32 ssa_166 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_96 = deref_var &inPos (shader_in vec3) 
	vec1 32 ssa_98 = mov ssa_58.x
	vec1 32 ssa_99 = mov ssa_58.y
	vec1 32 ssa_100 = mov ssa_58.z
	vec4 32 ssa_102 = vec4 ssa_58.x, ssa_58.y, ssa_58.z, ssa_101
	vec1 32 ssa_103 = mov ssa_58.x
	vec1 32 ssa_212 = fmul ssa_80.x, ssa_58.x
	vec1 32 ssa_213 = fmul ssa_80.y, ssa_58.x
	vec1 32 ssa_214 = fmul ssa_80.z, ssa_58.x
	vec1 32 ssa_215 = fmul ssa_80.w, ssa_58.x
	vec4 32 ssa_216 = vec4 ssa_212, ssa_213, ssa_214, ssa_215
	vec1 32 ssa_105 = mov ssa_58.y
	vec1 32 ssa_217 = fmul ssa_85.x, ssa_58.y
	vec1 32 ssa_218 = fmul ssa_85.y, ssa_58.y
	vec1 32 ssa_219 = fmul ssa_85.z, ssa_58.y
	vec1 32 ssa_220 = fmul ssa_85.w, ssa_58.y
	vec4 32 ssa_221 = vec4 ssa_217, ssa_218, ssa_219, ssa_220
	vec1 32 ssa_222 = fadd ssa_212, ssa_217
	vec1 32 ssa_223 = fadd ssa_213, ssa_218
	vec1 32 ssa_224 = fadd ssa_214, ssa_219
	vec1 32 ssa_225 = fadd ssa_215, ssa_220
	vec4 32 ssa_226 = vec4 ssa_222, ssa_223, ssa_224, ssa_225
	vec1 32 ssa_108 = mov ssa_58.z
	vec1 32 ssa_227 = fmul ssa_90.x, ssa_58.z
	vec1 32 ssa_228 = fmul ssa_90.y, ssa_58.z
	vec1 32 ssa_229 = fmul ssa_90.z, ssa_58.z
	vec1 32 ssa_230 = fmul ssa_90.w, ssa_58.z
	vec4 32 ssa_231 = vec4 ssa_227, ssa_228, ssa_229, ssa_230
	vec1 32 ssa_232 = fadd ssa_222, ssa_227
	vec1 32 ssa_233 = fadd ssa_223, ssa_228
	vec1 32 ssa_234 = fadd ssa_224, ssa_229
	vec1 32 ssa_235 = fadd ssa_225, ssa_230
	vec4 32 ssa_236 = vec4 ssa_232, ssa_233, ssa_234, ssa_235
	vec1 32 ssa_111 = mov ssa_101
	vec1 32 ssa_237 = fmul ssa_95.x, ssa_101
	vec1 32 ssa_238 = fmul ssa_95.y, ssa_101
	vec1 32 ssa_239 = fmul ssa_95.z, ssa_101
	vec1 32 ssa_240 = fmul ssa_95.w, ssa_101
	vec4 32 ssa_241 = vec4 ssa_237, ssa_238, ssa_239, ssa_240
	vec1 32 ssa_242 = fadd ssa_232, ssa_237
	vec1 32 ssa_243 = fadd ssa_233, ssa_238
	vec1 32 ssa_244 = fadd ssa_234, ssa_239
	vec1 32 ssa_245 = fadd ssa_235, ssa_240
	vec4 32 ssa_246 = vec4 ssa_242, ssa_243, ssa_244, ssa_245
	vec1 32 ssa_114 = deref_var &pos (function_temp vec4) 
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec3 32 ssa_134 = vec3 ssa_118.x, ssa_118.y, ssa_118.z
	vec3 32 ssa_135 = vec3 ssa_123.x, ssa_123.y, ssa_123.z
	vec3 32 ssa_136 = vec3 ssa_128.x, ssa_128.y, ssa_128.z
	vec1 32 ssa_137 = deref_var &inNormal (shader_in vec3) 
	vec1 32 ssa_139 = mov ssa_1.x
	vec1 32 ssa_247 = fmul ssa_118.x, ssa_1.x
	vec1 32 ssa_248 = fmul ssa_118.y, ssa_1.x
	vec1 32 ssa_249 = fmul ssa_118.z, ssa_1.x
	vec3 32 ssa_250 = vec3 ssa_247, ssa_248, ssa_249
	vec1 32 ssa_141 = mov ssa_1.y
	vec1 32 ssa_251 = fmul ssa_123.x, ssa_1.y
	vec1 32 ssa_252 = fmul ssa_123.y, ssa_1.y
	vec1 32 ssa_253 = fmul ssa_123.z, ssa_1.y
	vec3 32 ssa_254 = vec3 ssa_251, ssa_252, ssa_253
	vec1 32 ssa_255 = fadd ssa_247, ssa_251
	vec1 32 ssa_256 = fadd ssa_248, ssa_252
	vec1 32 ssa_257 = fadd ssa_249, ssa_253
	vec3 32 ssa_258 = vec3 ssa_255, ssa_256, ssa_257
	vec1 32 ssa_144 = mov ssa_1.z
	vec1 32 ssa_259 = fmul ssa_128.x, ssa_1.z
	vec1 32 ssa_260 = fmul ssa_128.y, ssa_1.z
	vec1 32 ssa_261 = fmul ssa_128.z, ssa_1.z
	vec3 32 ssa_262 = vec3 ssa_259, ssa_260, ssa_261
	vec1 32 ssa_263 = fadd ssa_255, ssa_259
	vec1 32 ssa_264 = fadd ssa_256, ssa_260
	vec1 32 ssa_265 = fadd ssa_257, ssa_261
	vec3 32 ssa_266 = vec3 ssa_263, ssa_264, ssa_265
	vec1 32 ssa_147 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_149 = deref_var &lPos (function_temp vec3) 
	vec1 32 ssa_150 = deref_var &lPos (function_temp vec3) 
	vec1 32 ssa_293 = mov ssa_148.x
	vec1 32 ssa_294 = mov ssa_148.y
	vec1 32 ssa_295 = mov ssa_148.z
	vec3 32 ssa_296 = vec3 ssa_148.x, ssa_148.y, ssa_148.z
	vec1 32 ssa_152 = deref_var &pos (function_temp vec4) 
	vec1 32 ssa_297 = mov ssa_242
	vec1 32 ssa_298 = mov ssa_243
	vec1 32 ssa_299 = mov ssa_244
	vec1 32 ssa_300 = mov ssa_245
	vec4 32 ssa_301 = vec4 ssa_242, ssa_243, ssa_244, ssa_245
	vec3 32 ssa_154 = vec3 ssa_242, ssa_243, ssa_244
	vec1 32 ssa_267 = fsub ssa_148.x, ssa_242
	vec1 32 ssa_268 = fsub ssa_148.y, ssa_243
	vec1 32 ssa_269 = fsub ssa_148.z, ssa_244
	vec3 32 ssa_270 = vec3 ssa_267, ssa_268, ssa_269
	vec1 32 ssa_156 = deref_var &out@outLightVec-temp (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &pos (function_temp vec4) 
	vec1 32 ssa_302 = mov ssa_242
	vec1 32 ssa_303 = mov ssa_243
	vec1 32 ssa_304 = mov ssa_244
	vec1 32 ssa_305 = mov ssa_245
	vec4 32 ssa_306 = vec4 ssa_242, ssa_243, ssa_244, ssa_245
	vec3 32 ssa_159 = vec3 ssa_242, ssa_243, ssa_244
	vec1 32 ssa_271 = fneg ssa_242
	vec1 32 ssa_272 = fneg ssa_243
	vec1 32 ssa_273 = fneg ssa_244
	vec3 32 ssa_274 = vec3 ssa_271, ssa_272, ssa_273
	vec1 32 ssa_161 = deref_var &out@outViewVec-temp (function_temp vec3) 
	vec1 32 ssa_167 = deref_var &out@outNormal-temp (function_temp vec3) 
	vec1 32 ssa_168 = deref_var &outNormal (shader_out vec3) 
	vec1 32 ssa_307 = mov ssa_263
	vec1 32 ssa_308 = mov ssa_264
	vec1 32 ssa_309 = mov ssa_265
	vec3 32 ssa_310 = vec3 ssa_263, ssa_264, ssa_265
	intrinsic store_deref (ssa_168, ssa_310) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_169 = deref_var &out@outColor-temp (function_temp vec3) 
	vec1 32 ssa_170 = deref_var &outColor (shader_out vec3) 
	vec1 32 ssa_311 = mov ssa_330
	vec1 32 ssa_312 = mov ssa_333
	vec1 32 ssa_313 = mov ssa_336
	vec3 32 ssa_314 = vec3 ssa_330, ssa_333, ssa_336
	intrinsic store_deref (ssa_170, ssa_337) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_171 = deref_var &out@outLightVec-temp (function_temp vec3) 
	vec1 32 ssa_172 = deref_var &outLightVec (shader_out vec3) 
	vec1 32 ssa_315 = mov ssa_267
	vec1 32 ssa_316 = mov ssa_268
	vec1 32 ssa_317 = mov ssa_269
	vec3 32 ssa_318 = vec3 ssa_267, ssa_268, ssa_269
	intrinsic store_deref (ssa_172, ssa_318) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_173 = deref_var &out@outViewVec-temp (function_temp vec3) 
	vec1 32 ssa_174 = deref_var &outViewVec (shader_out vec3) 
	vec1 32 ssa_319 = mov ssa_271
	vec1 32 ssa_320 = mov ssa_272
	vec1 32 ssa_321 = mov ssa_273
	vec3 32 ssa_322 = vec3 ssa_271, ssa_272, ssa_273
	intrinsic store_deref (ssa_174, ssa_322) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_175 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_176 = deref_var &.field0 (shader_out vec4) 
	vec1 32 ssa_323 = mov ssa_207
	vec1 32 ssa_324 = mov ssa_208
	vec1 32 ssa_325 = mov ssa_209
	vec1 32 ssa_326 = mov ssa_210
	vec4 32 ssa_327 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	intrinsic store_deref (ssa_176, ssa_327) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_62 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 1 ssa_9 = feq ssa_6.x, ssa_8
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 1 ssa_16 = feq ssa_6.y, ssa_15
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 1 ssa_290 = phi block_1: ssa_16, block_2: ssa_9
	/* succs: block_4 block_5 */
	if ssa_290 {
		block block_4:
		/* preds: block_3 */
		vec1 1 ssa_25 = feq ssa_6.z, ssa_24
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 1 ssa_291 = phi block_4: ssa_25, block_5: ssa_290
	/* succs: block_7 block_8 */
	if ssa_291 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_28 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_28, ssa_29
		vec1 32 ssa_31 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_32 = isub ssa_30, ssa_31
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_328 = mov ssa_33.x
		vec1 32 ssa_331 = mov ssa_33.y
		vec1 32 ssa_334 = mov ssa_33.z
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_329 = mov ssa_6.x
		vec1 32 ssa_332 = mov ssa_6.y
		vec1 32 ssa_335 = mov ssa_6.z
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_330 = phi block_7: ssa_328, block_8: ssa_329
	vec1 32 ssa_333 = phi block_7: ssa_331, block_8: ssa_332
	vec1 32 ssa_336 = phi block_7: ssa_334, block_8: ssa_335
	vec3 32 ssa_337 = vec3 ssa_330, ssa_333, ssa_336
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_40 = isub ssa_38, ssa_39
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_38, ssa_42
	vec1 32 ssa_44 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_45 = isub ssa_43, ssa_44
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_38, ssa_47
	vec1 32 ssa_49 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_50 = isub ssa_48, ssa_49
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_38, ssa_52
	vec1 32 ssa_54 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_55 = isub ssa_53, ssa_54
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_177 = fmul ssa_41.x, ssa_58.x
	vec1 32 ssa_178 = fmul ssa_41.y, ssa_58.x
	vec1 32 ssa_179 = fmul ssa_41.z, ssa_58.x
	vec1 32 ssa_180 = fmul ssa_41.w, ssa_58.x
	vec1 32 ssa_182 = fmul ssa_46.x, ssa_58.y
	vec1 32 ssa_183 = fmul ssa_46.y, ssa_58.y
	vec1 32 ssa_184 = fmul ssa_46.z, ssa_58.y
	vec1 32 ssa_185 = fmul ssa_46.w, ssa_58.y
	vec1 32 ssa_187 = fadd ssa_177, ssa_182
	vec1 32 ssa_188 = fadd ssa_178, ssa_183
	vec1 32 ssa_189 = fadd ssa_179, ssa_184
	vec1 32 ssa_190 = fadd ssa_180, ssa_185
	vec1 32 ssa_192 = fmul ssa_51.x, ssa_58.z
	vec1 32 ssa_193 = fmul ssa_51.y, ssa_58.z
	vec1 32 ssa_194 = fmul ssa_51.z, ssa_58.z
	vec1 32 ssa_195 = fmul ssa_51.w, ssa_58.z
	vec1 32 ssa_197 = fadd ssa_187, ssa_192
	vec1 32 ssa_198 = fadd ssa_188, ssa_193
	vec1 32 ssa_199 = fadd ssa_189, ssa_194
	vec1 32 ssa_200 = fadd ssa_190, ssa_195
	vec1 32 ssa_202 = fmul ssa_56.x, ssa_62
	vec1 32 ssa_203 = fmul ssa_56.y, ssa_62
	vec1 32 ssa_204 = fmul ssa_56.z, ssa_62
	vec1 32 ssa_205 = fmul ssa_56.w, ssa_62
	vec1 32 ssa_207 = fadd ssa_197, ssa_202
	vec1 32 ssa_208 = fadd ssa_198, ssa_203
	vec1 32 ssa_209 = fadd ssa_199, ssa_204
	vec1 32 ssa_210 = fadd ssa_200, ssa_205
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_79 = isub ssa_77, ssa_78
	vec4 32 ssa_80 = intrinsic load_push_constant (ssa_79) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_81 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_82 = iadd ssa_77, ssa_81
	vec1 32 ssa_83 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_84 = isub ssa_82, ssa_83
	vec4 32 ssa_85 = intrinsic load_push_constant (ssa_84) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_86 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_87 = iadd ssa_77, ssa_86
	vec1 32 ssa_88 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_89 = isub ssa_87, ssa_88
	vec4 32 ssa_90 = intrinsic load_push_constant (ssa_89) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_91 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_92 = iadd ssa_77, ssa_91
	vec1 32 ssa_93 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_94 = isub ssa_92, ssa_93
	vec4 32 ssa_95 = intrinsic load_push_constant (ssa_94) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_212 = fmul ssa_80.x, ssa_58.x
	vec1 32 ssa_213 = fmul ssa_80.y, ssa_58.x
	vec1 32 ssa_214 = fmul ssa_80.z, ssa_58.x
	vec1 32 ssa_217 = fmul ssa_85.x, ssa_58.y
	vec1 32 ssa_218 = fmul ssa_85.y, ssa_58.y
	vec1 32 ssa_219 = fmul ssa_85.z, ssa_58.y
	vec1 32 ssa_222 = fadd ssa_212, ssa_217
	vec1 32 ssa_223 = fadd ssa_213, ssa_218
	vec1 32 ssa_224 = fadd ssa_214, ssa_219
	vec1 32 ssa_227 = fmul ssa_90.x, ssa_58.z
	vec1 32 ssa_228 = fmul ssa_90.y, ssa_58.z
	vec1 32 ssa_229 = fmul ssa_90.z, ssa_58.z
	vec1 32 ssa_232 = fadd ssa_222, ssa_227
	vec1 32 ssa_233 = fadd ssa_223, ssa_228
	vec1 32 ssa_234 = fadd ssa_224, ssa_229
	vec1 32 ssa_237 = fmul ssa_95.x, ssa_101
	vec1 32 ssa_238 = fmul ssa_95.y, ssa_101
	vec1 32 ssa_239 = fmul ssa_95.z, ssa_101
	vec1 32 ssa_242 = fadd ssa_232, ssa_237
	vec1 32 ssa_243 = fadd ssa_233, ssa_238
	vec1 32 ssa_244 = fadd ssa_234, ssa_239
	vec1 32 ssa_115 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_116 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_117 = isub ssa_115, ssa_116
	vec4 32 ssa_118 = intrinsic load_push_constant (ssa_117) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_119 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_120 = iadd ssa_115, ssa_119
	vec1 32 ssa_121 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_122 = isub ssa_120, ssa_121
	vec4 32 ssa_123 = intrinsic load_push_constant (ssa_122) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_124 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_125 = iadd ssa_115, ssa_124
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_127 = isub ssa_125, ssa_126
	vec4 32 ssa_128 = intrinsic load_push_constant (ssa_127) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_247 = fmul ssa_118.x, ssa_1.x
	vec1 32 ssa_248 = fmul ssa_118.y, ssa_1.x
	vec1 32 ssa_249 = fmul ssa_118.z, ssa_1.x
	vec1 32 ssa_251 = fmul ssa_123.x, ssa_1.y
	vec1 32 ssa_252 = fmul ssa_123.y, ssa_1.y
	vec1 32 ssa_253 = fmul ssa_123.z, ssa_1.y
	vec1 32 ssa_255 = fadd ssa_247, ssa_251
	vec1 32 ssa_256 = fadd ssa_248, ssa_252
	vec1 32 ssa_257 = fadd ssa_249, ssa_253
	vec1 32 ssa_259 = fmul ssa_128.x, ssa_1.z
	vec1 32 ssa_260 = fmul ssa_128.y, ssa_1.z
	vec1 32 ssa_261 = fmul ssa_128.z, ssa_1.z
	vec1 32 ssa_263 = fadd ssa_255, ssa_259
	vec1 32 ssa_264 = fadd ssa_256, ssa_260
	vec1 32 ssa_265 = fadd ssa_257, ssa_261
	vec1 32 ssa_267 = fsub ssa_148.x, ssa_242
	vec1 32 ssa_268 = fsub ssa_148.y, ssa_243
	vec1 32 ssa_269 = fsub ssa_148.z, ssa_244
	vec1 32 ssa_271 = fneg ssa_242
	vec1 32 ssa_272 = fneg ssa_243
	vec1 32 ssa_273 = fneg ssa_244
	vec1 32 ssa_168 = deref_var &outNormal (shader_out vec3) 
	vec3 32 ssa_310 = vec3 ssa_263, ssa_264, ssa_265
	intrinsic store_deref (ssa_168, ssa_310) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_170 = deref_var &outColor (shader_out vec3) 
	intrinsic store_deref (ssa_170, ssa_337) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_172 = deref_var &outLightVec (shader_out vec3) 
	vec3 32 ssa_318 = vec3 ssa_267, ssa_268, ssa_269
	intrinsic store_deref (ssa_172, ssa_318) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_174 = deref_var &outViewVec (shader_out vec3) 
	vec3 32 ssa_322 = vec3 ssa_271, ssa_272, ssa_273
	intrinsic store_deref (ssa_174, ssa_322) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_176 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_327 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	intrinsic store_deref (ssa_176, ssa_327) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_opt_cse
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 1 ssa_9 = feq ssa_6.x, ssa_101
	/* succs: block_1 block_2 */
	if ssa_9 {
		block block_1:
		/* preds: block_0 */
		vec1 1 ssa_16 = feq ssa_6.y, ssa_24
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 1 ssa_290 = phi block_1: ssa_16, block_2: ssa_9
	/* succs: block_4 block_5 */
	if ssa_290 {
		block block_4:
		/* preds: block_3 */
		vec1 1 ssa_25 = feq ssa_6.z, ssa_24
		/* succs: block_6 */
	} else {
		block block_5:
		/* preds: block_3 */
		/* succs: block_6 */
	}
	block block_6:
	/* preds: block_4 block_5 */
	vec1 1 ssa_291 = phi block_4: ssa_25, block_5: ssa_290
	/* succs: block_7 block_8 */
	if ssa_291 {
		block block_7:
		/* preds: block_6 */
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_24, ssa_29
		vec1 32 ssa_32 = isub ssa_30, ssa_24
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_328 = mov ssa_33.x
		vec1 32 ssa_331 = mov ssa_33.y
		vec1 32 ssa_334 = mov ssa_33.z
		/* succs: block_9 */
	} else {
		block block_8:
		/* preds: block_6 */
		vec1 32 ssa_329 = mov ssa_6.x
		vec1 32 ssa_332 = mov ssa_6.y
		vec1 32 ssa_335 = mov ssa_6.z
		/* succs: block_9 */
	}
	block block_9:
	/* preds: block_7 block_8 */
	vec1 32 ssa_330 = phi block_7: ssa_328, block_8: ssa_329
	vec1 32 ssa_333 = phi block_7: ssa_331, block_8: ssa_332
	vec1 32 ssa_336 = phi block_7: ssa_334, block_8: ssa_335
	vec3 32 ssa_337 = vec3 ssa_330, ssa_333, ssa_336
	vec1 32 ssa_40 = isub ssa_24, ssa_24
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_24, ssa_42
	vec1 32 ssa_45 = isub ssa_43, ssa_24
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_24, ssa_47
	vec1 32 ssa_50 = isub ssa_48, ssa_24
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_24, ssa_52
	vec1 32 ssa_55 = isub ssa_53, ssa_24
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_177 = fmul ssa_41.x, ssa_58.x
	vec1 32 ssa_178 = fmul ssa_41.y, ssa_58.x
	vec1 32 ssa_179 = fmul ssa_41.z, ssa_58.x
	vec1 32 ssa_180 = fmul ssa_41.w, ssa_58.x
	vec1 32 ssa_182 = fmul ssa_46.x, ssa_58.y
	vec1 32 ssa_183 = fmul ssa_46.y, ssa_58.y
	vec1 32 ssa_184 = fmul ssa_46.z, ssa_58.y
	vec1 32 ssa_185 = fmul ssa_46.w, ssa_58.y
	vec1 32 ssa_187 = fadd ssa_177, ssa_182
	vec1 32 ssa_188 = fadd ssa_178, ssa_183
	vec1 32 ssa_189 = fadd ssa_179, ssa_184
	vec1 32 ssa_190 = fadd ssa_180, ssa_185
	vec1 32 ssa_192 = fmul ssa_51.x, ssa_58.z
	vec1 32 ssa_193 = fmul ssa_51.y, ssa_58.z
	vec1 32 ssa_194 = fmul ssa_51.z, ssa_58.z
	vec1 32 ssa_195 = fmul ssa_51.w, ssa_58.z
	vec1 32 ssa_197 = fadd ssa_187, ssa_192
	vec1 32 ssa_198 = fadd ssa_188, ssa_193
	vec1 32 ssa_199 = fadd ssa_189, ssa_194
	vec1 32 ssa_200 = fadd ssa_190, ssa_195
	vec1 32 ssa_202 = fmul ssa_56.x, ssa_101
	vec1 32 ssa_203 = fmul ssa_56.y, ssa_101
	vec1 32 ssa_204 = fmul ssa_56.z, ssa_101
	vec1 32 ssa_205 = fmul ssa_56.w, ssa_101
	vec1 32 ssa_207 = fadd ssa_197, ssa_202
	vec1 32 ssa_208 = fadd ssa_198, ssa_203
	vec1 32 ssa_209 = fadd ssa_199, ssa_204
	vec1 32 ssa_210 = fadd ssa_200, ssa_205
	vec1 32 ssa_247 = fmul ssa_41.x, ssa_1.x
	vec1 32 ssa_248 = fmul ssa_41.y, ssa_1.x
	vec1 32 ssa_249 = fmul ssa_41.z, ssa_1.x
	vec1 32 ssa_251 = fmul ssa_46.x, ssa_1.y
	vec1 32 ssa_252 = fmul ssa_46.y, ssa_1.y
	vec1 32 ssa_253 = fmul ssa_46.z, ssa_1.y
	vec1 32 ssa_255 = fadd ssa_247, ssa_251
	vec1 32 ssa_256 = fadd ssa_248, ssa_252
	vec1 32 ssa_257 = fadd ssa_249, ssa_253
	vec1 32 ssa_259 = fmul ssa_51.x, ssa_1.z
	vec1 32 ssa_260 = fmul ssa_51.y, ssa_1.z
	vec1 32 ssa_261 = fmul ssa_51.z, ssa_1.z
	vec1 32 ssa_263 = fadd ssa_255, ssa_259
	vec1 32 ssa_264 = fadd ssa_256, ssa_260
	vec1 32 ssa_265 = fadd ssa_257, ssa_261
	vec1 32 ssa_267 = fsub ssa_148.x, ssa_207
	vec1 32 ssa_268 = fsub ssa_148.y, ssa_208
	vec1 32 ssa_269 = fsub ssa_148.z, ssa_209
	vec1 32 ssa_271 = fneg ssa_207
	vec1 32 ssa_272 = fneg ssa_208
	vec1 32 ssa_273 = fneg ssa_209
	vec1 32 ssa_168 = deref_var &outNormal (shader_out vec3) 
	vec3 32 ssa_310 = vec3 ssa_263, ssa_264, ssa_265
	intrinsic store_deref (ssa_168, ssa_310) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_170 = deref_var &outColor (shader_out vec3) 
	intrinsic store_deref (ssa_170, ssa_337) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_172 = deref_var &outLightVec (shader_out vec3) 
	vec3 32 ssa_318 = vec3 ssa_267, ssa_268, ssa_269
	intrinsic store_deref (ssa_172, ssa_318) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_174 = deref_var &outViewVec (shader_out vec3) 
	vec3 32 ssa_322 = vec3 ssa_271, ssa_272, ssa_273
	intrinsic store_deref (ssa_174, ssa_322) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_176 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_327 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	intrinsic store_deref (ssa_176, ssa_327) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_10 */
	block block_10:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 1 ssa_9 = feq ssa_6.x, ssa_101
	vec1 1 ssa_16 = feq ssa_6.y, ssa_24
	vec1 1 ssa_338 = bcsel ssa_9, ssa_16, ssa_9
	vec1 1 ssa_25 = feq ssa_6.z, ssa_24
	vec1 1 ssa_339 = bcsel ssa_338, ssa_25, ssa_338
	/* succs: block_1 block_2 */
	if ssa_339 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_30 = iadd ssa_24, ssa_29
		vec1 32 ssa_32 = isub ssa_30, ssa_24
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_32) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_328 = mov ssa_33.x
		vec1 32 ssa_331 = mov ssa_33.y
		vec1 32 ssa_334 = mov ssa_33.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_329 = mov ssa_6.x
		vec1 32 ssa_332 = mov ssa_6.y
		vec1 32 ssa_335 = mov ssa_6.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_330 = phi block_1: ssa_328, block_2: ssa_329
	vec1 32 ssa_333 = phi block_1: ssa_331, block_2: ssa_332
	vec1 32 ssa_336 = phi block_1: ssa_334, block_2: ssa_335
	vec3 32 ssa_337 = vec3 ssa_330, ssa_333, ssa_336
	vec1 32 ssa_40 = isub ssa_24, ssa_24
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_40) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_43 = iadd ssa_24, ssa_42
	vec1 32 ssa_45 = isub ssa_43, ssa_24
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_45) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_48 = iadd ssa_24, ssa_47
	vec1 32 ssa_50 = isub ssa_48, ssa_24
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_50) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_53 = iadd ssa_24, ssa_52
	vec1 32 ssa_55 = isub ssa_53, ssa_24
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_55) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_177 = fmul ssa_41.x, ssa_58.x
	vec1 32 ssa_178 = fmul ssa_41.y, ssa_58.x
	vec1 32 ssa_179 = fmul ssa_41.z, ssa_58.x
	vec1 32 ssa_180 = fmul ssa_41.w, ssa_58.x
	vec1 32 ssa_182 = fmul ssa_46.x, ssa_58.y
	vec1 32 ssa_183 = fmul ssa_46.y, ssa_58.y
	vec1 32 ssa_184 = fmul ssa_46.z, ssa_58.y
	vec1 32 ssa_185 = fmul ssa_46.w, ssa_58.y
	vec1 32 ssa_187 = fadd ssa_177, ssa_182
	vec1 32 ssa_188 = fadd ssa_178, ssa_183
	vec1 32 ssa_189 = fadd ssa_179, ssa_184
	vec1 32 ssa_190 = fadd ssa_180, ssa_185
	vec1 32 ssa_192 = fmul ssa_51.x, ssa_58.z
	vec1 32 ssa_193 = fmul ssa_51.y, ssa_58.z
	vec1 32 ssa_194 = fmul ssa_51.z, ssa_58.z
	vec1 32 ssa_195 = fmul ssa_51.w, ssa_58.z
	vec1 32 ssa_197 = fadd ssa_187, ssa_192
	vec1 32 ssa_198 = fadd ssa_188, ssa_193
	vec1 32 ssa_199 = fadd ssa_189, ssa_194
	vec1 32 ssa_200 = fadd ssa_190, ssa_195
	vec1 32 ssa_202 = fmul ssa_56.x, ssa_101
	vec1 32 ssa_203 = fmul ssa_56.y, ssa_101
	vec1 32 ssa_204 = fmul ssa_56.z, ssa_101
	vec1 32 ssa_205 = fmul ssa_56.w, ssa_101
	vec1 32 ssa_207 = fadd ssa_197, ssa_202
	vec1 32 ssa_208 = fadd ssa_198, ssa_203
	vec1 32 ssa_209 = fadd ssa_199, ssa_204
	vec1 32 ssa_210 = fadd ssa_200, ssa_205
	vec1 32 ssa_247 = fmul ssa_41.x, ssa_1.x
	vec1 32 ssa_248 = fmul ssa_41.y, ssa_1.x
	vec1 32 ssa_249 = fmul ssa_41.z, ssa_1.x
	vec1 32 ssa_251 = fmul ssa_46.x, ssa_1.y
	vec1 32 ssa_252 = fmul ssa_46.y, ssa_1.y
	vec1 32 ssa_253 = fmul ssa_46.z, ssa_1.y
	vec1 32 ssa_255 = fadd ssa_247, ssa_251
	vec1 32 ssa_256 = fadd ssa_248, ssa_252
	vec1 32 ssa_257 = fadd ssa_249, ssa_253
	vec1 32 ssa_259 = fmul ssa_51.x, ssa_1.z
	vec1 32 ssa_260 = fmul ssa_51.y, ssa_1.z
	vec1 32 ssa_261 = fmul ssa_51.z, ssa_1.z
	vec1 32 ssa_263 = fadd ssa_255, ssa_259
	vec1 32 ssa_264 = fadd ssa_256, ssa_260
	vec1 32 ssa_265 = fadd ssa_257, ssa_261
	vec1 32 ssa_267 = fsub ssa_148.x, ssa_207
	vec1 32 ssa_268 = fsub ssa_148.y, ssa_208
	vec1 32 ssa_269 = fsub ssa_148.z, ssa_209
	vec1 32 ssa_271 = fneg ssa_207
	vec1 32 ssa_272 = fneg ssa_208
	vec1 32 ssa_273 = fneg ssa_209
	vec1 32 ssa_168 = deref_var &outNormal (shader_out vec3) 
	vec3 32 ssa_310 = vec3 ssa_263, ssa_264, ssa_265
	intrinsic store_deref (ssa_168, ssa_310) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_170 = deref_var &outColor (shader_out vec3) 
	intrinsic store_deref (ssa_170, ssa_337) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_172 = deref_var &outLightVec (shader_out vec3) 
	vec3 32 ssa_318 = vec3 ssa_267, ssa_268, ssa_269
	intrinsic store_deref (ssa_172, ssa_318) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_174 = deref_var &outViewVec (shader_out vec3) 
	vec3 32 ssa_322 = vec3 ssa_271, ssa_272, ssa_273
	intrinsic store_deref (ssa_174, ssa_322) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_176 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_327 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	intrinsic store_deref (ssa_176, ssa_327) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 1 ssa_9 = feq ssa_6.x, ssa_101
	vec1 1 ssa_16 = feq ssa_6.y, ssa_24
	vec1 1 ssa_361 = iand ssa_9, ssa_16
	vec1 1 ssa_25 = feq ssa_6.z, ssa_24
	vec1 1 ssa_360 = iand ssa_361, ssa_25
	/* succs: block_1 block_2 */
	if ssa_360 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_358 = ineg ssa_24
		vec1 32 ssa_359 = iadd ssa_29, ssa_358
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_359) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_328 = mov ssa_33.x
		vec1 32 ssa_331 = mov ssa_33.y
		vec1 32 ssa_334 = mov ssa_33.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_329 = mov ssa_6.x
		vec1 32 ssa_332 = mov ssa_6.y
		vec1 32 ssa_335 = mov ssa_6.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_330 = phi block_1: ssa_328, block_2: ssa_329
	vec1 32 ssa_333 = phi block_1: ssa_331, block_2: ssa_332
	vec1 32 ssa_336 = phi block_1: ssa_334, block_2: ssa_335
	vec3 32 ssa_337 = vec3 ssa_330, ssa_333, ssa_336
	vec1 32 ssa_356 = ineg ssa_24
	vec1 32 ssa_357 = iadd ssa_24, ssa_356
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_357) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_354 = ineg ssa_24
	vec1 32 ssa_355 = iadd ssa_42, ssa_354
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_355) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_352 = ineg ssa_24
	vec1 32 ssa_353 = iadd ssa_47, ssa_352
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_353) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_350 = ineg ssa_24
	vec1 32 ssa_351 = iadd ssa_52, ssa_350
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_351) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_177 = fmul ssa_41.x, ssa_58.x
	vec1 32 ssa_178 = fmul ssa_41.y, ssa_58.x
	vec1 32 ssa_179 = fmul ssa_41.z, ssa_58.x
	vec1 32 ssa_180 = fmul ssa_41.w, ssa_58.x
	vec1 32 ssa_182 = fmul ssa_46.x, ssa_58.y
	vec1 32 ssa_183 = fmul ssa_46.y, ssa_58.y
	vec1 32 ssa_184 = fmul ssa_46.z, ssa_58.y
	vec1 32 ssa_185 = fmul ssa_46.w, ssa_58.y
	vec1 32 ssa_187 = fadd ssa_177, ssa_182
	vec1 32 ssa_188 = fadd ssa_178, ssa_183
	vec1 32 ssa_189 = fadd ssa_179, ssa_184
	vec1 32 ssa_190 = fadd ssa_180, ssa_185
	vec1 32 ssa_192 = fmul ssa_51.x, ssa_58.z
	vec1 32 ssa_193 = fmul ssa_51.y, ssa_58.z
	vec1 32 ssa_194 = fmul ssa_51.z, ssa_58.z
	vec1 32 ssa_195 = fmul ssa_51.w, ssa_58.z
	vec1 32 ssa_197 = fadd ssa_187, ssa_192
	vec1 32 ssa_198 = fadd ssa_188, ssa_193
	vec1 32 ssa_199 = fadd ssa_189, ssa_194
	vec1 32 ssa_200 = fadd ssa_190, ssa_195
	vec1 32 ssa_349 = mov ssa_56.x
	vec1 32 ssa_348 = mov ssa_56.y
	vec1 32 ssa_347 = mov ssa_56.z
	vec1 32 ssa_346 = mov ssa_56.w
	vec1 32 ssa_207 = fadd ssa_197, ssa_349
	vec1 32 ssa_208 = fadd ssa_198, ssa_348
	vec1 32 ssa_209 = fadd ssa_199, ssa_347
	vec1 32 ssa_210 = fadd ssa_200, ssa_346
	vec1 32 ssa_247 = fmul ssa_41.x, ssa_1.x
	vec1 32 ssa_248 = fmul ssa_41.y, ssa_1.x
	vec1 32 ssa_249 = fmul ssa_41.z, ssa_1.x
	vec1 32 ssa_251 = fmul ssa_46.x, ssa_1.y
	vec1 32 ssa_252 = fmul ssa_46.y, ssa_1.y
	vec1 32 ssa_253 = fmul ssa_46.z, ssa_1.y
	vec1 32 ssa_255 = fadd ssa_247, ssa_251
	vec1 32 ssa_256 = fadd ssa_248, ssa_252
	vec1 32 ssa_257 = fadd ssa_249, ssa_253
	vec1 32 ssa_259 = fmul ssa_51.x, ssa_1.z
	vec1 32 ssa_260 = fmul ssa_51.y, ssa_1.z
	vec1 32 ssa_261 = fmul ssa_51.z, ssa_1.z
	vec1 32 ssa_263 = fadd ssa_255, ssa_259
	vec1 32 ssa_264 = fadd ssa_256, ssa_260
	vec1 32 ssa_265 = fadd ssa_257, ssa_261
	vec1 32 ssa_344 = fneg ssa_207
	vec1 32 ssa_345 = fadd ssa_148.x, ssa_344
	vec1 32 ssa_342 = fneg ssa_208
	vec1 32 ssa_343 = fadd ssa_148.y, ssa_342
	vec1 32 ssa_340 = fneg ssa_209
	vec1 32 ssa_341 = fadd ssa_148.z, ssa_340
	vec1 32 ssa_271 = fneg ssa_207
	vec1 32 ssa_272 = fneg ssa_208
	vec1 32 ssa_273 = fneg ssa_209
	vec1 32 ssa_168 = deref_var &outNormal (shader_out vec3) 
	vec3 32 ssa_310 = vec3 ssa_263, ssa_264, ssa_265
	intrinsic store_deref (ssa_168, ssa_310) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_170 = deref_var &outColor (shader_out vec3) 
	intrinsic store_deref (ssa_170, ssa_337) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_172 = deref_var &outLightVec (shader_out vec3) 
	vec3 32 ssa_318 = vec3 ssa_345, ssa_343, ssa_341
	intrinsic store_deref (ssa_172, ssa_318) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_174 = deref_var &outViewVec (shader_out vec3) 
	vec3 32 ssa_322 = vec3 ssa_271, ssa_272, ssa_273
	intrinsic store_deref (ssa_174, ssa_322) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_176 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_327 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	intrinsic store_deref (ssa_176, ssa_327) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_constant_folding
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_148 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_101 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_24 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_3 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 1 ssa_9 = feq ssa_6.x, ssa_101
	vec1 1 ssa_16 = feq ssa_6.y, ssa_24
	vec1 1 ssa_361 = iand ssa_9, ssa_16
	vec1 1 ssa_25 = feq ssa_6.z, ssa_24
	vec1 1 ssa_360 = iand ssa_361, ssa_25
	/* succs: block_1 block_2 */
	if ssa_360 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_29 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_362 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_363 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_33 = intrinsic load_push_constant (ssa_363) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_328 = mov ssa_33.x
		vec1 32 ssa_331 = mov ssa_33.y
		vec1 32 ssa_334 = mov ssa_33.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_329 = mov ssa_6.x
		vec1 32 ssa_332 = mov ssa_6.y
		vec1 32 ssa_335 = mov ssa_6.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_330 = phi block_1: ssa_328, block_2: ssa_329
	vec1 32 ssa_333 = phi block_1: ssa_331, block_2: ssa_332
	vec1 32 ssa_336 = phi block_1: ssa_334, block_2: ssa_335
	vec3 32 ssa_337 = vec3 ssa_330, ssa_333, ssa_336
	vec1 32 ssa_364 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_365 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_41 = intrinsic load_push_constant (ssa_365) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_42 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_366 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_367 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_46 = intrinsic load_push_constant (ssa_367) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_47 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_368 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_369 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_51 = intrinsic load_push_constant (ssa_369) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_52 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_370 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_371 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_56 = intrinsic load_push_constant (ssa_371) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_57 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_58 = intrinsic load_deref (ssa_57) (0) /* access=0 */
	vec1 32 ssa_177 = fmul ssa_41.x, ssa_58.x
	vec1 32 ssa_178 = fmul ssa_41.y, ssa_58.x
	vec1 32 ssa_179 = fmul ssa_41.z, ssa_58.x
	vec1 32 ssa_180 = fmul ssa_41.w, ssa_58.x
	vec1 32 ssa_182 = fmul ssa_46.x, ssa_58.y
	vec1 32 ssa_183 = fmul ssa_46.y, ssa_58.y
	vec1 32 ssa_184 = fmul ssa_46.z, ssa_58.y
	vec1 32 ssa_185 = fmul ssa_46.w, ssa_58.y
	vec1 32 ssa_187 = fadd ssa_177, ssa_182
	vec1 32 ssa_188 = fadd ssa_178, ssa_183
	vec1 32 ssa_189 = fadd ssa_179, ssa_184
	vec1 32 ssa_190 = fadd ssa_180, ssa_185
	vec1 32 ssa_192 = fmul ssa_51.x, ssa_58.z
	vec1 32 ssa_193 = fmul ssa_51.y, ssa_58.z
	vec1 32 ssa_194 = fmul ssa_51.z, ssa_58.z
	vec1 32 ssa_195 = fmul ssa_51.w, ssa_58.z
	vec1 32 ssa_197 = fadd ssa_187, ssa_192
	vec1 32 ssa_198 = fadd ssa_188, ssa_193
	vec1 32 ssa_199 = fadd ssa_189, ssa_194
	vec1 32 ssa_200 = fadd ssa_190, ssa_195
	vec1 32 ssa_349 = mov ssa_56.x
	vec1 32 ssa_348 = mov ssa_56.y
	vec1 32 ssa_347 = mov ssa_56.z
	vec1 32 ssa_346 = mov ssa_56.w
	vec1 32 ssa_207 = fadd ssa_197, ssa_349
	vec1 32 ssa_208 = fadd ssa_198, ssa_348
	vec1 32 ssa_209 = fadd ssa_199, ssa_347
	vec1 32 ssa_210 = fadd ssa_200, ssa_346
	vec1 32 ssa_247 = fmul ssa_41.x, ssa_1.x
	vec1 32 ssa_248 = fmul ssa_41.y, ssa_1.x
	vec1 32 ssa_249 = fmul ssa_41.z, ssa_1.x
	vec1 32 ssa_251 = fmul ssa_46.x, ssa_1.y
	vec1 32 ssa_252 = fmul ssa_46.y, ssa_1.y
	vec1 32 ssa_253 = fmul ssa_46.z, ssa_1.y
	vec1 32 ssa_255 = fadd ssa_247, ssa_251
	vec1 32 ssa_256 = fadd ssa_248, ssa_252
	vec1 32 ssa_257 = fadd ssa_249, ssa_253
	vec1 32 ssa_259 = fmul ssa_51.x, ssa_1.z
	vec1 32 ssa_260 = fmul ssa_51.y, ssa_1.z
	vec1 32 ssa_261 = fmul ssa_51.z, ssa_1.z
	vec1 32 ssa_263 = fadd ssa_255, ssa_259
	vec1 32 ssa_264 = fadd ssa_256, ssa_260
	vec1 32 ssa_265 = fadd ssa_257, ssa_261
	vec1 32 ssa_344 = fneg ssa_207
	vec1 32 ssa_345 = fadd ssa_148.x, ssa_344
	vec1 32 ssa_342 = fneg ssa_208
	vec1 32 ssa_343 = fadd ssa_148.y, ssa_342
	vec1 32 ssa_340 = fneg ssa_209
	vec1 32 ssa_341 = fadd ssa_148.z, ssa_340
	vec1 32 ssa_271 = fneg ssa_207
	vec1 32 ssa_272 = fneg ssa_208
	vec1 32 ssa_273 = fneg ssa_209
	vec1 32 ssa_168 = deref_var &outNormal (shader_out vec3) 
	vec3 32 ssa_310 = vec3 ssa_263, ssa_264, ssa_265
	intrinsic store_deref (ssa_168, ssa_310) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_170 = deref_var &outColor (shader_out vec3) 
	intrinsic store_deref (ssa_170, ssa_337) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_172 = deref_var &outLightVec (shader_out vec3) 
	vec3 32 ssa_318 = vec3 ssa_345, ssa_343, ssa_341
	intrinsic store_deref (ssa_172, ssa_318) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_174 = deref_var &outViewVec (shader_out vec3) 
	vec3 32 ssa_322 = vec3 ssa_271, ssa_272, ssa_273
	intrinsic store_deref (ssa_174, ssa_322) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_176 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_327 = vec4 ssa_207, ssa_208, ssa_209, ssa_210
	intrinsic store_deref (ssa_176, ssa_327) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_0 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_3 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 1 ssa_7 = feq ssa_6.x, ssa_1
	vec1 1 ssa_8 = feq ssa_6.y, ssa_2
	vec1 1 ssa_9 = iand ssa_7, ssa_8
	vec1 1 ssa_10 = feq ssa_6.z, ssa_2
	vec1 1 ssa_11 = iand ssa_9, ssa_10
	/* succs: block_1 block_2 */
	if ssa_11 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_12 = load_const (0x00000040 /* 0.000000 */)
		vec1 32 ssa_13 = load_const (0x00000000 /* 0.000000 */)
		vec1 32 ssa_14 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_15 = intrinsic load_push_constant (ssa_14) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_16 = mov ssa_15.x
		vec1 32 ssa_17 = mov ssa_15.y
		vec1 32 ssa_18 = mov ssa_15.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_19 = mov ssa_6.x
		vec1 32 ssa_20 = mov ssa_6.y
		vec1 32 ssa_21 = mov ssa_6.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_22 = phi block_1: ssa_16, block_2: ssa_19
	vec1 32 ssa_23 = phi block_1: ssa_17, block_2: ssa_20
	vec1 32 ssa_24 = phi block_1: ssa_18, block_2: ssa_21
	vec3 32 ssa_25 = vec3 ssa_22, ssa_23, ssa_24
	vec1 32 ssa_26 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_27 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_30 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_31 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_32 = intrinsic load_push_constant (ssa_31) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_33 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_35 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_36 = intrinsic load_push_constant (ssa_35) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_37 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_38 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_39 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_40 = intrinsic load_push_constant (ssa_39) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_41 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_42 = intrinsic load_deref (ssa_41) (0) /* access=0 */
	vec1 32 ssa_43 = fmul ssa_28.x, ssa_42.x
	vec1 32 ssa_44 = fmul ssa_28.y, ssa_42.x
	vec1 32 ssa_45 = fmul ssa_28.z, ssa_42.x
	vec1 32 ssa_46 = fmul ssa_28.w, ssa_42.x
	vec1 32 ssa_47 = fmul ssa_32.x, ssa_42.y
	vec1 32 ssa_48 = fmul ssa_32.y, ssa_42.y
	vec1 32 ssa_49 = fmul ssa_32.z, ssa_42.y
	vec1 32 ssa_50 = fmul ssa_32.w, ssa_42.y
	vec1 32 ssa_51 = fadd ssa_43, ssa_47
	vec1 32 ssa_52 = fadd ssa_44, ssa_48
	vec1 32 ssa_53 = fadd ssa_45, ssa_49
	vec1 32 ssa_54 = fadd ssa_46, ssa_50
	vec1 32 ssa_55 = fmul ssa_36.x, ssa_42.z
	vec1 32 ssa_56 = fmul ssa_36.y, ssa_42.z
	vec1 32 ssa_57 = fmul ssa_36.z, ssa_42.z
	vec1 32 ssa_58 = fmul ssa_36.w, ssa_42.z
	vec1 32 ssa_59 = fadd ssa_51, ssa_55
	vec1 32 ssa_60 = fadd ssa_52, ssa_56
	vec1 32 ssa_61 = fadd ssa_53, ssa_57
	vec1 32 ssa_62 = fadd ssa_54, ssa_58
	vec1 32 ssa_63 = mov ssa_40.x
	vec1 32 ssa_64 = mov ssa_40.y
	vec1 32 ssa_65 = mov ssa_40.z
	vec1 32 ssa_66 = mov ssa_40.w
	vec1 32 ssa_67 = fadd ssa_59, ssa_40.x
	vec1 32 ssa_68 = fadd ssa_60, ssa_40.y
	vec1 32 ssa_69 = fadd ssa_61, ssa_40.z
	vec1 32 ssa_70 = fadd ssa_62, ssa_40.w
	vec1 32 ssa_71 = fmul ssa_28.x, ssa_4.x
	vec1 32 ssa_72 = fmul ssa_28.y, ssa_4.x
	vec1 32 ssa_73 = fmul ssa_28.z, ssa_4.x
	vec1 32 ssa_74 = fmul ssa_32.x, ssa_4.y
	vec1 32 ssa_75 = fmul ssa_32.y, ssa_4.y
	vec1 32 ssa_76 = fmul ssa_32.z, ssa_4.y
	vec1 32 ssa_77 = fadd ssa_71, ssa_74
	vec1 32 ssa_78 = fadd ssa_72, ssa_75
	vec1 32 ssa_79 = fadd ssa_73, ssa_76
	vec1 32 ssa_80 = fmul ssa_36.x, ssa_4.z
	vec1 32 ssa_81 = fmul ssa_36.y, ssa_4.z
	vec1 32 ssa_82 = fmul ssa_36.z, ssa_4.z
	vec1 32 ssa_83 = fadd ssa_77, ssa_80
	vec1 32 ssa_84 = fadd ssa_78, ssa_81
	vec1 32 ssa_85 = fadd ssa_79, ssa_82
	vec1 32 ssa_86 = fneg ssa_67
	vec1 32 ssa_87 = fadd ssa_0.x, ssa_86
	vec1 32 ssa_88 = fneg ssa_68
	vec1 32 ssa_89 = fadd ssa_0.y, ssa_88
	vec1 32 ssa_90 = fneg ssa_69
	vec1 32 ssa_91 = fadd ssa_0.z, ssa_90
	vec1 32 ssa_92 = fneg ssa_67
	vec1 32 ssa_93 = fneg ssa_68
	vec1 32 ssa_94 = fneg ssa_69
	vec1 32 ssa_95 = deref_var &outNormal (shader_out vec3) 
	vec3 32 ssa_96 = vec3 ssa_83, ssa_84, ssa_85
	intrinsic store_deref (ssa_95, ssa_96) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_97 = deref_var &outColor (shader_out vec3) 
	intrinsic store_deref (ssa_97, ssa_25) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_98 = deref_var &outLightVec (shader_out vec3) 
	vec3 32 ssa_99 = vec3 ssa_87, ssa_89, ssa_91
	intrinsic store_deref (ssa_98, ssa_99) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_100 = deref_var &outViewVec (shader_out vec3) 
	vec3 32 ssa_101 = vec3 ssa_92, ssa_93, ssa_94
	intrinsic store_deref (ssa_100, ssa_101) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_102 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_103 = vec4 ssa_67, ssa_68, ssa_69, ssa_70
	intrinsic store_deref (ssa_102, ssa_103) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_0 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_3 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 1 ssa_7 = feq ssa_6.x, ssa_1
	vec1 1 ssa_8 = feq ssa_6.y, ssa_2
	vec1 1 ssa_9 = iand ssa_7, ssa_8
	vec1 1 ssa_10 = feq ssa_6.z, ssa_2
	vec1 1 ssa_11 = iand ssa_9, ssa_10
	/* succs: block_1 block_2 */
	if ssa_11 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_14 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_15 = intrinsic load_push_constant (ssa_14) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_16 = mov ssa_15.x
		vec1 32 ssa_17 = mov ssa_15.y
		vec1 32 ssa_18 = mov ssa_15.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_19 = mov ssa_6.x
		vec1 32 ssa_20 = mov ssa_6.y
		vec1 32 ssa_21 = mov ssa_6.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_22 = phi block_1: ssa_16, block_2: ssa_19
	vec1 32 ssa_23 = phi block_1: ssa_17, block_2: ssa_20
	vec1 32 ssa_24 = phi block_1: ssa_18, block_2: ssa_21
	vec3 32 ssa_25 = vec3 ssa_22, ssa_23, ssa_24
	vec1 32 ssa_27 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_31 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_32 = intrinsic load_push_constant (ssa_31) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_35 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_36 = intrinsic load_push_constant (ssa_35) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_39 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_40 = intrinsic load_push_constant (ssa_39) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_41 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_42 = intrinsic load_deref (ssa_41) (0) /* access=0 */
	vec1 32 ssa_43 = fmul ssa_28.x, ssa_42.x
	vec1 32 ssa_44 = fmul ssa_28.y, ssa_42.x
	vec1 32 ssa_45 = fmul ssa_28.z, ssa_42.x
	vec1 32 ssa_46 = fmul ssa_28.w, ssa_42.x
	vec1 32 ssa_47 = fmul ssa_32.x, ssa_42.y
	vec1 32 ssa_48 = fmul ssa_32.y, ssa_42.y
	vec1 32 ssa_49 = fmul ssa_32.z, ssa_42.y
	vec1 32 ssa_50 = fmul ssa_32.w, ssa_42.y
	vec1 32 ssa_51 = fadd ssa_43, ssa_47
	vec1 32 ssa_52 = fadd ssa_44, ssa_48
	vec1 32 ssa_53 = fadd ssa_45, ssa_49
	vec1 32 ssa_54 = fadd ssa_46, ssa_50
	vec1 32 ssa_55 = fmul ssa_36.x, ssa_42.z
	vec1 32 ssa_56 = fmul ssa_36.y, ssa_42.z
	vec1 32 ssa_57 = fmul ssa_36.z, ssa_42.z
	vec1 32 ssa_58 = fmul ssa_36.w, ssa_42.z
	vec1 32 ssa_59 = fadd ssa_51, ssa_55
	vec1 32 ssa_60 = fadd ssa_52, ssa_56
	vec1 32 ssa_61 = fadd ssa_53, ssa_57
	vec1 32 ssa_62 = fadd ssa_54, ssa_58
	vec1 32 ssa_67 = fadd ssa_59, ssa_40.x
	vec1 32 ssa_68 = fadd ssa_60, ssa_40.y
	vec1 32 ssa_69 = fadd ssa_61, ssa_40.z
	vec1 32 ssa_70 = fadd ssa_62, ssa_40.w
	vec1 32 ssa_71 = fmul ssa_28.x, ssa_4.x
	vec1 32 ssa_72 = fmul ssa_28.y, ssa_4.x
	vec1 32 ssa_73 = fmul ssa_28.z, ssa_4.x
	vec1 32 ssa_74 = fmul ssa_32.x, ssa_4.y
	vec1 32 ssa_75 = fmul ssa_32.y, ssa_4.y
	vec1 32 ssa_76 = fmul ssa_32.z, ssa_4.y
	vec1 32 ssa_77 = fadd ssa_71, ssa_74
	vec1 32 ssa_78 = fadd ssa_72, ssa_75
	vec1 32 ssa_79 = fadd ssa_73, ssa_76
	vec1 32 ssa_80 = fmul ssa_36.x, ssa_4.z
	vec1 32 ssa_81 = fmul ssa_36.y, ssa_4.z
	vec1 32 ssa_82 = fmul ssa_36.z, ssa_4.z
	vec1 32 ssa_83 = fadd ssa_77, ssa_80
	vec1 32 ssa_84 = fadd ssa_78, ssa_81
	vec1 32 ssa_85 = fadd ssa_79, ssa_82
	vec1 32 ssa_86 = fneg ssa_67
	vec1 32 ssa_87 = fadd ssa_0.x, ssa_86
	vec1 32 ssa_88 = fneg ssa_68
	vec1 32 ssa_89 = fadd ssa_0.y, ssa_88
	vec1 32 ssa_90 = fneg ssa_69
	vec1 32 ssa_91 = fadd ssa_0.z, ssa_90
	vec1 32 ssa_92 = fneg ssa_67
	vec1 32 ssa_93 = fneg ssa_68
	vec1 32 ssa_94 = fneg ssa_69
	vec1 32 ssa_95 = deref_var &outNormal (shader_out vec3) 
	vec3 32 ssa_96 = vec3 ssa_83, ssa_84, ssa_85
	intrinsic store_deref (ssa_95, ssa_96) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_97 = deref_var &outColor (shader_out vec3) 
	intrinsic store_deref (ssa_97, ssa_25) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_98 = deref_var &outLightVec (shader_out vec3) 
	vec3 32 ssa_99 = vec3 ssa_87, ssa_89, ssa_91
	intrinsic store_deref (ssa_98, ssa_99) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_100 = deref_var &outViewVec (shader_out vec3) 
	vec3 32 ssa_101 = vec3 ssa_92, ssa_93, ssa_94
	intrinsic store_deref (ssa_100, ssa_101) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_102 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_103 = vec4 ssa_67, ssa_68, ssa_69, ssa_70
	intrinsic store_deref (ssa_102, ssa_103) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_cse
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_0 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_3 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 1 ssa_7 = feq ssa_6.x, ssa_1
	vec1 1 ssa_8 = feq ssa_6.y, ssa_2
	vec1 1 ssa_9 = iand ssa_7, ssa_8
	vec1 1 ssa_10 = feq ssa_6.z, ssa_2
	vec1 1 ssa_11 = iand ssa_9, ssa_10
	/* succs: block_1 block_2 */
	if ssa_11 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_14 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_15 = intrinsic load_push_constant (ssa_14) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_16 = mov ssa_15.x
		vec1 32 ssa_17 = mov ssa_15.y
		vec1 32 ssa_18 = mov ssa_15.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_19 = mov ssa_6.x
		vec1 32 ssa_20 = mov ssa_6.y
		vec1 32 ssa_21 = mov ssa_6.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_22 = phi block_1: ssa_16, block_2: ssa_19
	vec1 32 ssa_23 = phi block_1: ssa_17, block_2: ssa_20
	vec1 32 ssa_24 = phi block_1: ssa_18, block_2: ssa_21
	vec3 32 ssa_25 = vec3 ssa_22, ssa_23, ssa_24
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_2) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_31 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_32 = intrinsic load_push_constant (ssa_31) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_35 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_36 = intrinsic load_push_constant (ssa_35) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_39 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_40 = intrinsic load_push_constant (ssa_39) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_41 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_42 = intrinsic load_deref (ssa_41) (0) /* access=0 */
	vec1 32 ssa_43 = fmul ssa_28.x, ssa_42.x
	vec1 32 ssa_44 = fmul ssa_28.y, ssa_42.x
	vec1 32 ssa_45 = fmul ssa_28.z, ssa_42.x
	vec1 32 ssa_46 = fmul ssa_28.w, ssa_42.x
	vec1 32 ssa_47 = fmul ssa_32.x, ssa_42.y
	vec1 32 ssa_48 = fmul ssa_32.y, ssa_42.y
	vec1 32 ssa_49 = fmul ssa_32.z, ssa_42.y
	vec1 32 ssa_50 = fmul ssa_32.w, ssa_42.y
	vec1 32 ssa_51 = fadd ssa_43, ssa_47
	vec1 32 ssa_52 = fadd ssa_44, ssa_48
	vec1 32 ssa_53 = fadd ssa_45, ssa_49
	vec1 32 ssa_54 = fadd ssa_46, ssa_50
	vec1 32 ssa_55 = fmul ssa_36.x, ssa_42.z
	vec1 32 ssa_56 = fmul ssa_36.y, ssa_42.z
	vec1 32 ssa_57 = fmul ssa_36.z, ssa_42.z
	vec1 32 ssa_58 = fmul ssa_36.w, ssa_42.z
	vec1 32 ssa_59 = fadd ssa_51, ssa_55
	vec1 32 ssa_60 = fadd ssa_52, ssa_56
	vec1 32 ssa_61 = fadd ssa_53, ssa_57
	vec1 32 ssa_62 = fadd ssa_54, ssa_58
	vec1 32 ssa_67 = fadd ssa_59, ssa_40.x
	vec1 32 ssa_68 = fadd ssa_60, ssa_40.y
	vec1 32 ssa_69 = fadd ssa_61, ssa_40.z
	vec1 32 ssa_70 = fadd ssa_62, ssa_40.w
	vec1 32 ssa_71 = fmul ssa_28.x, ssa_4.x
	vec1 32 ssa_72 = fmul ssa_28.y, ssa_4.x
	vec1 32 ssa_73 = fmul ssa_28.z, ssa_4.x
	vec1 32 ssa_74 = fmul ssa_32.x, ssa_4.y
	vec1 32 ssa_75 = fmul ssa_32.y, ssa_4.y
	vec1 32 ssa_76 = fmul ssa_32.z, ssa_4.y
	vec1 32 ssa_77 = fadd ssa_71, ssa_74
	vec1 32 ssa_78 = fadd ssa_72, ssa_75
	vec1 32 ssa_79 = fadd ssa_73, ssa_76
	vec1 32 ssa_80 = fmul ssa_36.x, ssa_4.z
	vec1 32 ssa_81 = fmul ssa_36.y, ssa_4.z
	vec1 32 ssa_82 = fmul ssa_36.z, ssa_4.z
	vec1 32 ssa_83 = fadd ssa_77, ssa_80
	vec1 32 ssa_84 = fadd ssa_78, ssa_81
	vec1 32 ssa_85 = fadd ssa_79, ssa_82
	vec1 32 ssa_86 = fneg ssa_67
	vec1 32 ssa_87 = fadd ssa_0.x, ssa_86
	vec1 32 ssa_88 = fneg ssa_68
	vec1 32 ssa_89 = fadd ssa_0.y, ssa_88
	vec1 32 ssa_90 = fneg ssa_69
	vec1 32 ssa_91 = fadd ssa_0.z, ssa_90
	vec1 32 ssa_95 = deref_var &outNormal (shader_out vec3) 
	vec3 32 ssa_96 = vec3 ssa_83, ssa_84, ssa_85
	intrinsic store_deref (ssa_95, ssa_96) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_97 = deref_var &outColor (shader_out vec3) 
	intrinsic store_deref (ssa_97, ssa_25) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_98 = deref_var &outLightVec (shader_out vec3) 
	vec3 32 ssa_99 = vec3 ssa_87, ssa_89, ssa_91
	intrinsic store_deref (ssa_98, ssa_99) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_100 = deref_var &outViewVec (shader_out vec3) 
	vec3 32 ssa_101 = vec3 ssa_86, ssa_88, ssa_90
	intrinsic store_deref (ssa_100, ssa_101) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_102 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_103 = vec4 ssa_67, ssa_68, ssa_69, ssa_70
	intrinsic store_deref (ssa_102, ssa_103) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec3 32 ssa_0 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_3 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 1 ssa_7 = feq ssa_6.x, ssa_1
	vec1 1 ssa_8 = feq ssa_6.y, ssa_2
	vec1 1 ssa_9 = iand ssa_7, ssa_8
	vec1 1 ssa_10 = feq ssa_6.z, ssa_2
	vec1 1 ssa_11 = iand ssa_9, ssa_10
	/* succs: block_1 block_2 */
	if ssa_11 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_14 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_15 = intrinsic load_push_constant (ssa_14) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_16 = mov ssa_15.x
		vec1 32 ssa_17 = mov ssa_15.y
		vec1 32 ssa_18 = mov ssa_15.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_19 = mov ssa_6.x
		vec1 32 ssa_20 = mov ssa_6.y
		vec1 32 ssa_21 = mov ssa_6.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_22 = phi block_1: ssa_16, block_2: ssa_19
	vec1 32 ssa_23 = phi block_1: ssa_17, block_2: ssa_20
	vec1 32 ssa_24 = phi block_1: ssa_18, block_2: ssa_21
	vec3 32 ssa_25 = vec3 ssa_22, ssa_23, ssa_24
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_2) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_31 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_32 = intrinsic load_push_constant (ssa_31) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_35 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_36 = intrinsic load_push_constant (ssa_35) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_39 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_40 = intrinsic load_push_constant (ssa_39) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_41 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_42 = intrinsic load_deref (ssa_41) (0) /* access=0 */
	vec1 32 ssa_43 = fmul ssa_28.x, ssa_42.x
	vec1 32 ssa_44 = fmul ssa_28.y, ssa_42.x
	vec1 32 ssa_45 = fmul ssa_28.z, ssa_42.x
	vec1 32 ssa_46 = fmul ssa_28.w, ssa_42.x
	vec1 32 ssa_47 = fmul ssa_32.x, ssa_42.y
	vec1 32 ssa_48 = fmul ssa_32.y, ssa_42.y
	vec1 32 ssa_49 = fmul ssa_32.z, ssa_42.y
	vec1 32 ssa_50 = fmul ssa_32.w, ssa_42.y
	vec1 32 ssa_51 = fadd ssa_43, ssa_47
	vec1 32 ssa_52 = fadd ssa_44, ssa_48
	vec1 32 ssa_53 = fadd ssa_45, ssa_49
	vec1 32 ssa_54 = fadd ssa_46, ssa_50
	vec1 32 ssa_55 = fmul ssa_36.x, ssa_42.z
	vec1 32 ssa_56 = fmul ssa_36.y, ssa_42.z
	vec1 32 ssa_57 = fmul ssa_36.z, ssa_42.z
	vec1 32 ssa_58 = fmul ssa_36.w, ssa_42.z
	vec1 32 ssa_59 = fadd ssa_51, ssa_55
	vec1 32 ssa_60 = fadd ssa_52, ssa_56
	vec1 32 ssa_61 = fadd ssa_53, ssa_57
	vec1 32 ssa_62 = fadd ssa_54, ssa_58
	vec1 32 ssa_67 = fadd ssa_59, ssa_40.x
	vec1 32 ssa_68 = fadd ssa_60, ssa_40.y
	vec1 32 ssa_69 = fadd ssa_61, ssa_40.z
	vec1 32 ssa_70 = fadd ssa_62, ssa_40.w
	vec1 32 ssa_71 = fmul ssa_28.x, ssa_4.x
	vec1 32 ssa_72 = fmul ssa_28.y, ssa_4.x
	vec1 32 ssa_73 = fmul ssa_28.z, ssa_4.x
	vec1 32 ssa_74 = fmul ssa_32.x, ssa_4.y
	vec1 32 ssa_75 = fmul ssa_32.y, ssa_4.y
	vec1 32 ssa_76 = fmul ssa_32.z, ssa_4.y
	vec1 32 ssa_77 = fadd ssa_71, ssa_74
	vec1 32 ssa_78 = fadd ssa_72, ssa_75
	vec1 32 ssa_79 = fadd ssa_73, ssa_76
	vec1 32 ssa_80 = fmul ssa_36.x, ssa_4.z
	vec1 32 ssa_81 = fmul ssa_36.y, ssa_4.z
	vec1 32 ssa_82 = fmul ssa_36.z, ssa_4.z
	vec1 32 ssa_83 = fadd ssa_77, ssa_80
	vec1 32 ssa_84 = fadd ssa_78, ssa_81
	vec1 32 ssa_85 = fadd ssa_79, ssa_82
	vec1 32 ssa_86 = fneg ssa_67
	vec1 32 ssa_88 = fneg ssa_68
	vec1 32 ssa_90 = fneg ssa_69
	vec1 32 ssa_95 = deref_var &outNormal (shader_out vec3) 
	vec3 32 ssa_96 = vec3 ssa_83, ssa_84, ssa_85
	intrinsic store_deref (ssa_95, ssa_96) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_97 = deref_var &outColor (shader_out vec3) 
	intrinsic store_deref (ssa_97, ssa_25) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_98 = deref_var &outLightVec (shader_out vec3) 
	vec3 32 ssa_99 = vec3 ssa_86, ssa_88, ssa_90
	intrinsic store_deref (ssa_98, ssa_99) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_100 = deref_var &outViewVec (shader_out vec3) 
	vec3 32 ssa_101 = vec3 ssa_86, ssa_88, ssa_90
	intrinsic store_deref (ssa_100, ssa_101) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_102 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_103 = vec4 ssa_67, ssa_68, ssa_69, ssa_70
	intrinsic store_deref (ssa_102, ssa_103) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_3 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 1 ssa_7 = feq ssa_6.x, ssa_1
	vec1 1 ssa_8 = feq ssa_6.y, ssa_2
	vec1 1 ssa_9 = iand ssa_7, ssa_8
	vec1 1 ssa_10 = feq ssa_6.z, ssa_2
	vec1 1 ssa_11 = iand ssa_9, ssa_10
	/* succs: block_1 block_2 */
	if ssa_11 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_12 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_13 = intrinsic load_push_constant (ssa_12) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_14 = mov ssa_13.x
		vec1 32 ssa_15 = mov ssa_13.y
		vec1 32 ssa_16 = mov ssa_13.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_17 = mov ssa_6.x
		vec1 32 ssa_18 = mov ssa_6.y
		vec1 32 ssa_19 = mov ssa_6.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec1 32 ssa_22 = phi block_1: ssa_16, block_2: ssa_19
	vec3 32 ssa_23 = vec3 ssa_20, ssa_21, ssa_22
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_2) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_30 = intrinsic load_push_constant (ssa_29) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_31 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_33 = fmul ssa_24.x, ssa_32.x
	vec1 32 ssa_34 = fmul ssa_24.y, ssa_32.x
	vec1 32 ssa_35 = fmul ssa_24.z, ssa_32.x
	vec1 32 ssa_36 = fmul ssa_24.w, ssa_32.x
	vec1 32 ssa_37 = fmul ssa_26.x, ssa_32.y
	vec1 32 ssa_38 = fmul ssa_26.y, ssa_32.y
	vec1 32 ssa_39 = fmul ssa_26.z, ssa_32.y
	vec1 32 ssa_40 = fmul ssa_26.w, ssa_32.y
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fadd ssa_35, ssa_39
	vec1 32 ssa_44 = fadd ssa_36, ssa_40
	vec1 32 ssa_45 = fmul ssa_28.x, ssa_32.z
	vec1 32 ssa_46 = fmul ssa_28.y, ssa_32.z
	vec1 32 ssa_47 = fmul ssa_28.z, ssa_32.z
	vec1 32 ssa_48 = fmul ssa_28.w, ssa_32.z
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_43, ssa_47
	vec1 32 ssa_52 = fadd ssa_44, ssa_48
	vec1 32 ssa_53 = fadd ssa_49, ssa_30.x
	vec1 32 ssa_54 = fadd ssa_50, ssa_30.y
	vec1 32 ssa_55 = fadd ssa_51, ssa_30.z
	vec1 32 ssa_56 = fadd ssa_52, ssa_30.w
	vec1 32 ssa_57 = fmul ssa_24.x, ssa_4.x
	vec1 32 ssa_58 = fmul ssa_24.y, ssa_4.x
	vec1 32 ssa_59 = fmul ssa_24.z, ssa_4.x
	vec1 32 ssa_60 = fmul ssa_26.x, ssa_4.y
	vec1 32 ssa_61 = fmul ssa_26.y, ssa_4.y
	vec1 32 ssa_62 = fmul ssa_26.z, ssa_4.y
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fadd ssa_58, ssa_61
	vec1 32 ssa_65 = fadd ssa_59, ssa_62
	vec1 32 ssa_66 = fmul ssa_28.x, ssa_4.z
	vec1 32 ssa_67 = fmul ssa_28.y, ssa_4.z
	vec1 32 ssa_68 = fmul ssa_28.z, ssa_4.z
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fadd ssa_64, ssa_67
	vec1 32 ssa_71 = fadd ssa_65, ssa_68
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = fneg ssa_54
	vec1 32 ssa_74 = fneg ssa_55
	vec1 32 ssa_75 = deref_var &outNormal (shader_out vec3) 
	vec3 32 ssa_76 = vec3 ssa_69, ssa_70, ssa_71
	intrinsic store_deref (ssa_75, ssa_76) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_77 = deref_var &outColor (shader_out vec3) 
	intrinsic store_deref (ssa_77, ssa_23) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_78 = deref_var &outLightVec (shader_out vec3) 
	vec3 32 ssa_79 = vec3 ssa_72, ssa_73, ssa_74
	intrinsic store_deref (ssa_78, ssa_79) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_80 = deref_var &outViewVec (shader_out vec3) 
	vec3 32 ssa_81 = vec3 ssa_72, ssa_73, ssa_74
	intrinsic store_deref (ssa_80, ssa_81) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_82 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_83 = vec4 ssa_53, ssa_54, ssa_55, ssa_56
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_cse
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 pos
	decl_var  INTERP_MODE_NONE vec3 lPos
	decl_var  INTERP_MODE_NONE bool phi
	decl_var  INTERP_MODE_NONE bool phi@0
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp
	decl_var  INTERP_MODE_NONE vec3 out@outLightVec-temp
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_3 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 1 ssa_7 = feq ssa_6.x, ssa_1
	vec1 1 ssa_8 = feq ssa_6.y, ssa_2
	vec1 1 ssa_9 = iand ssa_7, ssa_8
	vec1 1 ssa_10 = feq ssa_6.z, ssa_2
	vec1 1 ssa_11 = iand ssa_9, ssa_10
	/* succs: block_1 block_2 */
	if ssa_11 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_12 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_13 = intrinsic load_push_constant (ssa_12) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_14 = mov ssa_13.x
		vec1 32 ssa_15 = mov ssa_13.y
		vec1 32 ssa_16 = mov ssa_13.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_17 = mov ssa_6.x
		vec1 32 ssa_18 = mov ssa_6.y
		vec1 32 ssa_19 = mov ssa_6.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec1 32 ssa_22 = phi block_1: ssa_16, block_2: ssa_19
	vec3 32 ssa_23 = vec3 ssa_20, ssa_21, ssa_22
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_2) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_30 = intrinsic load_push_constant (ssa_29) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_31 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_33 = fmul ssa_24.x, ssa_32.x
	vec1 32 ssa_34 = fmul ssa_24.y, ssa_32.x
	vec1 32 ssa_35 = fmul ssa_24.z, ssa_32.x
	vec1 32 ssa_36 = fmul ssa_24.w, ssa_32.x
	vec1 32 ssa_37 = fmul ssa_26.x, ssa_32.y
	vec1 32 ssa_38 = fmul ssa_26.y, ssa_32.y
	vec1 32 ssa_39 = fmul ssa_26.z, ssa_32.y
	vec1 32 ssa_40 = fmul ssa_26.w, ssa_32.y
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fadd ssa_35, ssa_39
	vec1 32 ssa_44 = fadd ssa_36, ssa_40
	vec1 32 ssa_45 = fmul ssa_28.x, ssa_32.z
	vec1 32 ssa_46 = fmul ssa_28.y, ssa_32.z
	vec1 32 ssa_47 = fmul ssa_28.z, ssa_32.z
	vec1 32 ssa_48 = fmul ssa_28.w, ssa_32.z
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_43, ssa_47
	vec1 32 ssa_52 = fadd ssa_44, ssa_48
	vec1 32 ssa_53 = fadd ssa_49, ssa_30.x
	vec1 32 ssa_54 = fadd ssa_50, ssa_30.y
	vec1 32 ssa_55 = fadd ssa_51, ssa_30.z
	vec1 32 ssa_56 = fadd ssa_52, ssa_30.w
	vec1 32 ssa_57 = fmul ssa_24.x, ssa_4.x
	vec1 32 ssa_58 = fmul ssa_24.y, ssa_4.x
	vec1 32 ssa_59 = fmul ssa_24.z, ssa_4.x
	vec1 32 ssa_60 = fmul ssa_26.x, ssa_4.y
	vec1 32 ssa_61 = fmul ssa_26.y, ssa_4.y
	vec1 32 ssa_62 = fmul ssa_26.z, ssa_4.y
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fadd ssa_58, ssa_61
	vec1 32 ssa_65 = fadd ssa_59, ssa_62
	vec1 32 ssa_66 = fmul ssa_28.x, ssa_4.z
	vec1 32 ssa_67 = fmul ssa_28.y, ssa_4.z
	vec1 32 ssa_68 = fmul ssa_28.z, ssa_4.z
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fadd ssa_64, ssa_67
	vec1 32 ssa_71 = fadd ssa_65, ssa_68
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = fneg ssa_54
	vec1 32 ssa_74 = fneg ssa_55
	vec1 32 ssa_75 = deref_var &outNormal (shader_out vec3) 
	vec3 32 ssa_76 = vec3 ssa_69, ssa_70, ssa_71
	intrinsic store_deref (ssa_75, ssa_76) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_77 = deref_var &outColor (shader_out vec3) 
	intrinsic store_deref (ssa_77, ssa_23) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_78 = deref_var &outLightVec (shader_out vec3) 
	vec3 32 ssa_79 = vec3 ssa_72, ssa_73, ssa_74
	intrinsic store_deref (ssa_78, ssa_79) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_80 = deref_var &outViewVec (shader_out vec3) 
	intrinsic store_deref (ssa_80, ssa_79) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_82 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_83 = vec4 ssa_53, ssa_54, ssa_55, ssa_56
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec3 32 ssa_22 = vec3 ssa_19, ssa_20, ssa_21
	vec4 32 ssa_23 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_24 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_25 = intrinsic load_push_constant (ssa_24) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_26 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_27 = intrinsic load_push_constant (ssa_26) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_28 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_29 = intrinsic load_push_constant (ssa_28) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_30 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_31 = intrinsic load_deref (ssa_30) (0) /* access=0 */
	vec1 32 ssa_32 = fmul ssa_23.x, ssa_31.x
	vec1 32 ssa_33 = fmul ssa_23.y, ssa_31.x
	vec1 32 ssa_34 = fmul ssa_23.z, ssa_31.x
	vec1 32 ssa_35 = fmul ssa_23.w, ssa_31.x
	vec1 32 ssa_36 = fmul ssa_25.x, ssa_31.y
	vec1 32 ssa_37 = fmul ssa_25.y, ssa_31.y
	vec1 32 ssa_38 = fmul ssa_25.z, ssa_31.y
	vec1 32 ssa_39 = fmul ssa_25.w, ssa_31.y
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fadd ssa_35, ssa_39
	vec1 32 ssa_44 = fmul ssa_27.x, ssa_31.z
	vec1 32 ssa_45 = fmul ssa_27.y, ssa_31.z
	vec1 32 ssa_46 = fmul ssa_27.z, ssa_31.z
	vec1 32 ssa_47 = fmul ssa_27.w, ssa_31.z
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_43, ssa_47
	vec1 32 ssa_52 = fadd ssa_48, ssa_29.x
	vec1 32 ssa_53 = fadd ssa_49, ssa_29.y
	vec1 32 ssa_54 = fadd ssa_50, ssa_29.z
	vec1 32 ssa_55 = fadd ssa_51, ssa_29.w
	vec1 32 ssa_56 = fmul ssa_23.x, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_23.y, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_23.z, ssa_3.x
	vec1 32 ssa_59 = fmul ssa_25.x, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_25.y, ssa_3.y
	vec1 32 ssa_61 = fmul ssa_25.z, ssa_3.y
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fadd ssa_58, ssa_61
	vec1 32 ssa_65 = fmul ssa_27.x, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_27.y, ssa_3.z
	vec1 32 ssa_67 = fmul ssa_27.z, ssa_3.z
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fadd ssa_64, ssa_67
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = fneg ssa_54
	vec1 32 ssa_74 = deref_var &outNormal (shader_out vec3) 
	vec3 32 ssa_75 = vec3 ssa_68, ssa_69, ssa_70
	intrinsic store_deref (ssa_74, ssa_75) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_76 = deref_var &outColor (shader_out vec3) 
	intrinsic store_deref (ssa_76, ssa_22) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_77 = deref_var &outLightVec (shader_out vec3) 
	vec3 32 ssa_78 = vec3 ssa_71, ssa_72, ssa_73
	intrinsic store_deref (ssa_77, ssa_78) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_79 = deref_var &outViewVec (shader_out vec3) 
	intrinsic store_deref (ssa_79, ssa_78) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_80 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_81 = vec4 ssa_52, ssa_53, ssa_54, ssa_55
	intrinsic store_deref (ssa_80, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_doubles
nir_lower_int64
nir_lower_bit_size
nir_lower_load_const_to_scalar
nir_lower_var_copies
nir_opt_large_constants
nir_lower_system_values
nir_lower_compute_system_values
nir_lower_subgroups
nir_lower_clip_cull_distance_arrays
nir_lower_vars_to_scratch
nir_lower_indirect_derefs
nir_lower_array_deref_of_vec
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_lower_variable_initializers
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = fdot3 ssa_1, ssa_1
	vec1 32 ssa_3 = fsqrt ssa_2
	vec3 32 ssa_4 = fdiv ssa_1, ssa_3.xxx
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	intrinsic store_deref (ssa_5, ssa_4) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = fdot3 ssa_7, ssa_7
	vec1 32 ssa_9 = fsqrt ssa_8
	vec3 32 ssa_10 = fdiv ssa_7, ssa_9.xxx
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	intrinsic store_deref (ssa_11, ssa_10) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = fdot3 ssa_13, ssa_13
	vec1 32 ssa_15 = fsqrt ssa_14
	vec3 32 ssa_16 = fdiv ssa_13, ssa_15.xxx
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	intrinsic store_deref (ssa_17, ssa_16) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec3 32 ssa_20 = fneg ssa_19
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = fdot3 ssa_20, ssa_22
	vec3 32 ssa_24 = fmul ssa_23.xxx, ssa_22
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec3 32 ssa_26 = fmul ssa_25.xxx, ssa_24
	vec3 32 ssa_27 = fsub ssa_20, ssa_26
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	intrinsic store_deref (ssa_28, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_33 = fdot3 ssa_30, ssa_32
	vec1 32 ssa_35 = fmax ssa_33, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec3 32 ssa_38 = fmul ssa_37, ssa_35.xxx
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	intrinsic store_deref (ssa_39, ssa_38) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec3 32 ssa_41 = intrinsic load_deref (ssa_40) (0) /* access=0 */
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec3 32 ssa_43 = intrinsic load_deref (ssa_42) (0) /* access=0 */
	vec1 32 ssa_44 = fdot3 ssa_41, ssa_43
	vec1 32 ssa_46 = fmax ssa_44, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec3 32 ssa_50 = fmul ssa_49, ssa_48.xxx
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	intrinsic store_deref (ssa_51, ssa_50) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec3 32 ssa_53 = intrinsic load_deref (ssa_52) (0) /* access=0 */
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec3 32 ssa_55 = intrinsic load_deref (ssa_54) (0) /* access=0 */
	vec3 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_57 = mov ssa_56.x
	vec1 32 ssa_58 = mov ssa_56.y
	vec1 32 ssa_59 = mov ssa_56.z
	vec4 32 ssa_61 = vec4 ssa_57, ssa_58, ssa_59, ssa_60
	vec1 32 ssa_62 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_62, ssa_61) (15, 0) /* wrmask=xyzw */ /* access=0 */
	return
	/* succs: block_1 */
	block block_1:
}

nir_lower_returns
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = fdot3 ssa_1, ssa_1
	vec1 32 ssa_3 = fsqrt ssa_2
	vec3 32 ssa_4 = fdiv ssa_1, ssa_3.xxx
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	intrinsic store_deref (ssa_5, ssa_4) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = fdot3 ssa_7, ssa_7
	vec1 32 ssa_9 = fsqrt ssa_8
	vec3 32 ssa_10 = fdiv ssa_7, ssa_9.xxx
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	intrinsic store_deref (ssa_11, ssa_10) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = fdot3 ssa_13, ssa_13
	vec1 32 ssa_15 = fsqrt ssa_14
	vec3 32 ssa_16 = fdiv ssa_13, ssa_15.xxx
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	intrinsic store_deref (ssa_17, ssa_16) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec3 32 ssa_20 = fneg ssa_19
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = fdot3 ssa_20, ssa_22
	vec3 32 ssa_24 = fmul ssa_23.xxx, ssa_22
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec3 32 ssa_26 = fmul ssa_25.xxx, ssa_24
	vec3 32 ssa_27 = fsub ssa_20, ssa_26
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	intrinsic store_deref (ssa_28, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_33 = fdot3 ssa_30, ssa_32
	vec1 32 ssa_35 = fmax ssa_33, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec3 32 ssa_38 = fmul ssa_37, ssa_35.xxx
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	intrinsic store_deref (ssa_39, ssa_38) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec3 32 ssa_41 = intrinsic load_deref (ssa_40) (0) /* access=0 */
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec3 32 ssa_43 = intrinsic load_deref (ssa_42) (0) /* access=0 */
	vec1 32 ssa_44 = fdot3 ssa_41, ssa_43
	vec1 32 ssa_46 = fmax ssa_44, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec3 32 ssa_50 = fmul ssa_49, ssa_48.xxx
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	intrinsic store_deref (ssa_51, ssa_50) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec3 32 ssa_53 = intrinsic load_deref (ssa_52) (0) /* access=0 */
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec3 32 ssa_55 = intrinsic load_deref (ssa_54) (0) /* access=0 */
	vec3 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_57 = mov ssa_56.x
	vec1 32 ssa_58 = mov ssa_56.y
	vec1 32 ssa_59 = mov ssa_56.z
	vec4 32 ssa_61 = vec4 ssa_57, ssa_58, ssa_59, ssa_60
	vec1 32 ssa_62 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_62, ssa_61) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_inline_functions
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = fdot3 ssa_1, ssa_1
	vec1 32 ssa_3 = fsqrt ssa_2
	vec3 32 ssa_4 = fdiv ssa_1, ssa_3.xxx
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	intrinsic store_deref (ssa_5, ssa_4) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = fdot3 ssa_7, ssa_7
	vec1 32 ssa_9 = fsqrt ssa_8
	vec3 32 ssa_10 = fdiv ssa_7, ssa_9.xxx
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	intrinsic store_deref (ssa_11, ssa_10) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = fdot3 ssa_13, ssa_13
	vec1 32 ssa_15 = fsqrt ssa_14
	vec3 32 ssa_16 = fdiv ssa_13, ssa_15.xxx
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	intrinsic store_deref (ssa_17, ssa_16) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec3 32 ssa_20 = fneg ssa_19
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = fdot3 ssa_20, ssa_22
	vec3 32 ssa_24 = fmul ssa_23.xxx, ssa_22
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec3 32 ssa_26 = fmul ssa_25.xxx, ssa_24
	vec3 32 ssa_27 = fsub ssa_20, ssa_26
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	intrinsic store_deref (ssa_28, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_33 = fdot3 ssa_30, ssa_32
	vec1 32 ssa_35 = fmax ssa_33, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec3 32 ssa_38 = fmul ssa_37, ssa_35.xxx
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	intrinsic store_deref (ssa_39, ssa_38) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec3 32 ssa_41 = intrinsic load_deref (ssa_40) (0) /* access=0 */
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec3 32 ssa_43 = intrinsic load_deref (ssa_42) (0) /* access=0 */
	vec1 32 ssa_44 = fdot3 ssa_41, ssa_43
	vec1 32 ssa_46 = fmax ssa_44, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec3 32 ssa_50 = fmul ssa_49, ssa_48.xxx
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	intrinsic store_deref (ssa_51, ssa_50) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec3 32 ssa_53 = intrinsic load_deref (ssa_52) (0) /* access=0 */
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec3 32 ssa_55 = intrinsic load_deref (ssa_54) (0) /* access=0 */
	vec3 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_57 = mov ssa_56.x
	vec1 32 ssa_58 = mov ssa_56.y
	vec1 32 ssa_59 = mov ssa_56.z
	vec4 32 ssa_61 = vec4 ssa_57, ssa_58, ssa_59, ssa_60
	vec1 32 ssa_62 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_62, ssa_61) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_copy_prop
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = fdot3 ssa_1, ssa_1
	vec1 32 ssa_3 = fsqrt ssa_2
	vec3 32 ssa_4 = fdiv ssa_1, ssa_3.xxx
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	intrinsic store_deref (ssa_5, ssa_4) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = fdot3 ssa_7, ssa_7
	vec1 32 ssa_9 = fsqrt ssa_8
	vec3 32 ssa_10 = fdiv ssa_7, ssa_9.xxx
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	intrinsic store_deref (ssa_11, ssa_10) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = fdot3 ssa_13, ssa_13
	vec1 32 ssa_15 = fsqrt ssa_14
	vec3 32 ssa_16 = fdiv ssa_13, ssa_15.xxx
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	intrinsic store_deref (ssa_17, ssa_16) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec3 32 ssa_20 = fneg ssa_19
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = fdot3 ssa_20, ssa_22
	vec3 32 ssa_24 = fmul ssa_23.xxx, ssa_22
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec3 32 ssa_26 = fmul ssa_25.xxx, ssa_24
	vec3 32 ssa_27 = fsub ssa_20, ssa_26
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	intrinsic store_deref (ssa_28, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_33 = fdot3 ssa_30, ssa_32
	vec1 32 ssa_35 = fmax ssa_33, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec3 32 ssa_38 = fmul ssa_37, ssa_35.xxx
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	intrinsic store_deref (ssa_39, ssa_38) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec3 32 ssa_41 = intrinsic load_deref (ssa_40) (0) /* access=0 */
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec3 32 ssa_43 = intrinsic load_deref (ssa_42) (0) /* access=0 */
	vec1 32 ssa_44 = fdot3 ssa_41, ssa_43
	vec1 32 ssa_46 = fmax ssa_44, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec3 32 ssa_50 = fmul ssa_49, ssa_48.xxx
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	intrinsic store_deref (ssa_51, ssa_50) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec3 32 ssa_53 = intrinsic load_deref (ssa_52) (0) /* access=0 */
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec3 32 ssa_55 = intrinsic load_deref (ssa_54) (0) /* access=0 */
	vec3 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_57 = mov ssa_56.x
	vec1 32 ssa_58 = mov ssa_56.y
	vec1 32 ssa_59 = mov ssa_56.z
	vec4 32 ssa_61 = vec4 ssa_56.x, ssa_56.y, ssa_56.z, ssa_60
	vec1 32 ssa_62 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_62, ssa_61) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_deref
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = fdot3 ssa_1, ssa_1
	vec1 32 ssa_3 = fsqrt ssa_2
	vec3 32 ssa_4 = fdiv ssa_1, ssa_3.xxx
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	intrinsic store_deref (ssa_5, ssa_4) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = fdot3 ssa_7, ssa_7
	vec1 32 ssa_9 = fsqrt ssa_8
	vec3 32 ssa_10 = fdiv ssa_7, ssa_9.xxx
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	intrinsic store_deref (ssa_11, ssa_10) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = fdot3 ssa_13, ssa_13
	vec1 32 ssa_15 = fsqrt ssa_14
	vec3 32 ssa_16 = fdiv ssa_13, ssa_15.xxx
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	intrinsic store_deref (ssa_17, ssa_16) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec3 32 ssa_20 = fneg ssa_19
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = fdot3 ssa_20, ssa_22
	vec3 32 ssa_24 = fmul ssa_23.xxx, ssa_22
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec3 32 ssa_26 = fmul ssa_25.xxx, ssa_24
	vec3 32 ssa_27 = fsub ssa_20, ssa_26
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	intrinsic store_deref (ssa_28, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_33 = fdot3 ssa_30, ssa_32
	vec1 32 ssa_35 = fmax ssa_33, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec3 32 ssa_38 = fmul ssa_37, ssa_35.xxx
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	intrinsic store_deref (ssa_39, ssa_38) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec3 32 ssa_41 = intrinsic load_deref (ssa_40) (0) /* access=0 */
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec3 32 ssa_43 = intrinsic load_deref (ssa_42) (0) /* access=0 */
	vec1 32 ssa_44 = fdot3 ssa_41, ssa_43
	vec1 32 ssa_46 = fmax ssa_44, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec3 32 ssa_50 = fmul ssa_49, ssa_48.xxx
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	intrinsic store_deref (ssa_51, ssa_50) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec3 32 ssa_53 = intrinsic load_deref (ssa_52) (0) /* access=0 */
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec3 32 ssa_55 = intrinsic load_deref (ssa_54) (0) /* access=0 */
	vec3 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_57 = mov ssa_56.x
	vec1 32 ssa_58 = mov ssa_56.y
	vec1 32 ssa_59 = mov ssa_56.z
	vec4 32 ssa_61 = vec4 ssa_56.x, ssa_56.y, ssa_56.z, ssa_60
	vec1 32 ssa_62 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_62, ssa_61) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_variable_initializers
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = fdot3 ssa_1, ssa_1
	vec1 32 ssa_3 = fsqrt ssa_2
	vec3 32 ssa_4 = fdiv ssa_1, ssa_3.xxx
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	intrinsic store_deref (ssa_5, ssa_4) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = fdot3 ssa_7, ssa_7
	vec1 32 ssa_9 = fsqrt ssa_8
	vec3 32 ssa_10 = fdiv ssa_7, ssa_9.xxx
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	intrinsic store_deref (ssa_11, ssa_10) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = fdot3 ssa_13, ssa_13
	vec1 32 ssa_15 = fsqrt ssa_14
	vec3 32 ssa_16 = fdiv ssa_13, ssa_15.xxx
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	intrinsic store_deref (ssa_17, ssa_16) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec3 32 ssa_20 = fneg ssa_19
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = fdot3 ssa_20, ssa_22
	vec3 32 ssa_24 = fmul ssa_23.xxx, ssa_22
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec3 32 ssa_26 = fmul ssa_25.xxx, ssa_24
	vec3 32 ssa_27 = fsub ssa_20, ssa_26
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	intrinsic store_deref (ssa_28, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_33 = fdot3 ssa_30, ssa_32
	vec1 32 ssa_35 = fmax ssa_33, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec3 32 ssa_38 = fmul ssa_37, ssa_35.xxx
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	intrinsic store_deref (ssa_39, ssa_38) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec3 32 ssa_41 = intrinsic load_deref (ssa_40) (0) /* access=0 */
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec3 32 ssa_43 = intrinsic load_deref (ssa_42) (0) /* access=0 */
	vec1 32 ssa_44 = fdot3 ssa_41, ssa_43
	vec1 32 ssa_46 = fmax ssa_44, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec3 32 ssa_50 = fmul ssa_49, ssa_48.xxx
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	intrinsic store_deref (ssa_51, ssa_50) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec3 32 ssa_53 = intrinsic load_deref (ssa_52) (0) /* access=0 */
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec3 32 ssa_55 = intrinsic load_deref (ssa_54) (0) /* access=0 */
	vec3 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_57 = mov ssa_56.x
	vec1 32 ssa_58 = mov ssa_56.y
	vec1 32 ssa_59 = mov ssa_56.z
	vec4 32 ssa_61 = vec4 ssa_56.x, ssa_56.y, ssa_56.z, ssa_60
	vec1 32 ssa_62 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_62, ssa_61) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_var_copies
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = fdot3 ssa_1, ssa_1
	vec1 32 ssa_3 = fsqrt ssa_2
	vec3 32 ssa_4 = fdiv ssa_1, ssa_3.xxx
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	intrinsic store_deref (ssa_5, ssa_4) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = fdot3 ssa_7, ssa_7
	vec1 32 ssa_9 = fsqrt ssa_8
	vec3 32 ssa_10 = fdiv ssa_7, ssa_9.xxx
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	intrinsic store_deref (ssa_11, ssa_10) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = fdot3 ssa_13, ssa_13
	vec1 32 ssa_15 = fsqrt ssa_14
	vec3 32 ssa_16 = fdiv ssa_13, ssa_15.xxx
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	intrinsic store_deref (ssa_17, ssa_16) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec3 32 ssa_20 = fneg ssa_19
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = fdot3 ssa_20, ssa_22
	vec3 32 ssa_24 = fmul ssa_23.xxx, ssa_22
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec3 32 ssa_26 = fmul ssa_25.xxx, ssa_24
	vec3 32 ssa_27 = fsub ssa_20, ssa_26
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	intrinsic store_deref (ssa_28, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_33 = fdot3 ssa_30, ssa_32
	vec1 32 ssa_35 = fmax ssa_33, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec3 32 ssa_38 = fmul ssa_37, ssa_35.xxx
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	intrinsic store_deref (ssa_39, ssa_38) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec3 32 ssa_41 = intrinsic load_deref (ssa_40) (0) /* access=0 */
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec3 32 ssa_43 = intrinsic load_deref (ssa_42) (0) /* access=0 */
	vec1 32 ssa_44 = fdot3 ssa_41, ssa_43
	vec1 32 ssa_46 = fmax ssa_44, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec3 32 ssa_50 = fmul ssa_49, ssa_48.xxx
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	intrinsic store_deref (ssa_51, ssa_50) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec3 32 ssa_53 = intrinsic load_deref (ssa_52) (0) /* access=0 */
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec3 32 ssa_55 = intrinsic load_deref (ssa_54) (0) /* access=0 */
	vec3 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_57 = mov ssa_56.x
	vec1 32 ssa_58 = mov ssa_56.y
	vec1 32 ssa_59 = mov ssa_56.z
	vec4 32 ssa_61 = vec4 ssa_56.x, ssa_56.y, ssa_56.z, ssa_60
	vec1 32 ssa_62 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_62, ssa_61) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_per_member_structs
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = fdot3 ssa_1, ssa_1
	vec1 32 ssa_3 = fsqrt ssa_2
	vec3 32 ssa_4 = fdiv ssa_1, ssa_3.xxx
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	intrinsic store_deref (ssa_5, ssa_4) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = fdot3 ssa_7, ssa_7
	vec1 32 ssa_9 = fsqrt ssa_8
	vec3 32 ssa_10 = fdiv ssa_7, ssa_9.xxx
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	intrinsic store_deref (ssa_11, ssa_10) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = fdot3 ssa_13, ssa_13
	vec1 32 ssa_15 = fsqrt ssa_14
	vec3 32 ssa_16 = fdiv ssa_13, ssa_15.xxx
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	intrinsic store_deref (ssa_17, ssa_16) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec3 32 ssa_20 = fneg ssa_19
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = fdot3 ssa_20, ssa_22
	vec3 32 ssa_24 = fmul ssa_23.xxx, ssa_22
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec3 32 ssa_26 = fmul ssa_25.xxx, ssa_24
	vec3 32 ssa_27 = fsub ssa_20, ssa_26
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	intrinsic store_deref (ssa_28, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_33 = fdot3 ssa_30, ssa_32
	vec1 32 ssa_35 = fmax ssa_33, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec3 32 ssa_38 = fmul ssa_37, ssa_35.xxx
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	intrinsic store_deref (ssa_39, ssa_38) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec3 32 ssa_41 = intrinsic load_deref (ssa_40) (0) /* access=0 */
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec3 32 ssa_43 = intrinsic load_deref (ssa_42) (0) /* access=0 */
	vec1 32 ssa_44 = fdot3 ssa_41, ssa_43
	vec1 32 ssa_46 = fmax ssa_44, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec3 32 ssa_50 = fmul ssa_49, ssa_48.xxx
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	intrinsic store_deref (ssa_51, ssa_50) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec3 32 ssa_53 = intrinsic load_deref (ssa_52) (0) /* access=0 */
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec3 32 ssa_55 = intrinsic load_deref (ssa_54) (0) /* access=0 */
	vec3 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_57 = mov ssa_56.x
	vec1 32 ssa_58 = mov ssa_56.y
	vec1 32 ssa_59 = mov ssa_56.z
	vec4 32 ssa_61 = vec4 ssa_56.x, ssa_56.y, ssa_56.z, ssa_60
	vec1 32 ssa_62 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_62, ssa_61) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_remove_dead_variables
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = fdot3 ssa_1, ssa_1
	vec1 32 ssa_3 = fsqrt ssa_2
	vec3 32 ssa_4 = fdiv ssa_1, ssa_3.xxx
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	intrinsic store_deref (ssa_5, ssa_4) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = fdot3 ssa_7, ssa_7
	vec1 32 ssa_9 = fsqrt ssa_8
	vec3 32 ssa_10 = fdiv ssa_7, ssa_9.xxx
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	intrinsic store_deref (ssa_11, ssa_10) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = fdot3 ssa_13, ssa_13
	vec1 32 ssa_15 = fsqrt ssa_14
	vec3 32 ssa_16 = fdiv ssa_13, ssa_15.xxx
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	intrinsic store_deref (ssa_17, ssa_16) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec3 32 ssa_20 = fneg ssa_19
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = fdot3 ssa_20, ssa_22
	vec3 32 ssa_24 = fmul ssa_23.xxx, ssa_22
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec3 32 ssa_26 = fmul ssa_25.xxx, ssa_24
	vec3 32 ssa_27 = fsub ssa_20, ssa_26
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	intrinsic store_deref (ssa_28, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_33 = fdot3 ssa_30, ssa_32
	vec1 32 ssa_35 = fmax ssa_33, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec3 32 ssa_38 = fmul ssa_37, ssa_35.xxx
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	intrinsic store_deref (ssa_39, ssa_38) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec3 32 ssa_41 = intrinsic load_deref (ssa_40) (0) /* access=0 */
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec3 32 ssa_43 = intrinsic load_deref (ssa_42) (0) /* access=0 */
	vec1 32 ssa_44 = fdot3 ssa_41, ssa_43
	vec1 32 ssa_46 = fmax ssa_44, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec3 32 ssa_50 = fmul ssa_49, ssa_48.xxx
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	intrinsic store_deref (ssa_51, ssa_50) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec3 32 ssa_53 = intrinsic load_deref (ssa_52) (0) /* access=0 */
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec3 32 ssa_55 = intrinsic load_deref (ssa_54) (0) /* access=0 */
	vec3 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_57 = mov ssa_56.x
	vec1 32 ssa_58 = mov ssa_56.y
	vec1 32 ssa_59 = mov ssa_56.z
	vec4 32 ssa_61 = vec4 ssa_56.x, ssa_56.y, ssa_56.z, ssa_60
	vec1 32 ssa_62 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_62, ssa_61) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_propagate_invariant
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = fdot3 ssa_1, ssa_1
	vec1 32 ssa_3 = fsqrt ssa_2
	vec3 32 ssa_4 = fdiv ssa_1, ssa_3.xxx
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	intrinsic store_deref (ssa_5, ssa_4) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = fdot3 ssa_7, ssa_7
	vec1 32 ssa_9 = fsqrt ssa_8
	vec3 32 ssa_10 = fdiv ssa_7, ssa_9.xxx
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	intrinsic store_deref (ssa_11, ssa_10) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = fdot3 ssa_13, ssa_13
	vec1 32 ssa_15 = fsqrt ssa_14
	vec3 32 ssa_16 = fdiv ssa_13, ssa_15.xxx
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	intrinsic store_deref (ssa_17, ssa_16) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec3 32 ssa_20 = fneg ssa_19
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = fdot3 ssa_20, ssa_22
	vec3 32 ssa_24 = fmul ssa_23.xxx, ssa_22
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec3 32 ssa_26 = fmul ssa_25.xxx, ssa_24
	vec3 32 ssa_27 = fsub ssa_20, ssa_26
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	intrinsic store_deref (ssa_28, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_33 = fdot3 ssa_30, ssa_32
	vec1 32 ssa_35 = fmax ssa_33, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec3 32 ssa_38 = fmul ssa_37, ssa_35.xxx
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	intrinsic store_deref (ssa_39, ssa_38) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec3 32 ssa_41 = intrinsic load_deref (ssa_40) (0) /* access=0 */
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec3 32 ssa_43 = intrinsic load_deref (ssa_42) (0) /* access=0 */
	vec1 32 ssa_44 = fdot3 ssa_41, ssa_43
	vec1 32 ssa_46 = fmax ssa_44, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec3 32 ssa_50 = fmul ssa_49, ssa_48.xxx
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	intrinsic store_deref (ssa_51, ssa_50) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec3 32 ssa_53 = intrinsic load_deref (ssa_52) (0) /* access=0 */
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec3 32 ssa_55 = intrinsic load_deref (ssa_54) (0) /* access=0 */
	vec3 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_57 = mov ssa_56.x
	vec1 32 ssa_58 = mov ssa_56.y
	vec1 32 ssa_59 = mov ssa_56.z
	vec4 32 ssa_61 = vec4 ssa_56.x, ssa_56.y, ssa_56.z, ssa_60
	vec1 32 ssa_62 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_62, ssa_61) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_io_to_temporaries
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = fdot3 ssa_1, ssa_1
	vec1 32 ssa_3 = fsqrt ssa_2
	vec3 32 ssa_4 = fdiv ssa_1, ssa_3.xxx
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	intrinsic store_deref (ssa_5, ssa_4) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = fdot3 ssa_7, ssa_7
	vec1 32 ssa_9 = fsqrt ssa_8
	vec3 32 ssa_10 = fdiv ssa_7, ssa_9.xxx
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	intrinsic store_deref (ssa_11, ssa_10) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = fdot3 ssa_13, ssa_13
	vec1 32 ssa_15 = fsqrt ssa_14
	vec3 32 ssa_16 = fdiv ssa_13, ssa_15.xxx
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	intrinsic store_deref (ssa_17, ssa_16) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec3 32 ssa_20 = fneg ssa_19
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = fdot3 ssa_20, ssa_22
	vec3 32 ssa_24 = fmul ssa_23.xxx, ssa_22
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec3 32 ssa_26 = fmul ssa_25.xxx, ssa_24
	vec3 32 ssa_27 = fsub ssa_20, ssa_26
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	intrinsic store_deref (ssa_28, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_33 = fdot3 ssa_30, ssa_32
	vec1 32 ssa_35 = fmax ssa_33, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec3 32 ssa_38 = fmul ssa_37, ssa_35.xxx
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	intrinsic store_deref (ssa_39, ssa_38) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec3 32 ssa_41 = intrinsic load_deref (ssa_40) (0) /* access=0 */
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec3 32 ssa_43 = intrinsic load_deref (ssa_42) (0) /* access=0 */
	vec1 32 ssa_44 = fdot3 ssa_41, ssa_43
	vec1 32 ssa_46 = fmax ssa_44, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec3 32 ssa_50 = fmul ssa_49, ssa_48.xxx
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	intrinsic store_deref (ssa_51, ssa_50) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec3 32 ssa_53 = intrinsic load_deref (ssa_52) (0) /* access=0 */
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec3 32 ssa_55 = intrinsic load_deref (ssa_54) (0) /* access=0 */
	vec3 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_57 = mov ssa_56.x
	vec1 32 ssa_58 = mov ssa_56.y
	vec1 32 ssa_59 = mov ssa_56.z
	vec4 32 ssa_61 = vec4 ssa_56.x, ssa_56.y, ssa_56.z, ssa_60
	vec1 32 ssa_62 = deref_var &out@outFragColor-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_62, ssa_61) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@outFragColor-temp (shader_temp vec4) 
	vec1 32 ssa_64 = deref_var &outFragColor (shader_out vec4) 
	intrinsic copy_deref (ssa_64, ssa_63) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_frexp
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = fdot3 ssa_1, ssa_1
	vec1 32 ssa_3 = fsqrt ssa_2
	vec3 32 ssa_4 = fdiv ssa_1, ssa_3.xxx
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	intrinsic store_deref (ssa_5, ssa_4) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = fdot3 ssa_7, ssa_7
	vec1 32 ssa_9 = fsqrt ssa_8
	vec3 32 ssa_10 = fdiv ssa_7, ssa_9.xxx
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	intrinsic store_deref (ssa_11, ssa_10) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = fdot3 ssa_13, ssa_13
	vec1 32 ssa_15 = fsqrt ssa_14
	vec3 32 ssa_16 = fdiv ssa_13, ssa_15.xxx
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	intrinsic store_deref (ssa_17, ssa_16) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec3 32 ssa_20 = fneg ssa_19
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = fdot3 ssa_20, ssa_22
	vec3 32 ssa_24 = fmul ssa_23.xxx, ssa_22
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec3 32 ssa_26 = fmul ssa_25.xxx, ssa_24
	vec3 32 ssa_27 = fsub ssa_20, ssa_26
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	intrinsic store_deref (ssa_28, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_33 = fdot3 ssa_30, ssa_32
	vec1 32 ssa_35 = fmax ssa_33, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec3 32 ssa_38 = fmul ssa_37, ssa_35.xxx
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	intrinsic store_deref (ssa_39, ssa_38) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec3 32 ssa_41 = intrinsic load_deref (ssa_40) (0) /* access=0 */
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec3 32 ssa_43 = intrinsic load_deref (ssa_42) (0) /* access=0 */
	vec1 32 ssa_44 = fdot3 ssa_41, ssa_43
	vec1 32 ssa_46 = fmax ssa_44, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec3 32 ssa_50 = fmul ssa_49, ssa_48.xxx
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	intrinsic store_deref (ssa_51, ssa_50) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec3 32 ssa_53 = intrinsic load_deref (ssa_52) (0) /* access=0 */
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec3 32 ssa_55 = intrinsic load_deref (ssa_54) (0) /* access=0 */
	vec3 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_57 = mov ssa_56.x
	vec1 32 ssa_58 = mov ssa_56.y
	vec1 32 ssa_59 = mov ssa_56.z
	vec4 32 ssa_61 = vec4 ssa_56.x, ssa_56.y, ssa_56.z, ssa_60
	vec1 32 ssa_62 = deref_var &out@outFragColor-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_62, ssa_61) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@outFragColor-temp (shader_temp vec4) 
	vec1 32 ssa_64 = deref_var &outFragColor (shader_out vec4) 
	intrinsic copy_deref (ssa_64, ssa_63) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_alu_to_scalar
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_65 = fmul ssa_1.x, ssa_1.x
	vec1 32 ssa_66 = fmul ssa_1.y, ssa_1.y
	vec1 32 ssa_67 = fadd ssa_65, ssa_66
	vec1 32 ssa_68 = fmul ssa_1.z, ssa_1.z
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_3 = fsqrt ssa_69
	vec1 32 ssa_70 = fdiv ssa_1.x, ssa_3
	vec1 32 ssa_71 = fdiv ssa_1.y, ssa_3
	vec1 32 ssa_72 = fdiv ssa_1.z, ssa_3
	vec3 32 ssa_73 = vec3 ssa_70, ssa_71, ssa_72
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	intrinsic store_deref (ssa_5, ssa_73) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_74 = fmul ssa_7.x, ssa_7.x
	vec1 32 ssa_75 = fmul ssa_7.y, ssa_7.y
	vec1 32 ssa_76 = fadd ssa_74, ssa_75
	vec1 32 ssa_77 = fmul ssa_7.z, ssa_7.z
	vec1 32 ssa_78 = fadd ssa_76, ssa_77
	vec1 32 ssa_9 = fsqrt ssa_78
	vec1 32 ssa_79 = fdiv ssa_7.x, ssa_9
	vec1 32 ssa_80 = fdiv ssa_7.y, ssa_9
	vec1 32 ssa_81 = fdiv ssa_7.z, ssa_9
	vec3 32 ssa_82 = vec3 ssa_79, ssa_80, ssa_81
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	intrinsic store_deref (ssa_11, ssa_82) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_83 = fmul ssa_13.x, ssa_13.x
	vec1 32 ssa_84 = fmul ssa_13.y, ssa_13.y
	vec1 32 ssa_85 = fadd ssa_83, ssa_84
	vec1 32 ssa_86 = fmul ssa_13.z, ssa_13.z
	vec1 32 ssa_87 = fadd ssa_85, ssa_86
	vec1 32 ssa_15 = fsqrt ssa_87
	vec1 32 ssa_88 = fdiv ssa_13.x, ssa_15
	vec1 32 ssa_89 = fdiv ssa_13.y, ssa_15
	vec1 32 ssa_90 = fdiv ssa_13.z, ssa_15
	vec3 32 ssa_91 = vec3 ssa_88, ssa_89, ssa_90
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	intrinsic store_deref (ssa_17, ssa_91) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec1 32 ssa_92 = fneg ssa_19.x
	vec1 32 ssa_93 = fneg ssa_19.y
	vec1 32 ssa_94 = fneg ssa_19.z
	vec3 32 ssa_95 = vec3 ssa_92, ssa_93, ssa_94
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_96 = fmul ssa_95.x, ssa_22.x
	vec1 32 ssa_97 = fmul ssa_95.y, ssa_22.y
	vec1 32 ssa_98 = fadd ssa_96, ssa_97
	vec1 32 ssa_99 = fmul ssa_95.z, ssa_22.z
	vec1 32 ssa_100 = fadd ssa_98, ssa_99
	vec1 32 ssa_101 = fmul ssa_100, ssa_22.x
	vec1 32 ssa_102 = fmul ssa_100, ssa_22.y
	vec1 32 ssa_103 = fmul ssa_100, ssa_22.z
	vec3 32 ssa_104 = vec3 ssa_101, ssa_102, ssa_103
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_105 = fmul ssa_25, ssa_104.x
	vec1 32 ssa_106 = fmul ssa_25, ssa_104.y
	vec1 32 ssa_107 = fmul ssa_25, ssa_104.z
	vec3 32 ssa_108 = vec3 ssa_105, ssa_106, ssa_107
	vec1 32 ssa_109 = fsub ssa_95.x, ssa_108.x
	vec1 32 ssa_110 = fsub ssa_95.y, ssa_108.y
	vec1 32 ssa_111 = fsub ssa_95.z, ssa_108.z
	vec3 32 ssa_112 = vec3 ssa_109, ssa_110, ssa_111
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	intrinsic store_deref (ssa_28, ssa_112) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_113 = fmul ssa_30.x, ssa_32.x
	vec1 32 ssa_114 = fmul ssa_30.y, ssa_32.y
	vec1 32 ssa_115 = fadd ssa_113, ssa_114
	vec1 32 ssa_116 = fmul ssa_30.z, ssa_32.z
	vec1 32 ssa_117 = fadd ssa_115, ssa_116
	vec1 32 ssa_35 = fmax ssa_117, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec1 32 ssa_118 = fmul ssa_37.x, ssa_35
	vec1 32 ssa_119 = fmul ssa_37.y, ssa_35
	vec1 32 ssa_120 = fmul ssa_37.z, ssa_35
	vec3 32 ssa_121 = vec3 ssa_118, ssa_119, ssa_120
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	intrinsic store_deref (ssa_39, ssa_121) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec3 32 ssa_41 = intrinsic load_deref (ssa_40) (0) /* access=0 */
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec3 32 ssa_43 = intrinsic load_deref (ssa_42) (0) /* access=0 */
	vec1 32 ssa_122 = fmul ssa_41.x, ssa_43.x
	vec1 32 ssa_123 = fmul ssa_41.y, ssa_43.y
	vec1 32 ssa_124 = fadd ssa_122, ssa_123
	vec1 32 ssa_125 = fmul ssa_41.z, ssa_43.z
	vec1 32 ssa_126 = fadd ssa_124, ssa_125
	vec1 32 ssa_46 = fmax ssa_126, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec1 32 ssa_127 = fmul ssa_49.x, ssa_48
	vec1 32 ssa_128 = fmul ssa_49.y, ssa_48
	vec1 32 ssa_129 = fmul ssa_49.z, ssa_48
	vec3 32 ssa_130 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	intrinsic store_deref (ssa_51, ssa_130) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec3 32 ssa_53 = intrinsic load_deref (ssa_52) (0) /* access=0 */
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec3 32 ssa_55 = intrinsic load_deref (ssa_54) (0) /* access=0 */
	vec1 32 ssa_131 = fadd ssa_53.x, ssa_55.x
	vec1 32 ssa_132 = fadd ssa_53.y, ssa_55.y
	vec1 32 ssa_133 = fadd ssa_53.z, ssa_55.z
	vec3 32 ssa_134 = vec3 ssa_131, ssa_132, ssa_133
	vec1 32 ssa_57 = mov ssa_134.x
	vec1 32 ssa_58 = mov ssa_134.y
	vec1 32 ssa_59 = mov ssa_134.z
	vec4 32 ssa_61 = vec4 ssa_134.x, ssa_134.y, ssa_134.z, ssa_60
	vec1 32 ssa_62 = deref_var &out@outFragColor-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_62, ssa_61) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@outFragColor-temp (shader_temp vec4) 
	vec1 32 ssa_64 = deref_var &outFragColor (shader_out vec4) 
	intrinsic copy_deref (ssa_64, ssa_63) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_tex
nir_normalize_cubemap_coords
nir_lower_global_vars_to_local
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_65 = fmul ssa_1.x, ssa_1.x
	vec1 32 ssa_66 = fmul ssa_1.y, ssa_1.y
	vec1 32 ssa_67 = fadd ssa_65, ssa_66
	vec1 32 ssa_68 = fmul ssa_1.z, ssa_1.z
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_3 = fsqrt ssa_69
	vec1 32 ssa_70 = fdiv ssa_1.x, ssa_3
	vec1 32 ssa_71 = fdiv ssa_1.y, ssa_3
	vec1 32 ssa_72 = fdiv ssa_1.z, ssa_3
	vec3 32 ssa_73 = vec3 ssa_70, ssa_71, ssa_72
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	intrinsic store_deref (ssa_5, ssa_73) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_74 = fmul ssa_7.x, ssa_7.x
	vec1 32 ssa_75 = fmul ssa_7.y, ssa_7.y
	vec1 32 ssa_76 = fadd ssa_74, ssa_75
	vec1 32 ssa_77 = fmul ssa_7.z, ssa_7.z
	vec1 32 ssa_78 = fadd ssa_76, ssa_77
	vec1 32 ssa_9 = fsqrt ssa_78
	vec1 32 ssa_79 = fdiv ssa_7.x, ssa_9
	vec1 32 ssa_80 = fdiv ssa_7.y, ssa_9
	vec1 32 ssa_81 = fdiv ssa_7.z, ssa_9
	vec3 32 ssa_82 = vec3 ssa_79, ssa_80, ssa_81
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	intrinsic store_deref (ssa_11, ssa_82) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_83 = fmul ssa_13.x, ssa_13.x
	vec1 32 ssa_84 = fmul ssa_13.y, ssa_13.y
	vec1 32 ssa_85 = fadd ssa_83, ssa_84
	vec1 32 ssa_86 = fmul ssa_13.z, ssa_13.z
	vec1 32 ssa_87 = fadd ssa_85, ssa_86
	vec1 32 ssa_15 = fsqrt ssa_87
	vec1 32 ssa_88 = fdiv ssa_13.x, ssa_15
	vec1 32 ssa_89 = fdiv ssa_13.y, ssa_15
	vec1 32 ssa_90 = fdiv ssa_13.z, ssa_15
	vec3 32 ssa_91 = vec3 ssa_88, ssa_89, ssa_90
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	intrinsic store_deref (ssa_17, ssa_91) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec1 32 ssa_92 = fneg ssa_19.x
	vec1 32 ssa_93 = fneg ssa_19.y
	vec1 32 ssa_94 = fneg ssa_19.z
	vec3 32 ssa_95 = vec3 ssa_92, ssa_93, ssa_94
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_96 = fmul ssa_95.x, ssa_22.x
	vec1 32 ssa_97 = fmul ssa_95.y, ssa_22.y
	vec1 32 ssa_98 = fadd ssa_96, ssa_97
	vec1 32 ssa_99 = fmul ssa_95.z, ssa_22.z
	vec1 32 ssa_100 = fadd ssa_98, ssa_99
	vec1 32 ssa_101 = fmul ssa_100, ssa_22.x
	vec1 32 ssa_102 = fmul ssa_100, ssa_22.y
	vec1 32 ssa_103 = fmul ssa_100, ssa_22.z
	vec3 32 ssa_104 = vec3 ssa_101, ssa_102, ssa_103
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_105 = fmul ssa_25, ssa_104.x
	vec1 32 ssa_106 = fmul ssa_25, ssa_104.y
	vec1 32 ssa_107 = fmul ssa_25, ssa_104.z
	vec3 32 ssa_108 = vec3 ssa_105, ssa_106, ssa_107
	vec1 32 ssa_109 = fsub ssa_95.x, ssa_108.x
	vec1 32 ssa_110 = fsub ssa_95.y, ssa_108.y
	vec1 32 ssa_111 = fsub ssa_95.z, ssa_108.z
	vec3 32 ssa_112 = vec3 ssa_109, ssa_110, ssa_111
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	intrinsic store_deref (ssa_28, ssa_112) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_113 = fmul ssa_30.x, ssa_32.x
	vec1 32 ssa_114 = fmul ssa_30.y, ssa_32.y
	vec1 32 ssa_115 = fadd ssa_113, ssa_114
	vec1 32 ssa_116 = fmul ssa_30.z, ssa_32.z
	vec1 32 ssa_117 = fadd ssa_115, ssa_116
	vec1 32 ssa_35 = fmax ssa_117, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec1 32 ssa_118 = fmul ssa_37.x, ssa_35
	vec1 32 ssa_119 = fmul ssa_37.y, ssa_35
	vec1 32 ssa_120 = fmul ssa_37.z, ssa_35
	vec3 32 ssa_121 = vec3 ssa_118, ssa_119, ssa_120
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	intrinsic store_deref (ssa_39, ssa_121) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec3 32 ssa_41 = intrinsic load_deref (ssa_40) (0) /* access=0 */
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec3 32 ssa_43 = intrinsic load_deref (ssa_42) (0) /* access=0 */
	vec1 32 ssa_122 = fmul ssa_41.x, ssa_43.x
	vec1 32 ssa_123 = fmul ssa_41.y, ssa_43.y
	vec1 32 ssa_124 = fadd ssa_122, ssa_123
	vec1 32 ssa_125 = fmul ssa_41.z, ssa_43.z
	vec1 32 ssa_126 = fadd ssa_124, ssa_125
	vec1 32 ssa_46 = fmax ssa_126, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec1 32 ssa_127 = fmul ssa_49.x, ssa_48
	vec1 32 ssa_128 = fmul ssa_49.y, ssa_48
	vec1 32 ssa_129 = fmul ssa_49.z, ssa_48
	vec3 32 ssa_130 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	intrinsic store_deref (ssa_51, ssa_130) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec3 32 ssa_53 = intrinsic load_deref (ssa_52) (0) /* access=0 */
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec3 32 ssa_55 = intrinsic load_deref (ssa_54) (0) /* access=0 */
	vec1 32 ssa_131 = fadd ssa_53.x, ssa_55.x
	vec1 32 ssa_132 = fadd ssa_53.y, ssa_55.y
	vec1 32 ssa_133 = fadd ssa_53.z, ssa_55.z
	vec3 32 ssa_134 = vec3 ssa_131, ssa_132, ssa_133
	vec1 32 ssa_57 = mov ssa_134.x
	vec1 32 ssa_58 = mov ssa_134.y
	vec1 32 ssa_59 = mov ssa_134.z
	vec4 32 ssa_61 = vec4 ssa_134.x, ssa_134.y, ssa_134.z, ssa_60
	vec1 32 ssa_62 = deref_var &out@outFragColor-temp (function_temp vec4) 
	intrinsic store_deref (ssa_62, ssa_61) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &outFragColor (shader_out vec4) 
	intrinsic copy_deref (ssa_64, ssa_63) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_var_copies
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_65 = fmul ssa_1.x, ssa_1.x
	vec1 32 ssa_66 = fmul ssa_1.y, ssa_1.y
	vec1 32 ssa_67 = fadd ssa_65, ssa_66
	vec1 32 ssa_68 = fmul ssa_1.z, ssa_1.z
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_3 = fsqrt ssa_69
	vec1 32 ssa_70 = fdiv ssa_1.x, ssa_3
	vec1 32 ssa_71 = fdiv ssa_1.y, ssa_3
	vec1 32 ssa_72 = fdiv ssa_1.z, ssa_3
	vec3 32 ssa_73 = vec3 ssa_70, ssa_71, ssa_72
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	intrinsic store_deref (ssa_5, ssa_73) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_74 = fmul ssa_7.x, ssa_7.x
	vec1 32 ssa_75 = fmul ssa_7.y, ssa_7.y
	vec1 32 ssa_76 = fadd ssa_74, ssa_75
	vec1 32 ssa_77 = fmul ssa_7.z, ssa_7.z
	vec1 32 ssa_78 = fadd ssa_76, ssa_77
	vec1 32 ssa_9 = fsqrt ssa_78
	vec1 32 ssa_79 = fdiv ssa_7.x, ssa_9
	vec1 32 ssa_80 = fdiv ssa_7.y, ssa_9
	vec1 32 ssa_81 = fdiv ssa_7.z, ssa_9
	vec3 32 ssa_82 = vec3 ssa_79, ssa_80, ssa_81
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	intrinsic store_deref (ssa_11, ssa_82) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_83 = fmul ssa_13.x, ssa_13.x
	vec1 32 ssa_84 = fmul ssa_13.y, ssa_13.y
	vec1 32 ssa_85 = fadd ssa_83, ssa_84
	vec1 32 ssa_86 = fmul ssa_13.z, ssa_13.z
	vec1 32 ssa_87 = fadd ssa_85, ssa_86
	vec1 32 ssa_15 = fsqrt ssa_87
	vec1 32 ssa_88 = fdiv ssa_13.x, ssa_15
	vec1 32 ssa_89 = fdiv ssa_13.y, ssa_15
	vec1 32 ssa_90 = fdiv ssa_13.z, ssa_15
	vec3 32 ssa_91 = vec3 ssa_88, ssa_89, ssa_90
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	intrinsic store_deref (ssa_17, ssa_91) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec1 32 ssa_92 = fneg ssa_19.x
	vec1 32 ssa_93 = fneg ssa_19.y
	vec1 32 ssa_94 = fneg ssa_19.z
	vec3 32 ssa_95 = vec3 ssa_92, ssa_93, ssa_94
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_96 = fmul ssa_95.x, ssa_22.x
	vec1 32 ssa_97 = fmul ssa_95.y, ssa_22.y
	vec1 32 ssa_98 = fadd ssa_96, ssa_97
	vec1 32 ssa_99 = fmul ssa_95.z, ssa_22.z
	vec1 32 ssa_100 = fadd ssa_98, ssa_99
	vec1 32 ssa_101 = fmul ssa_100, ssa_22.x
	vec1 32 ssa_102 = fmul ssa_100, ssa_22.y
	vec1 32 ssa_103 = fmul ssa_100, ssa_22.z
	vec3 32 ssa_104 = vec3 ssa_101, ssa_102, ssa_103
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_105 = fmul ssa_25, ssa_104.x
	vec1 32 ssa_106 = fmul ssa_25, ssa_104.y
	vec1 32 ssa_107 = fmul ssa_25, ssa_104.z
	vec3 32 ssa_108 = vec3 ssa_105, ssa_106, ssa_107
	vec1 32 ssa_109 = fsub ssa_95.x, ssa_108.x
	vec1 32 ssa_110 = fsub ssa_95.y, ssa_108.y
	vec1 32 ssa_111 = fsub ssa_95.z, ssa_108.z
	vec3 32 ssa_112 = vec3 ssa_109, ssa_110, ssa_111
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	intrinsic store_deref (ssa_28, ssa_112) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_32 = intrinsic load_deref (ssa_31) (0) /* access=0 */
	vec1 32 ssa_113 = fmul ssa_30.x, ssa_32.x
	vec1 32 ssa_114 = fmul ssa_30.y, ssa_32.y
	vec1 32 ssa_115 = fadd ssa_113, ssa_114
	vec1 32 ssa_116 = fmul ssa_30.z, ssa_32.z
	vec1 32 ssa_117 = fadd ssa_115, ssa_116
	vec1 32 ssa_35 = fmax ssa_117, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec1 32 ssa_118 = fmul ssa_37.x, ssa_35
	vec1 32 ssa_119 = fmul ssa_37.y, ssa_35
	vec1 32 ssa_120 = fmul ssa_37.z, ssa_35
	vec3 32 ssa_121 = vec3 ssa_118, ssa_119, ssa_120
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	intrinsic store_deref (ssa_39, ssa_121) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec3 32 ssa_41 = intrinsic load_deref (ssa_40) (0) /* access=0 */
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec3 32 ssa_43 = intrinsic load_deref (ssa_42) (0) /* access=0 */
	vec1 32 ssa_122 = fmul ssa_41.x, ssa_43.x
	vec1 32 ssa_123 = fmul ssa_41.y, ssa_43.y
	vec1 32 ssa_124 = fadd ssa_122, ssa_123
	vec1 32 ssa_125 = fmul ssa_41.z, ssa_43.z
	vec1 32 ssa_126 = fadd ssa_124, ssa_125
	vec1 32 ssa_46 = fmax ssa_126, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec1 32 ssa_127 = fmul ssa_49.x, ssa_48
	vec1 32 ssa_128 = fmul ssa_49.y, ssa_48
	vec1 32 ssa_129 = fmul ssa_49.z, ssa_48
	vec3 32 ssa_130 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	intrinsic store_deref (ssa_51, ssa_130) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec3 32 ssa_53 = intrinsic load_deref (ssa_52) (0) /* access=0 */
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec3 32 ssa_55 = intrinsic load_deref (ssa_54) (0) /* access=0 */
	vec1 32 ssa_131 = fadd ssa_53.x, ssa_55.x
	vec1 32 ssa_132 = fadd ssa_53.y, ssa_55.y
	vec1 32 ssa_133 = fadd ssa_53.z, ssa_55.z
	vec3 32 ssa_134 = vec3 ssa_131, ssa_132, ssa_133
	vec1 32 ssa_57 = mov ssa_134.x
	vec1 32 ssa_58 = mov ssa_134.y
	vec1 32 ssa_59 = mov ssa_134.z
	vec4 32 ssa_61 = vec4 ssa_134.x, ssa_134.y, ssa_134.z, ssa_60
	vec1 32 ssa_62 = deref_var &out@outFragColor-temp (function_temp vec4) 
	intrinsic store_deref (ssa_62, ssa_61) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_63 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &outFragColor (shader_out vec4) 
	intrinsic copy_deref (ssa_64, ssa_63) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_struct_vars
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_65 = fmul ssa_1.x, ssa_1.x
	vec1 32 ssa_66 = fmul ssa_1.y, ssa_1.y
	vec1 32 ssa_67 = fadd ssa_65, ssa_66
	vec1 32 ssa_68 = fmul ssa_1.z, ssa_1.z
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_3 = fsqrt ssa_69
	vec1 32 ssa_70 = fdiv ssa_1.x, ssa_3
	vec1 32 ssa_71 = fdiv ssa_1.y, ssa_3
	vec1 32 ssa_72 = fdiv ssa_1.z, ssa_3
	vec3 32 ssa_73 = vec3 ssa_70, ssa_71, ssa_72
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_74 = fmul ssa_7.x, ssa_7.x
	vec1 32 ssa_75 = fmul ssa_7.y, ssa_7.y
	vec1 32 ssa_76 = fadd ssa_74, ssa_75
	vec1 32 ssa_77 = fmul ssa_7.z, ssa_7.z
	vec1 32 ssa_78 = fadd ssa_76, ssa_77
	vec1 32 ssa_9 = fsqrt ssa_78
	vec1 32 ssa_79 = fdiv ssa_7.x, ssa_9
	vec1 32 ssa_80 = fdiv ssa_7.y, ssa_9
	vec1 32 ssa_81 = fdiv ssa_7.z, ssa_9
	vec3 32 ssa_82 = vec3 ssa_79, ssa_80, ssa_81
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_83 = fmul ssa_13.x, ssa_13.x
	vec1 32 ssa_84 = fmul ssa_13.y, ssa_13.y
	vec1 32 ssa_85 = fadd ssa_83, ssa_84
	vec1 32 ssa_86 = fmul ssa_13.z, ssa_13.z
	vec1 32 ssa_87 = fadd ssa_85, ssa_86
	vec1 32 ssa_15 = fsqrt ssa_87
	vec1 32 ssa_88 = fdiv ssa_13.x, ssa_15
	vec1 32 ssa_89 = fdiv ssa_13.y, ssa_15
	vec1 32 ssa_90 = fdiv ssa_13.z, ssa_15
	vec3 32 ssa_91 = vec3 ssa_88, ssa_89, ssa_90
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_136 = mov ssa_82
	vec1 32 ssa_92 = fneg ssa_136.x
	vec1 32 ssa_93 = fneg ssa_136.y
	vec1 32 ssa_94 = fneg ssa_136.z
	vec3 32 ssa_95 = vec3 ssa_92, ssa_93, ssa_94
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_137 = mov ssa_73
	vec1 32 ssa_96 = fmul ssa_95.x, ssa_137.x
	vec1 32 ssa_97 = fmul ssa_95.y, ssa_137.y
	vec1 32 ssa_98 = fadd ssa_96, ssa_97
	vec1 32 ssa_99 = fmul ssa_95.z, ssa_137.z
	vec1 32 ssa_100 = fadd ssa_98, ssa_99
	vec1 32 ssa_101 = fmul ssa_100, ssa_137.x
	vec1 32 ssa_102 = fmul ssa_100, ssa_137.y
	vec1 32 ssa_103 = fmul ssa_100, ssa_137.z
	vec3 32 ssa_104 = vec3 ssa_101, ssa_102, ssa_103
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_105 = fmul ssa_25, ssa_104.x
	vec1 32 ssa_106 = fmul ssa_25, ssa_104.y
	vec1 32 ssa_107 = fmul ssa_25, ssa_104.z
	vec3 32 ssa_108 = vec3 ssa_105, ssa_106, ssa_107
	vec1 32 ssa_109 = fsub ssa_95.x, ssa_108.x
	vec1 32 ssa_110 = fsub ssa_95.y, ssa_108.y
	vec1 32 ssa_111 = fsub ssa_95.z, ssa_108.z
	vec3 32 ssa_112 = vec3 ssa_109, ssa_110, ssa_111
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec3 32 ssa_138 = mov ssa_73
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec3 32 ssa_139 = mov ssa_82
	vec1 32 ssa_113 = fmul ssa_138.x, ssa_139.x
	vec1 32 ssa_114 = fmul ssa_138.y, ssa_139.y
	vec1 32 ssa_115 = fadd ssa_113, ssa_114
	vec1 32 ssa_116 = fmul ssa_138.z, ssa_139.z
	vec1 32 ssa_117 = fadd ssa_115, ssa_116
	vec1 32 ssa_35 = fmax ssa_117, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec1 32 ssa_118 = fmul ssa_37.x, ssa_35
	vec1 32 ssa_119 = fmul ssa_37.y, ssa_35
	vec1 32 ssa_120 = fmul ssa_37.z, ssa_35
	vec3 32 ssa_121 = vec3 ssa_118, ssa_119, ssa_120
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec3 32 ssa_140 = mov ssa_112
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec3 32 ssa_141 = mov ssa_91
	vec1 32 ssa_122 = fmul ssa_140.x, ssa_141.x
	vec1 32 ssa_123 = fmul ssa_140.y, ssa_141.y
	vec1 32 ssa_124 = fadd ssa_122, ssa_123
	vec1 32 ssa_125 = fmul ssa_140.z, ssa_141.z
	vec1 32 ssa_126 = fadd ssa_124, ssa_125
	vec1 32 ssa_46 = fmax ssa_126, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec1 32 ssa_127 = fmul ssa_49.x, ssa_48
	vec1 32 ssa_128 = fmul ssa_49.y, ssa_48
	vec1 32 ssa_129 = fmul ssa_49.z, ssa_48
	vec3 32 ssa_130 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec3 32 ssa_142 = mov ssa_121
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec3 32 ssa_143 = mov ssa_130
	vec1 32 ssa_131 = fadd ssa_142.x, ssa_143.x
	vec1 32 ssa_132 = fadd ssa_142.y, ssa_143.y
	vec1 32 ssa_133 = fadd ssa_142.z, ssa_143.z
	vec3 32 ssa_134 = vec3 ssa_131, ssa_132, ssa_133
	vec1 32 ssa_57 = mov ssa_134.x
	vec1 32 ssa_58 = mov ssa_134.y
	vec1 32 ssa_59 = mov ssa_134.z
	vec4 32 ssa_61 = vec4 ssa_134.x, ssa_134.y, ssa_134.z, ssa_60
	vec1 32 ssa_62 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_63 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_144 = mov ssa_61
	intrinsic store_deref (ssa_64, ssa_144) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_65 = fmul ssa_1.x, ssa_1.x
	vec1 32 ssa_66 = fmul ssa_1.y, ssa_1.y
	vec1 32 ssa_67 = fadd ssa_65, ssa_66
	vec1 32 ssa_68 = fmul ssa_1.z, ssa_1.z
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_3 = fsqrt ssa_69
	vec1 32 ssa_70 = fdiv ssa_1.x, ssa_3
	vec1 32 ssa_71 = fdiv ssa_1.y, ssa_3
	vec1 32 ssa_72 = fdiv ssa_1.z, ssa_3
	vec3 32 ssa_73 = vec3 ssa_70, ssa_71, ssa_72
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_74 = fmul ssa_7.x, ssa_7.x
	vec1 32 ssa_75 = fmul ssa_7.y, ssa_7.y
	vec1 32 ssa_76 = fadd ssa_74, ssa_75
	vec1 32 ssa_77 = fmul ssa_7.z, ssa_7.z
	vec1 32 ssa_78 = fadd ssa_76, ssa_77
	vec1 32 ssa_9 = fsqrt ssa_78
	vec1 32 ssa_79 = fdiv ssa_7.x, ssa_9
	vec1 32 ssa_80 = fdiv ssa_7.y, ssa_9
	vec1 32 ssa_81 = fdiv ssa_7.z, ssa_9
	vec3 32 ssa_82 = vec3 ssa_79, ssa_80, ssa_81
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_83 = fmul ssa_13.x, ssa_13.x
	vec1 32 ssa_84 = fmul ssa_13.y, ssa_13.y
	vec1 32 ssa_85 = fadd ssa_83, ssa_84
	vec1 32 ssa_86 = fmul ssa_13.z, ssa_13.z
	vec1 32 ssa_87 = fadd ssa_85, ssa_86
	vec1 32 ssa_15 = fsqrt ssa_87
	vec1 32 ssa_88 = fdiv ssa_13.x, ssa_15
	vec1 32 ssa_89 = fdiv ssa_13.y, ssa_15
	vec1 32 ssa_90 = fdiv ssa_13.z, ssa_15
	vec3 32 ssa_91 = vec3 ssa_88, ssa_89, ssa_90
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec1 32 ssa_145 = mov ssa_82.x
	vec1 32 ssa_146 = mov ssa_82.y
	vec1 32 ssa_147 = mov ssa_82.z
	vec3 32 ssa_148 = vec3 ssa_145, ssa_146, ssa_147
	vec1 32 ssa_92 = fneg ssa_148.x
	vec1 32 ssa_93 = fneg ssa_148.y
	vec1 32 ssa_94 = fneg ssa_148.z
	vec3 32 ssa_95 = vec3 ssa_92, ssa_93, ssa_94
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec1 32 ssa_149 = mov ssa_73.x
	vec1 32 ssa_150 = mov ssa_73.y
	vec1 32 ssa_151 = mov ssa_73.z
	vec3 32 ssa_152 = vec3 ssa_149, ssa_150, ssa_151
	vec1 32 ssa_96 = fmul ssa_95.x, ssa_152.x
	vec1 32 ssa_97 = fmul ssa_95.y, ssa_152.y
	vec1 32 ssa_98 = fadd ssa_96, ssa_97
	vec1 32 ssa_99 = fmul ssa_95.z, ssa_152.z
	vec1 32 ssa_100 = fadd ssa_98, ssa_99
	vec1 32 ssa_101 = fmul ssa_100, ssa_152.x
	vec1 32 ssa_102 = fmul ssa_100, ssa_152.y
	vec1 32 ssa_103 = fmul ssa_100, ssa_152.z
	vec3 32 ssa_104 = vec3 ssa_101, ssa_102, ssa_103
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_105 = fmul ssa_25, ssa_104.x
	vec1 32 ssa_106 = fmul ssa_25, ssa_104.y
	vec1 32 ssa_107 = fmul ssa_25, ssa_104.z
	vec3 32 ssa_108 = vec3 ssa_105, ssa_106, ssa_107
	vec1 32 ssa_109 = fsub ssa_95.x, ssa_108.x
	vec1 32 ssa_110 = fsub ssa_95.y, ssa_108.y
	vec1 32 ssa_111 = fsub ssa_95.z, ssa_108.z
	vec3 32 ssa_112 = vec3 ssa_109, ssa_110, ssa_111
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec1 32 ssa_153 = mov ssa_73.x
	vec1 32 ssa_154 = mov ssa_73.y
	vec1 32 ssa_155 = mov ssa_73.z
	vec3 32 ssa_156 = vec3 ssa_153, ssa_154, ssa_155
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec1 32 ssa_157 = mov ssa_82.x
	vec1 32 ssa_158 = mov ssa_82.y
	vec1 32 ssa_159 = mov ssa_82.z
	vec3 32 ssa_160 = vec3 ssa_157, ssa_158, ssa_159
	vec1 32 ssa_113 = fmul ssa_156.x, ssa_160.x
	vec1 32 ssa_114 = fmul ssa_156.y, ssa_160.y
	vec1 32 ssa_115 = fadd ssa_113, ssa_114
	vec1 32 ssa_116 = fmul ssa_156.z, ssa_160.z
	vec1 32 ssa_117 = fadd ssa_115, ssa_116
	vec1 32 ssa_35 = fmax ssa_117, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec1 32 ssa_118 = fmul ssa_37.x, ssa_35
	vec1 32 ssa_119 = fmul ssa_37.y, ssa_35
	vec1 32 ssa_120 = fmul ssa_37.z, ssa_35
	vec3 32 ssa_121 = vec3 ssa_118, ssa_119, ssa_120
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec1 32 ssa_161 = mov ssa_112.x
	vec1 32 ssa_162 = mov ssa_112.y
	vec1 32 ssa_163 = mov ssa_112.z
	vec3 32 ssa_164 = vec3 ssa_161, ssa_162, ssa_163
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec1 32 ssa_165 = mov ssa_91.x
	vec1 32 ssa_166 = mov ssa_91.y
	vec1 32 ssa_167 = mov ssa_91.z
	vec3 32 ssa_168 = vec3 ssa_165, ssa_166, ssa_167
	vec1 32 ssa_122 = fmul ssa_164.x, ssa_168.x
	vec1 32 ssa_123 = fmul ssa_164.y, ssa_168.y
	vec1 32 ssa_124 = fadd ssa_122, ssa_123
	vec1 32 ssa_125 = fmul ssa_164.z, ssa_168.z
	vec1 32 ssa_126 = fadd ssa_124, ssa_125
	vec1 32 ssa_46 = fmax ssa_126, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec1 32 ssa_127 = fmul ssa_49.x, ssa_48
	vec1 32 ssa_128 = fmul ssa_49.y, ssa_48
	vec1 32 ssa_129 = fmul ssa_49.z, ssa_48
	vec3 32 ssa_130 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec1 32 ssa_169 = mov ssa_121.x
	vec1 32 ssa_170 = mov ssa_121.y
	vec1 32 ssa_171 = mov ssa_121.z
	vec3 32 ssa_172 = vec3 ssa_169, ssa_170, ssa_171
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec1 32 ssa_173 = mov ssa_130.x
	vec1 32 ssa_174 = mov ssa_130.y
	vec1 32 ssa_175 = mov ssa_130.z
	vec3 32 ssa_176 = vec3 ssa_173, ssa_174, ssa_175
	vec1 32 ssa_131 = fadd ssa_172.x, ssa_176.x
	vec1 32 ssa_132 = fadd ssa_172.y, ssa_176.y
	vec1 32 ssa_133 = fadd ssa_172.z, ssa_176.z
	vec3 32 ssa_134 = vec3 ssa_131, ssa_132, ssa_133
	vec1 32 ssa_57 = mov ssa_134.x
	vec1 32 ssa_58 = mov ssa_134.y
	vec1 32 ssa_59 = mov ssa_134.z
	vec4 32 ssa_61 = vec4 ssa_134.x, ssa_134.y, ssa_134.z, ssa_60
	vec1 32 ssa_62 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_63 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &outFragColor (shader_out vec4) 
	vec1 32 ssa_177 = mov ssa_61.x
	vec1 32 ssa_178 = mov ssa_61.y
	vec1 32 ssa_179 = mov ssa_61.z
	vec1 32 ssa_180 = mov ssa_61.w
	vec4 32 ssa_181 = vec4 ssa_177, ssa_178, ssa_179, ssa_180
	intrinsic store_deref (ssa_64, ssa_181) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_copy_prop
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_65 = fmul ssa_1.x, ssa_1.x
	vec1 32 ssa_66 = fmul ssa_1.y, ssa_1.y
	vec1 32 ssa_67 = fadd ssa_65, ssa_66
	vec1 32 ssa_68 = fmul ssa_1.z, ssa_1.z
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_3 = fsqrt ssa_69
	vec1 32 ssa_70 = fdiv ssa_1.x, ssa_3
	vec1 32 ssa_71 = fdiv ssa_1.y, ssa_3
	vec1 32 ssa_72 = fdiv ssa_1.z, ssa_3
	vec3 32 ssa_73 = vec3 ssa_70, ssa_71, ssa_72
	vec1 32 ssa_5 = deref_var &N (function_temp vec3) 
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_74 = fmul ssa_7.x, ssa_7.x
	vec1 32 ssa_75 = fmul ssa_7.y, ssa_7.y
	vec1 32 ssa_76 = fadd ssa_74, ssa_75
	vec1 32 ssa_77 = fmul ssa_7.z, ssa_7.z
	vec1 32 ssa_78 = fadd ssa_76, ssa_77
	vec1 32 ssa_9 = fsqrt ssa_78
	vec1 32 ssa_79 = fdiv ssa_7.x, ssa_9
	vec1 32 ssa_80 = fdiv ssa_7.y, ssa_9
	vec1 32 ssa_81 = fdiv ssa_7.z, ssa_9
	vec3 32 ssa_82 = vec3 ssa_79, ssa_80, ssa_81
	vec1 32 ssa_11 = deref_var &L (function_temp vec3) 
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_83 = fmul ssa_13.x, ssa_13.x
	vec1 32 ssa_84 = fmul ssa_13.y, ssa_13.y
	vec1 32 ssa_85 = fadd ssa_83, ssa_84
	vec1 32 ssa_86 = fmul ssa_13.z, ssa_13.z
	vec1 32 ssa_87 = fadd ssa_85, ssa_86
	vec1 32 ssa_15 = fsqrt ssa_87
	vec1 32 ssa_88 = fdiv ssa_13.x, ssa_15
	vec1 32 ssa_89 = fdiv ssa_13.y, ssa_15
	vec1 32 ssa_90 = fdiv ssa_13.z, ssa_15
	vec3 32 ssa_91 = vec3 ssa_88, ssa_89, ssa_90
	vec1 32 ssa_17 = deref_var &V (function_temp vec3) 
	vec1 32 ssa_18 = deref_var &L (function_temp vec3) 
	vec1 32 ssa_145 = mov ssa_79
	vec1 32 ssa_146 = mov ssa_80
	vec1 32 ssa_147 = mov ssa_81
	vec3 32 ssa_148 = vec3 ssa_79, ssa_80, ssa_81
	vec1 32 ssa_92 = fneg ssa_79
	vec1 32 ssa_93 = fneg ssa_80
	vec1 32 ssa_94 = fneg ssa_81
	vec3 32 ssa_95 = vec3 ssa_92, ssa_93, ssa_94
	vec1 32 ssa_21 = deref_var &N (function_temp vec3) 
	vec1 32 ssa_149 = mov ssa_70
	vec1 32 ssa_150 = mov ssa_71
	vec1 32 ssa_151 = mov ssa_72
	vec3 32 ssa_152 = vec3 ssa_70, ssa_71, ssa_72
	vec1 32 ssa_96 = fmul ssa_92, ssa_70
	vec1 32 ssa_97 = fmul ssa_93, ssa_71
	vec1 32 ssa_98 = fadd ssa_96, ssa_97
	vec1 32 ssa_99 = fmul ssa_94, ssa_72
	vec1 32 ssa_100 = fadd ssa_98, ssa_99
	vec1 32 ssa_101 = fmul ssa_100, ssa_70
	vec1 32 ssa_102 = fmul ssa_100, ssa_71
	vec1 32 ssa_103 = fmul ssa_100, ssa_72
	vec3 32 ssa_104 = vec3 ssa_101, ssa_102, ssa_103
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_105 = fmul ssa_25, ssa_101
	vec1 32 ssa_106 = fmul ssa_25, ssa_102
	vec1 32 ssa_107 = fmul ssa_25, ssa_103
	vec3 32 ssa_108 = vec3 ssa_105, ssa_106, ssa_107
	vec1 32 ssa_109 = fsub ssa_92, ssa_105
	vec1 32 ssa_110 = fsub ssa_93, ssa_106
	vec1 32 ssa_111 = fsub ssa_94, ssa_107
	vec3 32 ssa_112 = vec3 ssa_109, ssa_110, ssa_111
	vec1 32 ssa_28 = deref_var &R (function_temp vec3) 
	vec1 32 ssa_29 = deref_var &N (function_temp vec3) 
	vec1 32 ssa_153 = mov ssa_70
	vec1 32 ssa_154 = mov ssa_71
	vec1 32 ssa_155 = mov ssa_72
	vec3 32 ssa_156 = vec3 ssa_70, ssa_71, ssa_72
	vec1 32 ssa_31 = deref_var &L (function_temp vec3) 
	vec1 32 ssa_157 = mov ssa_79
	vec1 32 ssa_158 = mov ssa_80
	vec1 32 ssa_159 = mov ssa_81
	vec3 32 ssa_160 = vec3 ssa_79, ssa_80, ssa_81
	vec1 32 ssa_113 = fmul ssa_70, ssa_79
	vec1 32 ssa_114 = fmul ssa_71, ssa_80
	vec1 32 ssa_115 = fadd ssa_113, ssa_114
	vec1 32 ssa_116 = fmul ssa_72, ssa_81
	vec1 32 ssa_117 = fadd ssa_115, ssa_116
	vec1 32 ssa_35 = fmax ssa_117, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec1 32 ssa_118 = fmul ssa_37.x, ssa_35
	vec1 32 ssa_119 = fmul ssa_37.y, ssa_35
	vec1 32 ssa_120 = fmul ssa_37.z, ssa_35
	vec3 32 ssa_121 = vec3 ssa_118, ssa_119, ssa_120
	vec1 32 ssa_39 = deref_var &diffuse (function_temp vec3) 
	vec1 32 ssa_40 = deref_var &R (function_temp vec3) 
	vec1 32 ssa_161 = mov ssa_109
	vec1 32 ssa_162 = mov ssa_110
	vec1 32 ssa_163 = mov ssa_111
	vec3 32 ssa_164 = vec3 ssa_109, ssa_110, ssa_111
	vec1 32 ssa_42 = deref_var &V (function_temp vec3) 
	vec1 32 ssa_165 = mov ssa_88
	vec1 32 ssa_166 = mov ssa_89
	vec1 32 ssa_167 = mov ssa_90
	vec3 32 ssa_168 = vec3 ssa_88, ssa_89, ssa_90
	vec1 32 ssa_122 = fmul ssa_109, ssa_88
	vec1 32 ssa_123 = fmul ssa_110, ssa_89
	vec1 32 ssa_124 = fadd ssa_122, ssa_123
	vec1 32 ssa_125 = fmul ssa_111, ssa_90
	vec1 32 ssa_126 = fadd ssa_124, ssa_125
	vec1 32 ssa_46 = fmax ssa_126, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec1 32 ssa_127 = fmul ssa_49.x, ssa_48
	vec1 32 ssa_128 = fmul ssa_49.y, ssa_48
	vec1 32 ssa_129 = fmul ssa_49.z, ssa_48
	vec3 32 ssa_130 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_51 = deref_var &specular (function_temp vec3) 
	vec1 32 ssa_52 = deref_var &diffuse (function_temp vec3) 
	vec1 32 ssa_169 = mov ssa_118
	vec1 32 ssa_170 = mov ssa_119
	vec1 32 ssa_171 = mov ssa_120
	vec3 32 ssa_172 = vec3 ssa_118, ssa_119, ssa_120
	vec1 32 ssa_54 = deref_var &specular (function_temp vec3) 
	vec1 32 ssa_173 = mov ssa_127
	vec1 32 ssa_174 = mov ssa_128
	vec1 32 ssa_175 = mov ssa_129
	vec3 32 ssa_176 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_131 = fadd ssa_118, ssa_127
	vec1 32 ssa_132 = fadd ssa_119, ssa_128
	vec1 32 ssa_133 = fadd ssa_120, ssa_129
	vec3 32 ssa_134 = vec3 ssa_131, ssa_132, ssa_133
	vec1 32 ssa_57 = mov ssa_131
	vec1 32 ssa_58 = mov ssa_132
	vec1 32 ssa_59 = mov ssa_133
	vec4 32 ssa_61 = vec4 ssa_131, ssa_132, ssa_133, ssa_60
	vec1 32 ssa_62 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_63 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_64 = deref_var &outFragColor (shader_out vec4) 
	vec1 32 ssa_177 = mov ssa_131
	vec1 32 ssa_178 = mov ssa_132
	vec1 32 ssa_179 = mov ssa_133
	vec1 32 ssa_180 = mov ssa_60
	vec4 32 ssa_181 = vec4 ssa_131, ssa_132, ssa_133, ssa_60
	intrinsic store_deref (ssa_64, ssa_181) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_34 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_65 = fmul ssa_1.x, ssa_1.x
	vec1 32 ssa_66 = fmul ssa_1.y, ssa_1.y
	vec1 32 ssa_67 = fadd ssa_65, ssa_66
	vec1 32 ssa_68 = fmul ssa_1.z, ssa_1.z
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_3 = fsqrt ssa_69
	vec1 32 ssa_70 = fdiv ssa_1.x, ssa_3
	vec1 32 ssa_71 = fdiv ssa_1.y, ssa_3
	vec1 32 ssa_72 = fdiv ssa_1.z, ssa_3
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_74 = fmul ssa_7.x, ssa_7.x
	vec1 32 ssa_75 = fmul ssa_7.y, ssa_7.y
	vec1 32 ssa_76 = fadd ssa_74, ssa_75
	vec1 32 ssa_77 = fmul ssa_7.z, ssa_7.z
	vec1 32 ssa_78 = fadd ssa_76, ssa_77
	vec1 32 ssa_9 = fsqrt ssa_78
	vec1 32 ssa_79 = fdiv ssa_7.x, ssa_9
	vec1 32 ssa_80 = fdiv ssa_7.y, ssa_9
	vec1 32 ssa_81 = fdiv ssa_7.z, ssa_9
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_83 = fmul ssa_13.x, ssa_13.x
	vec1 32 ssa_84 = fmul ssa_13.y, ssa_13.y
	vec1 32 ssa_85 = fadd ssa_83, ssa_84
	vec1 32 ssa_86 = fmul ssa_13.z, ssa_13.z
	vec1 32 ssa_87 = fadd ssa_85, ssa_86
	vec1 32 ssa_15 = fsqrt ssa_87
	vec1 32 ssa_88 = fdiv ssa_13.x, ssa_15
	vec1 32 ssa_89 = fdiv ssa_13.y, ssa_15
	vec1 32 ssa_90 = fdiv ssa_13.z, ssa_15
	vec1 32 ssa_92 = fneg ssa_79
	vec1 32 ssa_93 = fneg ssa_80
	vec1 32 ssa_94 = fneg ssa_81
	vec1 32 ssa_96 = fmul ssa_92, ssa_70
	vec1 32 ssa_97 = fmul ssa_93, ssa_71
	vec1 32 ssa_98 = fadd ssa_96, ssa_97
	vec1 32 ssa_99 = fmul ssa_94, ssa_72
	vec1 32 ssa_100 = fadd ssa_98, ssa_99
	vec1 32 ssa_101 = fmul ssa_100, ssa_70
	vec1 32 ssa_102 = fmul ssa_100, ssa_71
	vec1 32 ssa_103 = fmul ssa_100, ssa_72
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_105 = fmul ssa_25, ssa_101
	vec1 32 ssa_106 = fmul ssa_25, ssa_102
	vec1 32 ssa_107 = fmul ssa_25, ssa_103
	vec1 32 ssa_109 = fsub ssa_92, ssa_105
	vec1 32 ssa_110 = fsub ssa_93, ssa_106
	vec1 32 ssa_111 = fsub ssa_94, ssa_107
	vec1 32 ssa_113 = fmul ssa_70, ssa_79
	vec1 32 ssa_114 = fmul ssa_71, ssa_80
	vec1 32 ssa_115 = fadd ssa_113, ssa_114
	vec1 32 ssa_116 = fmul ssa_72, ssa_81
	vec1 32 ssa_117 = fadd ssa_115, ssa_116
	vec1 32 ssa_35 = fmax ssa_117, ssa_34
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec1 32 ssa_118 = fmul ssa_37.x, ssa_35
	vec1 32 ssa_119 = fmul ssa_37.y, ssa_35
	vec1 32 ssa_120 = fmul ssa_37.z, ssa_35
	vec1 32 ssa_122 = fmul ssa_109, ssa_88
	vec1 32 ssa_123 = fmul ssa_110, ssa_89
	vec1 32 ssa_124 = fadd ssa_122, ssa_123
	vec1 32 ssa_125 = fmul ssa_111, ssa_90
	vec1 32 ssa_126 = fadd ssa_124, ssa_125
	vec1 32 ssa_46 = fmax ssa_126, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec1 32 ssa_127 = fmul ssa_49.x, ssa_48
	vec1 32 ssa_128 = fmul ssa_49.y, ssa_48
	vec1 32 ssa_129 = fmul ssa_49.z, ssa_48
	vec1 32 ssa_131 = fadd ssa_118, ssa_127
	vec1 32 ssa_132 = fadd ssa_119, ssa_128
	vec1 32 ssa_133 = fadd ssa_120, ssa_129
	vec1 32 ssa_64 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_181 = vec4 ssa_131, ssa_132, ssa_133, ssa_60
	intrinsic store_deref (ssa_64, ssa_181) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_65 = fmul ssa_1.x, ssa_1.x
	vec1 32 ssa_66 = fmul ssa_1.y, ssa_1.y
	vec1 32 ssa_67 = fadd ssa_65, ssa_66
	vec1 32 ssa_68 = fmul ssa_1.z, ssa_1.z
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_3 = fsqrt ssa_69
	vec1 32 ssa_70 = fdiv ssa_1.x, ssa_3
	vec1 32 ssa_71 = fdiv ssa_1.y, ssa_3
	vec1 32 ssa_72 = fdiv ssa_1.z, ssa_3
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_74 = fmul ssa_7.x, ssa_7.x
	vec1 32 ssa_75 = fmul ssa_7.y, ssa_7.y
	vec1 32 ssa_76 = fadd ssa_74, ssa_75
	vec1 32 ssa_77 = fmul ssa_7.z, ssa_7.z
	vec1 32 ssa_78 = fadd ssa_76, ssa_77
	vec1 32 ssa_9 = fsqrt ssa_78
	vec1 32 ssa_79 = fdiv ssa_7.x, ssa_9
	vec1 32 ssa_80 = fdiv ssa_7.y, ssa_9
	vec1 32 ssa_81 = fdiv ssa_7.z, ssa_9
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_83 = fmul ssa_13.x, ssa_13.x
	vec1 32 ssa_84 = fmul ssa_13.y, ssa_13.y
	vec1 32 ssa_85 = fadd ssa_83, ssa_84
	vec1 32 ssa_86 = fmul ssa_13.z, ssa_13.z
	vec1 32 ssa_87 = fadd ssa_85, ssa_86
	vec1 32 ssa_15 = fsqrt ssa_87
	vec1 32 ssa_88 = fdiv ssa_13.x, ssa_15
	vec1 32 ssa_89 = fdiv ssa_13.y, ssa_15
	vec1 32 ssa_90 = fdiv ssa_13.z, ssa_15
	vec1 32 ssa_92 = fneg ssa_79
	vec1 32 ssa_93 = fneg ssa_80
	vec1 32 ssa_94 = fneg ssa_81
	vec1 32 ssa_96 = fmul ssa_92, ssa_70
	vec1 32 ssa_97 = fmul ssa_93, ssa_71
	vec1 32 ssa_98 = fadd ssa_96, ssa_97
	vec1 32 ssa_99 = fmul ssa_94, ssa_72
	vec1 32 ssa_100 = fadd ssa_98, ssa_99
	vec1 32 ssa_101 = fmul ssa_100, ssa_70
	vec1 32 ssa_102 = fmul ssa_100, ssa_71
	vec1 32 ssa_103 = fmul ssa_100, ssa_72
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_105 = fmul ssa_25, ssa_101
	vec1 32 ssa_106 = fmul ssa_25, ssa_102
	vec1 32 ssa_107 = fmul ssa_25, ssa_103
	vec1 32 ssa_109 = fsub ssa_92, ssa_105
	vec1 32 ssa_110 = fsub ssa_93, ssa_106
	vec1 32 ssa_111 = fsub ssa_94, ssa_107
	vec1 32 ssa_113 = fmul ssa_70, ssa_79
	vec1 32 ssa_114 = fmul ssa_71, ssa_80
	vec1 32 ssa_115 = fadd ssa_113, ssa_114
	vec1 32 ssa_116 = fmul ssa_72, ssa_81
	vec1 32 ssa_117 = fadd ssa_115, ssa_116
	vec1 32 ssa_35 = fmax ssa_117, ssa_45
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec1 32 ssa_118 = fmul ssa_37.x, ssa_35
	vec1 32 ssa_119 = fmul ssa_37.y, ssa_35
	vec1 32 ssa_120 = fmul ssa_37.z, ssa_35
	vec1 32 ssa_122 = fmul ssa_109, ssa_88
	vec1 32 ssa_123 = fmul ssa_110, ssa_89
	vec1 32 ssa_124 = fadd ssa_122, ssa_123
	vec1 32 ssa_125 = fmul ssa_111, ssa_90
	vec1 32 ssa_126 = fadd ssa_124, ssa_125
	vec1 32 ssa_46 = fmax ssa_126, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec1 32 ssa_127 = fmul ssa_49.x, ssa_48
	vec1 32 ssa_128 = fmul ssa_49.y, ssa_48
	vec1 32 ssa_129 = fmul ssa_49.z, ssa_48
	vec1 32 ssa_131 = fadd ssa_118, ssa_127
	vec1 32 ssa_132 = fadd ssa_119, ssa_128
	vec1 32 ssa_133 = fadd ssa_120, ssa_129
	vec1 32 ssa_64 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_181 = vec4 ssa_131, ssa_132, ssa_133, ssa_60
	intrinsic store_deref (ssa_64, ssa_181) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_60 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_49 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_47 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_45 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_65 = fmul ssa_1.x, ssa_1.x
	vec1 32 ssa_66 = fmul ssa_1.y, ssa_1.y
	vec1 32 ssa_67 = fadd ssa_65, ssa_66
	vec1 32 ssa_68 = fmul ssa_1.z, ssa_1.z
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_3 = fsqrt ssa_69
	vec1 32 ssa_216 = frcp ssa_3
	vec1 32 ssa_217 = fmul ssa_1.x, ssa_216
	vec1 32 ssa_214 = frcp ssa_3
	vec1 32 ssa_215 = fmul ssa_1.y, ssa_214
	vec1 32 ssa_212 = frcp ssa_3
	vec1 32 ssa_213 = fmul ssa_1.z, ssa_212
	vec1 32 ssa_6 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_74 = fmul ssa_7.x, ssa_7.x
	vec1 32 ssa_75 = fmul ssa_7.y, ssa_7.y
	vec1 32 ssa_76 = fadd ssa_74, ssa_75
	vec1 32 ssa_77 = fmul ssa_7.z, ssa_7.z
	vec1 32 ssa_78 = fadd ssa_76, ssa_77
	vec1 32 ssa_9 = fsqrt ssa_78
	vec1 32 ssa_210 = frcp ssa_9
	vec1 32 ssa_211 = fmul ssa_7.x, ssa_210
	vec1 32 ssa_208 = frcp ssa_9
	vec1 32 ssa_209 = fmul ssa_7.y, ssa_208
	vec1 32 ssa_206 = frcp ssa_9
	vec1 32 ssa_207 = fmul ssa_7.z, ssa_206
	vec1 32 ssa_12 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_83 = fmul ssa_13.x, ssa_13.x
	vec1 32 ssa_84 = fmul ssa_13.y, ssa_13.y
	vec1 32 ssa_85 = fadd ssa_83, ssa_84
	vec1 32 ssa_86 = fmul ssa_13.z, ssa_13.z
	vec1 32 ssa_87 = fadd ssa_85, ssa_86
	vec1 32 ssa_15 = fsqrt ssa_87
	vec1 32 ssa_204 = frcp ssa_15
	vec1 32 ssa_205 = fmul ssa_13.x, ssa_204
	vec1 32 ssa_202 = frcp ssa_15
	vec1 32 ssa_203 = fmul ssa_13.y, ssa_202
	vec1 32 ssa_200 = frcp ssa_15
	vec1 32 ssa_201 = fmul ssa_13.z, ssa_200
	vec1 32 ssa_92 = fneg ssa_211
	vec1 32 ssa_93 = fneg ssa_209
	vec1 32 ssa_94 = fneg ssa_207
	vec1 32 ssa_198 = fmul ssa_211, ssa_217
	vec1 32 ssa_199 = fneg ssa_198
	vec1 32 ssa_196 = fmul ssa_209, ssa_215
	vec1 32 ssa_197 = fneg ssa_196
	vec1 32 ssa_98 = fadd ssa_199, ssa_197
	vec1 32 ssa_194 = fmul ssa_207, ssa_213
	vec1 32 ssa_195 = fneg ssa_194
	vec1 32 ssa_100 = fadd ssa_98, ssa_195
	vec1 32 ssa_101 = fmul ssa_100, ssa_217
	vec1 32 ssa_102 = fmul ssa_100, ssa_215
	vec1 32 ssa_103 = fmul ssa_100, ssa_213
	vec1 32 ssa_25 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_192 = fmul ssa_100, ssa_25
	vec1 32 ssa_193 = fmul ssa_192, ssa_217
	vec1 32 ssa_190 = fmul ssa_100, ssa_25
	vec1 32 ssa_191 = fmul ssa_190, ssa_215
	vec1 32 ssa_188 = fmul ssa_100, ssa_25
	vec1 32 ssa_189 = fmul ssa_188, ssa_213
	vec1 32 ssa_186 = fneg ssa_193
	vec1 32 ssa_187 = fadd ssa_92, ssa_186
	vec1 32 ssa_184 = fneg ssa_191
	vec1 32 ssa_185 = fadd ssa_93, ssa_184
	vec1 32 ssa_182 = fneg ssa_189
	vec1 32 ssa_183 = fadd ssa_94, ssa_182
	vec1 32 ssa_113 = fmul ssa_217, ssa_211
	vec1 32 ssa_114 = fmul ssa_215, ssa_209
	vec1 32 ssa_115 = fadd ssa_113, ssa_114
	vec1 32 ssa_116 = fmul ssa_213, ssa_207
	vec1 32 ssa_117 = fadd ssa_115, ssa_116
	vec1 32 ssa_35 = fmax ssa_117, ssa_45
	vec1 32 ssa_36 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_37 = intrinsic load_deref (ssa_36) (0) /* access=0 */
	vec1 32 ssa_118 = fmul ssa_37.x, ssa_35
	vec1 32 ssa_119 = fmul ssa_37.y, ssa_35
	vec1 32 ssa_120 = fmul ssa_37.z, ssa_35
	vec1 32 ssa_122 = fmul ssa_187, ssa_205
	vec1 32 ssa_123 = fmul ssa_185, ssa_203
	vec1 32 ssa_124 = fadd ssa_122, ssa_123
	vec1 32 ssa_125 = fmul ssa_183, ssa_201
	vec1 32 ssa_126 = fadd ssa_124, ssa_125
	vec1 32 ssa_46 = fmax ssa_126, ssa_45
	vec1 32 ssa_48 = fpow ssa_46, ssa_47
	vec1 32 ssa_127 = fmul ssa_49.x, ssa_48
	vec1 32 ssa_128 = fmul ssa_49.y, ssa_48
	vec1 32 ssa_129 = fmul ssa_49.z, ssa_48
	vec1 32 ssa_131 = fadd ssa_118, ssa_127
	vec1 32 ssa_132 = fadd ssa_119, ssa_128
	vec1 32 ssa_133 = fadd ssa_120, ssa_129
	vec1 32 ssa_64 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_181 = vec4 ssa_131, ssa_132, ssa_133, ssa_60
	intrinsic store_deref (ssa_64, ssa_181) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = fmul ssa_5.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_8 = fadd ssa_6, ssa_7
	vec1 32 ssa_9 = fmul ssa_5.z, ssa_5.z
	vec1 32 ssa_10 = fadd ssa_8, ssa_9
	vec1 32 ssa_11 = fsqrt ssa_10
	vec1 32 ssa_12 = frcp ssa_11
	vec1 32 ssa_13 = fmul ssa_5.x, ssa_12
	vec1 32 ssa_14 = frcp ssa_11
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_14
	vec1 32 ssa_16 = frcp ssa_11
	vec1 32 ssa_17 = fmul ssa_5.z, ssa_16
	vec1 32 ssa_18 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec1 32 ssa_20 = fmul ssa_19.x, ssa_19.x
	vec1 32 ssa_21 = fmul ssa_19.y, ssa_19.y
	vec1 32 ssa_22 = fadd ssa_20, ssa_21
	vec1 32 ssa_23 = fmul ssa_19.z, ssa_19.z
	vec1 32 ssa_24 = fadd ssa_22, ssa_23
	vec1 32 ssa_25 = fsqrt ssa_24
	vec1 32 ssa_26 = frcp ssa_25
	vec1 32 ssa_27 = fmul ssa_19.x, ssa_26
	vec1 32 ssa_28 = frcp ssa_25
	vec1 32 ssa_29 = fmul ssa_19.y, ssa_28
	vec1 32 ssa_30 = frcp ssa_25
	vec1 32 ssa_31 = fmul ssa_19.z, ssa_30
	vec1 32 ssa_32 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_33 = intrinsic load_deref (ssa_32) (0) /* access=0 */
	vec1 32 ssa_34 = fmul ssa_33.x, ssa_33.x
	vec1 32 ssa_35 = fmul ssa_33.y, ssa_33.y
	vec1 32 ssa_36 = fadd ssa_34, ssa_35
	vec1 32 ssa_37 = fmul ssa_33.z, ssa_33.z
	vec1 32 ssa_38 = fadd ssa_36, ssa_37
	vec1 32 ssa_39 = fsqrt ssa_38
	vec1 32 ssa_40 = frcp ssa_39
	vec1 32 ssa_41 = fmul ssa_33.x, ssa_40
	vec1 32 ssa_42 = frcp ssa_39
	vec1 32 ssa_43 = fmul ssa_33.y, ssa_42
	vec1 32 ssa_44 = frcp ssa_39
	vec1 32 ssa_45 = fmul ssa_33.z, ssa_44
	vec1 32 ssa_46 = fneg ssa_27
	vec1 32 ssa_47 = fneg ssa_29
	vec1 32 ssa_48 = fneg ssa_31
	vec1 32 ssa_49 = fmul ssa_27, ssa_13
	vec1 32 ssa_50 = fneg ssa_49
	vec1 32 ssa_51 = fmul ssa_29, ssa_15
	vec1 32 ssa_52 = fneg ssa_51
	vec1 32 ssa_53 = fadd ssa_50, ssa_52
	vec1 32 ssa_54 = fmul ssa_31, ssa_17
	vec1 32 ssa_55 = fneg ssa_54
	vec1 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_60 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_61 = fmul ssa_56, ssa_60
	vec1 32 ssa_62 = fmul ssa_61, ssa_13
	vec1 32 ssa_63 = fmul ssa_56, ssa_60
	vec1 32 ssa_64 = fmul ssa_63, ssa_15
	vec1 32 ssa_65 = fmul ssa_56, ssa_60
	vec1 32 ssa_66 = fmul ssa_65, ssa_17
	vec1 32 ssa_67 = fneg ssa_62
	vec1 32 ssa_68 = fadd ssa_46, ssa_67
	vec1 32 ssa_69 = fneg ssa_64
	vec1 32 ssa_70 = fadd ssa_47, ssa_69
	vec1 32 ssa_71 = fneg ssa_66
	vec1 32 ssa_72 = fadd ssa_48, ssa_71
	vec1 32 ssa_73 = fmul ssa_13, ssa_27
	vec1 32 ssa_74 = fmul ssa_15, ssa_29
	vec1 32 ssa_75 = fadd ssa_73, ssa_74
	vec1 32 ssa_76 = fmul ssa_17, ssa_31
	vec1 32 ssa_77 = fadd ssa_75, ssa_76
	vec1 32 ssa_78 = fmax ssa_77, ssa_3
	vec1 32 ssa_79 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = fmul ssa_80.x, ssa_78
	vec1 32 ssa_82 = fmul ssa_80.y, ssa_78
	vec1 32 ssa_83 = fmul ssa_80.z, ssa_78
	vec1 32 ssa_84 = fmul ssa_68, ssa_41
	vec1 32 ssa_85 = fmul ssa_70, ssa_43
	vec1 32 ssa_86 = fadd ssa_84, ssa_85
	vec1 32 ssa_87 = fmul ssa_72, ssa_45
	vec1 32 ssa_88 = fadd ssa_86, ssa_87
	vec1 32 ssa_89 = fmax ssa_88, ssa_3
	vec1 32 ssa_90 = fpow ssa_89, ssa_2
	vec1 32 ssa_91 = fmul ssa_1.x, ssa_90
	vec1 32 ssa_92 = fmul ssa_1.y, ssa_90
	vec1 32 ssa_93 = fmul ssa_1.z, ssa_90
	vec1 32 ssa_94 = fadd ssa_81, ssa_91
	vec1 32 ssa_95 = fadd ssa_82, ssa_92
	vec1 32 ssa_96 = fadd ssa_83, ssa_93
	vec1 32 ssa_97 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_98 = vec4 ssa_94, ssa_95, ssa_96, ssa_0
	intrinsic store_deref (ssa_97, ssa_98) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = fmul ssa_5.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_8 = fadd ssa_6, ssa_7
	vec1 32 ssa_9 = fmul ssa_5.z, ssa_5.z
	vec1 32 ssa_10 = fadd ssa_8, ssa_9
	vec1 32 ssa_11 = fsqrt ssa_10
	vec1 32 ssa_12 = frcp ssa_11
	vec1 32 ssa_13 = fmul ssa_5.x, ssa_12
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_12
	vec1 32 ssa_17 = fmul ssa_5.z, ssa_12
	vec1 32 ssa_18 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec1 32 ssa_20 = fmul ssa_19.x, ssa_19.x
	vec1 32 ssa_21 = fmul ssa_19.y, ssa_19.y
	vec1 32 ssa_22 = fadd ssa_20, ssa_21
	vec1 32 ssa_23 = fmul ssa_19.z, ssa_19.z
	vec1 32 ssa_24 = fadd ssa_22, ssa_23
	vec1 32 ssa_25 = fsqrt ssa_24
	vec1 32 ssa_26 = frcp ssa_25
	vec1 32 ssa_27 = fmul ssa_19.x, ssa_26
	vec1 32 ssa_29 = fmul ssa_19.y, ssa_26
	vec1 32 ssa_31 = fmul ssa_19.z, ssa_26
	vec1 32 ssa_32 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_33 = intrinsic load_deref (ssa_32) (0) /* access=0 */
	vec1 32 ssa_34 = fmul ssa_33.x, ssa_33.x
	vec1 32 ssa_35 = fmul ssa_33.y, ssa_33.y
	vec1 32 ssa_36 = fadd ssa_34, ssa_35
	vec1 32 ssa_37 = fmul ssa_33.z, ssa_33.z
	vec1 32 ssa_38 = fadd ssa_36, ssa_37
	vec1 32 ssa_39 = fsqrt ssa_38
	vec1 32 ssa_40 = frcp ssa_39
	vec1 32 ssa_41 = fmul ssa_33.x, ssa_40
	vec1 32 ssa_43 = fmul ssa_33.y, ssa_40
	vec1 32 ssa_45 = fmul ssa_33.z, ssa_40
	vec1 32 ssa_46 = fneg ssa_27
	vec1 32 ssa_47 = fneg ssa_29
	vec1 32 ssa_48 = fneg ssa_31
	vec1 32 ssa_49 = fmul ssa_27, ssa_13
	vec1 32 ssa_50 = fneg ssa_49
	vec1 32 ssa_51 = fmul ssa_29, ssa_15
	vec1 32 ssa_52 = fneg ssa_51
	vec1 32 ssa_53 = fadd ssa_50, ssa_52
	vec1 32 ssa_54 = fmul ssa_31, ssa_17
	vec1 32 ssa_55 = fneg ssa_54
	vec1 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_60 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_61 = fmul ssa_56, ssa_60
	vec1 32 ssa_62 = fmul ssa_61, ssa_13
	vec1 32 ssa_64 = fmul ssa_61, ssa_15
	vec1 32 ssa_66 = fmul ssa_61, ssa_17
	vec1 32 ssa_67 = fneg ssa_62
	vec1 32 ssa_68 = fadd ssa_46, ssa_67
	vec1 32 ssa_69 = fneg ssa_64
	vec1 32 ssa_70 = fadd ssa_47, ssa_69
	vec1 32 ssa_71 = fneg ssa_66
	vec1 32 ssa_72 = fadd ssa_48, ssa_71
	vec1 32 ssa_75 = fadd ssa_49, ssa_51
	vec1 32 ssa_77 = fadd ssa_75, ssa_54
	vec1 32 ssa_78 = fmax ssa_77, ssa_3
	vec1 32 ssa_79 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = fmul ssa_80.x, ssa_78
	vec1 32 ssa_82 = fmul ssa_80.y, ssa_78
	vec1 32 ssa_83 = fmul ssa_80.z, ssa_78
	vec1 32 ssa_84 = fmul ssa_68, ssa_41
	vec1 32 ssa_85 = fmul ssa_70, ssa_43
	vec1 32 ssa_86 = fadd ssa_84, ssa_85
	vec1 32 ssa_87 = fmul ssa_72, ssa_45
	vec1 32 ssa_88 = fadd ssa_86, ssa_87
	vec1 32 ssa_89 = fmax ssa_88, ssa_3
	vec1 32 ssa_90 = fpow ssa_89, ssa_2
	vec1 32 ssa_91 = fmul ssa_1.x, ssa_90
	vec1 32 ssa_92 = fmul ssa_1.y, ssa_90
	vec1 32 ssa_93 = fmul ssa_1.z, ssa_90
	vec1 32 ssa_94 = fadd ssa_81, ssa_91
	vec1 32 ssa_95 = fadd ssa_82, ssa_92
	vec1 32 ssa_96 = fadd ssa_83, ssa_93
	vec1 32 ssa_97 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_98 = vec4 ssa_94, ssa_95, ssa_96, ssa_0
	intrinsic store_deref (ssa_97, ssa_98) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = fmul ssa_5.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_8 = fadd ssa_6, ssa_7
	vec1 32 ssa_9 = fmul ssa_5.z, ssa_5.z
	vec1 32 ssa_10 = fadd ssa_8, ssa_9
	vec1 32 ssa_11 = fsqrt ssa_10
	vec1 32 ssa_101 = frsq ssa_10
	vec1 32 ssa_13 = fmul ssa_5.x, ssa_101
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_101
	vec1 32 ssa_17 = fmul ssa_5.z, ssa_101
	vec1 32 ssa_18 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_19 = intrinsic load_deref (ssa_18) (0) /* access=0 */
	vec1 32 ssa_20 = fmul ssa_19.x, ssa_19.x
	vec1 32 ssa_21 = fmul ssa_19.y, ssa_19.y
	vec1 32 ssa_22 = fadd ssa_20, ssa_21
	vec1 32 ssa_23 = fmul ssa_19.z, ssa_19.z
	vec1 32 ssa_24 = fadd ssa_22, ssa_23
	vec1 32 ssa_25 = fsqrt ssa_24
	vec1 32 ssa_100 = frsq ssa_24
	vec1 32 ssa_27 = fmul ssa_19.x, ssa_100
	vec1 32 ssa_29 = fmul ssa_19.y, ssa_100
	vec1 32 ssa_31 = fmul ssa_19.z, ssa_100
	vec1 32 ssa_32 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_33 = intrinsic load_deref (ssa_32) (0) /* access=0 */
	vec1 32 ssa_34 = fmul ssa_33.x, ssa_33.x
	vec1 32 ssa_35 = fmul ssa_33.y, ssa_33.y
	vec1 32 ssa_36 = fadd ssa_34, ssa_35
	vec1 32 ssa_37 = fmul ssa_33.z, ssa_33.z
	vec1 32 ssa_38 = fadd ssa_36, ssa_37
	vec1 32 ssa_39 = fsqrt ssa_38
	vec1 32 ssa_99 = frsq ssa_38
	vec1 32 ssa_41 = fmul ssa_33.x, ssa_99
	vec1 32 ssa_43 = fmul ssa_33.y, ssa_99
	vec1 32 ssa_45 = fmul ssa_33.z, ssa_99
	vec1 32 ssa_46 = fneg ssa_27
	vec1 32 ssa_47 = fneg ssa_29
	vec1 32 ssa_48 = fneg ssa_31
	vec1 32 ssa_49 = fmul ssa_27, ssa_13
	vec1 32 ssa_50 = fneg ssa_49
	vec1 32 ssa_51 = fmul ssa_29, ssa_15
	vec1 32 ssa_52 = fneg ssa_51
	vec1 32 ssa_53 = fadd ssa_50, ssa_52
	vec1 32 ssa_54 = fmul ssa_31, ssa_17
	vec1 32 ssa_55 = fneg ssa_54
	vec1 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_60 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_61 = fmul ssa_56, ssa_60
	vec1 32 ssa_62 = fmul ssa_61, ssa_13
	vec1 32 ssa_64 = fmul ssa_61, ssa_15
	vec1 32 ssa_66 = fmul ssa_61, ssa_17
	vec1 32 ssa_67 = fneg ssa_62
	vec1 32 ssa_68 = fadd ssa_46, ssa_67
	vec1 32 ssa_69 = fneg ssa_64
	vec1 32 ssa_70 = fadd ssa_47, ssa_69
	vec1 32 ssa_71 = fneg ssa_66
	vec1 32 ssa_72 = fadd ssa_48, ssa_71
	vec1 32 ssa_75 = fadd ssa_49, ssa_51
	vec1 32 ssa_77 = fadd ssa_75, ssa_54
	vec1 32 ssa_78 = fmax ssa_77, ssa_3
	vec1 32 ssa_79 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = fmul ssa_80.x, ssa_78
	vec1 32 ssa_82 = fmul ssa_80.y, ssa_78
	vec1 32 ssa_83 = fmul ssa_80.z, ssa_78
	vec1 32 ssa_84 = fmul ssa_68, ssa_41
	vec1 32 ssa_85 = fmul ssa_70, ssa_43
	vec1 32 ssa_86 = fadd ssa_84, ssa_85
	vec1 32 ssa_87 = fmul ssa_72, ssa_45
	vec1 32 ssa_88 = fadd ssa_86, ssa_87
	vec1 32 ssa_89 = fmax ssa_88, ssa_3
	vec1 32 ssa_90 = fpow ssa_89, ssa_2
	vec1 32 ssa_91 = fmul ssa_1.x, ssa_90
	vec1 32 ssa_92 = fmul ssa_1.y, ssa_90
	vec1 32 ssa_93 = fmul ssa_1.z, ssa_90
	vec1 32 ssa_94 = fadd ssa_81, ssa_91
	vec1 32 ssa_95 = fadd ssa_82, ssa_92
	vec1 32 ssa_96 = fadd ssa_83, ssa_93
	vec1 32 ssa_97 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_98 = vec4 ssa_94, ssa_95, ssa_96, ssa_0
	intrinsic store_deref (ssa_97, ssa_98) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 N
	decl_var  INTERP_MODE_NONE vec3 L
	decl_var  INTERP_MODE_NONE vec3 V
	decl_var  INTERP_MODE_NONE vec3 R
	decl_var  INTERP_MODE_NONE vec3 diffuse
	decl_var  INTERP_MODE_NONE vec3 specular
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = fmul ssa_5.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_8 = fadd ssa_6, ssa_7
	vec1 32 ssa_9 = fmul ssa_5.z, ssa_5.z
	vec1 32 ssa_10 = fadd ssa_8, ssa_9
	vec1 32 ssa_12 = frsq ssa_10
	vec1 32 ssa_13 = fmul ssa_5.x, ssa_12
	vec1 32 ssa_14 = fmul ssa_5.y, ssa_12
	vec1 32 ssa_15 = fmul ssa_5.z, ssa_12
	vec1 32 ssa_16 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_17 = intrinsic load_deref (ssa_16) (0) /* access=0 */
	vec1 32 ssa_18 = fmul ssa_17.x, ssa_17.x
	vec1 32 ssa_19 = fmul ssa_17.y, ssa_17.y
	vec1 32 ssa_20 = fadd ssa_18, ssa_19
	vec1 32 ssa_21 = fmul ssa_17.z, ssa_17.z
	vec1 32 ssa_22 = fadd ssa_20, ssa_21
	vec1 32 ssa_24 = frsq ssa_22
	vec1 32 ssa_25 = fmul ssa_17.x, ssa_24
	vec1 32 ssa_26 = fmul ssa_17.y, ssa_24
	vec1 32 ssa_27 = fmul ssa_17.z, ssa_24
	vec1 32 ssa_28 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_29 = intrinsic load_deref (ssa_28) (0) /* access=0 */
	vec1 32 ssa_30 = fmul ssa_29.x, ssa_29.x
	vec1 32 ssa_31 = fmul ssa_29.y, ssa_29.y
	vec1 32 ssa_32 = fadd ssa_30, ssa_31
	vec1 32 ssa_33 = fmul ssa_29.z, ssa_29.z
	vec1 32 ssa_34 = fadd ssa_32, ssa_33
	vec1 32 ssa_36 = frsq ssa_34
	vec1 32 ssa_37 = fmul ssa_29.x, ssa_36
	vec1 32 ssa_38 = fmul ssa_29.y, ssa_36
	vec1 32 ssa_39 = fmul ssa_29.z, ssa_36
	vec1 32 ssa_40 = fneg ssa_25
	vec1 32 ssa_41 = fneg ssa_26
	vec1 32 ssa_42 = fneg ssa_27
	vec1 32 ssa_43 = fmul ssa_25, ssa_13
	vec1 32 ssa_44 = fneg ssa_43
	vec1 32 ssa_45 = fmul ssa_26, ssa_14
	vec1 32 ssa_46 = fneg ssa_45
	vec1 32 ssa_47 = fadd ssa_44, ssa_46
	vec1 32 ssa_48 = fmul ssa_27, ssa_15
	vec1 32 ssa_49 = fneg ssa_48
	vec1 32 ssa_50 = fadd ssa_47, ssa_49
	vec1 32 ssa_51 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_52 = fmul ssa_50, ssa_51
	vec1 32 ssa_53 = fmul ssa_52, ssa_13
	vec1 32 ssa_54 = fmul ssa_52, ssa_14
	vec1 32 ssa_55 = fmul ssa_52, ssa_15
	vec1 32 ssa_56 = fneg ssa_53
	vec1 32 ssa_57 = fadd ssa_40, ssa_56
	vec1 32 ssa_58 = fneg ssa_54
	vec1 32 ssa_59 = fadd ssa_41, ssa_58
	vec1 32 ssa_60 = fneg ssa_55
	vec1 32 ssa_61 = fadd ssa_42, ssa_60
	vec1 32 ssa_62 = fadd ssa_43, ssa_45
	vec1 32 ssa_63 = fadd ssa_62, ssa_48
	vec1 32 ssa_64 = fmax ssa_63, ssa_3
	vec1 32 ssa_65 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_66 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	vec1 32 ssa_67 = fmul ssa_66.x, ssa_64
	vec1 32 ssa_68 = fmul ssa_66.y, ssa_64
	vec1 32 ssa_69 = fmul ssa_66.z, ssa_64
	vec1 32 ssa_70 = fmul ssa_57, ssa_37
	vec1 32 ssa_71 = fmul ssa_59, ssa_38
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmul ssa_61, ssa_39
	vec1 32 ssa_74 = fadd ssa_72, ssa_73
	vec1 32 ssa_75 = fmax ssa_74, ssa_3
	vec1 32 ssa_76 = fpow ssa_75, ssa_2
	vec1 32 ssa_77 = fmul ssa_1.x, ssa_76
	vec1 32 ssa_78 = fmul ssa_1.y, ssa_76
	vec1 32 ssa_79 = fmul ssa_1.z, ssa_76
	vec1 32 ssa_80 = fadd ssa_67, ssa_77
	vec1 32 ssa_81 = fadd ssa_68, ssa_78
	vec1 32 ssa_82 = fadd ssa_69, ssa_79
	vec1 32 ssa_83 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_84 = vec4 ssa_80, ssa_81, ssa_82, ssa_0
	intrinsic store_deref (ssa_83, ssa_84) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */, 0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = fmul ssa_5.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_8 = fadd ssa_6, ssa_7
	vec1 32 ssa_9 = fmul ssa_5.z, ssa_5.z
	vec1 32 ssa_10 = fadd ssa_8, ssa_9
	vec1 32 ssa_11 = frsq ssa_10
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec1 32 ssa_15 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_16 = intrinsic load_deref (ssa_15) (0) /* access=0 */
	vec1 32 ssa_17 = fmul ssa_16.x, ssa_16.x
	vec1 32 ssa_18 = fmul ssa_16.y, ssa_16.y
	vec1 32 ssa_19 = fadd ssa_17, ssa_18
	vec1 32 ssa_20 = fmul ssa_16.z, ssa_16.z
	vec1 32 ssa_21 = fadd ssa_19, ssa_20
	vec1 32 ssa_22 = frsq ssa_21
	vec1 32 ssa_23 = fmul ssa_16.x, ssa_22
	vec1 32 ssa_24 = fmul ssa_16.y, ssa_22
	vec1 32 ssa_25 = fmul ssa_16.z, ssa_22
	vec1 32 ssa_26 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	vec1 32 ssa_28 = fmul ssa_27.x, ssa_27.x
	vec1 32 ssa_29 = fmul ssa_27.y, ssa_27.y
	vec1 32 ssa_30 = fadd ssa_28, ssa_29
	vec1 32 ssa_31 = fmul ssa_27.z, ssa_27.z
	vec1 32 ssa_32 = fadd ssa_30, ssa_31
	vec1 32 ssa_33 = frsq ssa_32
	vec1 32 ssa_34 = fmul ssa_27.x, ssa_33
	vec1 32 ssa_35 = fmul ssa_27.y, ssa_33
	vec1 32 ssa_36 = fmul ssa_27.z, ssa_33
	vec1 32 ssa_37 = fneg ssa_23
	vec1 32 ssa_38 = fneg ssa_24
	vec1 32 ssa_39 = fneg ssa_25
	vec1 32 ssa_40 = fmul ssa_23, ssa_12
	vec1 32 ssa_41 = fneg ssa_40
	vec1 32 ssa_42 = fmul ssa_24, ssa_13
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = fmul ssa_25, ssa_14
	vec1 32 ssa_46 = fneg ssa_45
	vec1 32 ssa_47 = fadd ssa_44, ssa_46
	vec1 32 ssa_48 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_49 = fmul ssa_47, ssa_48
	vec1 32 ssa_50 = fmul ssa_49, ssa_12
	vec1 32 ssa_51 = fmul ssa_49, ssa_13
	vec1 32 ssa_52 = fmul ssa_49, ssa_14
	vec1 32 ssa_53 = fneg ssa_50
	vec1 32 ssa_54 = fadd ssa_37, ssa_53
	vec1 32 ssa_55 = fneg ssa_51
	vec1 32 ssa_56 = fadd ssa_38, ssa_55
	vec1 32 ssa_57 = fneg ssa_52
	vec1 32 ssa_58 = fadd ssa_39, ssa_57
	vec1 32 ssa_59 = fadd ssa_40, ssa_42
	vec1 32 ssa_60 = fadd ssa_59, ssa_45
	vec1 32 ssa_61 = fmax ssa_60, ssa_3
	vec1 32 ssa_62 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_63 = intrinsic load_deref (ssa_62) (0) /* access=0 */
	vec1 32 ssa_64 = fmul ssa_63.x, ssa_61
	vec1 32 ssa_65 = fmul ssa_63.y, ssa_61
	vec1 32 ssa_66 = fmul ssa_63.z, ssa_61
	vec1 32 ssa_67 = fmul ssa_54, ssa_34
	vec1 32 ssa_68 = fmul ssa_56, ssa_35
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_70 = fmul ssa_58, ssa_36
	vec1 32 ssa_71 = fadd ssa_69, ssa_70
	vec1 32 ssa_72 = fmax ssa_71, ssa_3
	vec1 32 ssa_73 = fpow ssa_72, ssa_2
	vec1 32 ssa_74 = fmul ssa_1.x, ssa_73
	vec1 32 ssa_75 = fmul ssa_1.y, ssa_73
	vec1 32 ssa_76 = fmul ssa_1.z, ssa_73
	vec1 32 ssa_77 = fadd ssa_64, ssa_74
	vec1 32 ssa_78 = fadd ssa_65, ssa_75
	vec1 32 ssa_79 = fadd ssa_66, ssa_76
	vec1 32 ssa_80 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_81 = vec4 ssa_77, ssa_78, ssa_79, ssa_0
	intrinsic store_deref (ssa_80, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_doubles
nir_lower_int64
nir_lower_bit_size
nir_lower_load_const_to_scalar
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_82 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_83 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_84 = load_const (0x3f400000 /* 0.750000 */)
	vec3 32 ssa_85 = vec3 ssa_82, ssa_83, ssa_84
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = fmul ssa_5.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_8 = fadd ssa_6, ssa_7
	vec1 32 ssa_9 = fmul ssa_5.z, ssa_5.z
	vec1 32 ssa_10 = fadd ssa_8, ssa_9
	vec1 32 ssa_11 = frsq ssa_10
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec1 32 ssa_15 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_16 = intrinsic load_deref (ssa_15) (0) /* access=0 */
	vec1 32 ssa_17 = fmul ssa_16.x, ssa_16.x
	vec1 32 ssa_18 = fmul ssa_16.y, ssa_16.y
	vec1 32 ssa_19 = fadd ssa_17, ssa_18
	vec1 32 ssa_20 = fmul ssa_16.z, ssa_16.z
	vec1 32 ssa_21 = fadd ssa_19, ssa_20
	vec1 32 ssa_22 = frsq ssa_21
	vec1 32 ssa_23 = fmul ssa_16.x, ssa_22
	vec1 32 ssa_24 = fmul ssa_16.y, ssa_22
	vec1 32 ssa_25 = fmul ssa_16.z, ssa_22
	vec1 32 ssa_26 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	vec1 32 ssa_28 = fmul ssa_27.x, ssa_27.x
	vec1 32 ssa_29 = fmul ssa_27.y, ssa_27.y
	vec1 32 ssa_30 = fadd ssa_28, ssa_29
	vec1 32 ssa_31 = fmul ssa_27.z, ssa_27.z
	vec1 32 ssa_32 = fadd ssa_30, ssa_31
	vec1 32 ssa_33 = frsq ssa_32
	vec1 32 ssa_34 = fmul ssa_27.x, ssa_33
	vec1 32 ssa_35 = fmul ssa_27.y, ssa_33
	vec1 32 ssa_36 = fmul ssa_27.z, ssa_33
	vec1 32 ssa_37 = fneg ssa_23
	vec1 32 ssa_38 = fneg ssa_24
	vec1 32 ssa_39 = fneg ssa_25
	vec1 32 ssa_40 = fmul ssa_23, ssa_12
	vec1 32 ssa_41 = fneg ssa_40
	vec1 32 ssa_42 = fmul ssa_24, ssa_13
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = fmul ssa_25, ssa_14
	vec1 32 ssa_46 = fneg ssa_45
	vec1 32 ssa_47 = fadd ssa_44, ssa_46
	vec1 32 ssa_48 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_49 = fmul ssa_47, ssa_48
	vec1 32 ssa_50 = fmul ssa_49, ssa_12
	vec1 32 ssa_51 = fmul ssa_49, ssa_13
	vec1 32 ssa_52 = fmul ssa_49, ssa_14
	vec1 32 ssa_53 = fneg ssa_50
	vec1 32 ssa_54 = fadd ssa_37, ssa_53
	vec1 32 ssa_55 = fneg ssa_51
	vec1 32 ssa_56 = fadd ssa_38, ssa_55
	vec1 32 ssa_57 = fneg ssa_52
	vec1 32 ssa_58 = fadd ssa_39, ssa_57
	vec1 32 ssa_59 = fadd ssa_40, ssa_42
	vec1 32 ssa_60 = fadd ssa_59, ssa_45
	vec1 32 ssa_61 = fmax ssa_60, ssa_3
	vec1 32 ssa_62 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_63 = intrinsic load_deref (ssa_62) (0) /* access=0 */
	vec1 32 ssa_64 = fmul ssa_63.x, ssa_61
	vec1 32 ssa_65 = fmul ssa_63.y, ssa_61
	vec1 32 ssa_66 = fmul ssa_63.z, ssa_61
	vec1 32 ssa_67 = fmul ssa_54, ssa_34
	vec1 32 ssa_68 = fmul ssa_56, ssa_35
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_70 = fmul ssa_58, ssa_36
	vec1 32 ssa_71 = fadd ssa_69, ssa_70
	vec1 32 ssa_72 = fmax ssa_71, ssa_3
	vec1 32 ssa_73 = fpow ssa_72, ssa_2
	vec1 32 ssa_74 = fmul ssa_85.x, ssa_73
	vec1 32 ssa_75 = fmul ssa_85.y, ssa_73
	vec1 32 ssa_76 = fmul ssa_85.z, ssa_73
	vec1 32 ssa_77 = fadd ssa_64, ssa_74
	vec1 32 ssa_78 = fadd ssa_65, ssa_75
	vec1 32 ssa_79 = fadd ssa_66, ssa_76
	vec1 32 ssa_80 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_81 = vec4 ssa_77, ssa_78, ssa_79, ssa_0
	intrinsic store_deref (ssa_80, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_var_copies
nir_opt_large_constants
nir_lower_system_values
nir_lower_compute_system_values
nir_lower_subgroups
nir_lower_clip_cull_distance_arrays
nir_lower_vars_to_scratch
nir_lower_indirect_derefs
nir_lower_array_deref_of_vec
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_82 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_83 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_84 = load_const (0x3f400000 /* 0.750000 */)
	vec3 32 ssa_85 = vec3 ssa_82, ssa_83, ssa_84
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = fmul ssa_5.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_8 = fadd ssa_6, ssa_7
	vec1 32 ssa_9 = fmul ssa_5.z, ssa_5.z
	vec1 32 ssa_10 = fadd ssa_8, ssa_9
	vec1 32 ssa_11 = frsq ssa_10
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec1 32 ssa_15 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_16 = intrinsic load_deref (ssa_15) (0) /* access=0 */
	vec1 32 ssa_17 = fmul ssa_16.x, ssa_16.x
	vec1 32 ssa_18 = fmul ssa_16.y, ssa_16.y
	vec1 32 ssa_19 = fadd ssa_17, ssa_18
	vec1 32 ssa_20 = fmul ssa_16.z, ssa_16.z
	vec1 32 ssa_21 = fadd ssa_19, ssa_20
	vec1 32 ssa_22 = frsq ssa_21
	vec1 32 ssa_23 = fmul ssa_16.x, ssa_22
	vec1 32 ssa_24 = fmul ssa_16.y, ssa_22
	vec1 32 ssa_25 = fmul ssa_16.z, ssa_22
	vec1 32 ssa_26 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	vec1 32 ssa_28 = fmul ssa_27.x, ssa_27.x
	vec1 32 ssa_29 = fmul ssa_27.y, ssa_27.y
	vec1 32 ssa_30 = fadd ssa_28, ssa_29
	vec1 32 ssa_31 = fmul ssa_27.z, ssa_27.z
	vec1 32 ssa_32 = fadd ssa_30, ssa_31
	vec1 32 ssa_33 = frsq ssa_32
	vec1 32 ssa_34 = fmul ssa_27.x, ssa_33
	vec1 32 ssa_35 = fmul ssa_27.y, ssa_33
	vec1 32 ssa_36 = fmul ssa_27.z, ssa_33
	vec1 32 ssa_37 = fneg ssa_23
	vec1 32 ssa_38 = fneg ssa_24
	vec1 32 ssa_39 = fneg ssa_25
	vec1 32 ssa_40 = fmul ssa_23, ssa_12
	vec1 32 ssa_41 = fneg ssa_40
	vec1 32 ssa_42 = fmul ssa_24, ssa_13
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = fmul ssa_25, ssa_14
	vec1 32 ssa_46 = fneg ssa_45
	vec1 32 ssa_47 = fadd ssa_44, ssa_46
	vec1 32 ssa_48 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_49 = fmul ssa_47, ssa_48
	vec1 32 ssa_50 = fmul ssa_49, ssa_12
	vec1 32 ssa_51 = fmul ssa_49, ssa_13
	vec1 32 ssa_52 = fmul ssa_49, ssa_14
	vec1 32 ssa_53 = fneg ssa_50
	vec1 32 ssa_54 = fadd ssa_37, ssa_53
	vec1 32 ssa_55 = fneg ssa_51
	vec1 32 ssa_56 = fadd ssa_38, ssa_55
	vec1 32 ssa_57 = fneg ssa_52
	vec1 32 ssa_58 = fadd ssa_39, ssa_57
	vec1 32 ssa_59 = fadd ssa_40, ssa_42
	vec1 32 ssa_60 = fadd ssa_59, ssa_45
	vec1 32 ssa_61 = fmax ssa_60, ssa_3
	vec1 32 ssa_62 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_63 = intrinsic load_deref (ssa_62) (0) /* access=0 */
	vec1 32 ssa_64 = fmul ssa_63.x, ssa_61
	vec1 32 ssa_65 = fmul ssa_63.y, ssa_61
	vec1 32 ssa_66 = fmul ssa_63.z, ssa_61
	vec1 32 ssa_67 = fmul ssa_54, ssa_34
	vec1 32 ssa_68 = fmul ssa_56, ssa_35
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_70 = fmul ssa_58, ssa_36
	vec1 32 ssa_71 = fadd ssa_69, ssa_70
	vec1 32 ssa_72 = fmax ssa_71, ssa_3
	vec1 32 ssa_73 = fpow ssa_72, ssa_2
	vec1 32 ssa_74 = fmul ssa_82, ssa_73
	vec1 32 ssa_75 = fmul ssa_83, ssa_73
	vec1 32 ssa_76 = fmul ssa_84, ssa_73
	vec1 32 ssa_77 = fadd ssa_64, ssa_74
	vec1 32 ssa_78 = fadd ssa_65, ssa_75
	vec1 32 ssa_79 = fadd ssa_66, ssa_76
	vec1 32 ssa_80 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_81 = vec4 ssa_77, ssa_78, ssa_79, ssa_0
	intrinsic store_deref (ssa_80, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_82 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_83 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_84 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = fmul ssa_5.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_8 = fadd ssa_6, ssa_7
	vec1 32 ssa_9 = fmul ssa_5.z, ssa_5.z
	vec1 32 ssa_10 = fadd ssa_8, ssa_9
	vec1 32 ssa_11 = frsq ssa_10
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec1 32 ssa_15 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_16 = intrinsic load_deref (ssa_15) (0) /* access=0 */
	vec1 32 ssa_17 = fmul ssa_16.x, ssa_16.x
	vec1 32 ssa_18 = fmul ssa_16.y, ssa_16.y
	vec1 32 ssa_19 = fadd ssa_17, ssa_18
	vec1 32 ssa_20 = fmul ssa_16.z, ssa_16.z
	vec1 32 ssa_21 = fadd ssa_19, ssa_20
	vec1 32 ssa_22 = frsq ssa_21
	vec1 32 ssa_23 = fmul ssa_16.x, ssa_22
	vec1 32 ssa_24 = fmul ssa_16.y, ssa_22
	vec1 32 ssa_25 = fmul ssa_16.z, ssa_22
	vec1 32 ssa_26 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	vec1 32 ssa_28 = fmul ssa_27.x, ssa_27.x
	vec1 32 ssa_29 = fmul ssa_27.y, ssa_27.y
	vec1 32 ssa_30 = fadd ssa_28, ssa_29
	vec1 32 ssa_31 = fmul ssa_27.z, ssa_27.z
	vec1 32 ssa_32 = fadd ssa_30, ssa_31
	vec1 32 ssa_33 = frsq ssa_32
	vec1 32 ssa_34 = fmul ssa_27.x, ssa_33
	vec1 32 ssa_35 = fmul ssa_27.y, ssa_33
	vec1 32 ssa_36 = fmul ssa_27.z, ssa_33
	vec1 32 ssa_37 = fneg ssa_23
	vec1 32 ssa_38 = fneg ssa_24
	vec1 32 ssa_39 = fneg ssa_25
	vec1 32 ssa_40 = fmul ssa_23, ssa_12
	vec1 32 ssa_41 = fneg ssa_40
	vec1 32 ssa_42 = fmul ssa_24, ssa_13
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = fmul ssa_25, ssa_14
	vec1 32 ssa_46 = fneg ssa_45
	vec1 32 ssa_47 = fadd ssa_44, ssa_46
	vec1 32 ssa_48 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_49 = fmul ssa_47, ssa_48
	vec1 32 ssa_50 = fmul ssa_49, ssa_12
	vec1 32 ssa_51 = fmul ssa_49, ssa_13
	vec1 32 ssa_52 = fmul ssa_49, ssa_14
	vec1 32 ssa_53 = fneg ssa_50
	vec1 32 ssa_54 = fadd ssa_37, ssa_53
	vec1 32 ssa_55 = fneg ssa_51
	vec1 32 ssa_56 = fadd ssa_38, ssa_55
	vec1 32 ssa_57 = fneg ssa_52
	vec1 32 ssa_58 = fadd ssa_39, ssa_57
	vec1 32 ssa_59 = fadd ssa_40, ssa_42
	vec1 32 ssa_60 = fadd ssa_59, ssa_45
	vec1 32 ssa_61 = fmax ssa_60, ssa_3
	vec1 32 ssa_62 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_63 = intrinsic load_deref (ssa_62) (0) /* access=0 */
	vec1 32 ssa_64 = fmul ssa_63.x, ssa_61
	vec1 32 ssa_65 = fmul ssa_63.y, ssa_61
	vec1 32 ssa_66 = fmul ssa_63.z, ssa_61
	vec1 32 ssa_67 = fmul ssa_54, ssa_34
	vec1 32 ssa_68 = fmul ssa_56, ssa_35
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_70 = fmul ssa_58, ssa_36
	vec1 32 ssa_71 = fadd ssa_69, ssa_70
	vec1 32 ssa_72 = fmax ssa_71, ssa_3
	vec1 32 ssa_73 = fpow ssa_72, ssa_2
	vec1 32 ssa_74 = fmul ssa_82, ssa_73
	vec1 32 ssa_75 = fmul ssa_83, ssa_73
	vec1 32 ssa_76 = fmul ssa_84, ssa_73
	vec1 32 ssa_77 = fadd ssa_64, ssa_74
	vec1 32 ssa_78 = fadd ssa_65, ssa_75
	vec1 32 ssa_79 = fadd ssa_66, ssa_76
	vec1 32 ssa_80 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_81 = vec4 ssa_77, ssa_78, ssa_79, ssa_0
	intrinsic store_deref (ssa_80, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inLightVec (VARYING_SLOT_VAR4.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_82 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = fmul ssa_5.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_8 = fadd ssa_6, ssa_7
	vec1 32 ssa_9 = fmul ssa_5.z, ssa_5.z
	vec1 32 ssa_10 = fadd ssa_8, ssa_9
	vec1 32 ssa_11 = frsq ssa_10
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec1 32 ssa_15 = deref_var &inLightVec (shader_in vec3) 
	vec3 32 ssa_16 = intrinsic load_deref (ssa_15) (0) /* access=0 */
	vec1 32 ssa_17 = fmul ssa_16.x, ssa_16.x
	vec1 32 ssa_18 = fmul ssa_16.y, ssa_16.y
	vec1 32 ssa_19 = fadd ssa_17, ssa_18
	vec1 32 ssa_20 = fmul ssa_16.z, ssa_16.z
	vec1 32 ssa_21 = fadd ssa_19, ssa_20
	vec1 32 ssa_22 = frsq ssa_21
	vec1 32 ssa_23 = fmul ssa_16.x, ssa_22
	vec1 32 ssa_24 = fmul ssa_16.y, ssa_22
	vec1 32 ssa_25 = fmul ssa_16.z, ssa_22
	vec1 32 ssa_26 = deref_var &inViewVec (shader_in vec3) 
	vec3 32 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	vec1 32 ssa_28 = fmul ssa_27.x, ssa_27.x
	vec1 32 ssa_29 = fmul ssa_27.y, ssa_27.y
	vec1 32 ssa_30 = fadd ssa_28, ssa_29
	vec1 32 ssa_31 = fmul ssa_27.z, ssa_27.z
	vec1 32 ssa_32 = fadd ssa_30, ssa_31
	vec1 32 ssa_33 = frsq ssa_32
	vec1 32 ssa_34 = fmul ssa_27.x, ssa_33
	vec1 32 ssa_35 = fmul ssa_27.y, ssa_33
	vec1 32 ssa_36 = fmul ssa_27.z, ssa_33
	vec1 32 ssa_37 = fneg ssa_23
	vec1 32 ssa_38 = fneg ssa_24
	vec1 32 ssa_39 = fneg ssa_25
	vec1 32 ssa_40 = fmul ssa_23, ssa_12
	vec1 32 ssa_41 = fneg ssa_40
	vec1 32 ssa_42 = fmul ssa_24, ssa_13
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = fmul ssa_25, ssa_14
	vec1 32 ssa_46 = fneg ssa_45
	vec1 32 ssa_47 = fadd ssa_44, ssa_46
	vec1 32 ssa_48 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_49 = fmul ssa_47, ssa_48
	vec1 32 ssa_50 = fmul ssa_49, ssa_12
	vec1 32 ssa_51 = fmul ssa_49, ssa_13
	vec1 32 ssa_52 = fmul ssa_49, ssa_14
	vec1 32 ssa_53 = fneg ssa_50
	vec1 32 ssa_54 = fadd ssa_37, ssa_53
	vec1 32 ssa_55 = fneg ssa_51
	vec1 32 ssa_56 = fadd ssa_38, ssa_55
	vec1 32 ssa_57 = fneg ssa_52
	vec1 32 ssa_58 = fadd ssa_39, ssa_57
	vec1 32 ssa_59 = fadd ssa_40, ssa_42
	vec1 32 ssa_60 = fadd ssa_59, ssa_45
	vec1 32 ssa_61 = fmax ssa_60, ssa_3
	vec1 32 ssa_62 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_63 = intrinsic load_deref (ssa_62) (0) /* access=0 */
	vec1 32 ssa_64 = fmul ssa_63.x, ssa_61
	vec1 32 ssa_65 = fmul ssa_63.y, ssa_61
	vec1 32 ssa_66 = fmul ssa_63.z, ssa_61
	vec1 32 ssa_67 = fmul ssa_54, ssa_34
	vec1 32 ssa_68 = fmul ssa_56, ssa_35
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_70 = fmul ssa_58, ssa_36
	vec1 32 ssa_71 = fadd ssa_69, ssa_70
	vec1 32 ssa_72 = fmax ssa_71, ssa_3
	vec1 32 ssa_73 = fpow ssa_72, ssa_2
	vec1 32 ssa_74 = fmul ssa_82, ssa_73
	vec1 32 ssa_77 = fadd ssa_64, ssa_74
	vec1 32 ssa_78 = fadd ssa_65, ssa_74
	vec1 32 ssa_79 = fadd ssa_66, ssa_74
	vec1 32 ssa_80 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_81 = vec4 ssa_77, ssa_78, ssa_79, ssa_0
	intrinsic store_deref (ssa_80, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_lower_io_to_scalar_early
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outLightVec (VARYING_SLOT_VAR4.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outLightVec@4 (VARYING_SLOT_VAR4.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outLightVec@5 (VARYING_SLOT_VAR4.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@6 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@7 (VARYING_SLOT_VAR3.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec3 32 ssa_22 = vec3 ssa_19, ssa_20, ssa_21
	vec4 32 ssa_23 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_24 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_25 = intrinsic load_push_constant (ssa_24) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_26 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_27 = intrinsic load_push_constant (ssa_26) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_28 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_29 = intrinsic load_push_constant (ssa_28) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_30 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_31 = intrinsic load_deref (ssa_30) (0) /* access=0 */
	vec1 32 ssa_32 = fmul ssa_23.x, ssa_31.x
	vec1 32 ssa_33 = fmul ssa_23.y, ssa_31.x
	vec1 32 ssa_34 = fmul ssa_23.z, ssa_31.x
	vec1 32 ssa_35 = fmul ssa_23.w, ssa_31.x
	vec1 32 ssa_36 = fmul ssa_25.x, ssa_31.y
	vec1 32 ssa_37 = fmul ssa_25.y, ssa_31.y
	vec1 32 ssa_38 = fmul ssa_25.z, ssa_31.y
	vec1 32 ssa_39 = fmul ssa_25.w, ssa_31.y
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fadd ssa_35, ssa_39
	vec1 32 ssa_44 = fmul ssa_27.x, ssa_31.z
	vec1 32 ssa_45 = fmul ssa_27.y, ssa_31.z
	vec1 32 ssa_46 = fmul ssa_27.z, ssa_31.z
	vec1 32 ssa_47 = fmul ssa_27.w, ssa_31.z
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_43, ssa_47
	vec1 32 ssa_52 = fadd ssa_48, ssa_29.x
	vec1 32 ssa_53 = fadd ssa_49, ssa_29.y
	vec1 32 ssa_54 = fadd ssa_50, ssa_29.z
	vec1 32 ssa_55 = fadd ssa_51, ssa_29.w
	vec1 32 ssa_56 = fmul ssa_23.x, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_23.y, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_23.z, ssa_3.x
	vec1 32 ssa_59 = fmul ssa_25.x, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_25.y, ssa_3.y
	vec1 32 ssa_61 = fmul ssa_25.z, ssa_3.y
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fadd ssa_58, ssa_61
	vec1 32 ssa_65 = fmul ssa_27.x, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_27.y, ssa_3.z
	vec1 32 ssa_67 = fmul ssa_27.z, ssa_3.z
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fadd ssa_64, ssa_67
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = fneg ssa_54
	vec3 32 ssa_75 = vec3 ssa_68, ssa_69, ssa_70
	vec1 32 ssa_82 = deref_var &outNormal (shader_out float) 
	vec1 32 ssa_83 = mov ssa_75.x
	intrinsic store_deref (ssa_82, ssa_83) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_84 = deref_var &outNormal@0 (shader_out float) 
	vec1 32 ssa_85 = mov ssa_75.y
	intrinsic store_deref (ssa_84, ssa_85) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_86 = deref_var &outNormal@1 (shader_out float) 
	vec1 32 ssa_87 = mov ssa_75.z
	intrinsic store_deref (ssa_86, ssa_87) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_88 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_89 = mov ssa_22.x
	intrinsic store_deref (ssa_88, ssa_89) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_90 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_91 = mov ssa_22.y
	intrinsic store_deref (ssa_90, ssa_91) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_92 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_93 = mov ssa_22.z
	intrinsic store_deref (ssa_92, ssa_93) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_78 = vec3 ssa_71, ssa_72, ssa_73
	vec1 32 ssa_94 = deref_var &outLightVec (shader_out float) 
	vec1 32 ssa_95 = mov ssa_78.x
	intrinsic store_deref (ssa_94, ssa_95) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_96 = deref_var &outLightVec@4 (shader_out float) 
	vec1 32 ssa_97 = mov ssa_78.y
	intrinsic store_deref (ssa_96, ssa_97) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_98 = deref_var &outLightVec@5 (shader_out float) 
	vec1 32 ssa_99 = mov ssa_78.z
	intrinsic store_deref (ssa_98, ssa_99) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_100 = deref_var &outViewVec (shader_out float) 
	vec1 32 ssa_101 = mov ssa_78.x
	intrinsic store_deref (ssa_100, ssa_101) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_102 = deref_var &outViewVec@6 (shader_out float) 
	vec1 32 ssa_103 = mov ssa_78.y
	intrinsic store_deref (ssa_102, ssa_103) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_104 = deref_var &outViewVec@7 (shader_out float) 
	vec1 32 ssa_105 = mov ssa_78.z
	intrinsic store_deref (ssa_104, ssa_105) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_80 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_81 = vec4 ssa_52, ssa_53, ssa_54, ssa_55
	intrinsic store_deref (ssa_80, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_io_to_scalar_early
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec (VARYING_SLOT_VAR4.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec@2 (VARYING_SLOT_VAR4.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec@3 (VARYING_SLOT_VAR4.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@6 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@7 (VARYING_SLOT_VAR1.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_80 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = intrinsic load_deref (ssa_80) (0) /* access=0 */
	vec1 32 ssa_82 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = intrinsic load_deref (ssa_82) (0) /* access=0 */
	vec1 32 ssa_84 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = intrinsic load_deref (ssa_84) (0) /* access=0 */
	vec3 32 ssa_86 = vec3 ssa_81, ssa_83, ssa_85
	vec1 32 ssa_6 = fmul ssa_86.x, ssa_86.x
	vec1 32 ssa_7 = fmul ssa_86.y, ssa_86.y
	vec1 32 ssa_8 = fadd ssa_6, ssa_7
	vec1 32 ssa_9 = fmul ssa_86.z, ssa_86.z
	vec1 32 ssa_10 = fadd ssa_8, ssa_9
	vec1 32 ssa_11 = frsq ssa_10
	vec1 32 ssa_12 = fmul ssa_86.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_86.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_86.z, ssa_11
	vec1 32 ssa_87 = deref_var &inLightVec (shader_in float) 
	vec1 32 ssa_88 = intrinsic load_deref (ssa_87) (0) /* access=0 */
	vec1 32 ssa_89 = deref_var &inLightVec@2 (shader_in float) 
	vec1 32 ssa_90 = intrinsic load_deref (ssa_89) (0) /* access=0 */
	vec1 32 ssa_91 = deref_var &inLightVec@3 (shader_in float) 
	vec1 32 ssa_92 = intrinsic load_deref (ssa_91) (0) /* access=0 */
	vec3 32 ssa_93 = vec3 ssa_88, ssa_90, ssa_92
	vec1 32 ssa_17 = fmul ssa_93.x, ssa_93.x
	vec1 32 ssa_18 = fmul ssa_93.y, ssa_93.y
	vec1 32 ssa_19 = fadd ssa_17, ssa_18
	vec1 32 ssa_20 = fmul ssa_93.z, ssa_93.z
	vec1 32 ssa_21 = fadd ssa_19, ssa_20
	vec1 32 ssa_22 = frsq ssa_21
	vec1 32 ssa_23 = fmul ssa_93.x, ssa_22
	vec1 32 ssa_24 = fmul ssa_93.y, ssa_22
	vec1 32 ssa_25 = fmul ssa_93.z, ssa_22
	vec1 32 ssa_94 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_95 = intrinsic load_deref (ssa_94) (0) /* access=0 */
	vec1 32 ssa_96 = deref_var &inViewVec@4 (shader_in float) 
	vec1 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = deref_var &inViewVec@5 (shader_in float) 
	vec1 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
	vec3 32 ssa_100 = vec3 ssa_95, ssa_97, ssa_99
	vec1 32 ssa_28 = fmul ssa_100.x, ssa_100.x
	vec1 32 ssa_29 = fmul ssa_100.y, ssa_100.y
	vec1 32 ssa_30 = fadd ssa_28, ssa_29
	vec1 32 ssa_31 = fmul ssa_100.z, ssa_100.z
	vec1 32 ssa_32 = fadd ssa_30, ssa_31
	vec1 32 ssa_33 = frsq ssa_32
	vec1 32 ssa_34 = fmul ssa_100.x, ssa_33
	vec1 32 ssa_35 = fmul ssa_100.y, ssa_33
	vec1 32 ssa_36 = fmul ssa_100.z, ssa_33
	vec1 32 ssa_37 = fneg ssa_23
	vec1 32 ssa_38 = fneg ssa_24
	vec1 32 ssa_39 = fneg ssa_25
	vec1 32 ssa_40 = fmul ssa_23, ssa_12
	vec1 32 ssa_41 = fneg ssa_40
	vec1 32 ssa_42 = fmul ssa_24, ssa_13
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = fmul ssa_25, ssa_14
	vec1 32 ssa_46 = fneg ssa_45
	vec1 32 ssa_47 = fadd ssa_44, ssa_46
	vec1 32 ssa_48 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_49 = fmul ssa_47, ssa_48
	vec1 32 ssa_50 = fmul ssa_49, ssa_12
	vec1 32 ssa_51 = fmul ssa_49, ssa_13
	vec1 32 ssa_52 = fmul ssa_49, ssa_14
	vec1 32 ssa_53 = fneg ssa_50
	vec1 32 ssa_54 = fadd ssa_37, ssa_53
	vec1 32 ssa_55 = fneg ssa_51
	vec1 32 ssa_56 = fadd ssa_38, ssa_55
	vec1 32 ssa_57 = fneg ssa_52
	vec1 32 ssa_58 = fadd ssa_39, ssa_57
	vec1 32 ssa_59 = fadd ssa_40, ssa_42
	vec1 32 ssa_60 = fadd ssa_59, ssa_45
	vec1 32 ssa_61 = fmax ssa_60, ssa_3
	vec1 32 ssa_101 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_102 = intrinsic load_deref (ssa_101) (0) /* access=0 */
	vec1 32 ssa_103 = deref_var &inColor@6 (shader_in float) 
	vec1 32 ssa_104 = intrinsic load_deref (ssa_103) (0) /* access=0 */
	vec1 32 ssa_105 = deref_var &inColor@7 (shader_in float) 
	vec1 32 ssa_106 = intrinsic load_deref (ssa_105) (0) /* access=0 */
	vec3 32 ssa_107 = vec3 ssa_102, ssa_104, ssa_106
	vec1 32 ssa_64 = fmul ssa_107.x, ssa_61
	vec1 32 ssa_65 = fmul ssa_107.y, ssa_61
	vec1 32 ssa_66 = fmul ssa_107.z, ssa_61
	vec1 32 ssa_67 = fmul ssa_54, ssa_34
	vec1 32 ssa_68 = fmul ssa_56, ssa_35
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_70 = fmul ssa_58, ssa_36
	vec1 32 ssa_71 = fadd ssa_69, ssa_70
	vec1 32 ssa_72 = fmax ssa_71, ssa_3
	vec1 32 ssa_73 = fpow ssa_72, ssa_2
	vec1 32 ssa_74 = fmul ssa_1, ssa_73
	vec1 32 ssa_75 = fadd ssa_64, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_74
	vec1 32 ssa_77 = fadd ssa_66, ssa_74
	vec1 32 ssa_78 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_79 = vec4 ssa_75, ssa_76, ssa_77, ssa_0
	intrinsic store_deref (ssa_78, ssa_79) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outLightVec (VARYING_SLOT_VAR4.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outLightVec@4 (VARYING_SLOT_VAR4.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outLightVec@5 (VARYING_SLOT_VAR4.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@6 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@7 (VARYING_SLOT_VAR3.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec3 32 ssa_22 = vec3 ssa_19, ssa_20, ssa_21
	vec4 32 ssa_23 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_24 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_25 = intrinsic load_push_constant (ssa_24) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_26 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_27 = intrinsic load_push_constant (ssa_26) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_28 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_29 = intrinsic load_push_constant (ssa_28) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_30 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_31 = intrinsic load_deref (ssa_30) (0) /* access=0 */
	vec1 32 ssa_32 = fmul ssa_23.x, ssa_31.x
	vec1 32 ssa_33 = fmul ssa_23.y, ssa_31.x
	vec1 32 ssa_34 = fmul ssa_23.z, ssa_31.x
	vec1 32 ssa_35 = fmul ssa_23.w, ssa_31.x
	vec1 32 ssa_36 = fmul ssa_25.x, ssa_31.y
	vec1 32 ssa_37 = fmul ssa_25.y, ssa_31.y
	vec1 32 ssa_38 = fmul ssa_25.z, ssa_31.y
	vec1 32 ssa_39 = fmul ssa_25.w, ssa_31.y
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fadd ssa_35, ssa_39
	vec1 32 ssa_44 = fmul ssa_27.x, ssa_31.z
	vec1 32 ssa_45 = fmul ssa_27.y, ssa_31.z
	vec1 32 ssa_46 = fmul ssa_27.z, ssa_31.z
	vec1 32 ssa_47 = fmul ssa_27.w, ssa_31.z
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_43, ssa_47
	vec1 32 ssa_52 = fadd ssa_48, ssa_29.x
	vec1 32 ssa_53 = fadd ssa_49, ssa_29.y
	vec1 32 ssa_54 = fadd ssa_50, ssa_29.z
	vec1 32 ssa_55 = fadd ssa_51, ssa_29.w
	vec1 32 ssa_56 = fmul ssa_23.x, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_23.y, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_23.z, ssa_3.x
	vec1 32 ssa_59 = fmul ssa_25.x, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_25.y, ssa_3.y
	vec1 32 ssa_61 = fmul ssa_25.z, ssa_3.y
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fadd ssa_58, ssa_61
	vec1 32 ssa_65 = fmul ssa_27.x, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_27.y, ssa_3.z
	vec1 32 ssa_67 = fmul ssa_27.z, ssa_3.z
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fadd ssa_64, ssa_67
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = fneg ssa_54
	vec3 32 ssa_75 = vec3 ssa_68, ssa_69, ssa_70
	vec1 32 ssa_82 = deref_var &outNormal (shader_out float) 
	vec1 32 ssa_83 = mov ssa_68
	intrinsic store_deref (ssa_82, ssa_68) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_84 = deref_var &outNormal@0 (shader_out float) 
	vec1 32 ssa_85 = mov ssa_69
	intrinsic store_deref (ssa_84, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_86 = deref_var &outNormal@1 (shader_out float) 
	vec1 32 ssa_87 = mov ssa_70
	intrinsic store_deref (ssa_86, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_88 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_89 = mov ssa_19
	intrinsic store_deref (ssa_88, ssa_19) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_90 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_91 = mov ssa_20
	intrinsic store_deref (ssa_90, ssa_20) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_92 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_93 = mov ssa_21
	intrinsic store_deref (ssa_92, ssa_21) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_78 = vec3 ssa_71, ssa_72, ssa_73
	vec1 32 ssa_94 = deref_var &outLightVec (shader_out float) 
	vec1 32 ssa_95 = mov ssa_71
	intrinsic store_deref (ssa_94, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_96 = deref_var &outLightVec@4 (shader_out float) 
	vec1 32 ssa_97 = mov ssa_72
	intrinsic store_deref (ssa_96, ssa_72) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_98 = deref_var &outLightVec@5 (shader_out float) 
	vec1 32 ssa_99 = mov ssa_73
	intrinsic store_deref (ssa_98, ssa_73) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_100 = deref_var &outViewVec (shader_out float) 
	vec1 32 ssa_101 = mov ssa_71
	intrinsic store_deref (ssa_100, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_102 = deref_var &outViewVec@6 (shader_out float) 
	vec1 32 ssa_103 = mov ssa_72
	intrinsic store_deref (ssa_102, ssa_72) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_104 = deref_var &outViewVec@7 (shader_out float) 
	vec1 32 ssa_105 = mov ssa_73
	intrinsic store_deref (ssa_104, ssa_73) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_80 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_81 = vec4 ssa_52, ssa_53, ssa_54, ssa_55
	intrinsic store_deref (ssa_80, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outLightVec (VARYING_SLOT_VAR4.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outLightVec@4 (VARYING_SLOT_VAR4.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outLightVec@5 (VARYING_SLOT_VAR4.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@6 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@7 (VARYING_SLOT_VAR3.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_23 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_24 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_25 = intrinsic load_push_constant (ssa_24) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_26 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_27 = intrinsic load_push_constant (ssa_26) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_28 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_29 = intrinsic load_push_constant (ssa_28) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_30 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_31 = intrinsic load_deref (ssa_30) (0) /* access=0 */
	vec1 32 ssa_32 = fmul ssa_23.x, ssa_31.x
	vec1 32 ssa_33 = fmul ssa_23.y, ssa_31.x
	vec1 32 ssa_34 = fmul ssa_23.z, ssa_31.x
	vec1 32 ssa_35 = fmul ssa_23.w, ssa_31.x
	vec1 32 ssa_36 = fmul ssa_25.x, ssa_31.y
	vec1 32 ssa_37 = fmul ssa_25.y, ssa_31.y
	vec1 32 ssa_38 = fmul ssa_25.z, ssa_31.y
	vec1 32 ssa_39 = fmul ssa_25.w, ssa_31.y
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fadd ssa_35, ssa_39
	vec1 32 ssa_44 = fmul ssa_27.x, ssa_31.z
	vec1 32 ssa_45 = fmul ssa_27.y, ssa_31.z
	vec1 32 ssa_46 = fmul ssa_27.z, ssa_31.z
	vec1 32 ssa_47 = fmul ssa_27.w, ssa_31.z
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_43, ssa_47
	vec1 32 ssa_52 = fadd ssa_48, ssa_29.x
	vec1 32 ssa_53 = fadd ssa_49, ssa_29.y
	vec1 32 ssa_54 = fadd ssa_50, ssa_29.z
	vec1 32 ssa_55 = fadd ssa_51, ssa_29.w
	vec1 32 ssa_56 = fmul ssa_23.x, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_23.y, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_23.z, ssa_3.x
	vec1 32 ssa_59 = fmul ssa_25.x, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_25.y, ssa_3.y
	vec1 32 ssa_61 = fmul ssa_25.z, ssa_3.y
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fadd ssa_58, ssa_61
	vec1 32 ssa_65 = fmul ssa_27.x, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_27.y, ssa_3.z
	vec1 32 ssa_67 = fmul ssa_27.z, ssa_3.z
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fadd ssa_64, ssa_67
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = fneg ssa_54
	vec1 32 ssa_82 = deref_var &outNormal (shader_out float) 
	intrinsic store_deref (ssa_82, ssa_68) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_84 = deref_var &outNormal@0 (shader_out float) 
	intrinsic store_deref (ssa_84, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_86 = deref_var &outNormal@1 (shader_out float) 
	intrinsic store_deref (ssa_86, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_88 = deref_var &outColor (shader_out float) 
	intrinsic store_deref (ssa_88, ssa_19) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_90 = deref_var &outColor@2 (shader_out float) 
	intrinsic store_deref (ssa_90, ssa_20) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_92 = deref_var &outColor@3 (shader_out float) 
	intrinsic store_deref (ssa_92, ssa_21) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_94 = deref_var &outLightVec (shader_out float) 
	intrinsic store_deref (ssa_94, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_96 = deref_var &outLightVec@4 (shader_out float) 
	intrinsic store_deref (ssa_96, ssa_72) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_98 = deref_var &outLightVec@5 (shader_out float) 
	intrinsic store_deref (ssa_98, ssa_73) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_100 = deref_var &outViewVec (shader_out float) 
	intrinsic store_deref (ssa_100, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_102 = deref_var &outViewVec@6 (shader_out float) 
	intrinsic store_deref (ssa_102, ssa_72) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_104 = deref_var &outViewVec@7 (shader_out float) 
	intrinsic store_deref (ssa_104, ssa_73) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_80 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_81 = vec4 ssa_52, ssa_53, ssa_54, ssa_55
	intrinsic store_deref (ssa_80, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec (VARYING_SLOT_VAR4.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec@2 (VARYING_SLOT_VAR4.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec@3 (VARYING_SLOT_VAR4.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@6 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@7 (VARYING_SLOT_VAR1.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_80 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = intrinsic load_deref (ssa_80) (0) /* access=0 */
	vec1 32 ssa_82 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = intrinsic load_deref (ssa_82) (0) /* access=0 */
	vec1 32 ssa_84 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = intrinsic load_deref (ssa_84) (0) /* access=0 */
	vec3 32 ssa_86 = vec3 ssa_81, ssa_83, ssa_85
	vec1 32 ssa_6 = fmul ssa_81, ssa_81
	vec1 32 ssa_7 = fmul ssa_83, ssa_83
	vec1 32 ssa_8 = fadd ssa_6, ssa_7
	vec1 32 ssa_9 = fmul ssa_85, ssa_85
	vec1 32 ssa_10 = fadd ssa_8, ssa_9
	vec1 32 ssa_11 = frsq ssa_10
	vec1 32 ssa_12 = fmul ssa_81, ssa_11
	vec1 32 ssa_13 = fmul ssa_83, ssa_11
	vec1 32 ssa_14 = fmul ssa_85, ssa_11
	vec1 32 ssa_87 = deref_var &inLightVec (shader_in float) 
	vec1 32 ssa_88 = intrinsic load_deref (ssa_87) (0) /* access=0 */
	vec1 32 ssa_89 = deref_var &inLightVec@2 (shader_in float) 
	vec1 32 ssa_90 = intrinsic load_deref (ssa_89) (0) /* access=0 */
	vec1 32 ssa_91 = deref_var &inLightVec@3 (shader_in float) 
	vec1 32 ssa_92 = intrinsic load_deref (ssa_91) (0) /* access=0 */
	vec3 32 ssa_93 = vec3 ssa_88, ssa_90, ssa_92
	vec1 32 ssa_17 = fmul ssa_88, ssa_88
	vec1 32 ssa_18 = fmul ssa_90, ssa_90
	vec1 32 ssa_19 = fadd ssa_17, ssa_18
	vec1 32 ssa_20 = fmul ssa_92, ssa_92
	vec1 32 ssa_21 = fadd ssa_19, ssa_20
	vec1 32 ssa_22 = frsq ssa_21
	vec1 32 ssa_23 = fmul ssa_88, ssa_22
	vec1 32 ssa_24 = fmul ssa_90, ssa_22
	vec1 32 ssa_25 = fmul ssa_92, ssa_22
	vec1 32 ssa_94 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_95 = intrinsic load_deref (ssa_94) (0) /* access=0 */
	vec1 32 ssa_96 = deref_var &inViewVec@4 (shader_in float) 
	vec1 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = deref_var &inViewVec@5 (shader_in float) 
	vec1 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
	vec3 32 ssa_100 = vec3 ssa_95, ssa_97, ssa_99
	vec1 32 ssa_28 = fmul ssa_95, ssa_95
	vec1 32 ssa_29 = fmul ssa_97, ssa_97
	vec1 32 ssa_30 = fadd ssa_28, ssa_29
	vec1 32 ssa_31 = fmul ssa_99, ssa_99
	vec1 32 ssa_32 = fadd ssa_30, ssa_31
	vec1 32 ssa_33 = frsq ssa_32
	vec1 32 ssa_34 = fmul ssa_95, ssa_33
	vec1 32 ssa_35 = fmul ssa_97, ssa_33
	vec1 32 ssa_36 = fmul ssa_99, ssa_33
	vec1 32 ssa_37 = fneg ssa_23
	vec1 32 ssa_38 = fneg ssa_24
	vec1 32 ssa_39 = fneg ssa_25
	vec1 32 ssa_40 = fmul ssa_23, ssa_12
	vec1 32 ssa_41 = fneg ssa_40
	vec1 32 ssa_42 = fmul ssa_24, ssa_13
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = fmul ssa_25, ssa_14
	vec1 32 ssa_46 = fneg ssa_45
	vec1 32 ssa_47 = fadd ssa_44, ssa_46
	vec1 32 ssa_48 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_49 = fmul ssa_47, ssa_48
	vec1 32 ssa_50 = fmul ssa_49, ssa_12
	vec1 32 ssa_51 = fmul ssa_49, ssa_13
	vec1 32 ssa_52 = fmul ssa_49, ssa_14
	vec1 32 ssa_53 = fneg ssa_50
	vec1 32 ssa_54 = fadd ssa_37, ssa_53
	vec1 32 ssa_55 = fneg ssa_51
	vec1 32 ssa_56 = fadd ssa_38, ssa_55
	vec1 32 ssa_57 = fneg ssa_52
	vec1 32 ssa_58 = fadd ssa_39, ssa_57
	vec1 32 ssa_59 = fadd ssa_40, ssa_42
	vec1 32 ssa_60 = fadd ssa_59, ssa_45
	vec1 32 ssa_61 = fmax ssa_60, ssa_3
	vec1 32 ssa_101 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_102 = intrinsic load_deref (ssa_101) (0) /* access=0 */
	vec1 32 ssa_103 = deref_var &inColor@6 (shader_in float) 
	vec1 32 ssa_104 = intrinsic load_deref (ssa_103) (0) /* access=0 */
	vec1 32 ssa_105 = deref_var &inColor@7 (shader_in float) 
	vec1 32 ssa_106 = intrinsic load_deref (ssa_105) (0) /* access=0 */
	vec3 32 ssa_107 = vec3 ssa_102, ssa_104, ssa_106
	vec1 32 ssa_64 = fmul ssa_102, ssa_61
	vec1 32 ssa_65 = fmul ssa_104, ssa_61
	vec1 32 ssa_66 = fmul ssa_106, ssa_61
	vec1 32 ssa_67 = fmul ssa_54, ssa_34
	vec1 32 ssa_68 = fmul ssa_56, ssa_35
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_70 = fmul ssa_58, ssa_36
	vec1 32 ssa_71 = fadd ssa_69, ssa_70
	vec1 32 ssa_72 = fmax ssa_71, ssa_3
	vec1 32 ssa_73 = fpow ssa_72, ssa_2
	vec1 32 ssa_74 = fmul ssa_1, ssa_73
	vec1 32 ssa_75 = fadd ssa_64, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_74
	vec1 32 ssa_77 = fadd ssa_66, ssa_74
	vec1 32 ssa_78 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_79 = vec4 ssa_75, ssa_76, ssa_77, ssa_0
	intrinsic store_deref (ssa_78, ssa_79) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec (VARYING_SLOT_VAR4.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec@2 (VARYING_SLOT_VAR4.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec@3 (VARYING_SLOT_VAR4.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@6 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@7 (VARYING_SLOT_VAR1.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_80 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = intrinsic load_deref (ssa_80) (0) /* access=0 */
	vec1 32 ssa_82 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = intrinsic load_deref (ssa_82) (0) /* access=0 */
	vec1 32 ssa_84 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = intrinsic load_deref (ssa_84) (0) /* access=0 */
	vec1 32 ssa_6 = fmul ssa_81, ssa_81
	vec1 32 ssa_7 = fmul ssa_83, ssa_83
	vec1 32 ssa_8 = fadd ssa_6, ssa_7
	vec1 32 ssa_9 = fmul ssa_85, ssa_85
	vec1 32 ssa_10 = fadd ssa_8, ssa_9
	vec1 32 ssa_11 = frsq ssa_10
	vec1 32 ssa_12 = fmul ssa_81, ssa_11
	vec1 32 ssa_13 = fmul ssa_83, ssa_11
	vec1 32 ssa_14 = fmul ssa_85, ssa_11
	vec1 32 ssa_87 = deref_var &inLightVec (shader_in float) 
	vec1 32 ssa_88 = intrinsic load_deref (ssa_87) (0) /* access=0 */
	vec1 32 ssa_89 = deref_var &inLightVec@2 (shader_in float) 
	vec1 32 ssa_90 = intrinsic load_deref (ssa_89) (0) /* access=0 */
	vec1 32 ssa_91 = deref_var &inLightVec@3 (shader_in float) 
	vec1 32 ssa_92 = intrinsic load_deref (ssa_91) (0) /* access=0 */
	vec1 32 ssa_17 = fmul ssa_88, ssa_88
	vec1 32 ssa_18 = fmul ssa_90, ssa_90
	vec1 32 ssa_19 = fadd ssa_17, ssa_18
	vec1 32 ssa_20 = fmul ssa_92, ssa_92
	vec1 32 ssa_21 = fadd ssa_19, ssa_20
	vec1 32 ssa_22 = frsq ssa_21
	vec1 32 ssa_23 = fmul ssa_88, ssa_22
	vec1 32 ssa_24 = fmul ssa_90, ssa_22
	vec1 32 ssa_25 = fmul ssa_92, ssa_22
	vec1 32 ssa_94 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_95 = intrinsic load_deref (ssa_94) (0) /* access=0 */
	vec1 32 ssa_96 = deref_var &inViewVec@4 (shader_in float) 
	vec1 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_98 = deref_var &inViewVec@5 (shader_in float) 
	vec1 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
	vec1 32 ssa_28 = fmul ssa_95, ssa_95
	vec1 32 ssa_29 = fmul ssa_97, ssa_97
	vec1 32 ssa_30 = fadd ssa_28, ssa_29
	vec1 32 ssa_31 = fmul ssa_99, ssa_99
	vec1 32 ssa_32 = fadd ssa_30, ssa_31
	vec1 32 ssa_33 = frsq ssa_32
	vec1 32 ssa_34 = fmul ssa_95, ssa_33
	vec1 32 ssa_35 = fmul ssa_97, ssa_33
	vec1 32 ssa_36 = fmul ssa_99, ssa_33
	vec1 32 ssa_37 = fneg ssa_23
	vec1 32 ssa_38 = fneg ssa_24
	vec1 32 ssa_39 = fneg ssa_25
	vec1 32 ssa_40 = fmul ssa_23, ssa_12
	vec1 32 ssa_41 = fneg ssa_40
	vec1 32 ssa_42 = fmul ssa_24, ssa_13
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = fmul ssa_25, ssa_14
	vec1 32 ssa_46 = fneg ssa_45
	vec1 32 ssa_47 = fadd ssa_44, ssa_46
	vec1 32 ssa_48 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_49 = fmul ssa_47, ssa_48
	vec1 32 ssa_50 = fmul ssa_49, ssa_12
	vec1 32 ssa_51 = fmul ssa_49, ssa_13
	vec1 32 ssa_52 = fmul ssa_49, ssa_14
	vec1 32 ssa_53 = fneg ssa_50
	vec1 32 ssa_54 = fadd ssa_37, ssa_53
	vec1 32 ssa_55 = fneg ssa_51
	vec1 32 ssa_56 = fadd ssa_38, ssa_55
	vec1 32 ssa_57 = fneg ssa_52
	vec1 32 ssa_58 = fadd ssa_39, ssa_57
	vec1 32 ssa_59 = fadd ssa_40, ssa_42
	vec1 32 ssa_60 = fadd ssa_59, ssa_45
	vec1 32 ssa_61 = fmax ssa_60, ssa_3
	vec1 32 ssa_101 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_102 = intrinsic load_deref (ssa_101) (0) /* access=0 */
	vec1 32 ssa_103 = deref_var &inColor@6 (shader_in float) 
	vec1 32 ssa_104 = intrinsic load_deref (ssa_103) (0) /* access=0 */
	vec1 32 ssa_105 = deref_var &inColor@7 (shader_in float) 
	vec1 32 ssa_106 = intrinsic load_deref (ssa_105) (0) /* access=0 */
	vec1 32 ssa_64 = fmul ssa_102, ssa_61
	vec1 32 ssa_65 = fmul ssa_104, ssa_61
	vec1 32 ssa_66 = fmul ssa_106, ssa_61
	vec1 32 ssa_67 = fmul ssa_54, ssa_34
	vec1 32 ssa_68 = fmul ssa_56, ssa_35
	vec1 32 ssa_69 = fadd ssa_67, ssa_68
	vec1 32 ssa_70 = fmul ssa_58, ssa_36
	vec1 32 ssa_71 = fadd ssa_69, ssa_70
	vec1 32 ssa_72 = fmax ssa_71, ssa_3
	vec1 32 ssa_73 = fpow ssa_72, ssa_2
	vec1 32 ssa_74 = fmul ssa_1, ssa_73
	vec1 32 ssa_75 = fadd ssa_64, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_74
	vec1 32 ssa_77 = fadd ssa_66, ssa_74
	vec1 32 ssa_78 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_79 = vec4 ssa_75, ssa_76, ssa_77, ssa_0
	intrinsic store_deref (ssa_78, ssa_79) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec (VARYING_SLOT_VAR4.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec@2 (VARYING_SLOT_VAR4.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec@3 (VARYING_SLOT_VAR4.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@6 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@7 (VARYING_SLOT_VAR1.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_9 = intrinsic load_deref (ssa_8) (0) /* access=0 */
	vec1 32 ssa_10 = fmul ssa_5, ssa_5
	vec1 32 ssa_11 = fmul ssa_7, ssa_7
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_9, ssa_9
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_5, ssa_15
	vec1 32 ssa_17 = fmul ssa_7, ssa_15
	vec1 32 ssa_18 = fmul ssa_9, ssa_15
	vec1 32 ssa_19 = deref_var &inLightVec (shader_in float) 
	vec1 32 ssa_100 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_101 = intrinsic load_deref (ssa_100) (0) /* access=0 */
	vec1 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &inLightVec@2 (shader_in float) 
	vec1 32 ssa_98 = deref_var &inViewVec@4 (shader_in float) 
	vec1 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
	vec1 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = deref_var &inLightVec@3 (shader_in float) 
	vec1 32 ssa_96 = deref_var &inViewVec@5 (shader_in float) 
	vec1 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_24 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_25 = fmul ssa_101, ssa_101
	vec1 32 ssa_26 = fmul ssa_99, ssa_99
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_97, ssa_97
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_101, ssa_30
	vec1 32 ssa_32 = fmul ssa_99, ssa_30
	vec1 32 ssa_33 = fmul ssa_97, ssa_30
	vec1 32 ssa_34 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_36 = deref_var &inViewVec@4 (shader_in float) 
	vec1 32 ssa_38 = deref_var &inViewVec@5 (shader_in float) 
	vec1 32 ssa_40 = fmul ssa_101, ssa_101
	vec1 32 ssa_41 = fmul ssa_99, ssa_99
	vec1 32 ssa_42 = fadd ssa_40, ssa_41
	vec1 32 ssa_43 = fmul ssa_97, ssa_97
	vec1 32 ssa_44 = fadd ssa_42, ssa_43
	vec1 32 ssa_45 = frsq ssa_44
	vec1 32 ssa_46 = fmul ssa_101, ssa_45
	vec1 32 ssa_47 = fmul ssa_99, ssa_45
	vec1 32 ssa_48 = fmul ssa_97, ssa_45
	vec1 32 ssa_49 = fneg ssa_31
	vec1 32 ssa_50 = fneg ssa_32
	vec1 32 ssa_51 = fneg ssa_33
	vec1 32 ssa_52 = fmul ssa_31, ssa_16
	vec1 32 ssa_53 = fneg ssa_52
	vec1 32 ssa_54 = fmul ssa_32, ssa_17
	vec1 32 ssa_55 = fneg ssa_54
	vec1 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_57 = fmul ssa_33, ssa_18
	vec1 32 ssa_58 = fneg ssa_57
	vec1 32 ssa_59 = fadd ssa_56, ssa_58
	vec1 32 ssa_60 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_61 = fmul ssa_59, ssa_60
	vec1 32 ssa_62 = fmul ssa_61, ssa_16
	vec1 32 ssa_63 = fmul ssa_61, ssa_17
	vec1 32 ssa_64 = fmul ssa_61, ssa_18
	vec1 32 ssa_65 = fneg ssa_62
	vec1 32 ssa_66 = fadd ssa_49, ssa_65
	vec1 32 ssa_67 = fneg ssa_63
	vec1 32 ssa_68 = fadd ssa_50, ssa_67
	vec1 32 ssa_69 = fneg ssa_64
	vec1 32 ssa_70 = fadd ssa_51, ssa_69
	vec1 32 ssa_71 = fadd ssa_52, ssa_54
	vec1 32 ssa_72 = fadd ssa_71, ssa_57
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_75 = intrinsic load_deref (ssa_74) (0) /* access=0 */
	vec1 32 ssa_76 = deref_var &inColor@6 (shader_in float) 
	vec1 32 ssa_77 = intrinsic load_deref (ssa_76) (0) /* access=0 */
	vec1 32 ssa_78 = deref_var &inColor@7 (shader_in float) 
	vec1 32 ssa_79 = intrinsic load_deref (ssa_78) (0) /* access=0 */
	vec1 32 ssa_80 = fmul ssa_75, ssa_73
	vec1 32 ssa_81 = fmul ssa_77, ssa_73
	vec1 32 ssa_82 = fmul ssa_79, ssa_73
	vec1 32 ssa_83 = fmul ssa_66, ssa_46
	vec1 32 ssa_84 = fmul ssa_68, ssa_47
	vec1 32 ssa_85 = fadd ssa_83, ssa_84
	vec1 32 ssa_86 = fmul ssa_70, ssa_48
	vec1 32 ssa_87 = fadd ssa_85, ssa_86
	vec1 32 ssa_88 = fmax ssa_87, ssa_3
	vec1 32 ssa_89 = fpow ssa_88, ssa_2
	vec1 32 ssa_90 = fmul ssa_1, ssa_89
	vec1 32 ssa_91 = fadd ssa_80, ssa_90
	vec1 32 ssa_92 = fadd ssa_81, ssa_90
	vec1 32 ssa_93 = fadd ssa_82, ssa_90
	vec1 32 ssa_94 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_95 = vec4 ssa_91, ssa_92, ssa_93, ssa_0
	intrinsic store_deref (ssa_94, ssa_95) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec (VARYING_SLOT_VAR4.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec@2 (VARYING_SLOT_VAR4.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec@3 (VARYING_SLOT_VAR4.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@6 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@7 (VARYING_SLOT_VAR1.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_9 = intrinsic load_deref (ssa_8) (0) /* access=0 */
	vec1 32 ssa_10 = fmul ssa_5, ssa_5
	vec1 32 ssa_11 = fmul ssa_7, ssa_7
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_9, ssa_9
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_5, ssa_15
	vec1 32 ssa_17 = fmul ssa_7, ssa_15
	vec1 32 ssa_18 = fmul ssa_9, ssa_15
	vec1 32 ssa_100 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_101 = intrinsic load_deref (ssa_100) (0) /* access=0 */
	vec1 32 ssa_98 = deref_var &inViewVec@4 (shader_in float) 
	vec1 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
	vec1 32 ssa_96 = deref_var &inViewVec@5 (shader_in float) 
	vec1 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_25 = fmul ssa_101, ssa_101
	vec1 32 ssa_26 = fmul ssa_99, ssa_99
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_97, ssa_97
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_101, ssa_30
	vec1 32 ssa_32 = fmul ssa_99, ssa_30
	vec1 32 ssa_33 = fmul ssa_97, ssa_30
	vec1 32 ssa_40 = fmul ssa_101, ssa_101
	vec1 32 ssa_41 = fmul ssa_99, ssa_99
	vec1 32 ssa_42 = fadd ssa_40, ssa_41
	vec1 32 ssa_43 = fmul ssa_97, ssa_97
	vec1 32 ssa_44 = fadd ssa_42, ssa_43
	vec1 32 ssa_45 = frsq ssa_44
	vec1 32 ssa_46 = fmul ssa_101, ssa_45
	vec1 32 ssa_47 = fmul ssa_99, ssa_45
	vec1 32 ssa_48 = fmul ssa_97, ssa_45
	vec1 32 ssa_49 = fneg ssa_31
	vec1 32 ssa_50 = fneg ssa_32
	vec1 32 ssa_51 = fneg ssa_33
	vec1 32 ssa_52 = fmul ssa_31, ssa_16
	vec1 32 ssa_53 = fneg ssa_52
	vec1 32 ssa_54 = fmul ssa_32, ssa_17
	vec1 32 ssa_55 = fneg ssa_54
	vec1 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_57 = fmul ssa_33, ssa_18
	vec1 32 ssa_58 = fneg ssa_57
	vec1 32 ssa_59 = fadd ssa_56, ssa_58
	vec1 32 ssa_60 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_61 = fmul ssa_59, ssa_60
	vec1 32 ssa_62 = fmul ssa_61, ssa_16
	vec1 32 ssa_63 = fmul ssa_61, ssa_17
	vec1 32 ssa_64 = fmul ssa_61, ssa_18
	vec1 32 ssa_65 = fneg ssa_62
	vec1 32 ssa_66 = fadd ssa_49, ssa_65
	vec1 32 ssa_67 = fneg ssa_63
	vec1 32 ssa_68 = fadd ssa_50, ssa_67
	vec1 32 ssa_69 = fneg ssa_64
	vec1 32 ssa_70 = fadd ssa_51, ssa_69
	vec1 32 ssa_71 = fadd ssa_52, ssa_54
	vec1 32 ssa_72 = fadd ssa_71, ssa_57
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_75 = intrinsic load_deref (ssa_74) (0) /* access=0 */
	vec1 32 ssa_76 = deref_var &inColor@6 (shader_in float) 
	vec1 32 ssa_77 = intrinsic load_deref (ssa_76) (0) /* access=0 */
	vec1 32 ssa_78 = deref_var &inColor@7 (shader_in float) 
	vec1 32 ssa_79 = intrinsic load_deref (ssa_78) (0) /* access=0 */
	vec1 32 ssa_80 = fmul ssa_75, ssa_73
	vec1 32 ssa_81 = fmul ssa_77, ssa_73
	vec1 32 ssa_82 = fmul ssa_79, ssa_73
	vec1 32 ssa_83 = fmul ssa_66, ssa_46
	vec1 32 ssa_84 = fmul ssa_68, ssa_47
	vec1 32 ssa_85 = fadd ssa_83, ssa_84
	vec1 32 ssa_86 = fmul ssa_70, ssa_48
	vec1 32 ssa_87 = fadd ssa_85, ssa_86
	vec1 32 ssa_88 = fmax ssa_87, ssa_3
	vec1 32 ssa_89 = fpow ssa_88, ssa_2
	vec1 32 ssa_90 = fmul ssa_1, ssa_89
	vec1 32 ssa_91 = fadd ssa_80, ssa_90
	vec1 32 ssa_92 = fadd ssa_81, ssa_90
	vec1 32 ssa_93 = fadd ssa_82, ssa_90
	vec1 32 ssa_94 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_95 = vec4 ssa_91, ssa_92, ssa_93, ssa_0
	intrinsic store_deref (ssa_94, ssa_95) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec (VARYING_SLOT_VAR4.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec@2 (VARYING_SLOT_VAR4.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inLightVec@3 (VARYING_SLOT_VAR4.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@6 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@7 (VARYING_SLOT_VAR1.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_9 = intrinsic load_deref (ssa_8) (0) /* access=0 */
	vec1 32 ssa_10 = fmul ssa_5, ssa_5
	vec1 32 ssa_11 = fmul ssa_7, ssa_7
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_9, ssa_9
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_5, ssa_15
	vec1 32 ssa_17 = fmul ssa_7, ssa_15
	vec1 32 ssa_18 = fmul ssa_9, ssa_15
	vec1 32 ssa_100 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_101 = intrinsic load_deref (ssa_100) (0) /* access=0 */
	vec1 32 ssa_98 = deref_var &inViewVec@4 (shader_in float) 
	vec1 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
	vec1 32 ssa_96 = deref_var &inViewVec@5 (shader_in float) 
	vec1 32 ssa_97 = intrinsic load_deref (ssa_96) (0) /* access=0 */
	vec1 32 ssa_25 = fmul ssa_101, ssa_101
	vec1 32 ssa_26 = fmul ssa_99, ssa_99
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_97, ssa_97
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_101, ssa_30
	vec1 32 ssa_32 = fmul ssa_99, ssa_30
	vec1 32 ssa_33 = fmul ssa_97, ssa_30
	vec1 32 ssa_49 = fneg ssa_31
	vec1 32 ssa_50 = fneg ssa_32
	vec1 32 ssa_51 = fneg ssa_33
	vec1 32 ssa_52 = fmul ssa_31, ssa_16
	vec1 32 ssa_53 = fneg ssa_52
	vec1 32 ssa_54 = fmul ssa_32, ssa_17
	vec1 32 ssa_55 = fneg ssa_54
	vec1 32 ssa_56 = fadd ssa_53, ssa_55
	vec1 32 ssa_57 = fmul ssa_33, ssa_18
	vec1 32 ssa_58 = fneg ssa_57
	vec1 32 ssa_59 = fadd ssa_56, ssa_58
	vec1 32 ssa_60 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_61 = fmul ssa_59, ssa_60
	vec1 32 ssa_62 = fmul ssa_61, ssa_16
	vec1 32 ssa_63 = fmul ssa_61, ssa_17
	vec1 32 ssa_64 = fmul ssa_61, ssa_18
	vec1 32 ssa_65 = fneg ssa_62
	vec1 32 ssa_66 = fadd ssa_49, ssa_65
	vec1 32 ssa_67 = fneg ssa_63
	vec1 32 ssa_68 = fadd ssa_50, ssa_67
	vec1 32 ssa_69 = fneg ssa_64
	vec1 32 ssa_70 = fadd ssa_51, ssa_69
	vec1 32 ssa_71 = fadd ssa_52, ssa_54
	vec1 32 ssa_72 = fadd ssa_71, ssa_57
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_75 = intrinsic load_deref (ssa_74) (0) /* access=0 */
	vec1 32 ssa_76 = deref_var &inColor@6 (shader_in float) 
	vec1 32 ssa_77 = intrinsic load_deref (ssa_76) (0) /* access=0 */
	vec1 32 ssa_78 = deref_var &inColor@7 (shader_in float) 
	vec1 32 ssa_79 = intrinsic load_deref (ssa_78) (0) /* access=0 */
	vec1 32 ssa_80 = fmul ssa_75, ssa_73
	vec1 32 ssa_81 = fmul ssa_77, ssa_73
	vec1 32 ssa_82 = fmul ssa_79, ssa_73
	vec1 32 ssa_83 = fmul ssa_66, ssa_31
	vec1 32 ssa_84 = fmul ssa_68, ssa_32
	vec1 32 ssa_85 = fadd ssa_83, ssa_84
	vec1 32 ssa_86 = fmul ssa_70, ssa_33
	vec1 32 ssa_87 = fadd ssa_85, ssa_86
	vec1 32 ssa_88 = fmax ssa_87, ssa_3
	vec1 32 ssa_89 = fpow ssa_88, ssa_2
	vec1 32 ssa_90 = fmul ssa_1, ssa_89
	vec1 32 ssa_91 = fadd ssa_80, ssa_90
	vec1 32 ssa_92 = fadd ssa_81, ssa_90
	vec1 32 ssa_93 = fadd ssa_82, ssa_90
	vec1 32 ssa_94 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_95 = vec4 ssa_91, ssa_92, ssa_93, ssa_0
	intrinsic store_deref (ssa_94, ssa_95) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_remove_dead_variables
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outLightVec (VARYING_SLOT_VAR4.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outLightVec@4 (VARYING_SLOT_VAR4.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outLightVec@5 (VARYING_SLOT_VAR4.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@6 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@7 (VARYING_SLOT_VAR3.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &outNormal (shader_out float) 
	intrinsic store_deref (ssa_73, ssa_67) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_74 = deref_var &outNormal@0 (shader_out float) 
	intrinsic store_deref (ssa_74, ssa_68) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_75 = deref_var &outNormal@1 (shader_out float) 
	intrinsic store_deref (ssa_75, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_76 = deref_var &outColor (shader_out float) 
	intrinsic store_deref (ssa_76, ssa_19) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = deref_var &outColor@2 (shader_out float) 
	intrinsic store_deref (ssa_77, ssa_20) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_78 = deref_var &outColor@3 (shader_out float) 
	intrinsic store_deref (ssa_78, ssa_21) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &outLightVec (shader_out float) 
	intrinsic store_deref (ssa_79, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_80 = deref_var &outLightVec@4 (shader_out float) 
	intrinsic store_deref (ssa_80, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_81 = deref_var &outLightVec@5 (shader_out float) 
	intrinsic store_deref (ssa_81, ssa_72) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_82 = deref_var &outViewVec (shader_out float) 
	intrinsic store_deref (ssa_82, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_83 = deref_var &outViewVec@6 (shader_out float) 
	intrinsic store_deref (ssa_83, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_84 = deref_var &outViewVec@7 (shader_out float) 
	intrinsic store_deref (ssa_84, ssa_72) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_85 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_86 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_85, ssa_86) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_remove_dead_variables
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@2 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@3 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@4 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@5 (VARYING_SLOT_VAR1.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_9 = intrinsic load_deref (ssa_8) (0) /* access=0 */
	vec1 32 ssa_10 = fmul ssa_5, ssa_5
	vec1 32 ssa_11 = fmul ssa_7, ssa_7
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_9, ssa_9
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_5, ssa_15
	vec1 32 ssa_17 = fmul ssa_7, ssa_15
	vec1 32 ssa_18 = fmul ssa_9, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_24 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_25 = fmul ssa_20, ssa_20
	vec1 32 ssa_26 = fmul ssa_22, ssa_22
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_24, ssa_24
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_20, ssa_30
	vec1 32 ssa_32 = fmul ssa_22, ssa_30
	vec1 32 ssa_33 = fmul ssa_24, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_60 = intrinsic load_deref (ssa_59) (0) /* access=0 */
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_62 = intrinsic load_deref (ssa_61) (0) /* access=0 */
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_64 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec1 32 ssa_65 = fmul ssa_60, ssa_58
	vec1 32 ssa_66 = fmul ssa_62, ssa_58
	vec1 32 ssa_67 = fmul ssa_64, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	intrinsic store_deref (ssa_79, ssa_80) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_global_vars_to_local
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE float outLightVec
	decl_var  INTERP_MODE_NONE float outLightVec@6
	decl_var  INTERP_MODE_NONE float outLightVec@7
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &outNormal (shader_out float) 
	intrinsic store_deref (ssa_73, ssa_67) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_74 = deref_var &outNormal@0 (shader_out float) 
	intrinsic store_deref (ssa_74, ssa_68) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_75 = deref_var &outNormal@1 (shader_out float) 
	intrinsic store_deref (ssa_75, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_76 = deref_var &outColor (shader_out float) 
	intrinsic store_deref (ssa_76, ssa_19) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = deref_var &outColor@2 (shader_out float) 
	intrinsic store_deref (ssa_77, ssa_20) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_78 = deref_var &outColor@3 (shader_out float) 
	intrinsic store_deref (ssa_78, ssa_21) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &outLightVec (function_temp float) 
	intrinsic store_deref (ssa_79, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_80 = deref_var &outLightVec@6 (function_temp float) 
	intrinsic store_deref (ssa_80, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_81 = deref_var &outLightVec@7 (function_temp float) 
	intrinsic store_deref (ssa_81, ssa_72) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_82 = deref_var &outViewVec (shader_out float) 
	intrinsic store_deref (ssa_82, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_83 = deref_var &outViewVec@4 (shader_out float) 
	intrinsic store_deref (ssa_83, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_84 = deref_var &outViewVec@5 (shader_out float) 
	intrinsic store_deref (ssa_84, ssa_72) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_85 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_86 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_85, ssa_86) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_global_vars_to_local
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@2 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@3 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@4 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@5 (VARYING_SLOT_VAR1.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_9 = intrinsic load_deref (ssa_8) (0) /* access=0 */
	vec1 32 ssa_10 = fmul ssa_5, ssa_5
	vec1 32 ssa_11 = fmul ssa_7, ssa_7
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_9, ssa_9
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_5, ssa_15
	vec1 32 ssa_17 = fmul ssa_7, ssa_15
	vec1 32 ssa_18 = fmul ssa_9, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_24 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_25 = fmul ssa_20, ssa_20
	vec1 32 ssa_26 = fmul ssa_22, ssa_22
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_24, ssa_24
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_20, ssa_30
	vec1 32 ssa_32 = fmul ssa_22, ssa_30
	vec1 32 ssa_33 = fmul ssa_24, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_60 = intrinsic load_deref (ssa_59) (0) /* access=0 */
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_62 = intrinsic load_deref (ssa_61) (0) /* access=0 */
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_64 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec1 32 ssa_65 = fmul ssa_60, ssa_58
	vec1 32 ssa_66 = fmul ssa_62, ssa_58
	vec1 32 ssa_67 = fmul ssa_64, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	intrinsic store_deref (ssa_79, ssa_80) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_indirect_derefs
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE float outLightVec
	decl_var  INTERP_MODE_NONE float outLightVec@6
	decl_var  INTERP_MODE_NONE float outLightVec@7
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &outNormal (shader_out float) 
	intrinsic store_deref (ssa_73, ssa_67) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_74 = deref_var &outNormal@0 (shader_out float) 
	intrinsic store_deref (ssa_74, ssa_68) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_75 = deref_var &outNormal@1 (shader_out float) 
	intrinsic store_deref (ssa_75, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_76 = deref_var &outColor (shader_out float) 
	intrinsic store_deref (ssa_76, ssa_19) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = deref_var &outColor@2 (shader_out float) 
	intrinsic store_deref (ssa_77, ssa_20) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_78 = deref_var &outColor@3 (shader_out float) 
	intrinsic store_deref (ssa_78, ssa_21) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &outLightVec (function_temp float) 
	intrinsic store_deref (ssa_79, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_80 = deref_var &outLightVec@6 (function_temp float) 
	intrinsic store_deref (ssa_80, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_81 = deref_var &outLightVec@7 (function_temp float) 
	intrinsic store_deref (ssa_81, ssa_72) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_82 = deref_var &outViewVec (shader_out float) 
	intrinsic store_deref (ssa_82, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_83 = deref_var &outViewVec@4 (shader_out float) 
	intrinsic store_deref (ssa_83, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_84 = deref_var &outViewVec@5 (shader_out float) 
	intrinsic store_deref (ssa_84, ssa_72) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_85 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_86 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_85, ssa_86) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_indirect_derefs
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@2 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@3 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@4 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@5 (VARYING_SLOT_VAR1.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_7 = intrinsic load_deref (ssa_6) (0) /* access=0 */
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_9 = intrinsic load_deref (ssa_8) (0) /* access=0 */
	vec1 32 ssa_10 = fmul ssa_5, ssa_5
	vec1 32 ssa_11 = fmul ssa_7, ssa_7
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_9, ssa_9
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_5, ssa_15
	vec1 32 ssa_17 = fmul ssa_7, ssa_15
	vec1 32 ssa_18 = fmul ssa_9, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_22 = intrinsic load_deref (ssa_21) (0) /* access=0 */
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_24 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_25 = fmul ssa_20, ssa_20
	vec1 32 ssa_26 = fmul ssa_22, ssa_22
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_24, ssa_24
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_20, ssa_30
	vec1 32 ssa_32 = fmul ssa_22, ssa_30
	vec1 32 ssa_33 = fmul ssa_24, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_60 = intrinsic load_deref (ssa_59) (0) /* access=0 */
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_62 = intrinsic load_deref (ssa_61) (0) /* access=0 */
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_64 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec1 32 ssa_65 = fmul ssa_60, ssa_58
	vec1 32 ssa_66 = fmul ssa_62, ssa_58
	vec1 32 ssa_67 = fmul ssa_64, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	intrinsic store_deref (ssa_79, ssa_80) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE float outLightVec
	decl_var  INTERP_MODE_NONE float outLightVec@6
	decl_var  INTERP_MODE_NONE float outLightVec@7
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &outNormal (shader_out float) 
	intrinsic store_deref (ssa_73, ssa_67) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_74 = deref_var &outNormal@0 (shader_out float) 
	intrinsic store_deref (ssa_74, ssa_68) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_75 = deref_var &outNormal@1 (shader_out float) 
	intrinsic store_deref (ssa_75, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_76 = deref_var &outColor (shader_out float) 
	intrinsic store_deref (ssa_76, ssa_19) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = deref_var &outColor@2 (shader_out float) 
	intrinsic store_deref (ssa_77, ssa_20) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_78 = deref_var &outColor@3 (shader_out float) 
	intrinsic store_deref (ssa_78, ssa_21) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &outLightVec (function_temp float) 
	vec1 32 ssa_80 = deref_var &outLightVec@6 (function_temp float) 
	vec1 32 ssa_81 = deref_var &outLightVec@7 (function_temp float) 
	vec1 32 ssa_82 = deref_var &outViewVec (shader_out float) 
	intrinsic store_deref (ssa_82, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_83 = deref_var &outViewVec@4 (shader_out float) 
	intrinsic store_deref (ssa_83, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_84 = deref_var &outViewVec@5 (shader_out float) 
	intrinsic store_deref (ssa_84, ssa_72) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_85 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_86 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_85, ssa_86) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE float outLightVec
	decl_var  INTERP_MODE_NONE float outLightVec@6
	decl_var  INTERP_MODE_NONE float outLightVec@7
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &outNormal (shader_out float) 
	intrinsic store_deref (ssa_73, ssa_67) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_74 = deref_var &outNormal@0 (shader_out float) 
	intrinsic store_deref (ssa_74, ssa_68) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_75 = deref_var &outNormal@1 (shader_out float) 
	intrinsic store_deref (ssa_75, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_76 = deref_var &outColor (shader_out float) 
	intrinsic store_deref (ssa_76, ssa_19) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = deref_var &outColor@2 (shader_out float) 
	intrinsic store_deref (ssa_77, ssa_20) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_78 = deref_var &outColor@3 (shader_out float) 
	intrinsic store_deref (ssa_78, ssa_21) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_82 = deref_var &outViewVec (shader_out float) 
	intrinsic store_deref (ssa_82, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_83 = deref_var &outViewVec@4 (shader_out float) 
	intrinsic store_deref (ssa_83, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_84 = deref_var &outViewVec@5 (shader_out float) 
	intrinsic store_deref (ssa_84, ssa_72) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_85 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_86 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_85, ssa_86) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &outNormal (shader_out float) 
	intrinsic store_deref (ssa_73, ssa_67) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_74 = deref_var &outNormal@0 (shader_out float) 
	intrinsic store_deref (ssa_74, ssa_68) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_75 = deref_var &outNormal@1 (shader_out float) 
	intrinsic store_deref (ssa_75, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_76 = deref_var &outColor (shader_out float) 
	intrinsic store_deref (ssa_76, ssa_19) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = deref_var &outColor@2 (shader_out float) 
	intrinsic store_deref (ssa_77, ssa_20) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_78 = deref_var &outColor@3 (shader_out float) 
	intrinsic store_deref (ssa_78, ssa_21) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &outViewVec (shader_out float) 
	intrinsic store_deref (ssa_79, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_80 = deref_var &outViewVec@4 (shader_out float) 
	intrinsic store_deref (ssa_80, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_81 = deref_var &outViewVec@5 (shader_out float) 
	intrinsic store_deref (ssa_81, ssa_72) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_82 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_lower_io_to_vector
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &outNormal (shader_out float) 
	vec1 32 ssa_84 = deref_var &outNormal@6 (shader_out vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	intrinsic store_deref (ssa_84, ssa_87) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_74 = deref_var &outNormal@0 (shader_out float) 
	vec1 32 ssa_88 = deref_var &outNormal@6 (shader_out vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	intrinsic store_deref (ssa_88, ssa_91) (2, 0) /* wrmask=y */ /* access=0 */
	vec1 32 ssa_75 = deref_var &outNormal@1 (shader_out float) 
	vec1 32 ssa_92 = deref_var &outNormal@6 (shader_out vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	intrinsic store_deref (ssa_92, ssa_95) (4, 0) /* wrmask=z */ /* access=0 */
	vec1 32 ssa_76 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_96 = deref_var &outColor@7 (shader_out vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	intrinsic store_deref (ssa_96, ssa_99) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_100 = deref_var &outColor@7 (shader_out vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	intrinsic store_deref (ssa_100, ssa_103) (2, 0) /* wrmask=y */ /* access=0 */
	vec1 32 ssa_78 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_104 = deref_var &outColor@7 (shader_out vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	intrinsic store_deref (ssa_104, ssa_107) (4, 0) /* wrmask=z */ /* access=0 */
	vec1 32 ssa_79 = deref_var &outViewVec (shader_out float) 
	vec1 32 ssa_108 = deref_var &outViewVec@8 (shader_out vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	intrinsic store_deref (ssa_108, ssa_111) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_80 = deref_var &outViewVec@4 (shader_out float) 
	vec1 32 ssa_112 = deref_var &outViewVec@8 (shader_out vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	intrinsic store_deref (ssa_112, ssa_115) (2, 0) /* wrmask=y */ /* access=0 */
	vec1 32 ssa_81 = deref_var &outViewVec@5 (shader_out float) 
	vec1 32 ssa_116 = deref_var &outViewVec@8 (shader_out vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	intrinsic store_deref (ssa_116, ssa_119) (4, 0) /* wrmask=z */ /* access=0 */
	vec1 32 ssa_82 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_combine_stores
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &outNormal (shader_out float) 
	vec1 32 ssa_84 = deref_var &outNormal@6 (shader_out vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	vec1 32 ssa_74 = deref_var &outNormal@0 (shader_out float) 
	vec1 32 ssa_88 = deref_var &outNormal@6 (shader_out vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	vec1 32 ssa_75 = deref_var &outNormal@1 (shader_out float) 
	vec1 32 ssa_92 = deref_var &outNormal@6 (shader_out vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	vec1 32 ssa_128 = mov ssa_87.x
	vec1 32 ssa_129 = mov ssa_91.y
	vec1 32 ssa_130 = mov ssa_95.z
	vec3 32 ssa_131 = vec3 ssa_128, ssa_129, ssa_130
	intrinsic store_deref (ssa_92, ssa_131) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_76 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_96 = deref_var &outColor@7 (shader_out vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	vec1 32 ssa_77 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_100 = deref_var &outColor@7 (shader_out vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	vec1 32 ssa_78 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_104 = deref_var &outColor@7 (shader_out vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	vec1 32 ssa_124 = mov ssa_99.x
	vec1 32 ssa_125 = mov ssa_103.y
	vec1 32 ssa_126 = mov ssa_107.z
	vec3 32 ssa_127 = vec3 ssa_124, ssa_125, ssa_126
	intrinsic store_deref (ssa_104, ssa_127) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_79 = deref_var &outViewVec (shader_out float) 
	vec1 32 ssa_108 = deref_var &outViewVec@8 (shader_out vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	vec1 32 ssa_80 = deref_var &outViewVec@4 (shader_out float) 
	vec1 32 ssa_112 = deref_var &outViewVec@8 (shader_out vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	vec1 32 ssa_81 = deref_var &outViewVec@5 (shader_out float) 
	vec1 32 ssa_116 = deref_var &outViewVec@8 (shader_out vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	vec1 32 ssa_120 = mov ssa_111.x
	vec1 32 ssa_121 = mov ssa_115.y
	vec1 32 ssa_122 = mov ssa_119.z
	vec3 32 ssa_123 = vec3 ssa_120, ssa_121, ssa_122
	intrinsic store_deref (ssa_116, ssa_123) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_82 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_io_to_vector
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@2 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@3 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@4 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@5 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 32 ssa_82 = mov ssa_5.x
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_83) (0) /* access=0 */
	vec1 32 ssa_84 = mov ssa_7.y
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_9 = intrinsic load_deref (ssa_85) (0) /* access=0 */
	vec1 32 ssa_86 = mov ssa_9.z
	vec1 32 ssa_10 = fmul ssa_82, ssa_82
	vec1 32 ssa_11 = fmul ssa_84, ssa_84
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_86, ssa_86
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_82, ssa_15
	vec1 32 ssa_17 = fmul ssa_84, ssa_15
	vec1 32 ssa_18 = fmul ssa_86, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_87 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_87) (0) /* access=0 */
	vec1 32 ssa_88 = mov ssa_20.x
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_89 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_89) (0) /* access=0 */
	vec1 32 ssa_90 = mov ssa_22.y
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_91 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_24 = intrinsic load_deref (ssa_91) (0) /* access=0 */
	vec1 32 ssa_92 = mov ssa_24.z
	vec1 32 ssa_25 = fmul ssa_88, ssa_88
	vec1 32 ssa_26 = fmul ssa_90, ssa_90
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_92, ssa_92
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_88, ssa_30
	vec1 32 ssa_32 = fmul ssa_90, ssa_30
	vec1 32 ssa_33 = fmul ssa_92, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_93 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_60 = intrinsic load_deref (ssa_93) (0) /* access=0 */
	vec1 32 ssa_94 = mov ssa_60.x
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_95 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_62 = intrinsic load_deref (ssa_95) (0) /* access=0 */
	vec1 32 ssa_96 = mov ssa_62.y
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_97 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_64 = intrinsic load_deref (ssa_97) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_64.z
	vec1 32 ssa_65 = fmul ssa_94, ssa_58
	vec1 32 ssa_66 = fmul ssa_96, ssa_58
	vec1 32 ssa_67 = fmul ssa_98, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	intrinsic store_deref (ssa_79, ssa_80) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_io_to_temporaries
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
decl_var  INTERP_MODE_NONE float out@outNormal-temp
decl_var  INTERP_MODE_NONE float out@outNormal-temp@0
decl_var  INTERP_MODE_NONE float out@outNormal-temp@1
decl_var  INTERP_MODE_NONE float out@outColor-temp
decl_var  INTERP_MODE_NONE float out@outColor-temp@2
decl_var  INTERP_MODE_NONE float out@outColor-temp@3
decl_var  INTERP_MODE_NONE float out@outViewVec-temp
decl_var  INTERP_MODE_NONE float out@outViewVec-temp@4
decl_var  INTERP_MODE_NONE float out@outViewVec-temp@5
decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@6
decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@7
decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@8
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@9 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@10 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@11 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@12 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@13 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@14 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@15 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@16 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@17 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &out@outNormal-temp (shader_temp float) 
	vec1 32 ssa_84 = deref_var &out@outNormal-temp@6 (shader_temp vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	vec1 32 ssa_74 = deref_var &out@outNormal-temp@0 (shader_temp float) 
	vec1 32 ssa_88 = deref_var &out@outNormal-temp@6 (shader_temp vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	vec1 32 ssa_75 = deref_var &out@outNormal-temp@1 (shader_temp float) 
	vec1 32 ssa_92 = deref_var &out@outNormal-temp@6 (shader_temp vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	vec1 32 ssa_128 = mov ssa_87.x
	vec1 32 ssa_129 = mov ssa_91.y
	vec1 32 ssa_130 = mov ssa_95.z
	vec3 32 ssa_131 = vec3 ssa_128, ssa_129, ssa_130
	intrinsic store_deref (ssa_92, ssa_131) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_76 = deref_var &out@outColor-temp (shader_temp float) 
	vec1 32 ssa_96 = deref_var &out@outColor-temp@7 (shader_temp vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	vec1 32 ssa_77 = deref_var &out@outColor-temp@2 (shader_temp float) 
	vec1 32 ssa_100 = deref_var &out@outColor-temp@7 (shader_temp vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	vec1 32 ssa_78 = deref_var &out@outColor-temp@3 (shader_temp float) 
	vec1 32 ssa_104 = deref_var &out@outColor-temp@7 (shader_temp vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	vec1 32 ssa_124 = mov ssa_99.x
	vec1 32 ssa_125 = mov ssa_103.y
	vec1 32 ssa_126 = mov ssa_107.z
	vec3 32 ssa_127 = vec3 ssa_124, ssa_125, ssa_126
	intrinsic store_deref (ssa_104, ssa_127) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outViewVec-temp (shader_temp float) 
	vec1 32 ssa_108 = deref_var &out@outViewVec-temp@8 (shader_temp vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	vec1 32 ssa_80 = deref_var &out@outViewVec-temp@4 (shader_temp float) 
	vec1 32 ssa_112 = deref_var &out@outViewVec-temp@8 (shader_temp vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	vec1 32 ssa_81 = deref_var &out@outViewVec-temp@5 (shader_temp float) 
	vec1 32 ssa_116 = deref_var &out@outViewVec-temp@8 (shader_temp vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	vec1 32 ssa_120 = mov ssa_111.x
	vec1 32 ssa_121 = mov ssa_115.y
	vec1 32 ssa_122 = mov ssa_119.z
	vec3 32 ssa_123 = vec3 ssa_120, ssa_121, ssa_122
	intrinsic store_deref (ssa_116, ssa_123) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_82 = deref_var &out@.field0-temp (shader_temp vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_132 = deref_var &out@.field0-temp (shader_temp vec4) 
	vec1 32 ssa_133 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_133, ssa_132) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_134 = deref_var &out@outNormal-temp (shader_temp float) 
	vec1 32 ssa_135 = deref_var &outNormal (shader_out float) 
	intrinsic copy_deref (ssa_135, ssa_134) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_136 = deref_var &out@outNormal-temp@0 (shader_temp float) 
	vec1 32 ssa_137 = deref_var &outNormal@9 (shader_out float) 
	intrinsic copy_deref (ssa_137, ssa_136) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_138 = deref_var &out@outNormal-temp@1 (shader_temp float) 
	vec1 32 ssa_139 = deref_var &outNormal@10 (shader_out float) 
	intrinsic copy_deref (ssa_139, ssa_138) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_140 = deref_var &out@outColor-temp (shader_temp float) 
	vec1 32 ssa_141 = deref_var &outColor (shader_out float) 
	intrinsic copy_deref (ssa_141, ssa_140) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_142 = deref_var &out@outColor-temp@2 (shader_temp float) 
	vec1 32 ssa_143 = deref_var &outColor@11 (shader_out float) 
	intrinsic copy_deref (ssa_143, ssa_142) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_144 = deref_var &out@outColor-temp@3 (shader_temp float) 
	vec1 32 ssa_145 = deref_var &outColor@12 (shader_out float) 
	intrinsic copy_deref (ssa_145, ssa_144) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_146 = deref_var &out@outViewVec-temp (shader_temp float) 
	vec1 32 ssa_147 = deref_var &outViewVec (shader_out float) 
	intrinsic copy_deref (ssa_147, ssa_146) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_148 = deref_var &out@outViewVec-temp@4 (shader_temp float) 
	vec1 32 ssa_149 = deref_var &outViewVec@13 (shader_out float) 
	intrinsic copy_deref (ssa_149, ssa_148) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_150 = deref_var &out@outViewVec-temp@5 (shader_temp float) 
	vec1 32 ssa_151 = deref_var &outViewVec@14 (shader_out float) 
	intrinsic copy_deref (ssa_151, ssa_150) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_152 = deref_var &out@outNormal-temp@6 (shader_temp vec3) 
	vec1 32 ssa_153 = deref_var &outNormal@15 (shader_out vec3) 
	intrinsic copy_deref (ssa_153, ssa_152) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_154 = deref_var &out@outColor-temp@7 (shader_temp vec3) 
	vec1 32 ssa_155 = deref_var &outColor@16 (shader_out vec3) 
	intrinsic copy_deref (ssa_155, ssa_154) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_156 = deref_var &out@outViewVec-temp@8 (shader_temp vec3) 
	vec1 32 ssa_157 = deref_var &outViewVec@17 (shader_out vec3) 
	intrinsic copy_deref (ssa_157, ssa_156) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_global_vars_to_local
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_84 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	vec1 32 ssa_74 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_88 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	vec1 32 ssa_75 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_92 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	vec1 32 ssa_128 = mov ssa_87.x
	vec1 32 ssa_129 = mov ssa_91.y
	vec1 32 ssa_130 = mov ssa_95.z
	vec3 32 ssa_131 = vec3 ssa_128, ssa_129, ssa_130
	intrinsic store_deref (ssa_92, ssa_131) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_76 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_96 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	vec1 32 ssa_77 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_100 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	vec1 32 ssa_78 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_104 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	vec1 32 ssa_124 = mov ssa_99.x
	vec1 32 ssa_125 = mov ssa_103.y
	vec1 32 ssa_126 = mov ssa_107.z
	vec3 32 ssa_127 = vec3 ssa_124, ssa_125, ssa_126
	intrinsic store_deref (ssa_104, ssa_127) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_108 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	vec1 32 ssa_80 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_112 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	vec1 32 ssa_81 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_116 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	vec1 32 ssa_120 = mov ssa_111.x
	vec1 32 ssa_121 = mov ssa_115.y
	vec1 32 ssa_122 = mov ssa_119.z
	vec3 32 ssa_123 = vec3 ssa_120, ssa_121, ssa_122
	intrinsic store_deref (ssa_116, ssa_123) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_82 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_132 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_133 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_133, ssa_132) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_134 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_135 = deref_var &outNormal (shader_out float) 
	intrinsic copy_deref (ssa_135, ssa_134) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_136 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_137 = deref_var &outNormal@0 (shader_out float) 
	intrinsic copy_deref (ssa_137, ssa_136) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_138 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_139 = deref_var &outNormal@1 (shader_out float) 
	intrinsic copy_deref (ssa_139, ssa_138) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_140 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_141 = deref_var &outColor (shader_out float) 
	intrinsic copy_deref (ssa_141, ssa_140) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_142 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_143 = deref_var &outColor@2 (shader_out float) 
	intrinsic copy_deref (ssa_143, ssa_142) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_144 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_145 = deref_var &outColor@3 (shader_out float) 
	intrinsic copy_deref (ssa_145, ssa_144) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_146 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_147 = deref_var &outViewVec (shader_out float) 
	intrinsic copy_deref (ssa_147, ssa_146) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_148 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_149 = deref_var &outViewVec@4 (shader_out float) 
	intrinsic copy_deref (ssa_149, ssa_148) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_150 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_151 = deref_var &outViewVec@5 (shader_out float) 
	intrinsic copy_deref (ssa_151, ssa_150) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_152 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec1 32 ssa_153 = deref_var &outNormal@6 (shader_out vec3) 
	intrinsic copy_deref (ssa_153, ssa_152) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_154 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec1 32 ssa_155 = deref_var &outColor@7 (shader_out vec3) 
	intrinsic copy_deref (ssa_155, ssa_154) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_156 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &outViewVec@8 (shader_out vec3) 
	intrinsic copy_deref (ssa_157, ssa_156) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_split_var_copies
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_84 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	vec1 32 ssa_74 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_88 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	vec1 32 ssa_75 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_92 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	vec1 32 ssa_128 = mov ssa_87.x
	vec1 32 ssa_129 = mov ssa_91.y
	vec1 32 ssa_130 = mov ssa_95.z
	vec3 32 ssa_131 = vec3 ssa_128, ssa_129, ssa_130
	intrinsic store_deref (ssa_92, ssa_131) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_76 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_96 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	vec1 32 ssa_77 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_100 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	vec1 32 ssa_78 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_104 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	vec1 32 ssa_124 = mov ssa_99.x
	vec1 32 ssa_125 = mov ssa_103.y
	vec1 32 ssa_126 = mov ssa_107.z
	vec3 32 ssa_127 = vec3 ssa_124, ssa_125, ssa_126
	intrinsic store_deref (ssa_104, ssa_127) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_108 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	vec1 32 ssa_80 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_112 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	vec1 32 ssa_81 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_116 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	vec1 32 ssa_120 = mov ssa_111.x
	vec1 32 ssa_121 = mov ssa_115.y
	vec1 32 ssa_122 = mov ssa_119.z
	vec3 32 ssa_123 = vec3 ssa_120, ssa_121, ssa_122
	intrinsic store_deref (ssa_116, ssa_123) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_82 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_132 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_133 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_133, ssa_132) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_134 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_135 = deref_var &outNormal (shader_out float) 
	intrinsic copy_deref (ssa_135, ssa_134) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_136 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_137 = deref_var &outNormal@0 (shader_out float) 
	intrinsic copy_deref (ssa_137, ssa_136) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_138 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_139 = deref_var &outNormal@1 (shader_out float) 
	intrinsic copy_deref (ssa_139, ssa_138) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_140 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_141 = deref_var &outColor (shader_out float) 
	intrinsic copy_deref (ssa_141, ssa_140) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_142 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_143 = deref_var &outColor@2 (shader_out float) 
	intrinsic copy_deref (ssa_143, ssa_142) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_144 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_145 = deref_var &outColor@3 (shader_out float) 
	intrinsic copy_deref (ssa_145, ssa_144) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_146 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_147 = deref_var &outViewVec (shader_out float) 
	intrinsic copy_deref (ssa_147, ssa_146) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_148 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_149 = deref_var &outViewVec@4 (shader_out float) 
	intrinsic copy_deref (ssa_149, ssa_148) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_150 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_151 = deref_var &outViewVec@5 (shader_out float) 
	intrinsic copy_deref (ssa_151, ssa_150) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_152 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec1 32 ssa_153 = deref_var &outNormal@6 (shader_out vec3) 
	intrinsic copy_deref (ssa_153, ssa_152) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_154 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec1 32 ssa_155 = deref_var &outColor@7 (shader_out vec3) 
	intrinsic copy_deref (ssa_155, ssa_154) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_156 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &outViewVec@8 (shader_out vec3) 
	intrinsic copy_deref (ssa_157, ssa_156) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_var_copies
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_84 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	vec1 32 ssa_74 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_88 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	vec1 32 ssa_75 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_92 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	vec1 32 ssa_128 = mov ssa_87.x
	vec1 32 ssa_129 = mov ssa_91.y
	vec1 32 ssa_130 = mov ssa_95.z
	vec3 32 ssa_131 = vec3 ssa_128, ssa_129, ssa_130
	intrinsic store_deref (ssa_92, ssa_131) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_76 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_96 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	vec1 32 ssa_77 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_100 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	vec1 32 ssa_78 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_104 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	vec1 32 ssa_124 = mov ssa_99.x
	vec1 32 ssa_125 = mov ssa_103.y
	vec1 32 ssa_126 = mov ssa_107.z
	vec3 32 ssa_127 = vec3 ssa_124, ssa_125, ssa_126
	intrinsic store_deref (ssa_104, ssa_127) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_108 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	vec1 32 ssa_80 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_112 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	vec1 32 ssa_81 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_116 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	vec1 32 ssa_120 = mov ssa_111.x
	vec1 32 ssa_121 = mov ssa_115.y
	vec1 32 ssa_122 = mov ssa_119.z
	vec3 32 ssa_123 = vec3 ssa_120, ssa_121, ssa_122
	intrinsic store_deref (ssa_116, ssa_123) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_82 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_132 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_133 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_132) (0) /* access=0 */
	intrinsic store_deref (ssa_133, ssa_158) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_134 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_135 = deref_var &outNormal (shader_out float) 
	vec1 32 ssa_159 = intrinsic load_deref (ssa_134) (0) /* access=0 */
	intrinsic store_deref (ssa_135, ssa_159) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_136 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_137 = deref_var &outNormal@0 (shader_out float) 
	vec1 32 ssa_160 = intrinsic load_deref (ssa_136) (0) /* access=0 */
	intrinsic store_deref (ssa_137, ssa_160) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_138 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_139 = deref_var &outNormal@1 (shader_out float) 
	vec1 32 ssa_161 = intrinsic load_deref (ssa_138) (0) /* access=0 */
	intrinsic store_deref (ssa_139, ssa_161) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_140 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_141 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_162 = intrinsic load_deref (ssa_140) (0) /* access=0 */
	intrinsic store_deref (ssa_141, ssa_162) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_142 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_143 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_163 = intrinsic load_deref (ssa_142) (0) /* access=0 */
	intrinsic store_deref (ssa_143, ssa_163) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_144 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_145 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_164 = intrinsic load_deref (ssa_144) (0) /* access=0 */
	intrinsic store_deref (ssa_145, ssa_164) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_146 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_147 = deref_var &outViewVec (shader_out float) 
	vec1 32 ssa_165 = intrinsic load_deref (ssa_146) (0) /* access=0 */
	intrinsic store_deref (ssa_147, ssa_165) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_148 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_149 = deref_var &outViewVec@4 (shader_out float) 
	vec1 32 ssa_166 = intrinsic load_deref (ssa_148) (0) /* access=0 */
	intrinsic store_deref (ssa_149, ssa_166) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_150 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_151 = deref_var &outViewVec@5 (shader_out float) 
	vec1 32 ssa_167 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	intrinsic store_deref (ssa_151, ssa_167) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_152 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec1 32 ssa_153 = deref_var &outNormal@6 (shader_out vec3) 
	vec3 32 ssa_168 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	intrinsic store_deref (ssa_153, ssa_168) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_154 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec1 32 ssa_155 = deref_var &outColor@7 (shader_out vec3) 
	vec3 32 ssa_169 = intrinsic load_deref (ssa_154) (0) /* access=0 */
	intrinsic store_deref (ssa_155, ssa_169) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_156 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &outViewVec@8 (shader_out vec3) 
	vec3 32 ssa_170 = intrinsic load_deref (ssa_156) (0) /* access=0 */
	intrinsic store_deref (ssa_157, ssa_170) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

anv_nir_lower_ycbcr_textures
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_84 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	vec1 32 ssa_74 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_88 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	vec1 32 ssa_75 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_92 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	vec1 32 ssa_128 = mov ssa_87.x
	vec1 32 ssa_129 = mov ssa_91.y
	vec1 32 ssa_130 = mov ssa_95.z
	vec3 32 ssa_131 = vec3 ssa_128, ssa_129, ssa_130
	intrinsic store_deref (ssa_92, ssa_131) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_76 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_96 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	vec1 32 ssa_77 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_100 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	vec1 32 ssa_78 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_104 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	vec1 32 ssa_124 = mov ssa_99.x
	vec1 32 ssa_125 = mov ssa_103.y
	vec1 32 ssa_126 = mov ssa_107.z
	vec3 32 ssa_127 = vec3 ssa_124, ssa_125, ssa_126
	intrinsic store_deref (ssa_104, ssa_127) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_108 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	vec1 32 ssa_80 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_112 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	vec1 32 ssa_81 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_116 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	vec1 32 ssa_120 = mov ssa_111.x
	vec1 32 ssa_121 = mov ssa_115.y
	vec1 32 ssa_122 = mov ssa_119.z
	vec3 32 ssa_123 = vec3 ssa_120, ssa_121, ssa_122
	intrinsic store_deref (ssa_116, ssa_123) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_82 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_132 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_133 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_132) (0) /* access=0 */
	intrinsic store_deref (ssa_133, ssa_158) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_134 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_135 = deref_var &outNormal (shader_out float) 
	vec1 32 ssa_159 = intrinsic load_deref (ssa_134) (0) /* access=0 */
	intrinsic store_deref (ssa_135, ssa_159) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_136 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_137 = deref_var &outNormal@0 (shader_out float) 
	vec1 32 ssa_160 = intrinsic load_deref (ssa_136) (0) /* access=0 */
	intrinsic store_deref (ssa_137, ssa_160) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_138 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_139 = deref_var &outNormal@1 (shader_out float) 
	vec1 32 ssa_161 = intrinsic load_deref (ssa_138) (0) /* access=0 */
	intrinsic store_deref (ssa_139, ssa_161) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_140 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_141 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_162 = intrinsic load_deref (ssa_140) (0) /* access=0 */
	intrinsic store_deref (ssa_141, ssa_162) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_142 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_143 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_163 = intrinsic load_deref (ssa_142) (0) /* access=0 */
	intrinsic store_deref (ssa_143, ssa_163) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_144 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_145 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_164 = intrinsic load_deref (ssa_144) (0) /* access=0 */
	intrinsic store_deref (ssa_145, ssa_164) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_146 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_147 = deref_var &outViewVec (shader_out float) 
	vec1 32 ssa_165 = intrinsic load_deref (ssa_146) (0) /* access=0 */
	intrinsic store_deref (ssa_147, ssa_165) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_148 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_149 = deref_var &outViewVec@4 (shader_out float) 
	vec1 32 ssa_166 = intrinsic load_deref (ssa_148) (0) /* access=0 */
	intrinsic store_deref (ssa_149, ssa_166) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_150 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_151 = deref_var &outViewVec@5 (shader_out float) 
	vec1 32 ssa_167 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	intrinsic store_deref (ssa_151, ssa_167) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_152 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec1 32 ssa_153 = deref_var &outNormal@6 (shader_out vec3) 
	vec3 32 ssa_168 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	intrinsic store_deref (ssa_153, ssa_168) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_154 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec1 32 ssa_155 = deref_var &outColor@7 (shader_out vec3) 
	vec3 32 ssa_169 = intrinsic load_deref (ssa_154) (0) /* access=0 */
	intrinsic store_deref (ssa_155, ssa_169) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_156 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &outViewVec@8 (shader_out vec3) 
	vec3 32 ssa_170 = intrinsic load_deref (ssa_156) (0) /* access=0 */
	intrinsic store_deref (ssa_157, ssa_170) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

anv_nir_lower_multiview
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_84 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	vec1 32 ssa_74 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_88 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	vec1 32 ssa_75 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_92 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	vec1 32 ssa_128 = mov ssa_87.x
	vec1 32 ssa_129 = mov ssa_91.y
	vec1 32 ssa_130 = mov ssa_95.z
	vec3 32 ssa_131 = vec3 ssa_128, ssa_129, ssa_130
	intrinsic store_deref (ssa_92, ssa_131) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_76 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_96 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	vec1 32 ssa_77 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_100 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	vec1 32 ssa_78 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_104 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	vec1 32 ssa_124 = mov ssa_99.x
	vec1 32 ssa_125 = mov ssa_103.y
	vec1 32 ssa_126 = mov ssa_107.z
	vec3 32 ssa_127 = vec3 ssa_124, ssa_125, ssa_126
	intrinsic store_deref (ssa_104, ssa_127) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_108 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	vec1 32 ssa_80 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_112 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	vec1 32 ssa_81 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_116 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	vec1 32 ssa_120 = mov ssa_111.x
	vec1 32 ssa_121 = mov ssa_115.y
	vec1 32 ssa_122 = mov ssa_119.z
	vec3 32 ssa_123 = vec3 ssa_120, ssa_121, ssa_122
	intrinsic store_deref (ssa_116, ssa_123) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_82 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_132 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_133 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_132) (0) /* access=0 */
	intrinsic store_deref (ssa_133, ssa_158) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_134 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_135 = deref_var &outNormal (shader_out float) 
	vec1 32 ssa_159 = intrinsic load_deref (ssa_134) (0) /* access=0 */
	intrinsic store_deref (ssa_135, ssa_159) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_136 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_137 = deref_var &outNormal@0 (shader_out float) 
	vec1 32 ssa_160 = intrinsic load_deref (ssa_136) (0) /* access=0 */
	intrinsic store_deref (ssa_137, ssa_160) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_138 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_139 = deref_var &outNormal@1 (shader_out float) 
	vec1 32 ssa_161 = intrinsic load_deref (ssa_138) (0) /* access=0 */
	intrinsic store_deref (ssa_139, ssa_161) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_140 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_141 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_162 = intrinsic load_deref (ssa_140) (0) /* access=0 */
	intrinsic store_deref (ssa_141, ssa_162) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_142 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_143 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_163 = intrinsic load_deref (ssa_142) (0) /* access=0 */
	intrinsic store_deref (ssa_143, ssa_163) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_144 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_145 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_164 = intrinsic load_deref (ssa_144) (0) /* access=0 */
	intrinsic store_deref (ssa_145, ssa_164) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_146 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_147 = deref_var &outViewVec (shader_out float) 
	vec1 32 ssa_165 = intrinsic load_deref (ssa_146) (0) /* access=0 */
	intrinsic store_deref (ssa_147, ssa_165) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_148 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_149 = deref_var &outViewVec@4 (shader_out float) 
	vec1 32 ssa_166 = intrinsic load_deref (ssa_148) (0) /* access=0 */
	intrinsic store_deref (ssa_149, ssa_166) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_150 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_151 = deref_var &outViewVec@5 (shader_out float) 
	vec1 32 ssa_167 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	intrinsic store_deref (ssa_151, ssa_167) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_152 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec1 32 ssa_153 = deref_var &outNormal@6 (shader_out vec3) 
	vec3 32 ssa_168 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	intrinsic store_deref (ssa_153, ssa_168) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_154 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec1 32 ssa_155 = deref_var &outColor@7 (shader_out vec3) 
	vec3 32 ssa_169 = intrinsic load_deref (ssa_154) (0) /* access=0 */
	intrinsic store_deref (ssa_155, ssa_169) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_156 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &outViewVec@8 (shader_out vec3) 
	vec3 32 ssa_170 = intrinsic load_deref (ssa_156) (0) /* access=0 */
	intrinsic store_deref (ssa_157, ssa_170) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

brw_nir_lower_image_load_store
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_84 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	vec1 32 ssa_74 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_88 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	vec1 32 ssa_75 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_92 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	vec1 32 ssa_128 = mov ssa_87.x
	vec1 32 ssa_129 = mov ssa_91.y
	vec1 32 ssa_130 = mov ssa_95.z
	vec3 32 ssa_131 = vec3 ssa_128, ssa_129, ssa_130
	intrinsic store_deref (ssa_92, ssa_131) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_76 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_96 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	vec1 32 ssa_77 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_100 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	vec1 32 ssa_78 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_104 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	vec1 32 ssa_124 = mov ssa_99.x
	vec1 32 ssa_125 = mov ssa_103.y
	vec1 32 ssa_126 = mov ssa_107.z
	vec3 32 ssa_127 = vec3 ssa_124, ssa_125, ssa_126
	intrinsic store_deref (ssa_104, ssa_127) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_108 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	vec1 32 ssa_80 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_112 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	vec1 32 ssa_81 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_116 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	vec1 32 ssa_120 = mov ssa_111.x
	vec1 32 ssa_121 = mov ssa_115.y
	vec1 32 ssa_122 = mov ssa_119.z
	vec3 32 ssa_123 = vec3 ssa_120, ssa_121, ssa_122
	intrinsic store_deref (ssa_116, ssa_123) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_82 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_132 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_133 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_132) (0) /* access=0 */
	intrinsic store_deref (ssa_133, ssa_158) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_134 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_135 = deref_var &outNormal (shader_out float) 
	vec1 32 ssa_159 = intrinsic load_deref (ssa_134) (0) /* access=0 */
	intrinsic store_deref (ssa_135, ssa_159) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_136 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_137 = deref_var &outNormal@0 (shader_out float) 
	vec1 32 ssa_160 = intrinsic load_deref (ssa_136) (0) /* access=0 */
	intrinsic store_deref (ssa_137, ssa_160) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_138 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_139 = deref_var &outNormal@1 (shader_out float) 
	vec1 32 ssa_161 = intrinsic load_deref (ssa_138) (0) /* access=0 */
	intrinsic store_deref (ssa_139, ssa_161) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_140 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_141 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_162 = intrinsic load_deref (ssa_140) (0) /* access=0 */
	intrinsic store_deref (ssa_141, ssa_162) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_142 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_143 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_163 = intrinsic load_deref (ssa_142) (0) /* access=0 */
	intrinsic store_deref (ssa_143, ssa_163) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_144 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_145 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_164 = intrinsic load_deref (ssa_144) (0) /* access=0 */
	intrinsic store_deref (ssa_145, ssa_164) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_146 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_147 = deref_var &outViewVec (shader_out float) 
	vec1 32 ssa_165 = intrinsic load_deref (ssa_146) (0) /* access=0 */
	intrinsic store_deref (ssa_147, ssa_165) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_148 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_149 = deref_var &outViewVec@4 (shader_out float) 
	vec1 32 ssa_166 = intrinsic load_deref (ssa_148) (0) /* access=0 */
	intrinsic store_deref (ssa_149, ssa_166) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_150 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_151 = deref_var &outViewVec@5 (shader_out float) 
	vec1 32 ssa_167 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	intrinsic store_deref (ssa_151, ssa_167) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_152 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec1 32 ssa_153 = deref_var &outNormal@6 (shader_out vec3) 
	vec3 32 ssa_168 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	intrinsic store_deref (ssa_153, ssa_168) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_154 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec1 32 ssa_155 = deref_var &outColor@7 (shader_out vec3) 
	vec3 32 ssa_169 = intrinsic load_deref (ssa_154) (0) /* access=0 */
	intrinsic store_deref (ssa_155, ssa_169) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_156 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &outViewVec@8 (shader_out vec3) 
	vec3 32 ssa_170 = intrinsic load_deref (ssa_156) (0) /* access=0 */
	intrinsic store_deref (ssa_157, ssa_170) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_explicit_io
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_84 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	vec1 32 ssa_74 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_88 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	vec1 32 ssa_75 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_92 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	vec1 32 ssa_128 = mov ssa_87.x
	vec1 32 ssa_129 = mov ssa_91.y
	vec1 32 ssa_130 = mov ssa_95.z
	vec3 32 ssa_131 = vec3 ssa_128, ssa_129, ssa_130
	intrinsic store_deref (ssa_92, ssa_131) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_76 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_96 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	vec1 32 ssa_77 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_100 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	vec1 32 ssa_78 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_104 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	vec1 32 ssa_124 = mov ssa_99.x
	vec1 32 ssa_125 = mov ssa_103.y
	vec1 32 ssa_126 = mov ssa_107.z
	vec3 32 ssa_127 = vec3 ssa_124, ssa_125, ssa_126
	intrinsic store_deref (ssa_104, ssa_127) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_108 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	vec1 32 ssa_80 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_112 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	vec1 32 ssa_81 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_116 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	vec1 32 ssa_120 = mov ssa_111.x
	vec1 32 ssa_121 = mov ssa_115.y
	vec1 32 ssa_122 = mov ssa_119.z
	vec3 32 ssa_123 = vec3 ssa_120, ssa_121, ssa_122
	intrinsic store_deref (ssa_116, ssa_123) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_82 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_132 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_133 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_132) (0) /* access=0 */
	intrinsic store_deref (ssa_133, ssa_158) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_134 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_135 = deref_var &outNormal (shader_out float) 
	vec1 32 ssa_159 = intrinsic load_deref (ssa_134) (0) /* access=0 */
	intrinsic store_deref (ssa_135, ssa_159) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_136 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_137 = deref_var &outNormal@0 (shader_out float) 
	vec1 32 ssa_160 = intrinsic load_deref (ssa_136) (0) /* access=0 */
	intrinsic store_deref (ssa_137, ssa_160) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_138 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_139 = deref_var &outNormal@1 (shader_out float) 
	vec1 32 ssa_161 = intrinsic load_deref (ssa_138) (0) /* access=0 */
	intrinsic store_deref (ssa_139, ssa_161) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_140 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_141 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_162 = intrinsic load_deref (ssa_140) (0) /* access=0 */
	intrinsic store_deref (ssa_141, ssa_162) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_142 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_143 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_163 = intrinsic load_deref (ssa_142) (0) /* access=0 */
	intrinsic store_deref (ssa_143, ssa_163) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_144 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_145 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_164 = intrinsic load_deref (ssa_144) (0) /* access=0 */
	intrinsic store_deref (ssa_145, ssa_164) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_146 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_147 = deref_var &outViewVec (shader_out float) 
	vec1 32 ssa_165 = intrinsic load_deref (ssa_146) (0) /* access=0 */
	intrinsic store_deref (ssa_147, ssa_165) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_148 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_149 = deref_var &outViewVec@4 (shader_out float) 
	vec1 32 ssa_166 = intrinsic load_deref (ssa_148) (0) /* access=0 */
	intrinsic store_deref (ssa_149, ssa_166) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_150 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_151 = deref_var &outViewVec@5 (shader_out float) 
	vec1 32 ssa_167 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	intrinsic store_deref (ssa_151, ssa_167) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_152 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec1 32 ssa_153 = deref_var &outNormal@6 (shader_out vec3) 
	vec3 32 ssa_168 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	intrinsic store_deref (ssa_153, ssa_168) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_154 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec1 32 ssa_155 = deref_var &outColor@7 (shader_out vec3) 
	vec3 32 ssa_169 = intrinsic load_deref (ssa_154) (0) /* access=0 */
	intrinsic store_deref (ssa_155, ssa_169) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_156 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &outViewVec@8 (shader_out vec3) 
	vec3 32 ssa_170 = intrinsic load_deref (ssa_156) (0) /* access=0 */
	intrinsic store_deref (ssa_157, ssa_170) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_explicit_io
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_84 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	vec1 32 ssa_74 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_88 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	vec1 32 ssa_75 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_92 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	vec1 32 ssa_128 = mov ssa_87.x
	vec1 32 ssa_129 = mov ssa_91.y
	vec1 32 ssa_130 = mov ssa_95.z
	vec3 32 ssa_131 = vec3 ssa_128, ssa_129, ssa_130
	intrinsic store_deref (ssa_92, ssa_131) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_76 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_96 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	vec1 32 ssa_77 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_100 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	vec1 32 ssa_78 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_104 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	vec1 32 ssa_124 = mov ssa_99.x
	vec1 32 ssa_125 = mov ssa_103.y
	vec1 32 ssa_126 = mov ssa_107.z
	vec3 32 ssa_127 = vec3 ssa_124, ssa_125, ssa_126
	intrinsic store_deref (ssa_104, ssa_127) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_108 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	vec1 32 ssa_80 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_112 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	vec1 32 ssa_81 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_116 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	vec1 32 ssa_120 = mov ssa_111.x
	vec1 32 ssa_121 = mov ssa_115.y
	vec1 32 ssa_122 = mov ssa_119.z
	vec3 32 ssa_123 = vec3 ssa_120, ssa_121, ssa_122
	intrinsic store_deref (ssa_116, ssa_123) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_82 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_132 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_133 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_132) (0) /* access=0 */
	intrinsic store_deref (ssa_133, ssa_158) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_134 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_135 = deref_var &outNormal (shader_out float) 
	vec1 32 ssa_159 = intrinsic load_deref (ssa_134) (0) /* access=0 */
	intrinsic store_deref (ssa_135, ssa_159) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_136 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_137 = deref_var &outNormal@0 (shader_out float) 
	vec1 32 ssa_160 = intrinsic load_deref (ssa_136) (0) /* access=0 */
	intrinsic store_deref (ssa_137, ssa_160) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_138 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_139 = deref_var &outNormal@1 (shader_out float) 
	vec1 32 ssa_161 = intrinsic load_deref (ssa_138) (0) /* access=0 */
	intrinsic store_deref (ssa_139, ssa_161) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_140 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_141 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_162 = intrinsic load_deref (ssa_140) (0) /* access=0 */
	intrinsic store_deref (ssa_141, ssa_162) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_142 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_143 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_163 = intrinsic load_deref (ssa_142) (0) /* access=0 */
	intrinsic store_deref (ssa_143, ssa_163) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_144 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_145 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_164 = intrinsic load_deref (ssa_144) (0) /* access=0 */
	intrinsic store_deref (ssa_145, ssa_164) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_146 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_147 = deref_var &outViewVec (shader_out float) 
	vec1 32 ssa_165 = intrinsic load_deref (ssa_146) (0) /* access=0 */
	intrinsic store_deref (ssa_147, ssa_165) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_148 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_149 = deref_var &outViewVec@4 (shader_out float) 
	vec1 32 ssa_166 = intrinsic load_deref (ssa_148) (0) /* access=0 */
	intrinsic store_deref (ssa_149, ssa_166) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_150 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_151 = deref_var &outViewVec@5 (shader_out float) 
	vec1 32 ssa_167 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	intrinsic store_deref (ssa_151, ssa_167) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_152 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec1 32 ssa_153 = deref_var &outNormal@6 (shader_out vec3) 
	vec3 32 ssa_168 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	intrinsic store_deref (ssa_153, ssa_168) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_154 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec1 32 ssa_155 = deref_var &outColor@7 (shader_out vec3) 
	vec3 32 ssa_169 = intrinsic load_deref (ssa_154) (0) /* access=0 */
	intrinsic store_deref (ssa_155, ssa_169) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_156 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &outViewVec@8 (shader_out vec3) 
	vec3 32 ssa_170 = intrinsic load_deref (ssa_156) (0) /* access=0 */
	intrinsic store_deref (ssa_157, ssa_170) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_explicit_io
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_84 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	vec1 32 ssa_74 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_88 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	vec1 32 ssa_75 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_92 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	vec1 32 ssa_128 = mov ssa_87.x
	vec1 32 ssa_129 = mov ssa_91.y
	vec1 32 ssa_130 = mov ssa_95.z
	vec3 32 ssa_131 = vec3 ssa_128, ssa_129, ssa_130
	intrinsic store_deref (ssa_92, ssa_131) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_76 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_96 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	vec1 32 ssa_77 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_100 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	vec1 32 ssa_78 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_104 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	vec1 32 ssa_124 = mov ssa_99.x
	vec1 32 ssa_125 = mov ssa_103.y
	vec1 32 ssa_126 = mov ssa_107.z
	vec3 32 ssa_127 = vec3 ssa_124, ssa_125, ssa_126
	intrinsic store_deref (ssa_104, ssa_127) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_108 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	vec1 32 ssa_80 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_112 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	vec1 32 ssa_81 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_116 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	vec1 32 ssa_120 = mov ssa_111.x
	vec1 32 ssa_121 = mov ssa_115.y
	vec1 32 ssa_122 = mov ssa_119.z
	vec3 32 ssa_123 = vec3 ssa_120, ssa_121, ssa_122
	intrinsic store_deref (ssa_116, ssa_123) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_82 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_132 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_133 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_132) (0) /* access=0 */
	intrinsic store_deref (ssa_133, ssa_158) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_134 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_135 = deref_var &outNormal (shader_out float) 
	vec1 32 ssa_159 = intrinsic load_deref (ssa_134) (0) /* access=0 */
	intrinsic store_deref (ssa_135, ssa_159) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_136 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_137 = deref_var &outNormal@0 (shader_out float) 
	vec1 32 ssa_160 = intrinsic load_deref (ssa_136) (0) /* access=0 */
	intrinsic store_deref (ssa_137, ssa_160) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_138 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_139 = deref_var &outNormal@1 (shader_out float) 
	vec1 32 ssa_161 = intrinsic load_deref (ssa_138) (0) /* access=0 */
	intrinsic store_deref (ssa_139, ssa_161) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_140 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_141 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_162 = intrinsic load_deref (ssa_140) (0) /* access=0 */
	intrinsic store_deref (ssa_141, ssa_162) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_142 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_143 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_163 = intrinsic load_deref (ssa_142) (0) /* access=0 */
	intrinsic store_deref (ssa_143, ssa_163) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_144 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_145 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_164 = intrinsic load_deref (ssa_144) (0) /* access=0 */
	intrinsic store_deref (ssa_145, ssa_164) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_146 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_147 = deref_var &outViewVec (shader_out float) 
	vec1 32 ssa_165 = intrinsic load_deref (ssa_146) (0) /* access=0 */
	intrinsic store_deref (ssa_147, ssa_165) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_148 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_149 = deref_var &outViewVec@4 (shader_out float) 
	vec1 32 ssa_166 = intrinsic load_deref (ssa_148) (0) /* access=0 */
	intrinsic store_deref (ssa_149, ssa_166) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_150 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_151 = deref_var &outViewVec@5 (shader_out float) 
	vec1 32 ssa_167 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	intrinsic store_deref (ssa_151, ssa_167) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_152 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec1 32 ssa_153 = deref_var &outNormal@6 (shader_out vec3) 
	vec3 32 ssa_168 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	intrinsic store_deref (ssa_153, ssa_168) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_154 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec1 32 ssa_155 = deref_var &outColor@7 (shader_out vec3) 
	vec3 32 ssa_169 = intrinsic load_deref (ssa_154) (0) /* access=0 */
	intrinsic store_deref (ssa_155, ssa_169) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_156 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &outViewVec@8 (shader_out vec3) 
	vec3 32 ssa_170 = intrinsic load_deref (ssa_156) (0) /* access=0 */
	intrinsic store_deref (ssa_157, ssa_170) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_constant_folding
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_84 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	vec1 32 ssa_74 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_88 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	vec1 32 ssa_75 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_92 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	vec1 32 ssa_128 = mov ssa_87.x
	vec1 32 ssa_129 = mov ssa_91.y
	vec1 32 ssa_130 = mov ssa_95.z
	vec3 32 ssa_131 = vec3 ssa_128, ssa_129, ssa_130
	intrinsic store_deref (ssa_92, ssa_131) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_76 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_96 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	vec1 32 ssa_77 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_100 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	vec1 32 ssa_78 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_104 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	vec1 32 ssa_124 = mov ssa_99.x
	vec1 32 ssa_125 = mov ssa_103.y
	vec1 32 ssa_126 = mov ssa_107.z
	vec3 32 ssa_127 = vec3 ssa_124, ssa_125, ssa_126
	intrinsic store_deref (ssa_104, ssa_127) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_108 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	vec1 32 ssa_80 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_112 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	vec1 32 ssa_81 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_116 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	vec1 32 ssa_120 = mov ssa_111.x
	vec1 32 ssa_121 = mov ssa_115.y
	vec1 32 ssa_122 = mov ssa_119.z
	vec3 32 ssa_123 = vec3 ssa_120, ssa_121, ssa_122
	intrinsic store_deref (ssa_116, ssa_123) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_82 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_132 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_133 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_132) (0) /* access=0 */
	intrinsic store_deref (ssa_133, ssa_158) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_134 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_135 = deref_var &outNormal (shader_out float) 
	vec1 32 ssa_159 = intrinsic load_deref (ssa_134) (0) /* access=0 */
	intrinsic store_deref (ssa_135, ssa_159) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_136 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_137 = deref_var &outNormal@0 (shader_out float) 
	vec1 32 ssa_160 = intrinsic load_deref (ssa_136) (0) /* access=0 */
	intrinsic store_deref (ssa_137, ssa_160) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_138 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_139 = deref_var &outNormal@1 (shader_out float) 
	vec1 32 ssa_161 = intrinsic load_deref (ssa_138) (0) /* access=0 */
	intrinsic store_deref (ssa_139, ssa_161) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_140 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_141 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_162 = intrinsic load_deref (ssa_140) (0) /* access=0 */
	intrinsic store_deref (ssa_141, ssa_162) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_142 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_143 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_163 = intrinsic load_deref (ssa_142) (0) /* access=0 */
	intrinsic store_deref (ssa_143, ssa_163) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_144 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_145 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_164 = intrinsic load_deref (ssa_144) (0) /* access=0 */
	intrinsic store_deref (ssa_145, ssa_164) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_146 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_147 = deref_var &outViewVec (shader_out float) 
	vec1 32 ssa_165 = intrinsic load_deref (ssa_146) (0) /* access=0 */
	intrinsic store_deref (ssa_147, ssa_165) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_148 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_149 = deref_var &outViewVec@4 (shader_out float) 
	vec1 32 ssa_166 = intrinsic load_deref (ssa_148) (0) /* access=0 */
	intrinsic store_deref (ssa_149, ssa_166) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_150 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_151 = deref_var &outViewVec@5 (shader_out float) 
	vec1 32 ssa_167 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	intrinsic store_deref (ssa_151, ssa_167) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_152 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec1 32 ssa_153 = deref_var &outNormal@6 (shader_out vec3) 
	vec3 32 ssa_168 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	intrinsic store_deref (ssa_153, ssa_168) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_154 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec1 32 ssa_155 = deref_var &outColor@7 (shader_out vec3) 
	vec3 32 ssa_169 = intrinsic load_deref (ssa_154) (0) /* access=0 */
	intrinsic store_deref (ssa_155, ssa_169) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_156 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &outViewVec@8 (shader_out vec3) 
	vec3 32 ssa_170 = intrinsic load_deref (ssa_156) (0) /* access=0 */
	intrinsic store_deref (ssa_157, ssa_170) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_non_uniform_access
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_2) (0) /* access=0 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 1 ssa_6 = feq ssa_5.x, ssa_0
	vec1 1 ssa_7 = feq ssa_5.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_5.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_push_constant (ssa_11) (0, 76) /* base=0 */ /* range=76 */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_5.x
		vec1 32 ssa_17 = mov ssa_5.y
		vec1 32 ssa_18 = mov ssa_5.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_push_constant (ssa_1) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_push_constant (ssa_23) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_push_constant (ssa_25) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_push_constant (ssa_27) (0, 76) /* base=0 */ /* range=76 */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_30 = intrinsic load_deref (ssa_29) (0) /* access=0 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_30.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_30.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_30.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_30.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_30.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_30.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_30.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_30.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_30.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_30.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_30.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_30.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_3.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_3.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_3.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_3.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_3.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_3.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_3.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_3.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_3.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_84 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	vec1 32 ssa_74 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_88 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	vec1 32 ssa_75 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_92 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	vec1 32 ssa_128 = mov ssa_87.x
	vec1 32 ssa_129 = mov ssa_91.y
	vec1 32 ssa_130 = mov ssa_95.z
	vec3 32 ssa_131 = vec3 ssa_128, ssa_129, ssa_130
	intrinsic store_deref (ssa_92, ssa_131) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_76 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_96 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	vec1 32 ssa_77 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_100 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	vec1 32 ssa_78 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_104 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	vec1 32 ssa_124 = mov ssa_99.x
	vec1 32 ssa_125 = mov ssa_103.y
	vec1 32 ssa_126 = mov ssa_107.z
	vec3 32 ssa_127 = vec3 ssa_124, ssa_125, ssa_126
	intrinsic store_deref (ssa_104, ssa_127) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_79 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_108 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	vec1 32 ssa_80 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_112 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	vec1 32 ssa_81 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_116 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	vec1 32 ssa_120 = mov ssa_111.x
	vec1 32 ssa_121 = mov ssa_115.y
	vec1 32 ssa_122 = mov ssa_119.z
	vec3 32 ssa_123 = vec3 ssa_120, ssa_121, ssa_122
	intrinsic store_deref (ssa_116, ssa_123) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_82 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_deref (ssa_82, ssa_83) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_132 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_133 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_158 = intrinsic load_deref (ssa_132) (0) /* access=0 */
	intrinsic store_deref (ssa_133, ssa_158) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_134 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_135 = deref_var &outNormal (shader_out float) 
	vec1 32 ssa_159 = intrinsic load_deref (ssa_134) (0) /* access=0 */
	intrinsic store_deref (ssa_135, ssa_159) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_136 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_137 = deref_var &outNormal@0 (shader_out float) 
	vec1 32 ssa_160 = intrinsic load_deref (ssa_136) (0) /* access=0 */
	intrinsic store_deref (ssa_137, ssa_160) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_138 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_139 = deref_var &outNormal@1 (shader_out float) 
	vec1 32 ssa_161 = intrinsic load_deref (ssa_138) (0) /* access=0 */
	intrinsic store_deref (ssa_139, ssa_161) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_140 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_141 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_162 = intrinsic load_deref (ssa_140) (0) /* access=0 */
	intrinsic store_deref (ssa_141, ssa_162) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_142 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_143 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_163 = intrinsic load_deref (ssa_142) (0) /* access=0 */
	intrinsic store_deref (ssa_143, ssa_163) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_144 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_145 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_164 = intrinsic load_deref (ssa_144) (0) /* access=0 */
	intrinsic store_deref (ssa_145, ssa_164) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_146 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_147 = deref_var &outViewVec (shader_out float) 
	vec1 32 ssa_165 = intrinsic load_deref (ssa_146) (0) /* access=0 */
	intrinsic store_deref (ssa_147, ssa_165) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_148 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_149 = deref_var &outViewVec@4 (shader_out float) 
	vec1 32 ssa_166 = intrinsic load_deref (ssa_148) (0) /* access=0 */
	intrinsic store_deref (ssa_149, ssa_166) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_150 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_151 = deref_var &outViewVec@5 (shader_out float) 
	vec1 32 ssa_167 = intrinsic load_deref (ssa_150) (0) /* access=0 */
	intrinsic store_deref (ssa_151, ssa_167) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_152 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec1 32 ssa_153 = deref_var &outNormal@6 (shader_out vec3) 
	vec3 32 ssa_168 = intrinsic load_deref (ssa_152) (0) /* access=0 */
	intrinsic store_deref (ssa_153, ssa_168) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_154 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec1 32 ssa_155 = deref_var &outColor@7 (shader_out vec3) 
	vec3 32 ssa_169 = intrinsic load_deref (ssa_154) (0) /* access=0 */
	intrinsic store_deref (ssa_155, ssa_169) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_156 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &outViewVec@8 (shader_out vec3) 
	vec3 32 ssa_170 = intrinsic load_deref (ssa_156) (0) /* access=0 */
	intrinsic store_deref (ssa_157, ssa_170) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_wpos_center
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@2 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@3 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@4 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@5 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 32 ssa_82 = mov ssa_5.x
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_83) (0) /* access=0 */
	vec1 32 ssa_84 = mov ssa_7.y
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_9 = intrinsic load_deref (ssa_85) (0) /* access=0 */
	vec1 32 ssa_86 = mov ssa_9.z
	vec1 32 ssa_10 = fmul ssa_82, ssa_82
	vec1 32 ssa_11 = fmul ssa_84, ssa_84
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_86, ssa_86
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_82, ssa_15
	vec1 32 ssa_17 = fmul ssa_84, ssa_15
	vec1 32 ssa_18 = fmul ssa_86, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_87 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_87) (0) /* access=0 */
	vec1 32 ssa_88 = mov ssa_20.x
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_89 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_89) (0) /* access=0 */
	vec1 32 ssa_90 = mov ssa_22.y
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_91 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_24 = intrinsic load_deref (ssa_91) (0) /* access=0 */
	vec1 32 ssa_92 = mov ssa_24.z
	vec1 32 ssa_25 = fmul ssa_88, ssa_88
	vec1 32 ssa_26 = fmul ssa_90, ssa_90
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_92, ssa_92
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_88, ssa_30
	vec1 32 ssa_32 = fmul ssa_90, ssa_30
	vec1 32 ssa_33 = fmul ssa_92, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_93 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_60 = intrinsic load_deref (ssa_93) (0) /* access=0 */
	vec1 32 ssa_94 = mov ssa_60.x
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_95 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_62 = intrinsic load_deref (ssa_95) (0) /* access=0 */
	vec1 32 ssa_96 = mov ssa_62.y
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_97 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_64 = intrinsic load_deref (ssa_97) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_64.z
	vec1 32 ssa_65 = fmul ssa_94, ssa_58
	vec1 32 ssa_66 = fmul ssa_96, ssa_58
	vec1 32 ssa_67 = fmul ssa_98, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	intrinsic store_deref (ssa_79, ssa_80) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_input_attachments
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@2 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@3 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@4 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@5 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 32 ssa_82 = mov ssa_5.x
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_83) (0) /* access=0 */
	vec1 32 ssa_84 = mov ssa_7.y
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_9 = intrinsic load_deref (ssa_85) (0) /* access=0 */
	vec1 32 ssa_86 = mov ssa_9.z
	vec1 32 ssa_10 = fmul ssa_82, ssa_82
	vec1 32 ssa_11 = fmul ssa_84, ssa_84
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_86, ssa_86
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_82, ssa_15
	vec1 32 ssa_17 = fmul ssa_84, ssa_15
	vec1 32 ssa_18 = fmul ssa_86, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_87 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_87) (0) /* access=0 */
	vec1 32 ssa_88 = mov ssa_20.x
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_89 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_89) (0) /* access=0 */
	vec1 32 ssa_90 = mov ssa_22.y
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_91 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_24 = intrinsic load_deref (ssa_91) (0) /* access=0 */
	vec1 32 ssa_92 = mov ssa_24.z
	vec1 32 ssa_25 = fmul ssa_88, ssa_88
	vec1 32 ssa_26 = fmul ssa_90, ssa_90
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_92, ssa_92
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_88, ssa_30
	vec1 32 ssa_32 = fmul ssa_90, ssa_30
	vec1 32 ssa_33 = fmul ssa_92, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_93 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_60 = intrinsic load_deref (ssa_93) (0) /* access=0 */
	vec1 32 ssa_94 = mov ssa_60.x
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_95 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_62 = intrinsic load_deref (ssa_95) (0) /* access=0 */
	vec1 32 ssa_96 = mov ssa_62.y
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_97 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_64 = intrinsic load_deref (ssa_97) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_64.z
	vec1 32 ssa_65 = fmul ssa_94, ssa_58
	vec1 32 ssa_66 = fmul ssa_96, ssa_58
	vec1 32 ssa_67 = fmul ssa_98, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	intrinsic store_deref (ssa_79, ssa_80) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

anv_nir_lower_ycbcr_textures
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@2 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@3 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@4 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@5 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 32 ssa_82 = mov ssa_5.x
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_83) (0) /* access=0 */
	vec1 32 ssa_84 = mov ssa_7.y
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_9 = intrinsic load_deref (ssa_85) (0) /* access=0 */
	vec1 32 ssa_86 = mov ssa_9.z
	vec1 32 ssa_10 = fmul ssa_82, ssa_82
	vec1 32 ssa_11 = fmul ssa_84, ssa_84
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_86, ssa_86
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_82, ssa_15
	vec1 32 ssa_17 = fmul ssa_84, ssa_15
	vec1 32 ssa_18 = fmul ssa_86, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_87 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_87) (0) /* access=0 */
	vec1 32 ssa_88 = mov ssa_20.x
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_89 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_89) (0) /* access=0 */
	vec1 32 ssa_90 = mov ssa_22.y
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_91 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_24 = intrinsic load_deref (ssa_91) (0) /* access=0 */
	vec1 32 ssa_92 = mov ssa_24.z
	vec1 32 ssa_25 = fmul ssa_88, ssa_88
	vec1 32 ssa_26 = fmul ssa_90, ssa_90
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_92, ssa_92
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_88, ssa_30
	vec1 32 ssa_32 = fmul ssa_90, ssa_30
	vec1 32 ssa_33 = fmul ssa_92, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_93 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_60 = intrinsic load_deref (ssa_93) (0) /* access=0 */
	vec1 32 ssa_94 = mov ssa_60.x
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_95 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_62 = intrinsic load_deref (ssa_95) (0) /* access=0 */
	vec1 32 ssa_96 = mov ssa_62.y
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_97 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_64 = intrinsic load_deref (ssa_97) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_64.z
	vec1 32 ssa_65 = fmul ssa_94, ssa_58
	vec1 32 ssa_66 = fmul ssa_96, ssa_58
	vec1 32 ssa_67 = fmul ssa_98, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	intrinsic store_deref (ssa_79, ssa_80) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

anv_nir_lower_multiview
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@2 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@3 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@4 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@5 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 32 ssa_82 = mov ssa_5.x
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_83) (0) /* access=0 */
	vec1 32 ssa_84 = mov ssa_7.y
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_9 = intrinsic load_deref (ssa_85) (0) /* access=0 */
	vec1 32 ssa_86 = mov ssa_9.z
	vec1 32 ssa_10 = fmul ssa_82, ssa_82
	vec1 32 ssa_11 = fmul ssa_84, ssa_84
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_86, ssa_86
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_82, ssa_15
	vec1 32 ssa_17 = fmul ssa_84, ssa_15
	vec1 32 ssa_18 = fmul ssa_86, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_87 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_87) (0) /* access=0 */
	vec1 32 ssa_88 = mov ssa_20.x
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_89 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_89) (0) /* access=0 */
	vec1 32 ssa_90 = mov ssa_22.y
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_91 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_24 = intrinsic load_deref (ssa_91) (0) /* access=0 */
	vec1 32 ssa_92 = mov ssa_24.z
	vec1 32 ssa_25 = fmul ssa_88, ssa_88
	vec1 32 ssa_26 = fmul ssa_90, ssa_90
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_92, ssa_92
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_88, ssa_30
	vec1 32 ssa_32 = fmul ssa_90, ssa_30
	vec1 32 ssa_33 = fmul ssa_92, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_93 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_60 = intrinsic load_deref (ssa_93) (0) /* access=0 */
	vec1 32 ssa_94 = mov ssa_60.x
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_95 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_62 = intrinsic load_deref (ssa_95) (0) /* access=0 */
	vec1 32 ssa_96 = mov ssa_62.y
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_97 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_64 = intrinsic load_deref (ssa_97) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_64.z
	vec1 32 ssa_65 = fmul ssa_94, ssa_58
	vec1 32 ssa_66 = fmul ssa_96, ssa_58
	vec1 32 ssa_67 = fmul ssa_98, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	intrinsic store_deref (ssa_79, ssa_80) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

brw_nir_lower_image_load_store
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@2 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@3 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@4 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@5 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 32 ssa_82 = mov ssa_5.x
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_83) (0) /* access=0 */
	vec1 32 ssa_84 = mov ssa_7.y
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_9 = intrinsic load_deref (ssa_85) (0) /* access=0 */
	vec1 32 ssa_86 = mov ssa_9.z
	vec1 32 ssa_10 = fmul ssa_82, ssa_82
	vec1 32 ssa_11 = fmul ssa_84, ssa_84
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_86, ssa_86
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_82, ssa_15
	vec1 32 ssa_17 = fmul ssa_84, ssa_15
	vec1 32 ssa_18 = fmul ssa_86, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_87 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_87) (0) /* access=0 */
	vec1 32 ssa_88 = mov ssa_20.x
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_89 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_89) (0) /* access=0 */
	vec1 32 ssa_90 = mov ssa_22.y
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_91 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_24 = intrinsic load_deref (ssa_91) (0) /* access=0 */
	vec1 32 ssa_92 = mov ssa_24.z
	vec1 32 ssa_25 = fmul ssa_88, ssa_88
	vec1 32 ssa_26 = fmul ssa_90, ssa_90
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_92, ssa_92
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_88, ssa_30
	vec1 32 ssa_32 = fmul ssa_90, ssa_30
	vec1 32 ssa_33 = fmul ssa_92, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_93 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_60 = intrinsic load_deref (ssa_93) (0) /* access=0 */
	vec1 32 ssa_94 = mov ssa_60.x
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_95 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_62 = intrinsic load_deref (ssa_95) (0) /* access=0 */
	vec1 32 ssa_96 = mov ssa_62.y
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_97 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_64 = intrinsic load_deref (ssa_97) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_64.z
	vec1 32 ssa_65 = fmul ssa_94, ssa_58
	vec1 32 ssa_66 = fmul ssa_96, ssa_58
	vec1 32 ssa_67 = fmul ssa_98, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	intrinsic store_deref (ssa_79, ssa_80) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_explicit_io
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@2 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@3 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@4 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@5 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 32 ssa_82 = mov ssa_5.x
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_83) (0) /* access=0 */
	vec1 32 ssa_84 = mov ssa_7.y
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_9 = intrinsic load_deref (ssa_85) (0) /* access=0 */
	vec1 32 ssa_86 = mov ssa_9.z
	vec1 32 ssa_10 = fmul ssa_82, ssa_82
	vec1 32 ssa_11 = fmul ssa_84, ssa_84
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_86, ssa_86
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_82, ssa_15
	vec1 32 ssa_17 = fmul ssa_84, ssa_15
	vec1 32 ssa_18 = fmul ssa_86, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_87 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_87) (0) /* access=0 */
	vec1 32 ssa_88 = mov ssa_20.x
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_89 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_89) (0) /* access=0 */
	vec1 32 ssa_90 = mov ssa_22.y
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_91 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_24 = intrinsic load_deref (ssa_91) (0) /* access=0 */
	vec1 32 ssa_92 = mov ssa_24.z
	vec1 32 ssa_25 = fmul ssa_88, ssa_88
	vec1 32 ssa_26 = fmul ssa_90, ssa_90
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_92, ssa_92
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_88, ssa_30
	vec1 32 ssa_32 = fmul ssa_90, ssa_30
	vec1 32 ssa_33 = fmul ssa_92, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_93 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_60 = intrinsic load_deref (ssa_93) (0) /* access=0 */
	vec1 32 ssa_94 = mov ssa_60.x
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_95 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_62 = intrinsic load_deref (ssa_95) (0) /* access=0 */
	vec1 32 ssa_96 = mov ssa_62.y
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_97 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_64 = intrinsic load_deref (ssa_97) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_64.z
	vec1 32 ssa_65 = fmul ssa_94, ssa_58
	vec1 32 ssa_66 = fmul ssa_96, ssa_58
	vec1 32 ssa_67 = fmul ssa_98, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	intrinsic store_deref (ssa_79, ssa_80) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_explicit_io
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@2 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@3 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@4 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@5 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 32 ssa_82 = mov ssa_5.x
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_83) (0) /* access=0 */
	vec1 32 ssa_84 = mov ssa_7.y
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_9 = intrinsic load_deref (ssa_85) (0) /* access=0 */
	vec1 32 ssa_86 = mov ssa_9.z
	vec1 32 ssa_10 = fmul ssa_82, ssa_82
	vec1 32 ssa_11 = fmul ssa_84, ssa_84
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_86, ssa_86
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_82, ssa_15
	vec1 32 ssa_17 = fmul ssa_84, ssa_15
	vec1 32 ssa_18 = fmul ssa_86, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_87 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_87) (0) /* access=0 */
	vec1 32 ssa_88 = mov ssa_20.x
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_89 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_89) (0) /* access=0 */
	vec1 32 ssa_90 = mov ssa_22.y
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_91 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_24 = intrinsic load_deref (ssa_91) (0) /* access=0 */
	vec1 32 ssa_92 = mov ssa_24.z
	vec1 32 ssa_25 = fmul ssa_88, ssa_88
	vec1 32 ssa_26 = fmul ssa_90, ssa_90
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_92, ssa_92
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_88, ssa_30
	vec1 32 ssa_32 = fmul ssa_90, ssa_30
	vec1 32 ssa_33 = fmul ssa_92, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_93 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_60 = intrinsic load_deref (ssa_93) (0) /* access=0 */
	vec1 32 ssa_94 = mov ssa_60.x
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_95 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_62 = intrinsic load_deref (ssa_95) (0) /* access=0 */
	vec1 32 ssa_96 = mov ssa_62.y
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_97 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_64 = intrinsic load_deref (ssa_97) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_64.z
	vec1 32 ssa_65 = fmul ssa_94, ssa_58
	vec1 32 ssa_66 = fmul ssa_96, ssa_58
	vec1 32 ssa_67 = fmul ssa_98, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	intrinsic store_deref (ssa_79, ssa_80) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_explicit_io
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@2 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@3 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@4 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@5 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 32 ssa_82 = mov ssa_5.x
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_83) (0) /* access=0 */
	vec1 32 ssa_84 = mov ssa_7.y
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_9 = intrinsic load_deref (ssa_85) (0) /* access=0 */
	vec1 32 ssa_86 = mov ssa_9.z
	vec1 32 ssa_10 = fmul ssa_82, ssa_82
	vec1 32 ssa_11 = fmul ssa_84, ssa_84
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_86, ssa_86
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_82, ssa_15
	vec1 32 ssa_17 = fmul ssa_84, ssa_15
	vec1 32 ssa_18 = fmul ssa_86, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_87 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_87) (0) /* access=0 */
	vec1 32 ssa_88 = mov ssa_20.x
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_89 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_89) (0) /* access=0 */
	vec1 32 ssa_90 = mov ssa_22.y
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_91 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_24 = intrinsic load_deref (ssa_91) (0) /* access=0 */
	vec1 32 ssa_92 = mov ssa_24.z
	vec1 32 ssa_25 = fmul ssa_88, ssa_88
	vec1 32 ssa_26 = fmul ssa_90, ssa_90
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_92, ssa_92
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_88, ssa_30
	vec1 32 ssa_32 = fmul ssa_90, ssa_30
	vec1 32 ssa_33 = fmul ssa_92, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_93 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_60 = intrinsic load_deref (ssa_93) (0) /* access=0 */
	vec1 32 ssa_94 = mov ssa_60.x
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_95 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_62 = intrinsic load_deref (ssa_95) (0) /* access=0 */
	vec1 32 ssa_96 = mov ssa_62.y
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_97 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_64 = intrinsic load_deref (ssa_97) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_64.z
	vec1 32 ssa_65 = fmul ssa_94, ssa_58
	vec1 32 ssa_66 = fmul ssa_96, ssa_58
	vec1 32 ssa_67 = fmul ssa_98, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	intrinsic store_deref (ssa_79, ssa_80) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_constant_folding
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@2 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@3 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@4 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@5 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 32 ssa_82 = mov ssa_5.x
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_83) (0) /* access=0 */
	vec1 32 ssa_84 = mov ssa_7.y
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_9 = intrinsic load_deref (ssa_85) (0) /* access=0 */
	vec1 32 ssa_86 = mov ssa_9.z
	vec1 32 ssa_10 = fmul ssa_82, ssa_82
	vec1 32 ssa_11 = fmul ssa_84, ssa_84
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_86, ssa_86
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_82, ssa_15
	vec1 32 ssa_17 = fmul ssa_84, ssa_15
	vec1 32 ssa_18 = fmul ssa_86, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_87 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_87) (0) /* access=0 */
	vec1 32 ssa_88 = mov ssa_20.x
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_89 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_89) (0) /* access=0 */
	vec1 32 ssa_90 = mov ssa_22.y
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_91 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_24 = intrinsic load_deref (ssa_91) (0) /* access=0 */
	vec1 32 ssa_92 = mov ssa_24.z
	vec1 32 ssa_25 = fmul ssa_88, ssa_88
	vec1 32 ssa_26 = fmul ssa_90, ssa_90
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_92, ssa_92
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_88, ssa_30
	vec1 32 ssa_32 = fmul ssa_90, ssa_30
	vec1 32 ssa_33 = fmul ssa_92, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_93 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_60 = intrinsic load_deref (ssa_93) (0) /* access=0 */
	vec1 32 ssa_94 = mov ssa_60.x
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_95 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_62 = intrinsic load_deref (ssa_95) (0) /* access=0 */
	vec1 32 ssa_96 = mov ssa_62.y
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_97 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_64 = intrinsic load_deref (ssa_97) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_64.z
	vec1 32 ssa_65 = fmul ssa_94, ssa_58
	vec1 32 ssa_66 = fmul ssa_96, ssa_58
	vec1 32 ssa_67 = fmul ssa_98, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	intrinsic store_deref (ssa_79, ssa_80) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_non_uniform_access
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inNormal@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec (VARYING_SLOT_VAR3.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@2 (VARYING_SLOT_VAR3.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inViewVec@3 (VARYING_SLOT_VAR3.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor (VARYING_SLOT_VAR1.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@4 (VARYING_SLOT_VAR1.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inColor@5 (VARYING_SLOT_VAR1.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 32 ssa_82 = mov ssa_5.x
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_7 = intrinsic load_deref (ssa_83) (0) /* access=0 */
	vec1 32 ssa_84 = mov ssa_7.y
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = deref_var &inNormal@6 (shader_in vec3) 
	vec3 32 ssa_9 = intrinsic load_deref (ssa_85) (0) /* access=0 */
	vec1 32 ssa_86 = mov ssa_9.z
	vec1 32 ssa_10 = fmul ssa_82, ssa_82
	vec1 32 ssa_11 = fmul ssa_84, ssa_84
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_86, ssa_86
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_82, ssa_15
	vec1 32 ssa_17 = fmul ssa_84, ssa_15
	vec1 32 ssa_18 = fmul ssa_86, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_87 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_87) (0) /* access=0 */
	vec1 32 ssa_88 = mov ssa_20.x
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_89 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_22 = intrinsic load_deref (ssa_89) (0) /* access=0 */
	vec1 32 ssa_90 = mov ssa_22.y
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_91 = deref_var &inViewVec@8 (shader_in vec3) 
	vec3 32 ssa_24 = intrinsic load_deref (ssa_91) (0) /* access=0 */
	vec1 32 ssa_92 = mov ssa_24.z
	vec1 32 ssa_25 = fmul ssa_88, ssa_88
	vec1 32 ssa_26 = fmul ssa_90, ssa_90
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_92, ssa_92
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_88, ssa_30
	vec1 32 ssa_32 = fmul ssa_90, ssa_30
	vec1 32 ssa_33 = fmul ssa_92, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_93 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_60 = intrinsic load_deref (ssa_93) (0) /* access=0 */
	vec1 32 ssa_94 = mov ssa_60.x
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_95 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_62 = intrinsic load_deref (ssa_95) (0) /* access=0 */
	vec1 32 ssa_96 = mov ssa_62.y
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_97 = deref_var &inColor@7 (shader_in vec3) 
	vec3 32 ssa_64 = intrinsic load_deref (ssa_97) (0) /* access=0 */
	vec1 32 ssa_98 = mov ssa_64.z
	vec1 32 ssa_65 = fmul ssa_94, ssa_58
	vec1 32 ssa_66 = fmul ssa_96, ssa_58
	vec1 32 ssa_67 = fmul ssa_98, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	intrinsic store_deref (ssa_79, ssa_80) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

brw_nir_apply_sampler_key
nir_lower_subgroups
brw_nir_lower_scoped_barriers
nir_opt_combine_memory_barriers
nir_opt_algebraic_before_ffma
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_210 = undefined
	vec1 32 ssa_208 = undefined
	vec1 32 ssa_206 = undefined
	vec1 32 ssa_204 = undefined
	vec1 32 ssa_202 = undefined
	vec1 32 ssa_200 = undefined
	vec1 32 ssa_198 = undefined
	vec1 32 ssa_196 = undefined
	vec1 32 ssa_194 = undefined
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec1 32 ssa_171 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_177 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_172 = intrinsic load_input (ssa_177) (1, 0, 160, 273) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=2 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec1 32 ssa_173 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_178 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_174 = intrinsic load_input (ssa_178) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 1 ssa_6 = feq ssa_174.x, ssa_0
	vec1 1 ssa_7 = feq ssa_174.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_174.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_uniform (ssa_11) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_174.x
		vec1 32 ssa_17 = mov ssa_174.y
		vec1 32 ssa_18 = mov ssa_174.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_uniform (ssa_1) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_uniform (ssa_23) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_uniform (ssa_25) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_uniform (ssa_27) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec1 32 ssa_175 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_179 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_176 = intrinsic load_input (ssa_179) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_176.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_176.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_176.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_176.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_176.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_176.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_176.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_176.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_176.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_176.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_176.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_176.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_172.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_172.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_172.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_172.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_172.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_172.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_172.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_172.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_172.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_84 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	vec1 32 ssa_74 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_88 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	vec1 32 ssa_75 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_92 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	vec1 32 ssa_128 = mov ssa_87.x
	vec1 32 ssa_129 = mov ssa_91.y
	vec1 32 ssa_130 = mov ssa_95.z
	vec3 32 ssa_131 = vec3 ssa_128, ssa_129, ssa_130
	vec1 32 ssa_76 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_96 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	vec1 32 ssa_77 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_100 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	vec1 32 ssa_78 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_104 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	vec1 32 ssa_124 = mov ssa_99.x
	vec1 32 ssa_125 = mov ssa_103.y
	vec1 32 ssa_126 = mov ssa_107.z
	vec3 32 ssa_127 = vec3 ssa_124, ssa_125, ssa_126
	vec1 32 ssa_79 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_108 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	vec1 32 ssa_80 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_112 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	vec1 32 ssa_81 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_116 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	vec1 32 ssa_120 = mov ssa_111.x
	vec1 32 ssa_121 = mov ssa_115.y
	vec1 32 ssa_122 = mov ssa_119.z
	vec3 32 ssa_123 = vec3 ssa_120, ssa_121, ssa_122
	vec1 32 ssa_82 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	vec1 32 ssa_132 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_133 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_193 = mov ssa_83
	vec1 32 ssa_180 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_193, ssa_180) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec1 32 ssa_134 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_135 = deref_var &outNormal (shader_out float) 
	vec1 32 ssa_195 = mov ssa_194
	vec1 32 ssa_181 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_195, ssa_181) (32, 1, 0, 160, 160) /* base=32 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec1 32 ssa_136 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_137 = deref_var &outNormal@0 (shader_out float) 
	vec1 32 ssa_197 = mov ssa_196
	vec1 32 ssa_182 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_197, ssa_182) (32, 1, 1, 160, 160) /* base=32 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec1 32 ssa_138 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_139 = deref_var &outNormal@1 (shader_out float) 
	vec1 32 ssa_199 = mov ssa_198
	vec1 32 ssa_183 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_199, ssa_183) (32, 1, 2, 160, 160) /* base=32 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec1 32 ssa_140 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_141 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_201 = mov ssa_200
	vec1 32 ssa_184 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_201, ssa_184) (33, 1, 0, 160, 161) /* base=33 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_142 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_143 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_203 = mov ssa_202
	vec1 32 ssa_185 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_203, ssa_185) (33, 1, 1, 160, 161) /* base=33 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_144 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_145 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_205 = mov ssa_204
	vec1 32 ssa_186 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_205, ssa_186) (33, 1, 2, 160, 161) /* base=33 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_146 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_147 = deref_var &outViewVec (shader_out float) 
	vec1 32 ssa_207 = mov ssa_206
	vec1 32 ssa_187 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_207, ssa_187) (35, 1, 0, 160, 163) /* base=35 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	vec1 32 ssa_148 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_149 = deref_var &outViewVec@4 (shader_out float) 
	vec1 32 ssa_209 = mov ssa_208
	vec1 32 ssa_188 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_209, ssa_188) (35, 1, 1, 160, 163) /* base=35 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	vec1 32 ssa_150 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_151 = deref_var &outViewVec@5 (shader_out float) 
	vec1 32 ssa_211 = mov ssa_210
	vec1 32 ssa_189 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_211, ssa_189) (35, 1, 2, 160, 163) /* base=35 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	vec1 32 ssa_152 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec1 32 ssa_153 = deref_var &outNormal@6 (shader_out vec3) 
	vec3 32 ssa_212 = mov ssa_131
	vec1 32 ssa_190 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_212, ssa_190) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec1 32 ssa_154 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec1 32 ssa_155 = deref_var &outColor@7 (shader_out vec3) 
	vec3 32 ssa_213 = mov ssa_127
	vec1 32 ssa_191 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_213, ssa_191) (33, 7, 0, 160, 161) /* base=33 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_156 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &outViewVec@8 (shader_out vec3) 
	vec3 32 ssa_214 = mov ssa_123
	vec1 32 ssa_192 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_214, ssa_192) (35, 7, 0, 160, 163) /* base=35 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	/* succs: block_4 */
	block block_4:
}

nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_210 = undefined
	vec1 32 ssa_208 = undefined
	vec1 32 ssa_206 = undefined
	vec1 32 ssa_204 = undefined
	vec1 32 ssa_202 = undefined
	vec1 32 ssa_200 = undefined
	vec1 32 ssa_198 = undefined
	vec1 32 ssa_196 = undefined
	vec1 32 ssa_194 = undefined
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec1 32 ssa_171 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_177 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_172 = intrinsic load_input (ssa_177) (1, 0, 160, 273) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=2 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec1 32 ssa_173 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_178 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_174 = intrinsic load_input (ssa_178) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 1 ssa_6 = feq ssa_174.x, ssa_0
	vec1 1 ssa_7 = feq ssa_174.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_174.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_uniform (ssa_11) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_174.x
		vec1 32 ssa_17 = mov ssa_174.y
		vec1 32 ssa_18 = mov ssa_174.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_uniform (ssa_1) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_uniform (ssa_23) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_uniform (ssa_25) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_uniform (ssa_27) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec1 32 ssa_175 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_179 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_176 = intrinsic load_input (ssa_179) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_176.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_176.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_176.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_176.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_176.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_176.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_176.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_176.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_176.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_176.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_176.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_176.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_172.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_172.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_172.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_172.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_172.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_172.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_172.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_172.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_172.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_84 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	vec1 32 ssa_74 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_88 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	vec1 32 ssa_75 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_92 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	vec1 32 ssa_128 = mov ssa_87.x
	vec1 32 ssa_129 = mov ssa_91.y
	vec1 32 ssa_130 = mov ssa_95.z
	vec3 32 ssa_131 = vec3 ssa_128, ssa_129, ssa_130
	vec1 32 ssa_76 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_96 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	vec1 32 ssa_77 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_100 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	vec1 32 ssa_78 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_104 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	vec1 32 ssa_124 = mov ssa_99.x
	vec1 32 ssa_125 = mov ssa_103.y
	vec1 32 ssa_126 = mov ssa_107.z
	vec3 32 ssa_127 = vec3 ssa_124, ssa_125, ssa_126
	vec1 32 ssa_79 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_108 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	vec1 32 ssa_80 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_112 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	vec1 32 ssa_81 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_116 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	vec1 32 ssa_120 = mov ssa_111.x
	vec1 32 ssa_121 = mov ssa_115.y
	vec1 32 ssa_122 = mov ssa_119.z
	vec3 32 ssa_123 = vec3 ssa_120, ssa_121, ssa_122
	vec1 32 ssa_82 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	vec1 32 ssa_132 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_133 = deref_var &.field0 (shader_out vec4) 
	vec1 32 ssa_215 = mov ssa_83.x
	vec1 32 ssa_216 = mov ssa_83.y
	vec1 32 ssa_217 = mov ssa_83.z
	vec1 32 ssa_218 = mov ssa_83.w
	vec4 32 ssa_219 = vec4 ssa_215, ssa_216, ssa_217, ssa_218
	vec1 32 ssa_180 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_219, ssa_180) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec1 32 ssa_134 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_135 = deref_var &outNormal (shader_out float) 
	vec1 32 ssa_195 = mov ssa_194
	vec1 32 ssa_181 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_195, ssa_181) (32, 1, 0, 160, 160) /* base=32 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec1 32 ssa_136 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_137 = deref_var &outNormal@0 (shader_out float) 
	vec1 32 ssa_197 = mov ssa_196
	vec1 32 ssa_182 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_197, ssa_182) (32, 1, 1, 160, 160) /* base=32 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec1 32 ssa_138 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_139 = deref_var &outNormal@1 (shader_out float) 
	vec1 32 ssa_199 = mov ssa_198
	vec1 32 ssa_183 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_199, ssa_183) (32, 1, 2, 160, 160) /* base=32 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec1 32 ssa_140 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_141 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_201 = mov ssa_200
	vec1 32 ssa_184 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_201, ssa_184) (33, 1, 0, 160, 161) /* base=33 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_142 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_143 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_203 = mov ssa_202
	vec1 32 ssa_185 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_203, ssa_185) (33, 1, 1, 160, 161) /* base=33 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_144 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_145 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_205 = mov ssa_204
	vec1 32 ssa_186 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_205, ssa_186) (33, 1, 2, 160, 161) /* base=33 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_146 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_147 = deref_var &outViewVec (shader_out float) 
	vec1 32 ssa_207 = mov ssa_206
	vec1 32 ssa_187 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_207, ssa_187) (35, 1, 0, 160, 163) /* base=35 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	vec1 32 ssa_148 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_149 = deref_var &outViewVec@4 (shader_out float) 
	vec1 32 ssa_209 = mov ssa_208
	vec1 32 ssa_188 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_209, ssa_188) (35, 1, 1, 160, 163) /* base=35 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	vec1 32 ssa_150 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_151 = deref_var &outViewVec@5 (shader_out float) 
	vec1 32 ssa_211 = mov ssa_210
	vec1 32 ssa_189 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_211, ssa_189) (35, 1, 2, 160, 163) /* base=35 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	vec1 32 ssa_152 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec1 32 ssa_153 = deref_var &outNormal@6 (shader_out vec3) 
	vec1 32 ssa_220 = mov ssa_131.x
	vec1 32 ssa_221 = mov ssa_131.y
	vec1 32 ssa_222 = mov ssa_131.z
	vec3 32 ssa_223 = vec3 ssa_220, ssa_221, ssa_222
	vec1 32 ssa_190 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_223, ssa_190) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec1 32 ssa_154 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec1 32 ssa_155 = deref_var &outColor@7 (shader_out vec3) 
	vec1 32 ssa_224 = mov ssa_127.x
	vec1 32 ssa_225 = mov ssa_127.y
	vec1 32 ssa_226 = mov ssa_127.z
	vec3 32 ssa_227 = vec3 ssa_224, ssa_225, ssa_226
	vec1 32 ssa_191 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_227, ssa_191) (33, 7, 0, 160, 161) /* base=33 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_156 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &outViewVec@8 (shader_out vec3) 
	vec1 32 ssa_228 = mov ssa_123.x
	vec1 32 ssa_229 = mov ssa_123.y
	vec1 32 ssa_230 = mov ssa_123.z
	vec3 32 ssa_231 = vec3 ssa_228, ssa_229, ssa_230
	vec1 32 ssa_192 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_231, ssa_192) (35, 7, 0, 160, 163) /* base=35 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	/* succs: block_4 */
	block block_4:
}

nir_copy_prop
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_210 = undefined
	vec1 32 ssa_208 = undefined
	vec1 32 ssa_206 = undefined
	vec1 32 ssa_204 = undefined
	vec1 32 ssa_202 = undefined
	vec1 32 ssa_200 = undefined
	vec1 32 ssa_198 = undefined
	vec1 32 ssa_196 = undefined
	vec1 32 ssa_194 = undefined
	vec1 32 ssa_118 = undefined
	vec1 32 ssa_117 = undefined
	vec1 32 ssa_114 = undefined
	vec1 32 ssa_113 = undefined
	vec1 32 ssa_110 = undefined
	vec1 32 ssa_109 = undefined
	vec1 32 ssa_106 = undefined
	vec1 32 ssa_105 = undefined
	vec1 32 ssa_102 = undefined
	vec1 32 ssa_101 = undefined
	vec1 32 ssa_98 = undefined
	vec1 32 ssa_97 = undefined
	vec1 32 ssa_94 = undefined
	vec1 32 ssa_93 = undefined
	vec1 32 ssa_90 = undefined
	vec1 32 ssa_89 = undefined
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_85 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_2 = deref_var &inNormal (shader_in vec3) 
	vec1 32 ssa_171 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_177 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_172 = intrinsic load_input (ssa_177) (1, 0, 160, 273) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=2 */
	vec1 32 ssa_4 = deref_var &inColor (shader_in vec3) 
	vec1 32 ssa_173 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_178 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_174 = intrinsic load_input (ssa_178) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 1 ssa_6 = feq ssa_174.x, ssa_0
	vec1 1 ssa_7 = feq ssa_174.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_174.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_uniform (ssa_11) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_174.x
		vec1 32 ssa_17 = mov ssa_174.y
		vec1 32 ssa_18 = mov ssa_174.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_uniform (ssa_1) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_uniform (ssa_23) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_uniform (ssa_25) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_uniform (ssa_27) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_29 = deref_var &inPos (shader_in vec3) 
	vec1 32 ssa_175 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_179 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_176 = intrinsic load_input (ssa_179) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_176.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_176.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_176.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_176.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_176.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_176.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_176.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_176.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_176.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_176.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_176.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_176.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_172.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_172.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_172.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_172.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_172.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_172.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_172.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_172.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_172.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec1 32 ssa_73 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_84 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_87 = vec3 ssa_67, ssa_85, ssa_86
	vec1 32 ssa_74 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_88 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_91 = vec3 ssa_89, ssa_68, ssa_90
	vec1 32 ssa_75 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_92 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec3 32 ssa_95 = vec3 ssa_93, ssa_94, ssa_69
	vec1 32 ssa_128 = mov ssa_67
	vec1 32 ssa_129 = mov ssa_68
	vec1 32 ssa_130 = mov ssa_69
	vec3 32 ssa_131 = vec3 ssa_67, ssa_68, ssa_69
	vec1 32 ssa_76 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_96 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_99 = vec3 ssa_19, ssa_97, ssa_98
	vec1 32 ssa_77 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_100 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_103 = vec3 ssa_101, ssa_20, ssa_102
	vec1 32 ssa_78 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_104 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec3 32 ssa_107 = vec3 ssa_105, ssa_106, ssa_21
	vec1 32 ssa_124 = mov ssa_19
	vec1 32 ssa_125 = mov ssa_20
	vec1 32 ssa_126 = mov ssa_21
	vec3 32 ssa_127 = vec3 ssa_19, ssa_20, ssa_21
	vec1 32 ssa_79 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_108 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_111 = vec3 ssa_70, ssa_109, ssa_110
	vec1 32 ssa_80 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_112 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_115 = vec3 ssa_113, ssa_71, ssa_114
	vec1 32 ssa_81 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_116 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec3 32 ssa_119 = vec3 ssa_117, ssa_118, ssa_72
	vec1 32 ssa_120 = mov ssa_70
	vec1 32 ssa_121 = mov ssa_71
	vec1 32 ssa_122 = mov ssa_72
	vec3 32 ssa_123 = vec3 ssa_70, ssa_71, ssa_72
	vec1 32 ssa_82 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_83 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	vec1 32 ssa_132 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_133 = deref_var &.field0 (shader_out vec4) 
	vec1 32 ssa_215 = mov ssa_51
	vec1 32 ssa_216 = mov ssa_52
	vec1 32 ssa_217 = mov ssa_53
	vec1 32 ssa_218 = mov ssa_54
	vec4 32 ssa_219 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	vec1 32 ssa_180 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_219, ssa_180) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec1 32 ssa_134 = deref_var &out@outNormal-temp (function_temp float) 
	vec1 32 ssa_135 = deref_var &outNormal (shader_out float) 
	vec1 32 ssa_195 = mov ssa_194
	vec1 32 ssa_181 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_194, ssa_181) (32, 1, 0, 160, 160) /* base=32 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec1 32 ssa_136 = deref_var &out@outNormal-temp@9 (function_temp float) 
	vec1 32 ssa_137 = deref_var &outNormal@0 (shader_out float) 
	vec1 32 ssa_197 = mov ssa_196
	vec1 32 ssa_182 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_196, ssa_182) (32, 1, 1, 160, 160) /* base=32 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec1 32 ssa_138 = deref_var &out@outNormal-temp@10 (function_temp float) 
	vec1 32 ssa_139 = deref_var &outNormal@1 (shader_out float) 
	vec1 32 ssa_199 = mov ssa_198
	vec1 32 ssa_183 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_198, ssa_183) (32, 1, 2, 160, 160) /* base=32 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec1 32 ssa_140 = deref_var &out@outColor-temp (function_temp float) 
	vec1 32 ssa_141 = deref_var &outColor (shader_out float) 
	vec1 32 ssa_201 = mov ssa_200
	vec1 32 ssa_184 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_200, ssa_184) (33, 1, 0, 160, 161) /* base=33 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_142 = deref_var &out@outColor-temp@11 (function_temp float) 
	vec1 32 ssa_143 = deref_var &outColor@2 (shader_out float) 
	vec1 32 ssa_203 = mov ssa_202
	vec1 32 ssa_185 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_202, ssa_185) (33, 1, 1, 160, 161) /* base=33 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_144 = deref_var &out@outColor-temp@12 (function_temp float) 
	vec1 32 ssa_145 = deref_var &outColor@3 (shader_out float) 
	vec1 32 ssa_205 = mov ssa_204
	vec1 32 ssa_186 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_204, ssa_186) (33, 1, 2, 160, 161) /* base=33 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_146 = deref_var &out@outViewVec-temp (function_temp float) 
	vec1 32 ssa_147 = deref_var &outViewVec (shader_out float) 
	vec1 32 ssa_207 = mov ssa_206
	vec1 32 ssa_187 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_206, ssa_187) (35, 1, 0, 160, 163) /* base=35 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	vec1 32 ssa_148 = deref_var &out@outViewVec-temp@13 (function_temp float) 
	vec1 32 ssa_149 = deref_var &outViewVec@4 (shader_out float) 
	vec1 32 ssa_209 = mov ssa_208
	vec1 32 ssa_188 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_208, ssa_188) (35, 1, 1, 160, 163) /* base=35 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	vec1 32 ssa_150 = deref_var &out@outViewVec-temp@14 (function_temp float) 
	vec1 32 ssa_151 = deref_var &outViewVec@5 (shader_out float) 
	vec1 32 ssa_211 = mov ssa_210
	vec1 32 ssa_189 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_210, ssa_189) (35, 1, 2, 160, 163) /* base=35 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	vec1 32 ssa_152 = deref_var &out@outNormal-temp@15 (function_temp vec3) 
	vec1 32 ssa_153 = deref_var &outNormal@6 (shader_out vec3) 
	vec1 32 ssa_220 = mov ssa_67
	vec1 32 ssa_221 = mov ssa_68
	vec1 32 ssa_222 = mov ssa_69
	vec3 32 ssa_223 = vec3 ssa_67, ssa_68, ssa_69
	vec1 32 ssa_190 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_223, ssa_190) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec1 32 ssa_154 = deref_var &out@outColor-temp@16 (function_temp vec3) 
	vec1 32 ssa_155 = deref_var &outColor@7 (shader_out vec3) 
	vec1 32 ssa_224 = mov ssa_19
	vec1 32 ssa_225 = mov ssa_20
	vec1 32 ssa_226 = mov ssa_21
	vec3 32 ssa_227 = vec3 ssa_19, ssa_20, ssa_21
	vec1 32 ssa_191 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_227, ssa_191) (33, 7, 0, 160, 161) /* base=33 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_156 = deref_var &out@outViewVec-temp@17 (function_temp vec3) 
	vec1 32 ssa_157 = deref_var &outViewVec@8 (shader_out vec3) 
	vec1 32 ssa_228 = mov ssa_70
	vec1 32 ssa_229 = mov ssa_71
	vec1 32 ssa_230 = mov ssa_72
	vec3 32 ssa_231 = vec3 ssa_70, ssa_71, ssa_72
	vec1 32 ssa_192 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_231, ssa_192) (35, 7, 0, 160, 163) /* base=35 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	/* succs: block_4 */
	block block_4:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_210 = undefined
	vec1 32 ssa_208 = undefined
	vec1 32 ssa_206 = undefined
	vec1 32 ssa_204 = undefined
	vec1 32 ssa_202 = undefined
	vec1 32 ssa_200 = undefined
	vec1 32 ssa_198 = undefined
	vec1 32 ssa_196 = undefined
	vec1 32 ssa_194 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_177 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_172 = intrinsic load_input (ssa_177) (1, 0, 160, 273) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=2 */
	vec1 32 ssa_178 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_174 = intrinsic load_input (ssa_178) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 1 ssa_6 = feq ssa_174.x, ssa_0
	vec1 1 ssa_7 = feq ssa_174.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_174.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_uniform (ssa_11) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_174.x
		vec1 32 ssa_17 = mov ssa_174.y
		vec1 32 ssa_18 = mov ssa_174.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_uniform (ssa_1) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_uniform (ssa_23) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_uniform (ssa_25) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_uniform (ssa_27) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_179 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_176 = intrinsic load_input (ssa_179) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_176.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_176.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_176.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_176.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_176.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_176.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_176.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_176.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_176.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_176.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_176.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_176.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_172.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_172.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_172.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_172.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_172.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_172.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_172.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_172.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_172.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec4 32 ssa_219 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	vec1 32 ssa_180 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_219, ssa_180) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec1 32 ssa_181 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_194, ssa_181) (32, 1, 0, 160, 160) /* base=32 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec1 32 ssa_182 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_196, ssa_182) (32, 1, 1, 160, 160) /* base=32 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec1 32 ssa_183 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_198, ssa_183) (32, 1, 2, 160, 160) /* base=32 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec1 32 ssa_184 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_200, ssa_184) (33, 1, 0, 160, 161) /* base=33 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_185 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_202, ssa_185) (33, 1, 1, 160, 161) /* base=33 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_186 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_204, ssa_186) (33, 1, 2, 160, 161) /* base=33 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec1 32 ssa_187 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_206, ssa_187) (35, 1, 0, 160, 163) /* base=35 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	vec1 32 ssa_188 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_208, ssa_188) (35, 1, 1, 160, 163) /* base=35 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	vec1 32 ssa_189 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_210, ssa_189) (35, 1, 2, 160, 163) /* base=35 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	vec3 32 ssa_223 = vec3 ssa_67, ssa_68, ssa_69
	vec1 32 ssa_190 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_223, ssa_190) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec3 32 ssa_227 = vec3 ssa_19, ssa_20, ssa_21
	vec1 32 ssa_191 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_227, ssa_191) (33, 7, 0, 160, 161) /* base=33 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec3 32 ssa_231 = vec3 ssa_70, ssa_71, ssa_72
	vec1 32 ssa_192 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_231, ssa_192) (35, 7, 0, 160, 163) /* base=35 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	/* succs: block_4 */
	block block_4:
}

nir_opt_cse
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_210 = undefined
	vec1 32 ssa_208 = undefined
	vec1 32 ssa_206 = undefined
	vec1 32 ssa_204 = undefined
	vec1 32 ssa_202 = undefined
	vec1 32 ssa_200 = undefined
	vec1 32 ssa_198 = undefined
	vec1 32 ssa_196 = undefined
	vec1 32 ssa_194 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_172 = intrinsic load_input (ssa_1) (1, 0, 160, 273) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=2 */
	vec3 32 ssa_174 = intrinsic load_input (ssa_1) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 1 ssa_6 = feq ssa_174.x, ssa_0
	vec1 1 ssa_7 = feq ssa_174.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_174.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	/* succs: block_1 block_2 */
	if ssa_10 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
		vec3 32 ssa_12 = intrinsic load_uniform (ssa_11) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
		vec1 32 ssa_13 = mov ssa_12.x
		vec1 32 ssa_14 = mov ssa_12.y
		vec1 32 ssa_15 = mov ssa_12.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_16 = mov ssa_174.x
		vec1 32 ssa_17 = mov ssa_174.y
		vec1 32 ssa_18 = mov ssa_174.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_19 = phi block_1: ssa_13, block_2: ssa_16
	vec1 32 ssa_20 = phi block_1: ssa_14, block_2: ssa_17
	vec1 32 ssa_21 = phi block_1: ssa_15, block_2: ssa_18
	vec4 32 ssa_22 = intrinsic load_uniform (ssa_1) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_uniform (ssa_23) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_uniform (ssa_25) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_uniform (ssa_27) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec3 32 ssa_176 = intrinsic load_input (ssa_1) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_176.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_176.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_176.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_176.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_176.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_176.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_176.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_176.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_176.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_176.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_176.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_176.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_172.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_172.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_172.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_172.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_172.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_172.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_172.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_172.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_172.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec4 32 ssa_219 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_output (ssa_219, ssa_1) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	intrinsic store_output (ssa_194, ssa_1) (32, 1, 0, 160, 160) /* base=32 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	intrinsic store_output (ssa_196, ssa_1) (32, 1, 1, 160, 160) /* base=32 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	intrinsic store_output (ssa_198, ssa_1) (32, 1, 2, 160, 160) /* base=32 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	intrinsic store_output (ssa_200, ssa_1) (33, 1, 0, 160, 161) /* base=33 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	intrinsic store_output (ssa_202, ssa_1) (33, 1, 1, 160, 161) /* base=33 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	intrinsic store_output (ssa_204, ssa_1) (33, 1, 2, 160, 161) /* base=33 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	intrinsic store_output (ssa_206, ssa_1) (35, 1, 0, 160, 163) /* base=35 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	intrinsic store_output (ssa_208, ssa_1) (35, 1, 1, 160, 163) /* base=35 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	intrinsic store_output (ssa_210, ssa_1) (35, 1, 2, 160, 163) /* base=35 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	vec3 32 ssa_223 = vec3 ssa_67, ssa_68, ssa_69
	intrinsic store_output (ssa_223, ssa_1) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec3 32 ssa_227 = vec3 ssa_19, ssa_20, ssa_21
	intrinsic store_output (ssa_227, ssa_1) (33, 7, 0, 160, 161) /* base=33 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec3 32 ssa_231 = vec3 ssa_70, ssa_71, ssa_72
	intrinsic store_output (ssa_231, ssa_1) (35, 7, 0, 160, 163) /* base=35 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	/* succs: block_4 */
	block block_4:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_210 = undefined
	vec1 32 ssa_208 = undefined
	vec1 32 ssa_206 = undefined
	vec1 32 ssa_204 = undefined
	vec1 32 ssa_202 = undefined
	vec1 32 ssa_200 = undefined
	vec1 32 ssa_198 = undefined
	vec1 32 ssa_196 = undefined
	vec1 32 ssa_194 = undefined
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_172 = intrinsic load_input (ssa_1) (1, 0, 160, 273) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=2 */
	vec3 32 ssa_174 = intrinsic load_input (ssa_1) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 1 ssa_6 = feq ssa_174.x, ssa_0
	vec1 1 ssa_7 = feq ssa_174.y, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 1 ssa_9 = feq ssa_174.z, ssa_1
	vec1 1 ssa_10 = iand ssa_8, ssa_9
	vec1 32 ssa_11 = load_const (0x00000040 /* 0.000000 */)
	vec3 32 ssa_12 = intrinsic load_uniform (ssa_11) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_13 = mov ssa_12.x
	vec1 32 ssa_14 = mov ssa_12.y
	vec1 32 ssa_15 = mov ssa_12.z
	vec1 32 ssa_16 = mov ssa_174.x
	vec1 32 ssa_17 = mov ssa_174.y
	vec1 32 ssa_18 = mov ssa_174.z
	vec1 32 ssa_232 = bcsel ssa_10, ssa_13, ssa_16
	vec1 32 ssa_233 = bcsel ssa_10, ssa_14, ssa_17
	vec1 32 ssa_234 = bcsel ssa_10, ssa_15, ssa_18
	vec4 32 ssa_22 = intrinsic load_uniform (ssa_1) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_23 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_24 = intrinsic load_uniform (ssa_23) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_25 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_26 = intrinsic load_uniform (ssa_25) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_27 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_28 = intrinsic load_uniform (ssa_27) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec3 32 ssa_176 = intrinsic load_input (ssa_1) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_31 = fmul ssa_22.x, ssa_176.x
	vec1 32 ssa_32 = fmul ssa_22.y, ssa_176.x
	vec1 32 ssa_33 = fmul ssa_22.z, ssa_176.x
	vec1 32 ssa_34 = fmul ssa_22.w, ssa_176.x
	vec1 32 ssa_35 = fmul ssa_24.x, ssa_176.y
	vec1 32 ssa_36 = fmul ssa_24.y, ssa_176.y
	vec1 32 ssa_37 = fmul ssa_24.z, ssa_176.y
	vec1 32 ssa_38 = fmul ssa_24.w, ssa_176.y
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_34, ssa_38
	vec1 32 ssa_43 = fmul ssa_26.x, ssa_176.z
	vec1 32 ssa_44 = fmul ssa_26.y, ssa_176.z
	vec1 32 ssa_45 = fmul ssa_26.z, ssa_176.z
	vec1 32 ssa_46 = fmul ssa_26.w, ssa_176.z
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fadd ssa_41, ssa_45
	vec1 32 ssa_50 = fadd ssa_42, ssa_46
	vec1 32 ssa_51 = fadd ssa_47, ssa_28.x
	vec1 32 ssa_52 = fadd ssa_48, ssa_28.y
	vec1 32 ssa_53 = fadd ssa_49, ssa_28.z
	vec1 32 ssa_54 = fadd ssa_50, ssa_28.w
	vec1 32 ssa_55 = fmul ssa_22.x, ssa_172.x
	vec1 32 ssa_56 = fmul ssa_22.y, ssa_172.x
	vec1 32 ssa_57 = fmul ssa_22.z, ssa_172.x
	vec1 32 ssa_58 = fmul ssa_24.x, ssa_172.y
	vec1 32 ssa_59 = fmul ssa_24.y, ssa_172.y
	vec1 32 ssa_60 = fmul ssa_24.z, ssa_172.y
	vec1 32 ssa_61 = fadd ssa_55, ssa_58
	vec1 32 ssa_62 = fadd ssa_56, ssa_59
	vec1 32 ssa_63 = fadd ssa_57, ssa_60
	vec1 32 ssa_64 = fmul ssa_26.x, ssa_172.z
	vec1 32 ssa_65 = fmul ssa_26.y, ssa_172.z
	vec1 32 ssa_66 = fmul ssa_26.z, ssa_172.z
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fneg ssa_51
	vec1 32 ssa_71 = fneg ssa_52
	vec1 32 ssa_72 = fneg ssa_53
	vec4 32 ssa_219 = vec4 ssa_51, ssa_52, ssa_53, ssa_54
	intrinsic store_output (ssa_219, ssa_1) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	intrinsic store_output (ssa_194, ssa_1) (32, 1, 0, 160, 160) /* base=32 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	intrinsic store_output (ssa_196, ssa_1) (32, 1, 1, 160, 160) /* base=32 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	intrinsic store_output (ssa_198, ssa_1) (32, 1, 2, 160, 160) /* base=32 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	intrinsic store_output (ssa_200, ssa_1) (33, 1, 0, 160, 161) /* base=33 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	intrinsic store_output (ssa_202, ssa_1) (33, 1, 1, 160, 161) /* base=33 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	intrinsic store_output (ssa_204, ssa_1) (33, 1, 2, 160, 161) /* base=33 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	intrinsic store_output (ssa_206, ssa_1) (35, 1, 0, 160, 163) /* base=35 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	intrinsic store_output (ssa_208, ssa_1) (35, 1, 1, 160, 163) /* base=35 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	intrinsic store_output (ssa_210, ssa_1) (35, 1, 2, 160, 163) /* base=35 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	vec3 32 ssa_223 = vec3 ssa_67, ssa_68, ssa_69
	intrinsic store_output (ssa_223, ssa_1) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec3 32 ssa_227 = vec3 ssa_232, ssa_233, ssa_234
	intrinsic store_output (ssa_227, ssa_1) (33, 7, 0, 160, 161) /* base=33 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec3 32 ssa_231 = vec3 ssa_70, ssa_71, ssa_72
	intrinsic store_output (ssa_231, ssa_1) (35, 7, 0, 160, 163) /* base=35 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	/* succs: block_1 */
	block block_1:
}

nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = undefined
	vec1 32 ssa_1 = undefined
	vec1 32 ssa_2 = undefined
	vec1 32 ssa_3 = undefined
	vec1 32 ssa_4 = undefined
	vec1 32 ssa_5 = undefined
	vec1 32 ssa_6 = undefined
	vec1 32 ssa_7 = undefined
	vec1 32 ssa_8 = undefined
	vec1 32 ssa_9 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_10 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_11 = intrinsic load_input (ssa_10) (1, 0, 160, 273) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=2 */
	vec3 32 ssa_12 = intrinsic load_input (ssa_10) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 1 ssa_13 = feq ssa_12.x, ssa_9
	vec1 1 ssa_14 = feq ssa_12.y, ssa_10
	vec1 1 ssa_15 = iand ssa_13, ssa_14
	vec1 1 ssa_16 = feq ssa_12.z, ssa_10
	vec1 1 ssa_17 = iand ssa_15, ssa_16
	vec1 32 ssa_18 = load_const (0x00000040 /* 0.000000 */)
	vec3 32 ssa_19 = intrinsic load_uniform (ssa_18) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_20 = mov ssa_19.x
	vec1 32 ssa_21 = mov ssa_19.y
	vec1 32 ssa_22 = mov ssa_19.z
	vec1 32 ssa_23 = mov ssa_12.x
	vec1 32 ssa_24 = mov ssa_12.y
	vec1 32 ssa_25 = mov ssa_12.z
	vec1 32 ssa_26 = bcsel ssa_17, ssa_20, ssa_23
	vec1 32 ssa_27 = bcsel ssa_17, ssa_21, ssa_24
	vec1 32 ssa_28 = bcsel ssa_17, ssa_22, ssa_25
	vec4 32 ssa_29 = intrinsic load_uniform (ssa_10) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_30 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_31 = intrinsic load_uniform (ssa_30) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_32 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_33 = intrinsic load_uniform (ssa_32) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_34 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_35 = intrinsic load_uniform (ssa_34) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec3 32 ssa_36 = intrinsic load_input (ssa_10) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_37 = fmul ssa_29.x, ssa_36.x
	vec1 32 ssa_38 = fmul ssa_29.y, ssa_36.x
	vec1 32 ssa_39 = fmul ssa_29.z, ssa_36.x
	vec1 32 ssa_40 = fmul ssa_29.w, ssa_36.x
	vec1 32 ssa_41 = fmul ssa_31.x, ssa_36.y
	vec1 32 ssa_42 = fmul ssa_31.y, ssa_36.y
	vec1 32 ssa_43 = fmul ssa_31.z, ssa_36.y
	vec1 32 ssa_44 = fmul ssa_31.w, ssa_36.y
	vec1 32 ssa_45 = fadd ssa_37, ssa_41
	vec1 32 ssa_46 = fadd ssa_38, ssa_42
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fmul ssa_33.x, ssa_36.z
	vec1 32 ssa_50 = fmul ssa_33.y, ssa_36.z
	vec1 32 ssa_51 = fmul ssa_33.z, ssa_36.z
	vec1 32 ssa_52 = fmul ssa_33.w, ssa_36.z
	vec1 32 ssa_53 = fadd ssa_45, ssa_49
	vec1 32 ssa_54 = fadd ssa_46, ssa_50
	vec1 32 ssa_55 = fadd ssa_47, ssa_51
	vec1 32 ssa_56 = fadd ssa_48, ssa_52
	vec1 32 ssa_57 = fadd ssa_53, ssa_35.x
	vec1 32 ssa_58 = fadd ssa_54, ssa_35.y
	vec1 32 ssa_59 = fadd ssa_55, ssa_35.z
	vec1 32 ssa_60 = fadd ssa_56, ssa_35.w
	vec1 32 ssa_61 = fmul ssa_29.x, ssa_11.x
	vec1 32 ssa_62 = fmul ssa_29.y, ssa_11.x
	vec1 32 ssa_63 = fmul ssa_29.z, ssa_11.x
	vec1 32 ssa_64 = fmul ssa_31.x, ssa_11.y
	vec1 32 ssa_65 = fmul ssa_31.y, ssa_11.y
	vec1 32 ssa_66 = fmul ssa_31.z, ssa_11.y
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fmul ssa_33.x, ssa_11.z
	vec1 32 ssa_71 = fmul ssa_33.y, ssa_11.z
	vec1 32 ssa_72 = fmul ssa_33.z, ssa_11.z
	vec1 32 ssa_73 = fadd ssa_67, ssa_70
	vec1 32 ssa_74 = fadd ssa_68, ssa_71
	vec1 32 ssa_75 = fadd ssa_69, ssa_72
	vec1 32 ssa_76 = fneg ssa_57
	vec1 32 ssa_77 = fneg ssa_58
	vec1 32 ssa_78 = fneg ssa_59
	vec4 32 ssa_79 = vec4 ssa_57, ssa_58, ssa_59, ssa_60
	intrinsic store_output (ssa_79, ssa_10) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec3 32 ssa_80 = vec3 ssa_73, ssa_74, ssa_75
	intrinsic store_output (ssa_80, ssa_10) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec3 32 ssa_81 = vec3 ssa_26, ssa_27, ssa_28
	intrinsic store_output (ssa_81, ssa_10) (33, 7, 0, 160, 161) /* base=33 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec3 32 ssa_82 = vec3 ssa_76, ssa_77, ssa_78
	intrinsic store_output (ssa_82, ssa_10) (35, 7, 0, 160, 163) /* base=35 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	/* succs: block_1 */
	block block_1:
}

nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = undefined
	vec1 32 ssa_1 = undefined
	vec1 32 ssa_2 = undefined
	vec1 32 ssa_3 = undefined
	vec1 32 ssa_4 = undefined
	vec1 32 ssa_5 = undefined
	vec1 32 ssa_6 = undefined
	vec1 32 ssa_7 = undefined
	vec1 32 ssa_8 = undefined
	vec1 32 ssa_9 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_10 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_11 = intrinsic load_input (ssa_10) (1, 0, 160, 273) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=2 */
	vec3 32 ssa_12 = intrinsic load_input (ssa_10) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 1 ssa_13 = feq ssa_12.x, ssa_9
	vec1 1 ssa_14 = feq ssa_12.y, ssa_10
	vec1 1 ssa_15 = iand ssa_13, ssa_14
	vec1 1 ssa_16 = feq ssa_12.z, ssa_10
	vec1 1 ssa_17 = iand ssa_15, ssa_16
	vec1 32 ssa_18 = load_const (0x00000040 /* 0.000000 */)
	vec3 32 ssa_19 = intrinsic load_uniform (ssa_18) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_20 = mov ssa_19.x
	vec1 32 ssa_21 = mov ssa_19.y
	vec1 32 ssa_22 = mov ssa_19.z
	vec1 32 ssa_23 = mov ssa_12.x
	vec1 32 ssa_24 = mov ssa_12.y
	vec1 32 ssa_25 = mov ssa_12.z
	vec1 32 ssa_26 = bcsel ssa_17, ssa_19.x, ssa_12.x
	vec1 32 ssa_27 = bcsel ssa_17, ssa_19.y, ssa_12.y
	vec1 32 ssa_28 = bcsel ssa_17, ssa_19.z, ssa_12.z
	vec4 32 ssa_29 = intrinsic load_uniform (ssa_10) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_30 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_31 = intrinsic load_uniform (ssa_30) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_32 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_33 = intrinsic load_uniform (ssa_32) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_34 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_35 = intrinsic load_uniform (ssa_34) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec3 32 ssa_36 = intrinsic load_input (ssa_10) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_37 = fmul ssa_29.x, ssa_36.x
	vec1 32 ssa_38 = fmul ssa_29.y, ssa_36.x
	vec1 32 ssa_39 = fmul ssa_29.z, ssa_36.x
	vec1 32 ssa_40 = fmul ssa_29.w, ssa_36.x
	vec1 32 ssa_41 = fmul ssa_31.x, ssa_36.y
	vec1 32 ssa_42 = fmul ssa_31.y, ssa_36.y
	vec1 32 ssa_43 = fmul ssa_31.z, ssa_36.y
	vec1 32 ssa_44 = fmul ssa_31.w, ssa_36.y
	vec1 32 ssa_45 = fadd ssa_37, ssa_41
	vec1 32 ssa_46 = fadd ssa_38, ssa_42
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fmul ssa_33.x, ssa_36.z
	vec1 32 ssa_50 = fmul ssa_33.y, ssa_36.z
	vec1 32 ssa_51 = fmul ssa_33.z, ssa_36.z
	vec1 32 ssa_52 = fmul ssa_33.w, ssa_36.z
	vec1 32 ssa_53 = fadd ssa_45, ssa_49
	vec1 32 ssa_54 = fadd ssa_46, ssa_50
	vec1 32 ssa_55 = fadd ssa_47, ssa_51
	vec1 32 ssa_56 = fadd ssa_48, ssa_52
	vec1 32 ssa_57 = fadd ssa_53, ssa_35.x
	vec1 32 ssa_58 = fadd ssa_54, ssa_35.y
	vec1 32 ssa_59 = fadd ssa_55, ssa_35.z
	vec1 32 ssa_60 = fadd ssa_56, ssa_35.w
	vec1 32 ssa_61 = fmul ssa_29.x, ssa_11.x
	vec1 32 ssa_62 = fmul ssa_29.y, ssa_11.x
	vec1 32 ssa_63 = fmul ssa_29.z, ssa_11.x
	vec1 32 ssa_64 = fmul ssa_31.x, ssa_11.y
	vec1 32 ssa_65 = fmul ssa_31.y, ssa_11.y
	vec1 32 ssa_66 = fmul ssa_31.z, ssa_11.y
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fmul ssa_33.x, ssa_11.z
	vec1 32 ssa_71 = fmul ssa_33.y, ssa_11.z
	vec1 32 ssa_72 = fmul ssa_33.z, ssa_11.z
	vec1 32 ssa_73 = fadd ssa_67, ssa_70
	vec1 32 ssa_74 = fadd ssa_68, ssa_71
	vec1 32 ssa_75 = fadd ssa_69, ssa_72
	vec1 32 ssa_76 = fneg ssa_57
	vec1 32 ssa_77 = fneg ssa_58
	vec1 32 ssa_78 = fneg ssa_59
	vec4 32 ssa_79 = vec4 ssa_57, ssa_58, ssa_59, ssa_60
	intrinsic store_output (ssa_79, ssa_10) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec3 32 ssa_80 = vec3 ssa_73, ssa_74, ssa_75
	intrinsic store_output (ssa_80, ssa_10) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec3 32 ssa_81 = vec3 ssa_26, ssa_27, ssa_28
	intrinsic store_output (ssa_81, ssa_10) (33, 7, 0, 160, 161) /* base=33 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec3 32 ssa_82 = vec3 ssa_76, ssa_77, ssa_78
	intrinsic store_output (ssa_82, ssa_10) (35, 7, 0, 160, 163) /* base=35 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@9
	decl_var  INTERP_MODE_NONE float out@outNormal-temp@10
	decl_var  INTERP_MODE_NONE float out@outColor-temp
	decl_var  INTERP_MODE_NONE float out@outColor-temp@11
	decl_var  INTERP_MODE_NONE float out@outColor-temp@12
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@13
	decl_var  INTERP_MODE_NONE float out@outViewVec-temp@14
	decl_var  INTERP_MODE_NONE vec3 out@outNormal-temp@15
	decl_var  INTERP_MODE_NONE vec3 out@outColor-temp@16
	decl_var  INTERP_MODE_NONE vec3 out@outViewVec-temp@17
	block block_0:
	/* preds: */
	vec1 32 ssa_9 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_10 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_11 = intrinsic load_input (ssa_10) (1, 0, 160, 273) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=2 */
	vec3 32 ssa_12 = intrinsic load_input (ssa_10) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 1 ssa_13 = feq ssa_12.x, ssa_9
	vec1 1 ssa_14 = feq ssa_12.y, ssa_10
	vec1 1 ssa_15 = iand ssa_13, ssa_14
	vec1 1 ssa_16 = feq ssa_12.z, ssa_10
	vec1 1 ssa_17 = iand ssa_15, ssa_16
	vec1 32 ssa_18 = load_const (0x00000040 /* 0.000000 */)
	vec3 32 ssa_19 = intrinsic load_uniform (ssa_18) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_26 = bcsel ssa_17, ssa_19.x, ssa_12.x
	vec1 32 ssa_27 = bcsel ssa_17, ssa_19.y, ssa_12.y
	vec1 32 ssa_28 = bcsel ssa_17, ssa_19.z, ssa_12.z
	vec4 32 ssa_29 = intrinsic load_uniform (ssa_10) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_30 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_31 = intrinsic load_uniform (ssa_30) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_32 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_33 = intrinsic load_uniform (ssa_32) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_34 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_35 = intrinsic load_uniform (ssa_34) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec3 32 ssa_36 = intrinsic load_input (ssa_10) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_37 = fmul ssa_29.x, ssa_36.x
	vec1 32 ssa_38 = fmul ssa_29.y, ssa_36.x
	vec1 32 ssa_39 = fmul ssa_29.z, ssa_36.x
	vec1 32 ssa_40 = fmul ssa_29.w, ssa_36.x
	vec1 32 ssa_41 = fmul ssa_31.x, ssa_36.y
	vec1 32 ssa_42 = fmul ssa_31.y, ssa_36.y
	vec1 32 ssa_43 = fmul ssa_31.z, ssa_36.y
	vec1 32 ssa_44 = fmul ssa_31.w, ssa_36.y
	vec1 32 ssa_45 = fadd ssa_37, ssa_41
	vec1 32 ssa_46 = fadd ssa_38, ssa_42
	vec1 32 ssa_47 = fadd ssa_39, ssa_43
	vec1 32 ssa_48 = fadd ssa_40, ssa_44
	vec1 32 ssa_49 = fmul ssa_33.x, ssa_36.z
	vec1 32 ssa_50 = fmul ssa_33.y, ssa_36.z
	vec1 32 ssa_51 = fmul ssa_33.z, ssa_36.z
	vec1 32 ssa_52 = fmul ssa_33.w, ssa_36.z
	vec1 32 ssa_53 = fadd ssa_45, ssa_49
	vec1 32 ssa_54 = fadd ssa_46, ssa_50
	vec1 32 ssa_55 = fadd ssa_47, ssa_51
	vec1 32 ssa_56 = fadd ssa_48, ssa_52
	vec1 32 ssa_57 = fadd ssa_53, ssa_35.x
	vec1 32 ssa_58 = fadd ssa_54, ssa_35.y
	vec1 32 ssa_59 = fadd ssa_55, ssa_35.z
	vec1 32 ssa_60 = fadd ssa_56, ssa_35.w
	vec1 32 ssa_61 = fmul ssa_29.x, ssa_11.x
	vec1 32 ssa_62 = fmul ssa_29.y, ssa_11.x
	vec1 32 ssa_63 = fmul ssa_29.z, ssa_11.x
	vec1 32 ssa_64 = fmul ssa_31.x, ssa_11.y
	vec1 32 ssa_65 = fmul ssa_31.y, ssa_11.y
	vec1 32 ssa_66 = fmul ssa_31.z, ssa_11.y
	vec1 32 ssa_67 = fadd ssa_61, ssa_64
	vec1 32 ssa_68 = fadd ssa_62, ssa_65
	vec1 32 ssa_69 = fadd ssa_63, ssa_66
	vec1 32 ssa_70 = fmul ssa_33.x, ssa_11.z
	vec1 32 ssa_71 = fmul ssa_33.y, ssa_11.z
	vec1 32 ssa_72 = fmul ssa_33.z, ssa_11.z
	vec1 32 ssa_73 = fadd ssa_67, ssa_70
	vec1 32 ssa_74 = fadd ssa_68, ssa_71
	vec1 32 ssa_75 = fadd ssa_69, ssa_72
	vec1 32 ssa_76 = fneg ssa_57
	vec1 32 ssa_77 = fneg ssa_58
	vec1 32 ssa_78 = fneg ssa_59
	vec4 32 ssa_79 = vec4 ssa_57, ssa_58, ssa_59, ssa_60
	intrinsic store_output (ssa_79, ssa_10) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec3 32 ssa_80 = vec3 ssa_73, ssa_74, ssa_75
	intrinsic store_output (ssa_80, ssa_10) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec3 32 ssa_81 = vec3 ssa_26, ssa_27, ssa_28
	intrinsic store_output (ssa_81, ssa_10) (33, 7, 0, 160, 161) /* base=33 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec3 32 ssa_82 = vec3 ssa_76, ssa_77, ssa_78
	intrinsic store_output (ssa_82, ssa_10) (35, 7, 0, 160, 163) /* base=35 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_2 = intrinsic load_input (ssa_1) (1, 0, 160, 273) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=2 */
	vec3 32 ssa_3 = intrinsic load_input (ssa_1) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 1 ssa_4 = feq ssa_3.x, ssa_0
	vec1 1 ssa_5 = feq ssa_3.y, ssa_1
	vec1 1 ssa_6 = iand ssa_4, ssa_5
	vec1 1 ssa_7 = feq ssa_3.z, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 32 ssa_9 = load_const (0x00000040 /* 0.000000 */)
	vec3 32 ssa_10 = intrinsic load_uniform (ssa_9) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_11 = bcsel ssa_8, ssa_10.x, ssa_3.x
	vec1 32 ssa_12 = bcsel ssa_8, ssa_10.y, ssa_3.y
	vec1 32 ssa_13 = bcsel ssa_8, ssa_10.z, ssa_3.z
	vec4 32 ssa_14 = intrinsic load_uniform (ssa_1) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_15 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_16 = intrinsic load_uniform (ssa_15) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_17 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_18 = intrinsic load_uniform (ssa_17) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_19 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_20 = intrinsic load_uniform (ssa_19) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec3 32 ssa_21 = intrinsic load_input (ssa_1) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_22 = fmul ssa_14.x, ssa_21.x
	vec1 32 ssa_23 = fmul ssa_14.y, ssa_21.x
	vec1 32 ssa_24 = fmul ssa_14.z, ssa_21.x
	vec1 32 ssa_25 = fmul ssa_14.w, ssa_21.x
	vec1 32 ssa_26 = fmul ssa_16.x, ssa_21.y
	vec1 32 ssa_27 = fmul ssa_16.y, ssa_21.y
	vec1 32 ssa_28 = fmul ssa_16.z, ssa_21.y
	vec1 32 ssa_29 = fmul ssa_16.w, ssa_21.y
	vec1 32 ssa_30 = fadd ssa_22, ssa_26
	vec1 32 ssa_31 = fadd ssa_23, ssa_27
	vec1 32 ssa_32 = fadd ssa_24, ssa_28
	vec1 32 ssa_33 = fadd ssa_25, ssa_29
	vec1 32 ssa_34 = fmul ssa_18.x, ssa_21.z
	vec1 32 ssa_35 = fmul ssa_18.y, ssa_21.z
	vec1 32 ssa_36 = fmul ssa_18.z, ssa_21.z
	vec1 32 ssa_37 = fmul ssa_18.w, ssa_21.z
	vec1 32 ssa_38 = fadd ssa_30, ssa_34
	vec1 32 ssa_39 = fadd ssa_31, ssa_35
	vec1 32 ssa_40 = fadd ssa_32, ssa_36
	vec1 32 ssa_41 = fadd ssa_33, ssa_37
	vec1 32 ssa_42 = fadd ssa_38, ssa_20.x
	vec1 32 ssa_43 = fadd ssa_39, ssa_20.y
	vec1 32 ssa_44 = fadd ssa_40, ssa_20.z
	vec1 32 ssa_45 = fadd ssa_41, ssa_20.w
	vec1 32 ssa_46 = fmul ssa_14.x, ssa_2.x
	vec1 32 ssa_47 = fmul ssa_14.y, ssa_2.x
	vec1 32 ssa_48 = fmul ssa_14.z, ssa_2.x
	vec1 32 ssa_49 = fmul ssa_16.x, ssa_2.y
	vec1 32 ssa_50 = fmul ssa_16.y, ssa_2.y
	vec1 32 ssa_51 = fmul ssa_16.z, ssa_2.y
	vec1 32 ssa_52 = fadd ssa_46, ssa_49
	vec1 32 ssa_53 = fadd ssa_47, ssa_50
	vec1 32 ssa_54 = fadd ssa_48, ssa_51
	vec1 32 ssa_55 = fmul ssa_18.x, ssa_2.z
	vec1 32 ssa_56 = fmul ssa_18.y, ssa_2.z
	vec1 32 ssa_57 = fmul ssa_18.z, ssa_2.z
	vec1 32 ssa_58 = fadd ssa_52, ssa_55
	vec1 32 ssa_59 = fadd ssa_53, ssa_56
	vec1 32 ssa_60 = fadd ssa_54, ssa_57
	vec1 32 ssa_61 = fneg ssa_42
	vec1 32 ssa_62 = fneg ssa_43
	vec1 32 ssa_63 = fneg ssa_44
	vec4 32 ssa_64 = vec4 ssa_42, ssa_43, ssa_44, ssa_45
	intrinsic store_output (ssa_64, ssa_1) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec3 32 ssa_65 = vec3 ssa_58, ssa_59, ssa_60
	intrinsic store_output (ssa_65, ssa_1) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec3 32 ssa_66 = vec3 ssa_11, ssa_12, ssa_13
	intrinsic store_output (ssa_66, ssa_1) (33, 7, 0, 160, 161) /* base=33 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec3 32 ssa_67 = vec3 ssa_61, ssa_62, ssa_63
	intrinsic store_output (ssa_67, ssa_1) (35, 7, 0, 160, 163) /* base=35 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	/* succs: block_1 */
	block block_1:
}

nir_opt_load_store_vectorize
brw_nir_lower_mem_access_bit_sizes
nir_lower_int64
brw_nir_opt_peephole_ffma
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_2 = intrinsic load_input (ssa_1) (1, 0, 160, 273) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=2 */
	vec3 32 ssa_3 = intrinsic load_input (ssa_1) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 1 ssa_4 = feq ssa_3.x, ssa_0
	vec1 1 ssa_5 = feq ssa_3.y, ssa_1
	vec1 1 ssa_6 = iand ssa_4, ssa_5
	vec1 1 ssa_7 = feq ssa_3.z, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 32 ssa_9 = load_const (0x00000040 /* 0.000000 */)
	vec3 32 ssa_10 = intrinsic load_uniform (ssa_9) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_11 = bcsel ssa_8, ssa_10.x, ssa_3.x
	vec1 32 ssa_12 = bcsel ssa_8, ssa_10.y, ssa_3.y
	vec1 32 ssa_13 = bcsel ssa_8, ssa_10.z, ssa_3.z
	vec4 32 ssa_14 = intrinsic load_uniform (ssa_1) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_15 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_16 = intrinsic load_uniform (ssa_15) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_17 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_18 = intrinsic load_uniform (ssa_17) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_19 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_20 = intrinsic load_uniform (ssa_19) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec3 32 ssa_21 = intrinsic load_input (ssa_1) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_22 = fmul ssa_14.x, ssa_21.x
	vec1 32 ssa_23 = fmul ssa_14.y, ssa_21.x
	vec1 32 ssa_24 = fmul ssa_14.z, ssa_21.x
	vec1 32 ssa_25 = fmul ssa_14.w, ssa_21.x
	vec1 32 ssa_26 = fmul ssa_16.x, ssa_21.y
	vec1 32 ssa_27 = fmul ssa_16.y, ssa_21.y
	vec1 32 ssa_28 = fmul ssa_16.z, ssa_21.y
	vec1 32 ssa_29 = fmul ssa_16.w, ssa_21.y
	vec1 32 ssa_68 = ffma ssa_14.x, ssa_21.x, ssa_26
	vec1 32 ssa_69 = ffma ssa_14.y, ssa_21.x, ssa_27
	vec1 32 ssa_70 = ffma ssa_14.z, ssa_21.x, ssa_28
	vec1 32 ssa_71 = ffma ssa_14.w, ssa_21.x, ssa_29
	vec1 32 ssa_34 = fmul ssa_18.x, ssa_21.z
	vec1 32 ssa_35 = fmul ssa_18.y, ssa_21.z
	vec1 32 ssa_36 = fmul ssa_18.z, ssa_21.z
	vec1 32 ssa_37 = fmul ssa_18.w, ssa_21.z
	vec1 32 ssa_72 = ffma ssa_18.x, ssa_21.z, ssa_68
	vec1 32 ssa_73 = ffma ssa_18.y, ssa_21.z, ssa_69
	vec1 32 ssa_74 = ffma ssa_18.z, ssa_21.z, ssa_70
	vec1 32 ssa_75 = ffma ssa_18.w, ssa_21.z, ssa_71
	vec1 32 ssa_42 = fadd ssa_72, ssa_20.x
	vec1 32 ssa_43 = fadd ssa_73, ssa_20.y
	vec1 32 ssa_44 = fadd ssa_74, ssa_20.z
	vec1 32 ssa_45 = fadd ssa_75, ssa_20.w
	vec1 32 ssa_46 = fmul ssa_14.x, ssa_2.x
	vec1 32 ssa_47 = fmul ssa_14.y, ssa_2.x
	vec1 32 ssa_48 = fmul ssa_14.z, ssa_2.x
	vec1 32 ssa_49 = fmul ssa_16.x, ssa_2.y
	vec1 32 ssa_50 = fmul ssa_16.y, ssa_2.y
	vec1 32 ssa_51 = fmul ssa_16.z, ssa_2.y
	vec1 32 ssa_76 = ffma ssa_14.x, ssa_2.x, ssa_49
	vec1 32 ssa_77 = ffma ssa_14.y, ssa_2.x, ssa_50
	vec1 32 ssa_78 = ffma ssa_14.z, ssa_2.x, ssa_51
	vec1 32 ssa_55 = fmul ssa_18.x, ssa_2.z
	vec1 32 ssa_56 = fmul ssa_18.y, ssa_2.z
	vec1 32 ssa_57 = fmul ssa_18.z, ssa_2.z
	vec1 32 ssa_79 = ffma ssa_18.x, ssa_2.z, ssa_76
	vec1 32 ssa_80 = ffma ssa_18.y, ssa_2.z, ssa_77
	vec1 32 ssa_81 = ffma ssa_18.z, ssa_2.z, ssa_78
	vec1 32 ssa_61 = fneg ssa_42
	vec1 32 ssa_62 = fneg ssa_43
	vec1 32 ssa_63 = fneg ssa_44
	vec4 32 ssa_64 = vec4 ssa_42, ssa_43, ssa_44, ssa_45
	intrinsic store_output (ssa_64, ssa_1) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec3 32 ssa_65 = vec3 ssa_79, ssa_80, ssa_81
	intrinsic store_output (ssa_65, ssa_1) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec3 32 ssa_66 = vec3 ssa_11, ssa_12, ssa_13
	intrinsic store_output (ssa_66, ssa_1) (33, 7, 0, 160, 161) /* base=33 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec3 32 ssa_67 = vec3 ssa_61, ssa_62, ssa_63
	intrinsic store_output (ssa_67, ssa_1) (35, 7, 0, 160, 163) /* base=35 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	/* succs: block_1 */
	block block_1:
}

nir_opt_comparison_pre
nir_opt_algebraic_late
brw_nir_lower_conversions
nir_lower_alu_to_scalar
nir_opt_algebraic_distribute_src_mods
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_2 = intrinsic load_input (ssa_1) (1, 0, 160, 273) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=2 */
	vec3 32 ssa_3 = intrinsic load_input (ssa_1) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 1 ssa_4 = feq ssa_3.x, ssa_0
	vec1 1 ssa_5 = feq ssa_3.y, ssa_1
	vec1 1 ssa_6 = iand ssa_4, ssa_5
	vec1 1 ssa_7 = feq ssa_3.z, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 32 ssa_9 = load_const (0x00000040 /* 0.000000 */)
	vec3 32 ssa_10 = intrinsic load_uniform (ssa_9) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_11 = bcsel ssa_8, ssa_10.x, ssa_3.x
	vec1 32 ssa_12 = bcsel ssa_8, ssa_10.y, ssa_3.y
	vec1 32 ssa_13 = bcsel ssa_8, ssa_10.z, ssa_3.z
	vec4 32 ssa_14 = intrinsic load_uniform (ssa_1) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_15 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_16 = intrinsic load_uniform (ssa_15) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_17 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_18 = intrinsic load_uniform (ssa_17) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_19 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_20 = intrinsic load_uniform (ssa_19) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec3 32 ssa_21 = intrinsic load_input (ssa_1) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_26 = fmul ssa_16.x, ssa_21.y
	vec1 32 ssa_27 = fmul ssa_16.y, ssa_21.y
	vec1 32 ssa_28 = fmul ssa_16.z, ssa_21.y
	vec1 32 ssa_29 = fmul ssa_16.w, ssa_21.y
	vec1 32 ssa_68 = ffma ssa_14.x, ssa_21.x, ssa_26
	vec1 32 ssa_69 = ffma ssa_14.y, ssa_21.x, ssa_27
	vec1 32 ssa_70 = ffma ssa_14.z, ssa_21.x, ssa_28
	vec1 32 ssa_71 = ffma ssa_14.w, ssa_21.x, ssa_29
	vec1 32 ssa_72 = ffma ssa_18.x, ssa_21.z, ssa_68
	vec1 32 ssa_73 = ffma ssa_18.y, ssa_21.z, ssa_69
	vec1 32 ssa_74 = ffma ssa_18.z, ssa_21.z, ssa_70
	vec1 32 ssa_75 = ffma ssa_18.w, ssa_21.z, ssa_71
	vec1 32 ssa_42 = fadd ssa_72, ssa_20.x
	vec1 32 ssa_43 = fadd ssa_73, ssa_20.y
	vec1 32 ssa_44 = fadd ssa_74, ssa_20.z
	vec1 32 ssa_45 = fadd ssa_75, ssa_20.w
	vec1 32 ssa_49 = fmul ssa_16.x, ssa_2.y
	vec1 32 ssa_50 = fmul ssa_16.y, ssa_2.y
	vec1 32 ssa_51 = fmul ssa_16.z, ssa_2.y
	vec1 32 ssa_76 = ffma ssa_14.x, ssa_2.x, ssa_49
	vec1 32 ssa_77 = ffma ssa_14.y, ssa_2.x, ssa_50
	vec1 32 ssa_78 = ffma ssa_14.z, ssa_2.x, ssa_51
	vec1 32 ssa_79 = ffma ssa_18.x, ssa_2.z, ssa_76
	vec1 32 ssa_80 = ffma ssa_18.y, ssa_2.z, ssa_77
	vec1 32 ssa_81 = ffma ssa_18.z, ssa_2.z, ssa_78
	vec1 32 ssa_61 = fneg ssa_42
	vec1 32 ssa_62 = fneg ssa_43
	vec1 32 ssa_63 = fneg ssa_44
	vec4 32 ssa_64 = vec4 ssa_42, ssa_43, ssa_44, ssa_45
	intrinsic store_output (ssa_64, ssa_1) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec3 32 ssa_65 = vec3 ssa_79, ssa_80, ssa_81
	intrinsic store_output (ssa_65, ssa_1) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec3 32 ssa_66 = vec3 ssa_11, ssa_12, ssa_13
	intrinsic store_output (ssa_66, ssa_1) (33, 7, 0, 160, 161) /* base=33 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec3 32 ssa_67 = vec3 ssa_61, ssa_62, ssa_63
	intrinsic store_output (ssa_67, ssa_1) (35, 7, 0, 160, 163) /* base=35 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	/* succs: block_1 */
	block block_1:
}

nir_opt_move
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_2 = intrinsic load_input (ssa_1) (1, 0, 160, 273) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=2 */
	vec3 32 ssa_3 = intrinsic load_input (ssa_1) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 1 ssa_5 = feq ssa_3.y, ssa_1
	vec1 1 ssa_4 = feq ssa_3.x, ssa_0
	vec1 1 ssa_6 = iand ssa_4, ssa_5
	vec1 1 ssa_7 = feq ssa_3.z, ssa_1
	vec1 1 ssa_8 = iand ssa_6, ssa_7
	vec1 32 ssa_9 = load_const (0x00000040 /* 0.000000 */)
	vec3 32 ssa_10 = intrinsic load_uniform (ssa_9) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_11 = bcsel ssa_8, ssa_10.x, ssa_3.x
	vec1 32 ssa_12 = bcsel ssa_8, ssa_10.y, ssa_3.y
	vec1 32 ssa_13 = bcsel ssa_8, ssa_10.z, ssa_3.z
	vec4 32 ssa_14 = intrinsic load_uniform (ssa_1) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_15 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_16 = intrinsic load_uniform (ssa_15) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_17 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_18 = intrinsic load_uniform (ssa_17) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_19 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_20 = intrinsic load_uniform (ssa_19) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec3 32 ssa_21 = intrinsic load_input (ssa_1) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_26 = fmul ssa_16.x, ssa_21.y
	vec1 32 ssa_27 = fmul ssa_16.y, ssa_21.y
	vec1 32 ssa_28 = fmul ssa_16.z, ssa_21.y
	vec1 32 ssa_29 = fmul ssa_16.w, ssa_21.y
	vec1 32 ssa_68 = ffma ssa_14.x, ssa_21.x, ssa_26
	vec1 32 ssa_69 = ffma ssa_14.y, ssa_21.x, ssa_27
	vec1 32 ssa_70 = ffma ssa_14.z, ssa_21.x, ssa_28
	vec1 32 ssa_71 = ffma ssa_14.w, ssa_21.x, ssa_29
	vec1 32 ssa_72 = ffma ssa_18.x, ssa_21.z, ssa_68
	vec1 32 ssa_73 = ffma ssa_18.y, ssa_21.z, ssa_69
	vec1 32 ssa_74 = ffma ssa_18.z, ssa_21.z, ssa_70
	vec1 32 ssa_75 = ffma ssa_18.w, ssa_21.z, ssa_71
	vec1 32 ssa_42 = fadd ssa_72, ssa_20.x
	vec1 32 ssa_43 = fadd ssa_73, ssa_20.y
	vec1 32 ssa_44 = fadd ssa_74, ssa_20.z
	vec1 32 ssa_45 = fadd ssa_75, ssa_20.w
	vec1 32 ssa_49 = fmul ssa_16.x, ssa_2.y
	vec1 32 ssa_50 = fmul ssa_16.y, ssa_2.y
	vec1 32 ssa_51 = fmul ssa_16.z, ssa_2.y
	vec1 32 ssa_76 = ffma ssa_14.x, ssa_2.x, ssa_49
	vec1 32 ssa_77 = ffma ssa_14.y, ssa_2.x, ssa_50
	vec1 32 ssa_78 = ffma ssa_14.z, ssa_2.x, ssa_51
	vec1 32 ssa_79 = ffma ssa_18.x, ssa_2.z, ssa_76
	vec1 32 ssa_80 = ffma ssa_18.y, ssa_2.z, ssa_77
	vec1 32 ssa_81 = ffma ssa_18.z, ssa_2.z, ssa_78
	vec1 32 ssa_61 = fneg ssa_42
	vec1 32 ssa_62 = fneg ssa_43
	vec1 32 ssa_63 = fneg ssa_44
	vec4 32 ssa_64 = vec4 ssa_42, ssa_43, ssa_44, ssa_45
	intrinsic store_output (ssa_64, ssa_1) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec3 32 ssa_65 = vec3 ssa_79, ssa_80, ssa_81
	intrinsic store_output (ssa_65, ssa_1) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec3 32 ssa_66 = vec3 ssa_11, ssa_12, ssa_13
	intrinsic store_output (ssa_66, ssa_1) (33, 7, 0, 160, 161) /* base=33 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec3 32 ssa_67 = vec3 ssa_61, ssa_62, ssa_63
	intrinsic store_output (ssa_67, ssa_1) (35, 7, 0, 160, 163) /* base=35 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	/* succs: block_1 */
	block block_1:
}

nir_lower_bool_to_int32
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 76
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inNormal (VERT_ATTRIB_GENERIC1.xyz, 17, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inColor (VERT_ATTRIB_GENERIC2.xyz, 18, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@2 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outColor@3 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@4 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_out INTERP_MODE_NONE float outViewVec@5 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_2 = intrinsic load_input (ssa_1) (1, 0, 160, 273) /* base=1 */ /* component=0 */ /* type=float32 */ /* location=17 slots=2 */
	vec3 32 ssa_3 = intrinsic load_input (ssa_1) (2, 0, 160, 274) /* base=2 */ /* component=0 */ /* type=float32 */ /* location=18 slots=2 */
	vec1 32 ssa_5 = feq32 ssa_3.y, ssa_1
	vec1 32 ssa_4 = feq32 ssa_3.x, ssa_0
	vec1 32 ssa_6 = iand ssa_4, ssa_5
	vec1 32 ssa_7 = feq32 ssa_3.z, ssa_1
	vec1 32 ssa_8 = iand ssa_6, ssa_7
	vec1 32 ssa_9 = load_const (0x00000040 /* 0.000000 */)
	vec3 32 ssa_10 = intrinsic load_uniform (ssa_9) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_11 = b32csel ssa_8, ssa_10.x, ssa_3.x
	vec1 32 ssa_12 = b32csel ssa_8, ssa_10.y, ssa_3.y
	vec1 32 ssa_13 = b32csel ssa_8, ssa_10.z, ssa_3.z
	vec4 32 ssa_14 = intrinsic load_uniform (ssa_1) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_15 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_16 = intrinsic load_uniform (ssa_15) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_17 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_18 = intrinsic load_uniform (ssa_17) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec1 32 ssa_19 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_20 = intrinsic load_uniform (ssa_19) (0, 76, 0) /* base=0 */ /* range=76 */ /* type=invalid */
	vec3 32 ssa_21 = intrinsic load_input (ssa_1) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_26 = fmul ssa_16.x, ssa_21.y
	vec1 32 ssa_27 = fmul ssa_16.y, ssa_21.y
	vec1 32 ssa_28 = fmul ssa_16.z, ssa_21.y
	vec1 32 ssa_29 = fmul ssa_16.w, ssa_21.y
	vec1 32 ssa_68 = ffma ssa_14.x, ssa_21.x, ssa_26
	vec1 32 ssa_69 = ffma ssa_14.y, ssa_21.x, ssa_27
	vec1 32 ssa_70 = ffma ssa_14.z, ssa_21.x, ssa_28
	vec1 32 ssa_71 = ffma ssa_14.w, ssa_21.x, ssa_29
	vec1 32 ssa_72 = ffma ssa_18.x, ssa_21.z, ssa_68
	vec1 32 ssa_73 = ffma ssa_18.y, ssa_21.z, ssa_69
	vec1 32 ssa_74 = ffma ssa_18.z, ssa_21.z, ssa_70
	vec1 32 ssa_75 = ffma ssa_18.w, ssa_21.z, ssa_71
	vec1 32 ssa_42 = fadd ssa_72, ssa_20.x
	vec1 32 ssa_43 = fadd ssa_73, ssa_20.y
	vec1 32 ssa_44 = fadd ssa_74, ssa_20.z
	vec1 32 ssa_45 = fadd ssa_75, ssa_20.w
	vec1 32 ssa_49 = fmul ssa_16.x, ssa_2.y
	vec1 32 ssa_50 = fmul ssa_16.y, ssa_2.y
	vec1 32 ssa_51 = fmul ssa_16.z, ssa_2.y
	vec1 32 ssa_76 = ffma ssa_14.x, ssa_2.x, ssa_49
	vec1 32 ssa_77 = ffma ssa_14.y, ssa_2.x, ssa_50
	vec1 32 ssa_78 = ffma ssa_14.z, ssa_2.x, ssa_51
	vec1 32 ssa_79 = ffma ssa_18.x, ssa_2.z, ssa_76
	vec1 32 ssa_80 = ffma ssa_18.y, ssa_2.z, ssa_77
	vec1 32 ssa_81 = ffma ssa_18.z, ssa_2.z, ssa_78
	vec1 32 ssa_61 = fneg ssa_42
	vec1 32 ssa_62 = fneg ssa_43
	vec1 32 ssa_63 = fneg ssa_44
	vec4 32 ssa_64 = vec4 ssa_42, ssa_43, ssa_44, ssa_45
	intrinsic store_output (ssa_64, ssa_1) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec3 32 ssa_65 = vec3 ssa_79, ssa_80, ssa_81
	intrinsic store_output (ssa_65, ssa_1) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outNormal */
	vec3 32 ssa_66 = vec3 ssa_11, ssa_12, ssa_13
	intrinsic store_output (ssa_66, ssa_1) (33, 7, 0, 160, 161) /* base=33 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=33 slots=1 */	/* outColor */
	vec3 32 ssa_67 = vec3 ssa_61, ssa_62, ssa_63
	intrinsic store_output (ssa_67, ssa_1) (35, 7, 0, 160, 163) /* base=35 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=35 slots=1 */	/* outViewVec */
	/* succs: block_1 */
	block block_1:
}


Instructions before scheduling (reg_alloc 0)
{  1}    0: cmp.z.f0.0(8) vgrf3:F, g14:F, 0f 
{  2}    1: cmp.z.f0.0(8) vgrf4:F, g13:F, 1f 
{  3}    2: and(8) vgrf5:UD, vgrf4:UD, vgrf3:UD 
{  2}    3: cmp.z.f0.0(8) vgrf6:F, g15:F, 0f 
{  2}    4: and.nz.f0.0(8) null:UD, vgrf5:UD, vgrf6:UD 
{  9}    5: (+f0.0) sel(8) vgrf36+5.0:UD, g4<0>:UD, g13:UD 
{  9}    6: (+f0.0) sel(8) vgrf36+6.0:UD, g4<0>:UD, g14:UD 
{  9}    7: (+f0.0) sel(8) vgrf36+7.0:UD, g4<0>:UD, g15:UD 
{ 10}    8: mul(8) vgrf10:F, g2<0>:F, g6:F 
{ 11}    9: mul(8) vgrf11:F, g2<0>:F, g6:F 
{ 12}   10: mul(8) vgrf12:F, g2<0>:F, g6:F 
{ 13}   11: mul(8) vgrf13:F, g2<0>:F, g6:F 
{ 14}   12: mad(8) vgrf14:F, vgrf10:F, g5:F, g2<0>:F 
{ 14}   13: mad(8) vgrf15:F, vgrf11:F, g5:F, g2<0>:F 
{ 14}   14: mad(8) vgrf16:F, vgrf12:F, g5:F, g2<0>:F 
{ 14}   15: mad(8) vgrf17:F, vgrf13:F, g5:F, g2<0>:F 
{ 14}   16: mad(8) vgrf18:F, vgrf14:F, g7:F, g3<0>:F 
{ 14}   17: mad(8) vgrf19:F, vgrf15:F, g7:F, g3<0>:F 
{ 14}   18: mad(8) vgrf20:F, vgrf16:F, g7:F, g3<0>:F 
{ 14}   19: mad(8) vgrf21:F, vgrf17:F, g7:F, g3<0>:F 
{ 18}   20: add(8) vgrf35+1.0:F, vgrf18:F, g3<0>:F 
{ 17}   21: add(8) vgrf35+2.0:F, vgrf19:F, g3<0>:F 
{ 16}   22: add(8) vgrf35+3.0:F, vgrf20:F, g3<0>:F 
{ 15}   23: add(8) vgrf35+4.0:F, vgrf21:F, g3<0>:F 
{ 15}   24: mul(8) vgrf26:F, g2<0>:F, g10:F 
{ 16}   25: mul(8) vgrf27:F, g2<0>:F, g10:F 
{ 17}   26: mul(8) vgrf28:F, g2<0>:F, g10:F 
{ 18}   27: mad(8) vgrf29:F, vgrf26:F, g9:F, g2<0>:F 
{ 18}   28: mad(8) vgrf30:F, vgrf27:F, g9:F, g2<0>:F 
{ 18}   29: mad(8) vgrf31:F, vgrf28:F, g9:F, g2<0>:F 
{ 17}   30: mad(8) vgrf36+1.0:F, vgrf29:F, g11:F, g3<0>:F 
{ 16}   31: mad(8) vgrf36+2.0:F, vgrf30:F, g11:F, g3<0>:F 
{ 15}   32: mad(8) vgrf36+3.0:F, vgrf31:F, g11:F, g3<0>:F 
{ 14}   33: mov(8) vgrf35+0.0:UD, g1:UD NoMask 
{ 14}   34: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
{ 14}   35: mov(8) vgrf36+0.0:UD, g1:UD NoMask 
{ 14}   36: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf36:F 
{ 10}   37: mov(8) vgrf37+0.0:UD, g1:UD NoMask 
{ 10}   38: mov(8) vgrf37+1.0:F, -vgrf35+1.0:F 
{ 10}   39: mov(8) vgrf37+2.0:F, -vgrf35+2.0:F 
{ 10}   40: mov(8) vgrf37+3.0:F, -vgrf35+3.0:F 
{  5}   41: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf37:F 
Maximum  18 registers live at once.
clock    2, scheduled: cmp.z.f0.0(8) vgrf3:F, g14:F, 0f 
(register pressure 29)
	child 2, 34 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 1, 2 parents: and(8) vgrf5:UD, vgrf4:UD, vgrf3:UD 
	child 0, 1 parents: cmp.z.f0.0(8) vgrf4:F, g13:F, 1f 
		now available
clock    4, scheduled: mul(8) vgrf10:F, g2<0>:F, g6:F 
(register pressure 30)
	child 1, 33 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: mad(8) vgrf14:F, vgrf10:F, g5:F, g2<0>:F 
		now available
clock    6, scheduled: mul(8) vgrf11:F, g2<0>:F, g6:F 
(register pressure 31)
	child 1, 32 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: mad(8) vgrf15:F, vgrf11:F, g5:F, g2<0>:F 
		now available
clock    8, scheduled: mul(8) vgrf12:F, g2<0>:F, g6:F 
(register pressure 32)
	child 1, 31 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: mad(8) vgrf16:F, vgrf12:F, g5:F, g2<0>:F 
		now available
clock   10, scheduled: mul(8) vgrf13:F, g2<0>:F, g6:F 
(register pressure 32)
	child 1, 30 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: mad(8) vgrf17:F, vgrf13:F, g5:F, g2<0>:F 
		now available
clock   12, scheduled: mul(8) vgrf26:F, g2<0>:F, g10:F 
(register pressure 33)
	child 1, 29 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: mad(8) vgrf29:F, vgrf26:F, g9:F, g2<0>:F 
		now available
clock   14, scheduled: mul(8) vgrf27:F, g2<0>:F, g10:F 
(register pressure 34)
	child 1, 28 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: mad(8) vgrf30:F, vgrf27:F, g9:F, g2<0>:F 
		now available
clock   16, scheduled: mul(8) vgrf28:F, g2<0>:F, g10:F 
(register pressure 34)
	child 1, 27 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: mad(8) vgrf31:F, vgrf28:F, g9:F, g2<0>:F 
		now available
clock   18, scheduled: mov(8) vgrf35+0.0:UD, g1:UD NoMask 
(register pressure 39)
	child 0, 26 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
clock   20, scheduled: cmp.z.f0.0(8) vgrf4:F, g13:F, 1f 
(register pressure 40)
	child 2, 25 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 1, 1 parents: cmp.z.f0.0(8) vgrf6:F, g15:F, 0f 
		now available
	child 0, 1 parents: and(8) vgrf5:UD, vgrf4:UD, vgrf3:UD 
		now available
clock   22, scheduled: mad(8) vgrf14:F, vgrf10:F, g5:F, g2<0>:F 
(register pressure 40)
	child 1, 24 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: mad(8) vgrf18:F, vgrf14:F, g7:F, g3<0>:F 
		now available
clock   24, scheduled: mad(8) vgrf15:F, vgrf11:F, g5:F, g2<0>:F 
(register pressure 40)
	child 1, 23 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: mad(8) vgrf19:F, vgrf15:F, g7:F, g3<0>:F 
		now available
clock   26, scheduled: mad(8) vgrf16:F, vgrf12:F, g5:F, g2<0>:F 
(register pressure 40)
	child 1, 22 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: mad(8) vgrf20:F, vgrf16:F, g7:F, g3<0>:F 
		now available
clock   28, scheduled: mad(8) vgrf17:F, vgrf13:F, g5:F, g2<0>:F 
(register pressure 39)
	child 1, 21 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: mad(8) vgrf21:F, vgrf17:F, g7:F, g3<0>:F 
		now available
clock   30, scheduled: mad(8) vgrf29:F, vgrf26:F, g9:F, g2<0>:F 
(register pressure 39)
	child 1, 20 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: mad(8) vgrf36+1.0:F, vgrf29:F, g11:F, g3<0>:F 
		now available
clock   32, scheduled: mad(8) vgrf30:F, vgrf27:F, g9:F, g2<0>:F 
(register pressure 39)
	child 1, 19 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: mad(8) vgrf36+2.0:F, vgrf30:F, g11:F, g3<0>:F 
		now available
clock   34, scheduled: mad(8) vgrf31:F, vgrf28:F, g9:F, g2<0>:F 
(register pressure 37)
	child 1, 18 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: mad(8) vgrf36+3.0:F, vgrf31:F, g11:F, g3<0>:F 
		now available
clock   36, scheduled: cmp.z.f0.0(8) vgrf6:F, g15:F, 0f 
(register pressure 38)
	child 1, 17 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 2 parents: and.nz.f0.0(8) null:UD, vgrf5:UD, vgrf6:UD 
clock   38, scheduled: and(8) vgrf5:UD, vgrf4:UD, vgrf3:UD 
(register pressure 37)
	child 1, 16 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: and.nz.f0.0(8) null:UD, vgrf5:UD, vgrf6:UD 
		now available
clock   40, scheduled: mad(8) vgrf18:F, vgrf14:F, g7:F, g3<0>:F 
(register pressure 37)
	child 1, 15 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: add(8) vgrf35+1.0:F, vgrf18:F, g3<0>:F 
		now available
clock   42, scheduled: mad(8) vgrf19:F, vgrf15:F, g7:F, g3<0>:F 
(register pressure 37)
	child 1, 14 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: add(8) vgrf35+2.0:F, vgrf19:F, g3<0>:F 
		now available
clock   44, scheduled: mad(8) vgrf20:F, vgrf16:F, g7:F, g3<0>:F 
(register pressure 37)
	child 1, 13 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: add(8) vgrf35+3.0:F, vgrf20:F, g3<0>:F 
		now available
clock   46, scheduled: mad(8) vgrf21:F, vgrf17:F, g7:F, g3<0>:F 
(register pressure 36)
	child 1, 12 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 0, 1 parents: add(8) vgrf35+4.0:F, vgrf21:F, g3<0>:F 
		now available
clock   48, scheduled: mad(8) vgrf36+1.0:F, vgrf29:F, g11:F, g3<0>:F 
(register pressure 35)
	child 1, 8 parents: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf36:F 
	child 0, 11 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
clock   50, scheduled: mad(8) vgrf36+2.0:F, vgrf30:F, g11:F, g3<0>:F 
(register pressure 34)
	child 1, 7 parents: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf36:F 
	child 0, 10 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
clock   52, scheduled: mad(8) vgrf36+3.0:F, vgrf31:F, g11:F, g3<0>:F 
(register pressure 32)
	child 1, 6 parents: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf36:F 
	child 0, 9 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
clock   54, scheduled: and.nz.f0.0(8) null:UD, vgrf5:UD, vgrf6:UD 
(register pressure 30)
	child 3, 8 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
	child 2, 1 parents: (+f0.0) sel(8) vgrf36+7.0:UD, g4<0>:UD, g15:UD 
		now available
	child 1, 1 parents: (+f0.0) sel(8) vgrf36+6.0:UD, g4<0>:UD, g14:UD 
		now available
	child 0, 1 parents: (+f0.0) sel(8) vgrf36+5.0:UD, g4<0>:UD, g13:UD 
		now available
clock   56, scheduled: add(8) vgrf35+1.0:F, vgrf18:F, g3<0>:F 
(register pressure 29)
	child 1, 2 parents: mov(8) vgrf37+1.0:F, -vgrf35+1.0:F 
	child 0, 7 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
clock   58, scheduled: add(8) vgrf35+2.0:F, vgrf19:F, g3<0>:F 
(register pressure 28)
	child 1, 2 parents: mov(8) vgrf37+2.0:F, -vgrf35+2.0:F 
	child 0, 6 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
clock   60, scheduled: add(8) vgrf35+3.0:F, vgrf20:F, g3<0>:F 
(register pressure 27)
	child 1, 2 parents: mov(8) vgrf37+3.0:F, -vgrf35+3.0:F 
	child 0, 5 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
clock   62, scheduled: add(8) vgrf35+4.0:F, vgrf21:F, g3<0>:F 
(register pressure 25)
	child 0, 4 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
clock   64, scheduled: (+f0.0) sel(8) vgrf36+5.0:UD, g4<0>:UD, g13:UD 
(register pressure 24)
	child 1, 5 parents: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf36:F 
	child 0, 3 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
clock   66, scheduled: (+f0.0) sel(8) vgrf36+6.0:UD, g4<0>:UD, g14:UD 
(register pressure 23)
	child 1, 4 parents: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf36:F 
	child 0, 2 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
clock   68, scheduled: (+f0.0) sel(8) vgrf36+7.0:UD, g4<0>:UD, g15:UD 
(register pressure 21)
	child 1, 3 parents: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf36:F 
	child 0, 1 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
		now available
clock   70, scheduled: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
(register pressure 21)
	child 1, 2 parents: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf36:F 
	child 0, 1 parents: mov(8) vgrf36+0.0:UD, g1:UD NoMask 
		now available
clock   72, scheduled: mov(8) vgrf36+0.0:UD, g1:UD NoMask 
(register pressure 21)
	child 0, 1 parents: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf36:F 
		now available
clock   75, scheduled: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf36:F 
(register pressure 12)
	child 4, 5 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf37:F 
	child 3, 1 parents: mov(8) vgrf37+3.0:F, -vgrf35+3.0:F 
		now available
	child 2, 1 parents: mov(8) vgrf37+2.0:F, -vgrf35+2.0:F 
		now available
	child 1, 1 parents: mov(8) vgrf37+1.0:F, -vgrf35+1.0:F 
		now available
	child 0, 1 parents: mov(8) vgrf37+0.0:UD, g1:UD NoMask 
		now available
clock   77, scheduled: mov(8) vgrf37+0.0:UD, g1:UD NoMask 
(register pressure 12)
	child 0, 4 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf37:F 
clock   79, scheduled: mov(8) vgrf37+1.0:F, -vgrf35+1.0:F 
(register pressure 12)
	child 0, 3 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf37:F 
clock   81, scheduled: mov(8) vgrf37+2.0:F, -vgrf35+2.0:F 
(register pressure 12)
	child 0, 2 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf37:F 
clock   83, scheduled: mov(8) vgrf37+3.0:F, -vgrf35+3.0:F 
(register pressure 7)
	child 0, 1 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf37:F 
		now available
clock   86, scheduled: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf37:F 
(register pressure 2)

Instructions after scheduling (reg_alloc 0)
{  1}    0: cmp.z.f0.0(8) vgrf3:F, g14:F, 0f 
{  2}    1: mul(8) vgrf10:F, g2<0>:F, g6:F 
{  3}    2: mul(8) vgrf11:F, g2<0>:F, g6:F 
{  2}    3: mul(8) vgrf12:F, g2<0>:F, g6:F 
{  2}    4: mul(8) vgrf13:F, g2<0>:F, g6:F 
{  9}    5: mul(8) vgrf26:F, g2<0>:F, g10:F 
{  9}    6: mul(8) vgrf27:F, g2<0>:F, g10:F 
{  9}    7: mul(8) vgrf28:F, g2<0>:F, g10:F 
{ 10}    8: mov(8) vgrf35+0.0:UD, g1:UD NoMask 
{ 11}    9: cmp.z.f0.0(8) vgrf4:F, g13:F, 1f 
{ 12}   10: mad(8) vgrf14:F, vgrf10:F, g5:F, g2<0>:F 
{ 13}   11: mad(8) vgrf15:F, vgrf11:F, g5:F, g2<0>:F 
{ 14}   12: mad(8) vgrf16:F, vgrf12:F, g5:F, g2<0>:F 
{ 14}   13: mad(8) vgrf17:F, vgrf13:F, g5:F, g2<0>:F 
{ 14}   14: mad(8) vgrf29:F, vgrf26:F, g9:F, g2<0>:F 
{ 14}   15: mad(8) vgrf30:F, vgrf27:F, g9:F, g2<0>:F 
{ 14}   16: mad(8) vgrf31:F, vgrf28:F, g9:F, g2<0>:F 
{ 14}   17: cmp.z.f0.0(8) vgrf6:F, g15:F, 0f 
{ 14}   18: and(8) vgrf5:UD, vgrf4:UD, vgrf3:UD 
{ 14}   19: mad(8) vgrf18:F, vgrf14:F, g7:F, g3<0>:F 
{ 18}   20: mad(8) vgrf19:F, vgrf15:F, g7:F, g3<0>:F 
{ 17}   21: mad(8) vgrf20:F, vgrf16:F, g7:F, g3<0>:F 
{ 16}   22: mad(8) vgrf21:F, vgrf17:F, g7:F, g3<0>:F 
{ 15}   23: mad(8) vgrf36+1.0:F, vgrf29:F, g11:F, g3<0>:F 
{ 15}   24: mad(8) vgrf36+2.0:F, vgrf30:F, g11:F, g3<0>:F 
{ 16}   25: mad(8) vgrf36+3.0:F, vgrf31:F, g11:F, g3<0>:F 
{ 17}   26: and.nz.f0.0(8) null:UD, vgrf5:UD, vgrf6:UD 
{ 18}   27: add(8) vgrf35+1.0:F, vgrf18:F, g3<0>:F 
{ 18}   28: add(8) vgrf35+2.0:F, vgrf19:F, g3<0>:F 
{ 18}   29: add(8) vgrf35+3.0:F, vgrf20:F, g3<0>:F 
{ 17}   30: add(8) vgrf35+4.0:F, vgrf21:F, g3<0>:F 
{ 16}   31: (+f0.0) sel(8) vgrf36+5.0:UD, g4<0>:UD, g13:UD 
{ 15}   32: (+f0.0) sel(8) vgrf36+6.0:UD, g4<0>:UD, g14:UD 
{ 14}   33: (+f0.0) sel(8) vgrf36+7.0:UD, g4<0>:UD, g15:UD 
{ 14}   34: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf35:F 
{ 14}   35: mov(8) vgrf36+0.0:UD, g1:UD NoMask 
{ 14}   36: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf36:F 
{ 10}   37: mov(8) vgrf37+0.0:UD, g1:UD NoMask 
{ 10}   38: mov(8) vgrf37+1.0:F, -vgrf35+1.0:F 
{ 10}   39: mov(8) vgrf37+2.0:F, -vgrf35+2.0:F 
{ 10}   40: mov(8) vgrf37+3.0:F, -vgrf35+3.0:F 
{  5}   41: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf37:F 
Maximum  18 registers live at once.
clock    2, scheduled: cmp.z.f0.0(8) vgrf8:F, g14:F, 0f 
	child 2, 34 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 1, 2 parents: and(8) vgrf12:UD, vgrf10:UD, vgrf8:UD 
	child 0, 4 parents: cmp.z.f0.0(8) vgrf10:F, g13:F, 1f 
clock    4, scheduled: mul(8) vgrf34:F, g2<0>:F, g6:F 
	child 1, 33 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: mad(8) vgrf38:F, vgrf34:F, g5:F, g2<0>:F 
		now available
clock    6, scheduled: mul(8) vgrf35+0.0:F, g2<0>:F, g6:F 
	child 1, 32 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: mad(8) vgrf39:F, vgrf35+0.0:F, g5:F, g2<0>:F 
		now available
clock    8, scheduled: mul(8) vgrf36+0.0:F, g2<0>:F, g6:F 
	child 1, 31 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: mad(8) vgrf40:F, vgrf36+0.0:F, g5:F, g2<0>:F 
		now available
clock   10, scheduled: mul(8) vgrf37+0.0:F, g2<0>:F, g6:F 
	child 1, 30 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: mad(8) vgrf41:F, vgrf37+0.0:F, g5:F, g2<0>:F 
		now available
clock   12, scheduled: mul(8) vgrf50:F, g2<0>:F, g10:F 
	child 2, 3 parents: cmp.z.f0.0(8) vgrf10:F, g13:F, 1f 
	child 1, 29 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: mad(8) vgrf53:F, vgrf50:F, g9:F, g2<0>:F 
		now available
clock   14, scheduled: mul(8) vgrf51:F, g2<0>:F, g10:F 
	child 2, 2 parents: cmp.z.f0.0(8) vgrf10:F, g13:F, 1f 
	child 1, 28 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: mad(8) vgrf54:F, vgrf51:F, g9:F, g2<0>:F 
		now available
clock   16, scheduled: mul(8) vgrf52:F, g2<0>:F, g10:F 
	child 2, 1 parents: cmp.z.f0.0(8) vgrf10:F, g13:F, 1f 
		now available
	child 1, 27 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: mad(8) vgrf55:F, vgrf52:F, g9:F, g2<0>:F 
		now available
clock   18, scheduled: mov(8) vgrf16:UD, g1:UD NoMask 
	child 0, 26 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
clock   20, scheduled: cmp.z.f0.0(8) vgrf10:F, g13:F, 1f 
	child 2, 25 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 1, 1 parents: and(8) vgrf12:UD, vgrf10:UD, vgrf8:UD 
		now available
	child 0, 1 parents: cmp.z.f0.0(8) vgrf30:F, g15:F, 0f 
		now available
clock   22, scheduled: mad(8) vgrf38:F, vgrf34:F, g5:F, g2<0>:F 
	child 1, 24 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: mad(8) vgrf42:F, vgrf38:F, g7:F, g3<0>:F 
		now available
clock   24, scheduled: cmp.z.f0.0(8) vgrf30:F, g15:F, 0f 
	child 1, 23 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 2 parents: and.nz.f0.0(8) null:UD, vgrf12:UD, vgrf30:UD 
clock   26, scheduled: mad(8) vgrf39:F, vgrf35+0.0:F, g5:F, g2<0>:F 
	child 1, 22 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: mad(8) vgrf43:F, vgrf39:F, g7:F, g3<0>:F 
		now available
clock   28, scheduled: mad(8) vgrf40:F, vgrf36+0.0:F, g5:F, g2<0>:F 
	child 1, 21 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: mad(8) vgrf44:F, vgrf40:F, g7:F, g3<0>:F 
		now available
clock   30, scheduled: mad(8) vgrf41:F, vgrf37+0.0:F, g5:F, g2<0>:F 
	child 1, 20 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: mad(8) vgrf45:F, vgrf41:F, g7:F, g3<0>:F 
		now available
clock   32, scheduled: mad(8) vgrf53:F, vgrf50:F, g9:F, g2<0>:F 
	child 1, 19 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: mad(8) vgrf22:F, vgrf53:F, g11:F, g3<0>:F 
		now available
clock   34, scheduled: mad(8) vgrf54:F, vgrf51:F, g9:F, g2<0>:F 
	child 1, 18 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: mad(8) vgrf23:F, vgrf54:F, g11:F, g3<0>:F 
		now available
clock   36, scheduled: mad(8) vgrf55:F, vgrf52:F, g9:F, g2<0>:F 
	child 1, 17 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: mad(8) vgrf24:F, vgrf55:F, g11:F, g3<0>:F 
		now available
clock   38, scheduled: and(8) vgrf12:UD, vgrf10:UD, vgrf8:UD 
	child 1, 16 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: and.nz.f0.0(8) null:UD, vgrf12:UD, vgrf30:UD 
		now available
clock   43, scheduled: mad(8) vgrf42:F, vgrf38:F, g7:F, g3<0>:F 
	child 1, 15 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: add(8) vgrf17:F, vgrf42:F, g3<0>:F 
		now available
clock   47, scheduled: mad(8) vgrf43:F, vgrf39:F, g7:F, g3<0>:F 
	child 1, 14 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: add(8) vgrf18:F, vgrf43:F, g3<0>:F 
		now available
clock   50, scheduled: mad(8) vgrf44:F, vgrf40:F, g7:F, g3<0>:F 
	child 1, 13 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: add(8) vgrf19:F, vgrf44:F, g3<0>:F 
		now available
clock   53, scheduled: mad(8) vgrf45:F, vgrf41:F, g7:F, g3<0>:F 
	child 1, 12 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 0, 1 parents: add(8) vgrf20:F, vgrf45:F, g3<0>:F 
		now available
clock   56, scheduled: mad(8) vgrf22:F, vgrf53:F, g11:F, g3<0>:F 
	child 1, 8 parents: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf21+0.0:F 
	child 0, 11 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
clock   58, scheduled: and.nz.f0.0(8) null:UD, vgrf12:UD, vgrf30:UD 
	child 3, 10 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 2, 1 parents: (+f0.0) sel(8) vgrf28:UD, g4<0>:UD, g15:UD 
		now available
	child 1, 1 parents: (+f0.0) sel(8) vgrf27:UD, g4<0>:UD, g14:UD 
		now available
	child 0, 1 parents: (+f0.0) sel(8) vgrf26:UD, g4<0>:UD, g13:UD 
		now available
clock   61, scheduled: mad(8) vgrf23:F, vgrf54:F, g11:F, g3<0>:F 
	child 1, 7 parents: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf21+0.0:F 
	child 0, 9 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
clock   64, scheduled: mad(8) vgrf24:F, vgrf55:F, g11:F, g3<0>:F 
	child 1, 6 parents: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf21+0.0:F 
	child 0, 8 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
clock   66, scheduled: add(8) vgrf17:F, vgrf42:F, g3<0>:F 
	child 1, 2 parents: mov(8) vgrf123+0.0:F, -vgrf17:F 
	child 0, 7 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
clock   68, scheduled: add(8) vgrf18:F, vgrf43:F, g3<0>:F 
	child 1, 2 parents: mov(8) vgrf124+0.0:F, -vgrf18:F 
	child 0, 6 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
clock   70, scheduled: add(8) vgrf19:F, vgrf44:F, g3<0>:F 
	child 1, 2 parents: mov(8) vgrf125+0.0:F, -vgrf19:F 
	child 0, 5 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
clock   73, scheduled: add(8) vgrf20:F, vgrf45:F, g3<0>:F 
	child 0, 4 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
clock   75, scheduled: (+f0.0) sel(8) vgrf26:UD, g4<0>:UD, g13:UD 
	child 1, 5 parents: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf21+0.0:F 
	child 0, 3 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
clock   77, scheduled: (+f0.0) sel(8) vgrf27:UD, g4<0>:UD, g14:UD 
	child 1, 4 parents: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf21+0.0:F 
	child 0, 2 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
clock   79, scheduled: (+f0.0) sel(8) vgrf28:UD, g4<0>:UD, g15:UD 
	child 1, 3 parents: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf21+0.0:F 
	child 0, 1 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
		now available
clock   89, scheduled: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf16+0.0:F 
	child 1, 2 parents: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf21+0.0:F 
	child 0, 1 parents: mov(8) vgrf21:UD, g1:UD NoMask 
		now available
clock   91, scheduled: mov(8) vgrf21:UD, g1:UD NoMask 
	child 0, 1 parents: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf21+0.0:F 
		now available
clock  107, scheduled: gen8_urb_write_simd8(8) (mlen: 9) (null):UD, vgrf21+0.0:F 
	child 4, 5 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf122+0.0:F 
	child 3, 1 parents: mov(8) vgrf125+0.0:F, -vgrf19:F 
		now available
	child 2, 1 parents: mov(8) vgrf124+0.0:F, -vgrf18:F 
		now available
	child 1, 1 parents: mov(8) vgrf123+0.0:F, -vgrf17:F 
		now available
	child 0, 1 parents: mov(8) vgrf122+0.0:UD, g1:UD NoMask 
		now available
clock  109, scheduled: mov(8) vgrf122+0.0:UD, g1:UD NoMask 
	child 0, 4 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf122+0.0:F 
clock  111, scheduled: mov(8) vgrf123+0.0:F, -vgrf17:F 
	child 0, 3 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf122+0.0:F 
clock  113, scheduled: mov(8) vgrf124+0.0:F, -vgrf18:F 
	child 0, 2 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf122+0.0:F 
clock  115, scheduled: mov(8) vgrf125+0.0:F, -vgrf19:F 
	child 0, 1 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf122+0.0:F 
		now available
clock  131, scheduled: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf122+0.0:F 
nir_copy_prop
nir_opt_dce
nir_lower_locals_to_regs
nir_convert_from_ssa
nir_opt_dce
nir_opt_rematerialize_compares
brw_nir_apply_sampler_key
nir_lower_subgroups
brw_nir_demote_sample_qualifiers
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = deref_var &inNormal@6 (shader_in vec3) 
	vec1 32 ssa_99 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_100 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_101 = intrinsic load_interpolated_input (ssa_100, ssa_126) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_82 = mov ssa_101.x
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = deref_var &inNormal@6 (shader_in vec3) 
	vec1 32 ssa_102 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_103 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_127 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_104 = intrinsic load_interpolated_input (ssa_103, ssa_127) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_84 = mov ssa_104.y
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = deref_var &inNormal@6 (shader_in vec3) 
	vec1 32 ssa_105 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_106 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_128 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_107 = intrinsic load_interpolated_input (ssa_106, ssa_128) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_86 = mov ssa_107.z
	vec1 32 ssa_10 = fmul ssa_82, ssa_82
	vec1 32 ssa_11 = fmul ssa_84, ssa_84
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_86, ssa_86
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_82, ssa_15
	vec1 32 ssa_17 = fmul ssa_84, ssa_15
	vec1 32 ssa_18 = fmul ssa_86, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_87 = deref_var &inViewVec@8 (shader_in vec3) 
	vec1 32 ssa_108 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_109 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_129 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_110 = intrinsic load_interpolated_input (ssa_109, ssa_129) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_88 = mov ssa_110.x
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_89 = deref_var &inViewVec@8 (shader_in vec3) 
	vec1 32 ssa_111 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_112 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_130 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_113 = intrinsic load_interpolated_input (ssa_112, ssa_130) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_90 = mov ssa_113.y
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_91 = deref_var &inViewVec@8 (shader_in vec3) 
	vec1 32 ssa_114 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_115 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_131 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_116 = intrinsic load_interpolated_input (ssa_115, ssa_131) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_92 = mov ssa_116.z
	vec1 32 ssa_25 = fmul ssa_88, ssa_88
	vec1 32 ssa_26 = fmul ssa_90, ssa_90
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_92, ssa_92
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_88, ssa_30
	vec1 32 ssa_32 = fmul ssa_90, ssa_30
	vec1 32 ssa_33 = fmul ssa_92, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_93 = deref_var &inColor@7 (shader_in vec3) 
	vec1 32 ssa_117 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_118 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_132 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_119 = intrinsic load_interpolated_input (ssa_118, ssa_132) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_94 = mov ssa_119.x
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_95 = deref_var &inColor@7 (shader_in vec3) 
	vec1 32 ssa_120 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_121 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_133 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_122 = intrinsic load_interpolated_input (ssa_121, ssa_133) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_96 = mov ssa_122.y
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_97 = deref_var &inColor@7 (shader_in vec3) 
	vec1 32 ssa_123 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_124 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_134 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_125 = intrinsic load_interpolated_input (ssa_124, ssa_134) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_98 = mov ssa_125.z
	vec1 32 ssa_65 = fmul ssa_94, ssa_58
	vec1 32 ssa_66 = fmul ssa_96, ssa_58
	vec1 32 ssa_67 = fmul ssa_98, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	vec1 32 ssa_135 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_80, ssa_135) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

brw_nir_move_interpolation_to_top
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = deref_var &inNormal@6 (shader_in vec3) 
	vec1 32 ssa_99 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_100 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_101 = intrinsic load_interpolated_input (ssa_100, ssa_126) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_82 = mov ssa_101.x
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = deref_var &inNormal@6 (shader_in vec3) 
	vec1 32 ssa_102 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_103 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_127 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_104 = intrinsic load_interpolated_input (ssa_103, ssa_127) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_84 = mov ssa_104.y
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = deref_var &inNormal@6 (shader_in vec3) 
	vec1 32 ssa_105 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_106 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_128 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_107 = intrinsic load_interpolated_input (ssa_106, ssa_128) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_86 = mov ssa_107.z
	vec1 32 ssa_10 = fmul ssa_82, ssa_82
	vec1 32 ssa_11 = fmul ssa_84, ssa_84
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_86, ssa_86
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_82, ssa_15
	vec1 32 ssa_17 = fmul ssa_84, ssa_15
	vec1 32 ssa_18 = fmul ssa_86, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_87 = deref_var &inViewVec@8 (shader_in vec3) 
	vec1 32 ssa_108 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_109 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_129 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_110 = intrinsic load_interpolated_input (ssa_109, ssa_129) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_88 = mov ssa_110.x
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_89 = deref_var &inViewVec@8 (shader_in vec3) 
	vec1 32 ssa_111 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_112 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_130 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_113 = intrinsic load_interpolated_input (ssa_112, ssa_130) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_90 = mov ssa_113.y
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_91 = deref_var &inViewVec@8 (shader_in vec3) 
	vec1 32 ssa_114 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_115 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_131 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_116 = intrinsic load_interpolated_input (ssa_115, ssa_131) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_92 = mov ssa_116.z
	vec1 32 ssa_25 = fmul ssa_88, ssa_88
	vec1 32 ssa_26 = fmul ssa_90, ssa_90
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_92, ssa_92
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_88, ssa_30
	vec1 32 ssa_32 = fmul ssa_90, ssa_30
	vec1 32 ssa_33 = fmul ssa_92, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_93 = deref_var &inColor@7 (shader_in vec3) 
	vec1 32 ssa_117 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_118 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_132 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_119 = intrinsic load_interpolated_input (ssa_118, ssa_132) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_94 = mov ssa_119.x
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_95 = deref_var &inColor@7 (shader_in vec3) 
	vec1 32 ssa_120 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_121 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_133 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_122 = intrinsic load_interpolated_input (ssa_121, ssa_133) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_96 = mov ssa_122.y
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_97 = deref_var &inColor@7 (shader_in vec3) 
	vec1 32 ssa_123 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_124 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_134 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_125 = intrinsic load_interpolated_input (ssa_124, ssa_134) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_98 = mov ssa_125.z
	vec1 32 ssa_65 = fmul ssa_94, ssa_58
	vec1 32 ssa_66 = fmul ssa_96, ssa_58
	vec1 32 ssa_67 = fmul ssa_98, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	vec1 32 ssa_135 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_80, ssa_135) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

brw_nir_lower_scoped_barriers
nir_opt_combine_memory_barriers
nir_opt_algebraic_before_ffma
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = deref_var &inNormal (shader_in float) 
	vec1 32 ssa_81 = deref_var &inNormal@6 (shader_in vec3) 
	vec1 32 ssa_99 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_100 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_101 = intrinsic load_interpolated_input (ssa_100, ssa_126) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_82 = mov ssa_101.x
	vec1 32 ssa_6 = deref_var &inNormal@0 (shader_in float) 
	vec1 32 ssa_83 = deref_var &inNormal@6 (shader_in vec3) 
	vec1 32 ssa_102 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_103 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_127 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_104 = intrinsic load_interpolated_input (ssa_103, ssa_127) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_84 = mov ssa_104.y
	vec1 32 ssa_8 = deref_var &inNormal@1 (shader_in float) 
	vec1 32 ssa_85 = deref_var &inNormal@6 (shader_in vec3) 
	vec1 32 ssa_105 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_106 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_128 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_107 = intrinsic load_interpolated_input (ssa_106, ssa_128) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_86 = mov ssa_107.z
	vec1 32 ssa_10 = fmul ssa_101.x, ssa_101.x
	vec1 32 ssa_11 = fmul ssa_104.y, ssa_104.y
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_107.z, ssa_107.z
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_101.x, ssa_15
	vec1 32 ssa_17 = fmul ssa_104.y, ssa_15
	vec1 32 ssa_18 = fmul ssa_107.z, ssa_15
	vec1 32 ssa_19 = deref_var &inViewVec (shader_in float) 
	vec1 32 ssa_87 = deref_var &inViewVec@8 (shader_in vec3) 
	vec1 32 ssa_108 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_109 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_129 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_110 = intrinsic load_interpolated_input (ssa_109, ssa_129) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_88 = mov ssa_110.x
	vec1 32 ssa_21 = deref_var &inViewVec@2 (shader_in float) 
	vec1 32 ssa_89 = deref_var &inViewVec@8 (shader_in vec3) 
	vec1 32 ssa_111 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_112 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_130 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_113 = intrinsic load_interpolated_input (ssa_112, ssa_130) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_90 = mov ssa_113.y
	vec1 32 ssa_23 = deref_var &inViewVec@3 (shader_in float) 
	vec1 32 ssa_91 = deref_var &inViewVec@8 (shader_in vec3) 
	vec1 32 ssa_114 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_115 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_131 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_116 = intrinsic load_interpolated_input (ssa_115, ssa_131) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_92 = mov ssa_116.z
	vec1 32 ssa_25 = fmul ssa_110.x, ssa_110.x
	vec1 32 ssa_26 = fmul ssa_113.y, ssa_113.y
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_116.z, ssa_116.z
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_110.x, ssa_30
	vec1 32 ssa_32 = fmul ssa_113.y, ssa_30
	vec1 32 ssa_33 = fmul ssa_116.z, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec1 32 ssa_59 = deref_var &inColor (shader_in float) 
	vec1 32 ssa_93 = deref_var &inColor@7 (shader_in vec3) 
	vec1 32 ssa_117 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_118 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_132 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_119 = intrinsic load_interpolated_input (ssa_118, ssa_132) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_94 = mov ssa_119.x
	vec1 32 ssa_61 = deref_var &inColor@4 (shader_in float) 
	vec1 32 ssa_95 = deref_var &inColor@7 (shader_in vec3) 
	vec1 32 ssa_120 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_121 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_133 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_122 = intrinsic load_interpolated_input (ssa_121, ssa_133) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_96 = mov ssa_122.y
	vec1 32 ssa_63 = deref_var &inColor@5 (shader_in float) 
	vec1 32 ssa_97 = deref_var &inColor@7 (shader_in vec3) 
	vec1 32 ssa_123 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_124 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_134 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_125 = intrinsic load_interpolated_input (ssa_124, ssa_134) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_98 = mov ssa_125.z
	vec1 32 ssa_65 = fmul ssa_119.x, ssa_58
	vec1 32 ssa_66 = fmul ssa_122.y, ssa_58
	vec1 32 ssa_67 = fmul ssa_125.z, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec1 32 ssa_79 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	vec1 32 ssa_135 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_80, ssa_135) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_100 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_126 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_101 = intrinsic load_interpolated_input (ssa_100, ssa_126) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec2 32 ssa_103 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_127 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_104 = intrinsic load_interpolated_input (ssa_103, ssa_127) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec2 32 ssa_106 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_128 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_107 = intrinsic load_interpolated_input (ssa_106, ssa_128) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_10 = fmul ssa_101.x, ssa_101.x
	vec1 32 ssa_11 = fmul ssa_104.y, ssa_104.y
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_107.z, ssa_107.z
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_101.x, ssa_15
	vec1 32 ssa_17 = fmul ssa_104.y, ssa_15
	vec1 32 ssa_18 = fmul ssa_107.z, ssa_15
	vec2 32 ssa_109 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_129 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_110 = intrinsic load_interpolated_input (ssa_109, ssa_129) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec2 32 ssa_112 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_130 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_113 = intrinsic load_interpolated_input (ssa_112, ssa_130) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec2 32 ssa_115 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_131 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_116 = intrinsic load_interpolated_input (ssa_115, ssa_131) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_25 = fmul ssa_110.x, ssa_110.x
	vec1 32 ssa_26 = fmul ssa_113.y, ssa_113.y
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_116.z, ssa_116.z
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_110.x, ssa_30
	vec1 32 ssa_32 = fmul ssa_113.y, ssa_30
	vec1 32 ssa_33 = fmul ssa_116.z, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec2 32 ssa_118 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_132 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_119 = intrinsic load_interpolated_input (ssa_118, ssa_132) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec2 32 ssa_121 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_133 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_122 = intrinsic load_interpolated_input (ssa_121, ssa_133) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec2 32 ssa_124 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_134 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_125 = intrinsic load_interpolated_input (ssa_124, ssa_134) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_65 = fmul ssa_119.x, ssa_58
	vec1 32 ssa_66 = fmul ssa_122.y, ssa_58
	vec1 32 ssa_67 = fmul ssa_125.z, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	vec1 32 ssa_135 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_80, ssa_135) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_100 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec3 32 ssa_101 = intrinsic load_interpolated_input (ssa_100, ssa_3) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_10 = fmul ssa_101.x, ssa_101.x
	vec1 32 ssa_11 = fmul ssa_101.y, ssa_101.y
	vec1 32 ssa_12 = fadd ssa_10, ssa_11
	vec1 32 ssa_13 = fmul ssa_101.z, ssa_101.z
	vec1 32 ssa_14 = fadd ssa_12, ssa_13
	vec1 32 ssa_15 = frsq ssa_14
	vec1 32 ssa_16 = fmul ssa_101.x, ssa_15
	vec1 32 ssa_17 = fmul ssa_101.y, ssa_15
	vec1 32 ssa_18 = fmul ssa_101.z, ssa_15
	vec3 32 ssa_110 = intrinsic load_interpolated_input (ssa_100, ssa_3) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_25 = fmul ssa_110.x, ssa_110.x
	vec1 32 ssa_26 = fmul ssa_110.y, ssa_110.y
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_110.z, ssa_110.z
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = frsq ssa_29
	vec1 32 ssa_31 = fmul ssa_110.x, ssa_30
	vec1 32 ssa_32 = fmul ssa_110.y, ssa_30
	vec1 32 ssa_33 = fmul ssa_110.z, ssa_30
	vec1 32 ssa_34 = fneg ssa_31
	vec1 32 ssa_35 = fneg ssa_32
	vec1 32 ssa_36 = fneg ssa_33
	vec1 32 ssa_37 = fmul ssa_31, ssa_16
	vec1 32 ssa_38 = fneg ssa_37
	vec1 32 ssa_39 = fmul ssa_32, ssa_17
	vec1 32 ssa_40 = fneg ssa_39
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fmul ssa_33, ssa_18
	vec1 32 ssa_43 = fneg ssa_42
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fmul ssa_46, ssa_16
	vec1 32 ssa_48 = fmul ssa_46, ssa_17
	vec1 32 ssa_49 = fmul ssa_46, ssa_18
	vec1 32 ssa_50 = fneg ssa_47
	vec1 32 ssa_51 = fadd ssa_34, ssa_50
	vec1 32 ssa_52 = fneg ssa_48
	vec1 32 ssa_53 = fadd ssa_35, ssa_52
	vec1 32 ssa_54 = fneg ssa_49
	vec1 32 ssa_55 = fadd ssa_36, ssa_54
	vec1 32 ssa_56 = fadd ssa_37, ssa_39
	vec1 32 ssa_57 = fadd ssa_56, ssa_42
	vec1 32 ssa_58 = fmax ssa_57, ssa_3
	vec3 32 ssa_119 = intrinsic load_interpolated_input (ssa_100, ssa_3) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_65 = fmul ssa_119.x, ssa_58
	vec1 32 ssa_66 = fmul ssa_119.y, ssa_58
	vec1 32 ssa_67 = fmul ssa_119.z, ssa_58
	vec1 32 ssa_68 = fmul ssa_51, ssa_31
	vec1 32 ssa_69 = fmul ssa_53, ssa_32
	vec1 32 ssa_70 = fadd ssa_68, ssa_69
	vec1 32 ssa_71 = fmul ssa_55, ssa_33
	vec1 32 ssa_72 = fadd ssa_70, ssa_71
	vec1 32 ssa_73 = fmax ssa_72, ssa_3
	vec1 32 ssa_74 = fpow ssa_73, ssa_2
	vec1 32 ssa_75 = fmul ssa_1, ssa_74
	vec1 32 ssa_76 = fadd ssa_65, ssa_75
	vec1 32 ssa_77 = fadd ssa_66, ssa_75
	vec1 32 ssa_78 = fadd ssa_67, ssa_75
	vec4 32 ssa_80 = vec4 ssa_76, ssa_77, ssa_78, ssa_0
	intrinsic store_output (ssa_80, ssa_3) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_opt_load_store_vectorize
brw_nir_lower_mem_access_bit_sizes
nir_lower_int64
brw_nir_opt_peephole_ffma
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_4 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec3 32 ssa_5 = intrinsic load_interpolated_input (ssa_4, ssa_3) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_6 = fmul ssa_5.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_66 = ffma ssa_5.x, ssa_5.x, ssa_7
	vec1 32 ssa_9 = fmul ssa_5.z, ssa_5.z
	vec1 32 ssa_67 = ffma ssa_5.z, ssa_5.z, ssa_66
	vec1 32 ssa_11 = frsq ssa_67
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec3 32 ssa_15 = intrinsic load_interpolated_input (ssa_4, ssa_3) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_16 = fmul ssa_15.x, ssa_15.x
	vec1 32 ssa_17 = fmul ssa_15.y, ssa_15.y
	vec1 32 ssa_68 = ffma ssa_15.x, ssa_15.x, ssa_17
	vec1 32 ssa_19 = fmul ssa_15.z, ssa_15.z
	vec1 32 ssa_69 = ffma ssa_15.z, ssa_15.z, ssa_68
	vec1 32 ssa_21 = frsq ssa_69
	vec1 32 ssa_22 = fmul ssa_15.x, ssa_21
	vec1 32 ssa_23 = fmul ssa_15.y, ssa_21
	vec1 32 ssa_24 = fmul ssa_15.z, ssa_21
	vec1 32 ssa_25 = fneg ssa_22
	vec1 32 ssa_26 = fneg ssa_23
	vec1 32 ssa_27 = fneg ssa_24
	vec1 32 ssa_28 = fmul ssa_22, ssa_12
	vec1 32 ssa_29 = fneg ssa_28
	vec1 32 ssa_30 = fmul ssa_23, ssa_13
	vec1 32 ssa_31 = fneg ssa_30
	vec1 32 ssa_70 = fneg ssa_22
	vec1 32 ssa_71 = ffma ssa_70, ssa_12, ssa_31
	vec1 32 ssa_33 = fmul ssa_24, ssa_14
	vec1 32 ssa_34 = fneg ssa_33
	vec1 32 ssa_72 = fneg ssa_24
	vec1 32 ssa_73 = ffma ssa_72, ssa_14, ssa_71
	vec1 32 ssa_36 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_37 = fmul ssa_73, ssa_36
	vec1 32 ssa_38 = fmul ssa_37, ssa_12
	vec1 32 ssa_39 = fmul ssa_37, ssa_13
	vec1 32 ssa_40 = fmul ssa_37, ssa_14
	vec1 32 ssa_41 = fneg ssa_38
	vec1 32 ssa_74 = fneg ssa_37
	vec1 32 ssa_75 = ffma ssa_74, ssa_12, ssa_25
	vec1 32 ssa_43 = fneg ssa_39
	vec1 32 ssa_76 = fneg ssa_37
	vec1 32 ssa_77 = ffma ssa_76, ssa_13, ssa_26
	vec1 32 ssa_45 = fneg ssa_40
	vec1 32 ssa_78 = fneg ssa_37
	vec1 32 ssa_79 = ffma ssa_78, ssa_14, ssa_27
	vec1 32 ssa_80 = ffma ssa_22, ssa_12, ssa_30
	vec1 32 ssa_81 = ffma ssa_24, ssa_14, ssa_80
	vec1 32 ssa_49 = fmax ssa_81, ssa_3
	vec3 32 ssa_50 = intrinsic load_interpolated_input (ssa_4, ssa_3) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_51 = fmul ssa_50.x, ssa_49
	vec1 32 ssa_52 = fmul ssa_50.y, ssa_49
	vec1 32 ssa_53 = fmul ssa_50.z, ssa_49
	vec1 32 ssa_54 = fmul ssa_75, ssa_22
	vec1 32 ssa_55 = fmul ssa_77, ssa_23
	vec1 32 ssa_82 = ffma ssa_75, ssa_22, ssa_55
	vec1 32 ssa_57 = fmul ssa_79, ssa_24
	vec1 32 ssa_83 = ffma ssa_79, ssa_24, ssa_82
	vec1 32 ssa_59 = fmax ssa_83, ssa_3
	vec1 32 ssa_60 = fpow ssa_59, ssa_2
	vec1 32 ssa_61 = fmul ssa_1, ssa_60
	vec1 32 ssa_84 = ffma ssa_50.x, ssa_49, ssa_61
	vec1 32 ssa_85 = ffma ssa_50.y, ssa_49, ssa_61
	vec1 32 ssa_86 = ffma ssa_50.z, ssa_49, ssa_61
	vec4 32 ssa_65 = vec4 ssa_84, ssa_85, ssa_86, ssa_0
	intrinsic store_output (ssa_65, ssa_3) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_comparison_pre
nir_opt_algebraic_late
brw_nir_lower_conversions
nir_lower_alu_to_scalar
nir_opt_algebraic_distribute_src_mods
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_4 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec3 32 ssa_5 = intrinsic load_interpolated_input (ssa_4, ssa_3) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_6 = fmul ssa_5.x, ssa_5.x
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_66 = ffma ssa_5.x, ssa_5.x, ssa_7
	vec1 32 ssa_9 = fmul ssa_5.z, ssa_5.z
	vec1 32 ssa_67 = ffma ssa_5.z, ssa_5.z, ssa_66
	vec1 32 ssa_11 = frsq ssa_67
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec3 32 ssa_15 = intrinsic load_interpolated_input (ssa_4, ssa_3) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_16 = fmul ssa_15.x, ssa_15.x
	vec1 32 ssa_17 = fmul ssa_15.y, ssa_15.y
	vec1 32 ssa_68 = ffma ssa_15.x, ssa_15.x, ssa_17
	vec1 32 ssa_19 = fmul ssa_15.z, ssa_15.z
	vec1 32 ssa_69 = ffma ssa_15.z, ssa_15.z, ssa_68
	vec1 32 ssa_21 = frsq ssa_69
	vec1 32 ssa_22 = fmul ssa_15.x, ssa_21
	vec1 32 ssa_23 = fmul ssa_15.y, ssa_21
	vec1 32 ssa_24 = fmul ssa_15.z, ssa_21
	vec1 32 ssa_25 = fneg ssa_22
	vec1 32 ssa_26 = fneg ssa_23
	vec1 32 ssa_27 = fneg ssa_24
	vec1 32 ssa_28 = fmul ssa_22, ssa_12
	vec1 32 ssa_95 = fneg ssa_22
	vec1 32 ssa_96 = fmul ssa_95, ssa_12
	vec1 32 ssa_30 = fmul ssa_23, ssa_13
	vec1 32 ssa_31 = fneg ssa_30
	vec1 32 ssa_70 = fneg ssa_22
	vec1 32 ssa_71 = ffma ssa_70, ssa_12, ssa_31
	vec1 32 ssa_33 = fmul ssa_24, ssa_14
	vec1 32 ssa_93 = fneg ssa_24
	vec1 32 ssa_94 = fmul ssa_93, ssa_14
	vec1 32 ssa_72 = fneg ssa_24
	vec1 32 ssa_73 = ffma ssa_72, ssa_14, ssa_71
	vec1 32 ssa_36 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_37 = fmul ssa_73, ssa_36
	vec1 32 ssa_38 = fmul ssa_37, ssa_12
	vec1 32 ssa_91 = fneg ssa_37
	vec1 32 ssa_92 = fmul ssa_91, ssa_12
	vec1 32 ssa_39 = fmul ssa_37, ssa_13
	vec1 32 ssa_89 = fneg ssa_37
	vec1 32 ssa_90 = fmul ssa_89, ssa_13
	vec1 32 ssa_40 = fmul ssa_37, ssa_14
	vec1 32 ssa_87 = fneg ssa_37
	vec1 32 ssa_88 = fmul ssa_87, ssa_14
	vec1 32 ssa_74 = fneg ssa_37
	vec1 32 ssa_75 = ffma ssa_74, ssa_12, ssa_25
	vec1 32 ssa_76 = fneg ssa_37
	vec1 32 ssa_77 = ffma ssa_76, ssa_13, ssa_26
	vec1 32 ssa_78 = fneg ssa_37
	vec1 32 ssa_79 = ffma ssa_78, ssa_14, ssa_27
	vec1 32 ssa_80 = ffma ssa_22, ssa_12, ssa_30
	vec1 32 ssa_81 = ffma ssa_24, ssa_14, ssa_80
	vec1 32 ssa_49 = fmax ssa_81, ssa_3
	vec3 32 ssa_50 = intrinsic load_interpolated_input (ssa_4, ssa_3) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_51 = fmul ssa_50.x, ssa_49
	vec1 32 ssa_52 = fmul ssa_50.y, ssa_49
	vec1 32 ssa_53 = fmul ssa_50.z, ssa_49
	vec1 32 ssa_54 = fmul ssa_75, ssa_22
	vec1 32 ssa_55 = fmul ssa_77, ssa_23
	vec1 32 ssa_82 = ffma ssa_75, ssa_22, ssa_55
	vec1 32 ssa_57 = fmul ssa_79, ssa_24
	vec1 32 ssa_83 = ffma ssa_79, ssa_24, ssa_82
	vec1 32 ssa_59 = fmax ssa_83, ssa_3
	vec1 32 ssa_60 = fpow ssa_59, ssa_2
	vec1 32 ssa_61 = fmul ssa_1, ssa_60
	vec1 32 ssa_84 = ffma ssa_50.x, ssa_49, ssa_61
	vec1 32 ssa_85 = ffma ssa_50.y, ssa_49, ssa_61
	vec1 32 ssa_86 = ffma ssa_50.z, ssa_49, ssa_61
	vec4 32 ssa_65 = vec4 ssa_84, ssa_85, ssa_86, ssa_0
	intrinsic store_output (ssa_65, ssa_3) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_4 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec3 32 ssa_5 = intrinsic load_interpolated_input (ssa_4, ssa_3) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_66 = ffma ssa_5.x, ssa_5.x, ssa_7
	vec1 32 ssa_67 = ffma ssa_5.z, ssa_5.z, ssa_66
	vec1 32 ssa_11 = frsq ssa_67
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec3 32 ssa_15 = intrinsic load_interpolated_input (ssa_4, ssa_3) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_17 = fmul ssa_15.y, ssa_15.y
	vec1 32 ssa_68 = ffma ssa_15.x, ssa_15.x, ssa_17
	vec1 32 ssa_69 = ffma ssa_15.z, ssa_15.z, ssa_68
	vec1 32 ssa_21 = frsq ssa_69
	vec1 32 ssa_22 = fmul ssa_15.x, ssa_21
	vec1 32 ssa_23 = fmul ssa_15.y, ssa_21
	vec1 32 ssa_24 = fmul ssa_15.z, ssa_21
	vec1 32 ssa_25 = fneg ssa_22
	vec1 32 ssa_26 = fneg ssa_23
	vec1 32 ssa_27 = fneg ssa_24
	vec1 32 ssa_30 = fmul ssa_23, ssa_13
	vec1 32 ssa_31 = fneg ssa_30
	vec1 32 ssa_70 = fneg ssa_22
	vec1 32 ssa_71 = ffma ssa_70, ssa_12, ssa_31
	vec1 32 ssa_72 = fneg ssa_24
	vec1 32 ssa_73 = ffma ssa_72, ssa_14, ssa_71
	vec1 32 ssa_36 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_37 = fmul ssa_73, ssa_36
	vec1 32 ssa_74 = fneg ssa_37
	vec1 32 ssa_75 = ffma ssa_74, ssa_12, ssa_25
	vec1 32 ssa_76 = fneg ssa_37
	vec1 32 ssa_77 = ffma ssa_76, ssa_13, ssa_26
	vec1 32 ssa_78 = fneg ssa_37
	vec1 32 ssa_79 = ffma ssa_78, ssa_14, ssa_27
	vec1 32 ssa_80 = ffma ssa_22, ssa_12, ssa_30
	vec1 32 ssa_81 = ffma ssa_24, ssa_14, ssa_80
	vec1 32 ssa_49 = fmax ssa_81, ssa_3
	vec3 32 ssa_50 = intrinsic load_interpolated_input (ssa_4, ssa_3) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_55 = fmul ssa_77, ssa_23
	vec1 32 ssa_82 = ffma ssa_75, ssa_22, ssa_55
	vec1 32 ssa_83 = ffma ssa_79, ssa_24, ssa_82
	vec1 32 ssa_59 = fmax ssa_83, ssa_3
	vec1 32 ssa_60 = fpow ssa_59, ssa_2
	vec1 32 ssa_61 = fmul ssa_1, ssa_60
	vec1 32 ssa_84 = ffma ssa_50.x, ssa_49, ssa_61
	vec1 32 ssa_85 = ffma ssa_50.y, ssa_49, ssa_61
	vec1 32 ssa_86 = ffma ssa_50.z, ssa_49, ssa_61
	vec4 32 ssa_65 = vec4 ssa_84, ssa_85, ssa_86, ssa_0
	intrinsic store_output (ssa_65, ssa_3) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_4 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec3 32 ssa_5 = intrinsic load_interpolated_input (ssa_4, ssa_3) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_66 = ffma ssa_5.x, ssa_5.x, ssa_7
	vec1 32 ssa_67 = ffma ssa_5.z, ssa_5.z, ssa_66
	vec1 32 ssa_11 = frsq ssa_67
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec3 32 ssa_15 = intrinsic load_interpolated_input (ssa_4, ssa_3) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_17 = fmul ssa_15.y, ssa_15.y
	vec1 32 ssa_68 = ffma ssa_15.x, ssa_15.x, ssa_17
	vec1 32 ssa_69 = ffma ssa_15.z, ssa_15.z, ssa_68
	vec1 32 ssa_21 = frsq ssa_69
	vec1 32 ssa_22 = fmul ssa_15.x, ssa_21
	vec1 32 ssa_23 = fmul ssa_15.y, ssa_21
	vec1 32 ssa_24 = fmul ssa_15.z, ssa_21
	vec1 32 ssa_25 = fneg ssa_22
	vec1 32 ssa_26 = fneg ssa_23
	vec1 32 ssa_27 = fneg ssa_24
	vec1 32 ssa_30 = fmul ssa_23, ssa_13
	vec1 32 ssa_31 = fneg ssa_30
	vec1 32 ssa_71 = ffma ssa_25, ssa_12, ssa_31
	vec1 32 ssa_73 = ffma ssa_27, ssa_14, ssa_71
	vec1 32 ssa_36 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_37 = fmul ssa_73, ssa_36
	vec1 32 ssa_74 = fneg ssa_37
	vec1 32 ssa_75 = ffma ssa_74, ssa_12, ssa_25
	vec1 32 ssa_77 = ffma ssa_74, ssa_13, ssa_26
	vec1 32 ssa_79 = ffma ssa_74, ssa_14, ssa_27
	vec1 32 ssa_80 = ffma ssa_22, ssa_12, ssa_30
	vec1 32 ssa_81 = ffma ssa_24, ssa_14, ssa_80
	vec1 32 ssa_49 = fmax ssa_81, ssa_3
	vec3 32 ssa_50 = intrinsic load_interpolated_input (ssa_4, ssa_3) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_55 = fmul ssa_77, ssa_23
	vec1 32 ssa_82 = ffma ssa_75, ssa_22, ssa_55
	vec1 32 ssa_83 = ffma ssa_79, ssa_24, ssa_82
	vec1 32 ssa_59 = fmax ssa_83, ssa_3
	vec1 32 ssa_60 = fpow ssa_59, ssa_2
	vec1 32 ssa_61 = fmul ssa_1, ssa_60
	vec1 32 ssa_84 = ffma ssa_50.x, ssa_49, ssa_61
	vec1 32 ssa_85 = ffma ssa_50.y, ssa_49, ssa_61
	vec1 32 ssa_86 = ffma ssa_50.z, ssa_49, ssa_61
	vec4 32 ssa_65 = vec4 ssa_84, ssa_85, ssa_86, ssa_0
	intrinsic store_output (ssa_65, ssa_3) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_algebraic_distribute_src_mods
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_4 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec3 32 ssa_5 = intrinsic load_interpolated_input (ssa_4, ssa_3) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_66 = ffma ssa_5.x, ssa_5.x, ssa_7
	vec1 32 ssa_67 = ffma ssa_5.z, ssa_5.z, ssa_66
	vec1 32 ssa_11 = frsq ssa_67
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec3 32 ssa_15 = intrinsic load_interpolated_input (ssa_4, ssa_3) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_17 = fmul ssa_15.y, ssa_15.y
	vec1 32 ssa_68 = ffma ssa_15.x, ssa_15.x, ssa_17
	vec1 32 ssa_69 = ffma ssa_15.z, ssa_15.z, ssa_68
	vec1 32 ssa_21 = frsq ssa_69
	vec1 32 ssa_22 = fmul ssa_15.x, ssa_21
	vec1 32 ssa_23 = fmul ssa_15.y, ssa_21
	vec1 32 ssa_24 = fmul ssa_15.z, ssa_21
	vec1 32 ssa_25 = fneg ssa_22
	vec1 32 ssa_26 = fneg ssa_23
	vec1 32 ssa_27 = fneg ssa_24
	vec1 32 ssa_30 = fmul ssa_23, ssa_13
	vec1 32 ssa_31 = fneg ssa_30
	vec1 32 ssa_71 = ffma ssa_25, ssa_12, ssa_31
	vec1 32 ssa_73 = ffma ssa_27, ssa_14, ssa_71
	vec1 32 ssa_36 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_37 = fmul ssa_73, ssa_36
	vec1 32 ssa_97 = fneg ssa_73
	vec1 32 ssa_98 = fmul ssa_97, ssa_36
	vec1 32 ssa_75 = ffma ssa_98, ssa_12, ssa_25
	vec1 32 ssa_77 = ffma ssa_98, ssa_13, ssa_26
	vec1 32 ssa_79 = ffma ssa_98, ssa_14, ssa_27
	vec1 32 ssa_80 = ffma ssa_22, ssa_12, ssa_30
	vec1 32 ssa_81 = ffma ssa_24, ssa_14, ssa_80
	vec1 32 ssa_49 = fmax ssa_81, ssa_3
	vec3 32 ssa_50 = intrinsic load_interpolated_input (ssa_4, ssa_3) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_55 = fmul ssa_77, ssa_23
	vec1 32 ssa_82 = ffma ssa_75, ssa_22, ssa_55
	vec1 32 ssa_83 = ffma ssa_79, ssa_24, ssa_82
	vec1 32 ssa_59 = fmax ssa_83, ssa_3
	vec1 32 ssa_60 = fpow ssa_59, ssa_2
	vec1 32 ssa_61 = fmul ssa_1, ssa_60
	vec1 32 ssa_84 = ffma ssa_50.x, ssa_49, ssa_61
	vec1 32 ssa_85 = ffma ssa_50.y, ssa_49, ssa_61
	vec1 32 ssa_86 = ffma ssa_50.z, ssa_49, ssa_61
	vec4 32 ssa_65 = vec4 ssa_84, ssa_85, ssa_86, ssa_0
	intrinsic store_output (ssa_65, ssa_3) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_4 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec3 32 ssa_5 = intrinsic load_interpolated_input (ssa_4, ssa_3) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_66 = ffma ssa_5.x, ssa_5.x, ssa_7
	vec1 32 ssa_67 = ffma ssa_5.z, ssa_5.z, ssa_66
	vec1 32 ssa_11 = frsq ssa_67
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec3 32 ssa_15 = intrinsic load_interpolated_input (ssa_4, ssa_3) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_17 = fmul ssa_15.y, ssa_15.y
	vec1 32 ssa_68 = ffma ssa_15.x, ssa_15.x, ssa_17
	vec1 32 ssa_69 = ffma ssa_15.z, ssa_15.z, ssa_68
	vec1 32 ssa_21 = frsq ssa_69
	vec1 32 ssa_22 = fmul ssa_15.x, ssa_21
	vec1 32 ssa_23 = fmul ssa_15.y, ssa_21
	vec1 32 ssa_24 = fmul ssa_15.z, ssa_21
	vec1 32 ssa_25 = fneg ssa_22
	vec1 32 ssa_26 = fneg ssa_23
	vec1 32 ssa_27 = fneg ssa_24
	vec1 32 ssa_30 = fmul ssa_23, ssa_13
	vec1 32 ssa_31 = fneg ssa_30
	vec1 32 ssa_71 = ffma ssa_25, ssa_12, ssa_31
	vec1 32 ssa_73 = ffma ssa_27, ssa_14, ssa_71
	vec1 32 ssa_36 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_97 = fneg ssa_73
	vec1 32 ssa_98 = fmul ssa_97, ssa_36
	vec1 32 ssa_75 = ffma ssa_98, ssa_12, ssa_25
	vec1 32 ssa_77 = ffma ssa_98, ssa_13, ssa_26
	vec1 32 ssa_79 = ffma ssa_98, ssa_14, ssa_27
	vec1 32 ssa_80 = ffma ssa_22, ssa_12, ssa_30
	vec1 32 ssa_81 = ffma ssa_24, ssa_14, ssa_80
	vec1 32 ssa_49 = fmax ssa_81, ssa_3
	vec3 32 ssa_50 = intrinsic load_interpolated_input (ssa_4, ssa_3) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_55 = fmul ssa_77, ssa_23
	vec1 32 ssa_82 = ffma ssa_75, ssa_22, ssa_55
	vec1 32 ssa_83 = ffma ssa_79, ssa_24, ssa_82
	vec1 32 ssa_59 = fmax ssa_83, ssa_3
	vec1 32 ssa_60 = fpow ssa_59, ssa_2
	vec1 32 ssa_61 = fmul ssa_1, ssa_60
	vec1 32 ssa_84 = ffma ssa_50.x, ssa_49, ssa_61
	vec1 32 ssa_85 = ffma ssa_50.y, ssa_49, ssa_61
	vec1 32 ssa_86 = ffma ssa_50.z, ssa_49, ssa_61
	vec4 32 ssa_65 = vec4 ssa_84, ssa_85, ssa_86, ssa_0
	intrinsic store_output (ssa_65, ssa_3) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
nir_opt_algebraic_distribute_src_mods
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_4 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec3 32 ssa_5 = intrinsic load_interpolated_input (ssa_4, ssa_3) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_66 = ffma ssa_5.x, ssa_5.x, ssa_7
	vec1 32 ssa_67 = ffma ssa_5.z, ssa_5.z, ssa_66
	vec1 32 ssa_11 = frsq ssa_67
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec3 32 ssa_15 = intrinsic load_interpolated_input (ssa_4, ssa_3) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_17 = fmul ssa_15.y, ssa_15.y
	vec1 32 ssa_68 = ffma ssa_15.x, ssa_15.x, ssa_17
	vec1 32 ssa_69 = ffma ssa_15.z, ssa_15.z, ssa_68
	vec1 32 ssa_21 = frsq ssa_69
	vec1 32 ssa_22 = fmul ssa_15.x, ssa_21
	vec1 32 ssa_23 = fmul ssa_15.y, ssa_21
	vec1 32 ssa_24 = fmul ssa_15.z, ssa_21
	vec1 32 ssa_25 = fneg ssa_22
	vec1 32 ssa_26 = fneg ssa_23
	vec1 32 ssa_27 = fneg ssa_24
	vec1 32 ssa_30 = fmul ssa_23, ssa_13
	vec1 32 ssa_31 = fneg ssa_30
	vec1 32 ssa_71 = ffma ssa_25, ssa_12, ssa_31
	vec1 32 ssa_73 = ffma ssa_27, ssa_14, ssa_71
	vec1 32 ssa_99 = fneg ssa_27
	vec1 32 ssa_100 = fneg ssa_71
	vec1 32 ssa_101 = ffma ssa_99, ssa_14, ssa_100
	vec1 32 ssa_36 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_98 = fmul ssa_101, ssa_36
	vec1 32 ssa_75 = ffma ssa_98, ssa_12, ssa_25
	vec1 32 ssa_77 = ffma ssa_98, ssa_13, ssa_26
	vec1 32 ssa_79 = ffma ssa_98, ssa_14, ssa_27
	vec1 32 ssa_80 = ffma ssa_22, ssa_12, ssa_30
	vec1 32 ssa_81 = ffma ssa_24, ssa_14, ssa_80
	vec1 32 ssa_49 = fmax ssa_81, ssa_3
	vec3 32 ssa_50 = intrinsic load_interpolated_input (ssa_4, ssa_3) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_55 = fmul ssa_77, ssa_23
	vec1 32 ssa_82 = ffma ssa_75, ssa_22, ssa_55
	vec1 32 ssa_83 = ffma ssa_79, ssa_24, ssa_82
	vec1 32 ssa_59 = fmax ssa_83, ssa_3
	vec1 32 ssa_60 = fpow ssa_59, ssa_2
	vec1 32 ssa_61 = fmul ssa_1, ssa_60
	vec1 32 ssa_84 = ffma ssa_50.x, ssa_49, ssa_61
	vec1 32 ssa_85 = ffma ssa_50.y, ssa_49, ssa_61
	vec1 32 ssa_86 = ffma ssa_50.z, ssa_49, ssa_61
	vec4 32 ssa_65 = vec4 ssa_84, ssa_85, ssa_86, ssa_0
	intrinsic store_output (ssa_65, ssa_3) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_4 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec3 32 ssa_5 = intrinsic load_interpolated_input (ssa_4, ssa_3) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_66 = ffma ssa_5.x, ssa_5.x, ssa_7
	vec1 32 ssa_67 = ffma ssa_5.z, ssa_5.z, ssa_66
	vec1 32 ssa_11 = frsq ssa_67
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec3 32 ssa_15 = intrinsic load_interpolated_input (ssa_4, ssa_3) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_17 = fmul ssa_15.y, ssa_15.y
	vec1 32 ssa_68 = ffma ssa_15.x, ssa_15.x, ssa_17
	vec1 32 ssa_69 = ffma ssa_15.z, ssa_15.z, ssa_68
	vec1 32 ssa_21 = frsq ssa_69
	vec1 32 ssa_22 = fmul ssa_15.x, ssa_21
	vec1 32 ssa_23 = fmul ssa_15.y, ssa_21
	vec1 32 ssa_24 = fmul ssa_15.z, ssa_21
	vec1 32 ssa_25 = fneg ssa_22
	vec1 32 ssa_26 = fneg ssa_23
	vec1 32 ssa_27 = fneg ssa_24
	vec1 32 ssa_30 = fmul ssa_23, ssa_13
	vec1 32 ssa_31 = fneg ssa_30
	vec1 32 ssa_71 = ffma ssa_25, ssa_12, ssa_31
	vec1 32 ssa_99 = fneg ssa_27
	vec1 32 ssa_100 = fneg ssa_71
	vec1 32 ssa_101 = ffma ssa_99, ssa_14, ssa_100
	vec1 32 ssa_36 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_98 = fmul ssa_101, ssa_36
	vec1 32 ssa_75 = ffma ssa_98, ssa_12, ssa_25
	vec1 32 ssa_77 = ffma ssa_98, ssa_13, ssa_26
	vec1 32 ssa_79 = ffma ssa_98, ssa_14, ssa_27
	vec1 32 ssa_80 = ffma ssa_22, ssa_12, ssa_30
	vec1 32 ssa_81 = ffma ssa_24, ssa_14, ssa_80
	vec1 32 ssa_49 = fmax ssa_81, ssa_3
	vec3 32 ssa_50 = intrinsic load_interpolated_input (ssa_4, ssa_3) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_55 = fmul ssa_77, ssa_23
	vec1 32 ssa_82 = ffma ssa_75, ssa_22, ssa_55
	vec1 32 ssa_83 = ffma ssa_79, ssa_24, ssa_82
	vec1 32 ssa_59 = fmax ssa_83, ssa_3
	vec1 32 ssa_60 = fpow ssa_59, ssa_2
	vec1 32 ssa_61 = fmul ssa_1, ssa_60
	vec1 32 ssa_84 = ffma ssa_50.x, ssa_49, ssa_61
	vec1 32 ssa_85 = ffma ssa_50.y, ssa_49, ssa_61
	vec1 32 ssa_86 = ffma ssa_50.z, ssa_49, ssa_61
	vec4 32 ssa_65 = vec4 ssa_84, ssa_85, ssa_86, ssa_0
	intrinsic store_output (ssa_65, ssa_3) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
nir_opt_algebraic_distribute_src_mods
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_4 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec3 32 ssa_5 = intrinsic load_interpolated_input (ssa_4, ssa_3) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_66 = ffma ssa_5.x, ssa_5.x, ssa_7
	vec1 32 ssa_67 = ffma ssa_5.z, ssa_5.z, ssa_66
	vec1 32 ssa_11 = frsq ssa_67
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec3 32 ssa_15 = intrinsic load_interpolated_input (ssa_4, ssa_3) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_17 = fmul ssa_15.y, ssa_15.y
	vec1 32 ssa_68 = ffma ssa_15.x, ssa_15.x, ssa_17
	vec1 32 ssa_69 = ffma ssa_15.z, ssa_15.z, ssa_68
	vec1 32 ssa_21 = frsq ssa_69
	vec1 32 ssa_22 = fmul ssa_15.x, ssa_21
	vec1 32 ssa_23 = fmul ssa_15.y, ssa_21
	vec1 32 ssa_24 = fmul ssa_15.z, ssa_21
	vec1 32 ssa_25 = fneg ssa_22
	vec1 32 ssa_26 = fneg ssa_23
	vec1 32 ssa_27 = fneg ssa_24
	vec1 32 ssa_30 = fmul ssa_23, ssa_13
	vec1 32 ssa_31 = fneg ssa_30
	vec1 32 ssa_71 = ffma ssa_25, ssa_12, ssa_31
	vec1 32 ssa_102 = fneg ssa_25
	vec1 32 ssa_103 = fneg ssa_31
	vec1 32 ssa_104 = ffma ssa_102, ssa_12, ssa_103
	vec1 32 ssa_101 = ffma ssa_24, ssa_14, ssa_104
	vec1 32 ssa_36 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_98 = fmul ssa_101, ssa_36
	vec1 32 ssa_75 = ffma ssa_98, ssa_12, ssa_25
	vec1 32 ssa_77 = ffma ssa_98, ssa_13, ssa_26
	vec1 32 ssa_79 = ffma ssa_98, ssa_14, ssa_27
	vec1 32 ssa_80 = ffma ssa_22, ssa_12, ssa_30
	vec1 32 ssa_81 = ffma ssa_24, ssa_14, ssa_80
	vec1 32 ssa_49 = fmax ssa_81, ssa_3
	vec3 32 ssa_50 = intrinsic load_interpolated_input (ssa_4, ssa_3) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_55 = fmul ssa_77, ssa_23
	vec1 32 ssa_82 = ffma ssa_75, ssa_22, ssa_55
	vec1 32 ssa_83 = ffma ssa_79, ssa_24, ssa_82
	vec1 32 ssa_59 = fmax ssa_83, ssa_3
	vec1 32 ssa_60 = fpow ssa_59, ssa_2
	vec1 32 ssa_61 = fmul ssa_1, ssa_60
	vec1 32 ssa_84 = ffma ssa_50.x, ssa_49, ssa_61
	vec1 32 ssa_85 = ffma ssa_50.y, ssa_49, ssa_61
	vec1 32 ssa_86 = ffma ssa_50.z, ssa_49, ssa_61
	vec4 32 ssa_65 = vec4 ssa_84, ssa_85, ssa_86, ssa_0
	intrinsic store_output (ssa_65, ssa_3) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_4 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec3 32 ssa_5 = intrinsic load_interpolated_input (ssa_4, ssa_3) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_66 = ffma ssa_5.x, ssa_5.x, ssa_7
	vec1 32 ssa_67 = ffma ssa_5.z, ssa_5.z, ssa_66
	vec1 32 ssa_11 = frsq ssa_67
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec3 32 ssa_15 = intrinsic load_interpolated_input (ssa_4, ssa_3) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_17 = fmul ssa_15.y, ssa_15.y
	vec1 32 ssa_68 = ffma ssa_15.x, ssa_15.x, ssa_17
	vec1 32 ssa_69 = ffma ssa_15.z, ssa_15.z, ssa_68
	vec1 32 ssa_21 = frsq ssa_69
	vec1 32 ssa_22 = fmul ssa_15.x, ssa_21
	vec1 32 ssa_23 = fmul ssa_15.y, ssa_21
	vec1 32 ssa_24 = fmul ssa_15.z, ssa_21
	vec1 32 ssa_25 = fneg ssa_22
	vec1 32 ssa_26 = fneg ssa_23
	vec1 32 ssa_27 = fneg ssa_24
	vec1 32 ssa_30 = fmul ssa_23, ssa_13
	vec1 32 ssa_31 = fneg ssa_30
	vec1 32 ssa_102 = fneg ssa_25
	vec1 32 ssa_103 = fneg ssa_31
	vec1 32 ssa_104 = ffma ssa_102, ssa_12, ssa_103
	vec1 32 ssa_101 = ffma ssa_24, ssa_14, ssa_104
	vec1 32 ssa_36 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_98 = fmul ssa_101, ssa_36
	vec1 32 ssa_75 = ffma ssa_98, ssa_12, ssa_25
	vec1 32 ssa_77 = ffma ssa_98, ssa_13, ssa_26
	vec1 32 ssa_79 = ffma ssa_98, ssa_14, ssa_27
	vec1 32 ssa_80 = ffma ssa_22, ssa_12, ssa_30
	vec1 32 ssa_81 = ffma ssa_24, ssa_14, ssa_80
	vec1 32 ssa_49 = fmax ssa_81, ssa_3
	vec3 32 ssa_50 = intrinsic load_interpolated_input (ssa_4, ssa_3) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_55 = fmul ssa_77, ssa_23
	vec1 32 ssa_82 = ffma ssa_75, ssa_22, ssa_55
	vec1 32 ssa_83 = ffma ssa_79, ssa_24, ssa_82
	vec1 32 ssa_59 = fmax ssa_83, ssa_3
	vec1 32 ssa_60 = fpow ssa_59, ssa_2
	vec1 32 ssa_61 = fmul ssa_1, ssa_60
	vec1 32 ssa_84 = ffma ssa_50.x, ssa_49, ssa_61
	vec1 32 ssa_85 = ffma ssa_50.y, ssa_49, ssa_61
	vec1 32 ssa_86 = ffma ssa_50.z, ssa_49, ssa_61
	vec4 32 ssa_65 = vec4 ssa_84, ssa_85, ssa_86, ssa_0
	intrinsic store_output (ssa_65, ssa_3) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
nir_opt_algebraic_distribute_src_mods
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_4 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec3 32 ssa_5 = intrinsic load_interpolated_input (ssa_4, ssa_3) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_66 = ffma ssa_5.x, ssa_5.x, ssa_7
	vec1 32 ssa_67 = ffma ssa_5.z, ssa_5.z, ssa_66
	vec1 32 ssa_11 = frsq ssa_67
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec3 32 ssa_15 = intrinsic load_interpolated_input (ssa_4, ssa_3) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_17 = fmul ssa_15.y, ssa_15.y
	vec1 32 ssa_68 = ffma ssa_15.x, ssa_15.x, ssa_17
	vec1 32 ssa_69 = ffma ssa_15.z, ssa_15.z, ssa_68
	vec1 32 ssa_21 = frsq ssa_69
	vec1 32 ssa_22 = fmul ssa_15.x, ssa_21
	vec1 32 ssa_23 = fmul ssa_15.y, ssa_21
	vec1 32 ssa_24 = fmul ssa_15.z, ssa_21
	vec1 32 ssa_25 = fneg ssa_22
	vec1 32 ssa_26 = fneg ssa_23
	vec1 32 ssa_27 = fneg ssa_24
	vec1 32 ssa_30 = fmul ssa_23, ssa_13
	vec1 32 ssa_31 = fneg ssa_30
	vec1 32 ssa_104 = ffma ssa_22, ssa_12, ssa_30
	vec1 32 ssa_101 = ffma ssa_24, ssa_14, ssa_104
	vec1 32 ssa_36 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_98 = fmul ssa_101, ssa_36
	vec1 32 ssa_75 = ffma ssa_98, ssa_12, ssa_25
	vec1 32 ssa_77 = ffma ssa_98, ssa_13, ssa_26
	vec1 32 ssa_79 = ffma ssa_98, ssa_14, ssa_27
	vec1 32 ssa_80 = ffma ssa_22, ssa_12, ssa_30
	vec1 32 ssa_81 = ffma ssa_24, ssa_14, ssa_80
	vec1 32 ssa_49 = fmax ssa_81, ssa_3
	vec3 32 ssa_50 = intrinsic load_interpolated_input (ssa_4, ssa_3) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_55 = fmul ssa_77, ssa_23
	vec1 32 ssa_82 = ffma ssa_75, ssa_22, ssa_55
	vec1 32 ssa_83 = ffma ssa_79, ssa_24, ssa_82
	vec1 32 ssa_59 = fmax ssa_83, ssa_3
	vec1 32 ssa_60 = fpow ssa_59, ssa_2
	vec1 32 ssa_61 = fmul ssa_1, ssa_60
	vec1 32 ssa_84 = ffma ssa_50.x, ssa_49, ssa_61
	vec1 32 ssa_85 = ffma ssa_50.y, ssa_49, ssa_61
	vec1 32 ssa_86 = ffma ssa_50.z, ssa_49, ssa_61
	vec4 32 ssa_65 = vec4 ssa_84, ssa_85, ssa_86, ssa_0
	intrinsic store_output (ssa_65, ssa_3) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_4 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec3 32 ssa_5 = intrinsic load_interpolated_input (ssa_4, ssa_3) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_66 = ffma ssa_5.x, ssa_5.x, ssa_7
	vec1 32 ssa_67 = ffma ssa_5.z, ssa_5.z, ssa_66
	vec1 32 ssa_11 = frsq ssa_67
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec3 32 ssa_15 = intrinsic load_interpolated_input (ssa_4, ssa_3) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_17 = fmul ssa_15.y, ssa_15.y
	vec1 32 ssa_68 = ffma ssa_15.x, ssa_15.x, ssa_17
	vec1 32 ssa_69 = ffma ssa_15.z, ssa_15.z, ssa_68
	vec1 32 ssa_21 = frsq ssa_69
	vec1 32 ssa_22 = fmul ssa_15.x, ssa_21
	vec1 32 ssa_23 = fmul ssa_15.y, ssa_21
	vec1 32 ssa_24 = fmul ssa_15.z, ssa_21
	vec1 32 ssa_25 = fneg ssa_22
	vec1 32 ssa_26 = fneg ssa_23
	vec1 32 ssa_27 = fneg ssa_24
	vec1 32 ssa_30 = fmul ssa_23, ssa_13
	vec1 32 ssa_104 = ffma ssa_22, ssa_12, ssa_30
	vec1 32 ssa_101 = ffma ssa_24, ssa_14, ssa_104
	vec1 32 ssa_36 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_98 = fmul ssa_101, ssa_36
	vec1 32 ssa_75 = ffma ssa_98, ssa_12, ssa_25
	vec1 32 ssa_77 = ffma ssa_98, ssa_13, ssa_26
	vec1 32 ssa_79 = ffma ssa_98, ssa_14, ssa_27
	vec1 32 ssa_80 = ffma ssa_22, ssa_12, ssa_30
	vec1 32 ssa_81 = ffma ssa_24, ssa_14, ssa_80
	vec1 32 ssa_49 = fmax ssa_81, ssa_3
	vec3 32 ssa_50 = intrinsic load_interpolated_input (ssa_4, ssa_3) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_55 = fmul ssa_77, ssa_23
	vec1 32 ssa_82 = ffma ssa_75, ssa_22, ssa_55
	vec1 32 ssa_83 = ffma ssa_79, ssa_24, ssa_82
	vec1 32 ssa_59 = fmax ssa_83, ssa_3
	vec1 32 ssa_60 = fpow ssa_59, ssa_2
	vec1 32 ssa_61 = fmul ssa_1, ssa_60
	vec1 32 ssa_84 = ffma ssa_50.x, ssa_49, ssa_61
	vec1 32 ssa_85 = ffma ssa_50.y, ssa_49, ssa_61
	vec1 32 ssa_86 = ffma ssa_50.z, ssa_49, ssa_61
	vec4 32 ssa_65 = vec4 ssa_84, ssa_85, ssa_86, ssa_0
	intrinsic store_output (ssa_65, ssa_3) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inNormal@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec (VARYING_SLOT_VAR3.x, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@2 (VARYING_SLOT_VAR3.y, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inViewVec@3 (VARYING_SLOT_VAR3.z, 35, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor (VARYING_SLOT_VAR1.x, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@4 (VARYING_SLOT_VAR1.y, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inColor@5 (VARYING_SLOT_VAR1.z, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inNormal@6 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inColor@7 (VARYING_SLOT_VAR1.xyz, 33, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inViewVec@8 (VARYING_SLOT_VAR3.xyz, 35, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f400000 /* 0.750000 */)
	vec1 32 ssa_2 = load_const (0x41000000 /* 8.000000 */)
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_4 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec3 32 ssa_5 = intrinsic load_interpolated_input (ssa_4, ssa_3) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inNormal */
	vec1 32 ssa_7 = fmul ssa_5.y, ssa_5.y
	vec1 32 ssa_66 = ffma ssa_5.x, ssa_5.x, ssa_7
	vec1 32 ssa_67 = ffma ssa_5.z, ssa_5.z, ssa_66
	vec1 32 ssa_11 = frsq ssa_67
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_11
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_11
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_11
	vec3 32 ssa_15 = intrinsic load_interpolated_input (ssa_4, ssa_3) (35, 0, 291) /* base=35 */ /* component=0 */ /* location=35 slots=2 */	/* inViewVec */
	vec1 32 ssa_17 = fmul ssa_15.y, ssa_15.y
	vec1 32 ssa_68 = ffma ssa_15.x, ssa_15.x, ssa_17
	vec1 32 ssa_69 = ffma ssa_15.z, ssa_15.z, ssa_68
	vec1 32 ssa_21 = frsq ssa_69
	vec1 32 ssa_22 = fmul ssa_15.x, ssa_21
	vec1 32 ssa_23 = fmul ssa_15.y, ssa_21
	vec1 32 ssa_24 = fmul ssa_15.z, ssa_21
	vec1 32 ssa_25 = fneg ssa_22
	vec1 32 ssa_26 = fneg ssa_23
	vec1 32 ssa_27 = fneg ssa_24
	vec1 32 ssa_30 = fmul ssa_23, ssa_13
	vec1 32 ssa_104 = ffma ssa_22, ssa_12, ssa_30
	vec1 32 ssa_101 = ffma ssa_24, ssa_14, ssa_104
	vec1 32 ssa_36 = load_const (0x40000000 /* 2.000000 */)
	vec1 32 ssa_98 = fmul ssa_101, ssa_36
	vec1 32 ssa_75 = ffma ssa_98, ssa_12, ssa_25
	vec1 32 ssa_77 = ffma ssa_98, ssa_13, ssa_26
	vec1 32 ssa_79 = ffma ssa_98, ssa_14, ssa_27
	vec1 32 ssa_49 = fmax ssa_101, ssa_3
	vec3 32 ssa_50 = intrinsic load_interpolated_input (ssa_4, ssa_3) (33, 0, 289) /* base=33 */ /* component=0 */ /* location=33 slots=2 */	/* inColor */
	vec1 32 ssa_55 = fmul ssa_77, ssa_23
	vec1 32 ssa_82 = ffma ssa_75, ssa_22, ssa_55
	vec1 32 ssa_83 = ffma ssa_79, ssa_24, ssa_82
	vec1 32 ssa_59 = fmax ssa_83, ssa_3
	vec1 32 ssa_60 = fpow ssa_59, ssa_2
	vec1 32 ssa_61 = fmul ssa_1, ssa_60
	vec1 32 ssa_84 = ffma ssa_50.x, ssa_49, ssa_61
	vec1 32 ssa_85 = ffma ssa_50.y, ssa_49, ssa_61
	vec1 32 ssa_86 = ffma ssa_50.z, ssa_49, ssa_61
	vec4 32 ssa_65 = vec4 ssa_84, ssa_85, ssa_86, ssa_0
	intrinsic store_output (ssa_65, ssa_3) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}


Instructions before scheduling (reg_alloc 0)
{  1}    0: linterp(8) vgrf32:F, g2:F, g4<0>:F 
{  2}    1: linterp(8) vgrf33:F, g2:F, g4<0>:F 
{  3}    2: linterp(8) vgrf0:F, g2:F, g5<0>:F 
{  4}    3: mul(8) vgrf1:F, vgrf33:F, vgrf33:F 
{  5}    4: mad(8) vgrf2:F, vgrf1:F, vgrf32:F, vgrf32:F 
{  5}    5: mad(8) vgrf3:F, vgrf2:F, vgrf0:F, vgrf0:F 
{  5}    6: rsq(8) vgrf4:F, vgrf3:F 
{  5}    7: mul(8) vgrf5:F, vgrf32:F, vgrf4:F 
{  5}    8: mul(8) vgrf6:F, vgrf33:F, vgrf4:F 
{  5}    9: mul(8) vgrf7:F, vgrf0:F, vgrf4:F 
{  4}   10: linterp(8) vgrf34:F, g2:F, g8<0>:F 
{  5}   11: linterp(8) vgrf35:F, g2:F, g8<0>:F 
{  6}   12: linterp(8) vgrf8:F, g2:F, g9<0>:F 
{  7}   13: mul(8) vgrf9:F, vgrf35:F, vgrf35:F 
{  8}   14: mad(8) vgrf10:F, vgrf9:F, vgrf34:F, vgrf34:F 
{  8}   15: mad(8) vgrf11:F, vgrf10:F, vgrf8:F, vgrf8:F 
{  8}   16: rsq(8) vgrf12:F, vgrf11:F 
{  8}   17: mul(8) vgrf13:F, vgrf34:F, vgrf12:F 
{  8}   18: mul(8) vgrf14:F, vgrf35:F, vgrf12:F 
{  8}   19: mul(8) vgrf15:F, vgrf8:F, vgrf12:F 
{  7}   20: mul(8) vgrf16:F, vgrf14:F, vgrf6:F 
{  8}   21: mad(8) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F 
{  8}   22: mad(8) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F 
{  8}   23: mul(8) vgrf19:F, vgrf18:F, 2f 
{  9}   24: mad(8) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F 
{  9}   25: mad(8) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F 
{  9}   26: mad(8) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F 
{  8}   27: sel.ge(8) vgrf23:F, vgrf18:F, 0f 
{  8}   28: linterp(8) vgrf36:F, g2:F, g6<0>:F 
{  9}   29: linterp(8) vgrf37:F, g2:F, g6<0>:F 
{ 10}   30: linterp(8) vgrf24:F, g2:F, g7<0>:F 
{ 11}   31: mul(8) vgrf25:F, vgrf21:F, vgrf14:F 
{ 10}   32: mad(8) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F 
{  8}   33: mad(8) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F 
{  6}   34: sel.ge(8) vgrf28:F, vgrf27:F, 0f 
{  6}   35: pow(8) vgrf29:F, vgrf28:F, 8f 
{  6}   36: mul(8) vgrf30:F, vgrf29:F, 0.75f 
{  9}   37: mad(8) vgrf38+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F 
{  8}   38: mad(8) vgrf38+1.0:F, vgrf30:F, vgrf23:F, vgrf37:F 
{  7}   39: mad(8) vgrf38+2.0:F, vgrf30:F, vgrf23:F, vgrf24:F 
{  4}   40: mov(8) vgrf38+3.0:F, 1f 
{  4}   41: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
Maximum  11 registers live at once.
clock    2, scheduled: linterp(8) vgrf32:F, g2:F, g4<0>:F 
(register pressure 11)
	child 2, 41 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 1, 2 parents: mul(8) vgrf5:F, vgrf32:F, vgrf4:F 
	child 0, 2 parents: mad(8) vgrf2:F, vgrf1:F, vgrf32:F, vgrf32:F 
clock    4, scheduled: linterp(8) vgrf33:F, g2:F, g4<0>:F 
(register pressure 11)
	child 2, 40 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 1, 2 parents: mul(8) vgrf6:F, vgrf33:F, vgrf4:F 
	child 0, 1 parents: mul(8) vgrf1:F, vgrf33:F, vgrf33:F 
		now available
clock    6, scheduled: linterp(8) vgrf0:F, g2:F, g5<0>:F 
(register pressure 11)
	child 2, 39 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 1, 2 parents: mul(8) vgrf7:F, vgrf0:F, vgrf4:F 
	child 0, 2 parents: mad(8) vgrf3:F, vgrf2:F, vgrf0:F, vgrf0:F 
clock    8, scheduled: linterp(8) vgrf34:F, g2:F, g8<0>:F 
(register pressure 12)
	child 2, 38 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 1, 2 parents: mul(8) vgrf13:F, vgrf34:F, vgrf12:F 
	child 0, 2 parents: mad(8) vgrf10:F, vgrf9:F, vgrf34:F, vgrf34:F 
clock   10, scheduled: linterp(8) vgrf35:F, g2:F, g8<0>:F 
(register pressure 12)
	child 2, 37 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 1, 2 parents: mul(8) vgrf14:F, vgrf35:F, vgrf12:F 
	child 0, 1 parents: mul(8) vgrf9:F, vgrf35:F, vgrf35:F 
		now available
clock   12, scheduled: linterp(8) vgrf8:F, g2:F, g9<0>:F 
(register pressure 12)
	child 2, 36 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 1, 2 parents: mul(8) vgrf15:F, vgrf8:F, vgrf12:F 
	child 0, 2 parents: mad(8) vgrf11:F, vgrf10:F, vgrf8:F, vgrf8:F 
clock   14, scheduled: linterp(8) vgrf36:F, g2:F, g6<0>:F 
(register pressure 13)
	child 1, 35 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 3 parents: mad(8) vgrf38+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F 
clock   16, scheduled: linterp(8) vgrf37:F, g2:F, g6<0>:F 
(register pressure 13)
	child 1, 34 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 3 parents: mad(8) vgrf38+1.0:F, vgrf30:F, vgrf23:F, vgrf37:F 
clock   18, scheduled: linterp(8) vgrf24:F, g2:F, g7<0>:F 
(register pressure 11)
	child 1, 33 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 3 parents: mad(8) vgrf38+2.0:F, vgrf30:F, vgrf23:F, vgrf24:F 
clock   20, scheduled: mov(8) vgrf38+3.0:F, 1f 
(register pressure 15)
	child 0, 32 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
clock   22, scheduled: mul(8) vgrf1:F, vgrf33:F, vgrf33:F 
(register pressure 16)
	child 1, 31 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 1 parents: mad(8) vgrf2:F, vgrf1:F, vgrf32:F, vgrf32:F 
		now available
clock   24, scheduled: mul(8) vgrf9:F, vgrf35:F, vgrf35:F 
(register pressure 17)
	child 1, 30 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 1 parents: mad(8) vgrf10:F, vgrf9:F, vgrf34:F, vgrf34:F 
		now available
clock   26, scheduled: mad(8) vgrf2:F, vgrf1:F, vgrf32:F, vgrf32:F 
(register pressure 17)
	child 1, 29 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 1 parents: mad(8) vgrf3:F, vgrf2:F, vgrf0:F, vgrf0:F 
		now available
clock   28, scheduled: mad(8) vgrf10:F, vgrf9:F, vgrf34:F, vgrf34:F 
(register pressure 17)
	child 1, 28 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 1 parents: mad(8) vgrf11:F, vgrf10:F, vgrf8:F, vgrf8:F 
		now available
clock   30, scheduled: mad(8) vgrf3:F, vgrf2:F, vgrf0:F, vgrf0:F 
(register pressure 17)
	child 1, 27 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 1 parents: rsq(8) vgrf4:F, vgrf3:F 
		now available
clock   32, scheduled: mad(8) vgrf11:F, vgrf10:F, vgrf8:F, vgrf8:F 
(register pressure 17)
	child 1, 26 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 1 parents: rsq(8) vgrf12:F, vgrf11:F 
		now available
clock   34, scheduled: rsq(8) vgrf4:F, vgrf3:F 
(register pressure 17)
	child 3, 25 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 2, 1 parents: mul(8) vgrf7:F, vgrf0:F, vgrf4:F 
		now available
	child 1, 1 parents: mul(8) vgrf6:F, vgrf33:F, vgrf4:F 
		now available
	child 0, 1 parents: mul(8) vgrf5:F, vgrf32:F, vgrf4:F 
		now available
clock   36, scheduled: rsq(8) vgrf12:F, vgrf11:F 
(register pressure 17)
	child 3, 24 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 2, 1 parents: mul(8) vgrf15:F, vgrf8:F, vgrf12:F 
		now available
	child 1, 1 parents: mul(8) vgrf14:F, vgrf35:F, vgrf12:F 
		now available
	child 0, 1 parents: mul(8) vgrf13:F, vgrf34:F, vgrf12:F 
		now available
clock   38, scheduled: mul(8) vgrf5:F, vgrf32:F, vgrf4:F 
(register pressure 17)
	child 2, 23 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 1, 3 parents: mad(8) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F 
	child 0, 3 parents: mad(8) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F 
clock   40, scheduled: mul(8) vgrf6:F, vgrf33:F, vgrf4:F 
(register pressure 17)
	child 2, 22 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 1, 3 parents: mad(8) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F 
	child 0, 2 parents: mul(8) vgrf16:F, vgrf14:F, vgrf6:F 
clock   42, scheduled: mul(8) vgrf7:F, vgrf0:F, vgrf4:F 
(register pressure 16)
	child 2, 21 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 1, 3 parents: mad(8) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F 
	child 0, 3 parents: mad(8) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F 
clock   44, scheduled: mul(8) vgrf13:F, vgrf34:F, vgrf12:F 
(register pressure 16)
	child 3, 20 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 2, 3 parents: mad(8) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F 
	child 1, 2 parents: mad(8) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F 
	child 0, 2 parents: mad(8) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F 
clock   46, scheduled: mul(8) vgrf14:F, vgrf35:F, vgrf12:F 
(register pressure 16)
	child 3, 19 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 2, 2 parents: mul(8) vgrf25:F, vgrf21:F, vgrf14:F 
	child 1, 2 parents: mad(8) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F 
	child 0, 1 parents: mul(8) vgrf16:F, vgrf14:F, vgrf6:F 
		now available
clock   48, scheduled: mul(8) vgrf15:F, vgrf8:F, vgrf12:F 
(register pressure 15)
	child 3, 18 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 2, 3 parents: mad(8) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F 
	child 1, 2 parents: mad(8) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F 
	child 0, 2 parents: mad(8) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F 
clock   50, scheduled: mul(8) vgrf16:F, vgrf14:F, vgrf6:F 
(register pressure 16)
	child 1, 17 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 1 parents: mad(8) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F 
		now available
clock   53, scheduled: mad(8) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F 
(register pressure 16)
	child 1, 16 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 1 parents: mad(8) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F 
		now available
clock   56, scheduled: mad(8) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F 
(register pressure 16)
	child 2, 15 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 1, 1 parents: sel.ge(8) vgrf23:F, vgrf18:F, 0f 
		now available
	child 0, 1 parents: mul(8) vgrf19:F, vgrf18:F, 2f 
		now available
clock   59, scheduled: mul(8) vgrf19:F, vgrf18:F, 2f 
(register pressure 17)
	child 3, 14 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 2, 1 parents: mad(8) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F 
		now available
	child 1, 1 parents: mad(8) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F 
		now available
	child 0, 1 parents: mad(8) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F 
		now available
clock   61, scheduled: sel.ge(8) vgrf23:F, vgrf18:F, 0f 
(register pressure 17)
	child 3, 13 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 2, 2 parents: mad(8) vgrf38+2.0:F, vgrf30:F, vgrf23:F, vgrf24:F 
	child 1, 2 parents: mad(8) vgrf38+1.0:F, vgrf30:F, vgrf23:F, vgrf37:F 
	child 0, 2 parents: mad(8) vgrf38+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F 
clock   63, scheduled: mad(8) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F 
(register pressure 17)
	child 1, 12 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 2 parents: mad(8) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F 
clock   65, scheduled: mad(8) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F 
(register pressure 17)
	child 1, 11 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 1 parents: mul(8) vgrf25:F, vgrf21:F, vgrf14:F 
		now available
clock   67, scheduled: mad(8) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F 
(register pressure 16)
	child 1, 10 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 2 parents: mad(8) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F 
clock   69, scheduled: mul(8) vgrf25:F, vgrf21:F, vgrf14:F 
(register pressure 15)
	child 1, 9 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 1 parents: mad(8) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F 
		now available
clock   72, scheduled: mad(8) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F 
(register pressure 13)
	child 1, 8 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 1 parents: mad(8) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F 
		now available
clock   75, scheduled: mad(8) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F 
(register pressure 11)
	child 1, 7 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 1 parents: sel.ge(8) vgrf28:F, vgrf27:F, 0f 
		now available
clock   78, scheduled: sel.ge(8) vgrf28:F, vgrf27:F, 0f 
(register pressure 11)
	child 1, 6 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 1 parents: pow(8) vgrf29:F, vgrf28:F, 8f 
		now available
clock   81, scheduled: pow(8) vgrf29:F, vgrf28:F, 8f 
(register pressure 11)
	child 1, 5 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 0, 1 parents: mul(8) vgrf30:F, vgrf29:F, 0.75f 
		now available
clock   84, scheduled: mul(8) vgrf30:F, vgrf29:F, 0.75f 
(register pressure 11)
	child 3, 4 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
	child 2, 1 parents: mad(8) vgrf38+2.0:F, vgrf30:F, vgrf23:F, vgrf24:F 
		now available
	child 1, 1 parents: mad(8) vgrf38+1.0:F, vgrf30:F, vgrf23:F, vgrf37:F 
		now available
	child 0, 1 parents: mad(8) vgrf38+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F 
		now available
clock   87, scheduled: mad(8) vgrf38+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F 
(register pressure 10)
	child 0, 3 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
clock   89, scheduled: mad(8) vgrf38+1.0:F, vgrf30:F, vgrf23:F, vgrf37:F 
(register pressure 9)
	child 0, 2 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
clock   91, scheduled: mad(8) vgrf38+2.0:F, vgrf30:F, vgrf23:F, vgrf24:F 
(register pressure 6)
	child 0, 1 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
		now available
clock   94, scheduled: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
(register pressure 2)

Instructions after scheduling (reg_alloc 0)
{  1}    0: linterp(8) vgrf32:F, g2:F, g4<0>:F 
{  2}    1: linterp(8) vgrf33:F, g2:F, g4<0>:F 
{  3}    2: linterp(8) vgrf0:F, g2:F, g5<0>:F 
{  4}    3: linterp(8) vgrf34:F, g2:F, g8<0>:F 
{  5}    4: linterp(8) vgrf35:F, g2:F, g8<0>:F 
{  5}    5: linterp(8) vgrf8:F, g2:F, g9<0>:F 
{  5}    6: linterp(8) vgrf36:F, g2:F, g6<0>:F 
{  5}    7: linterp(8) vgrf37:F, g2:F, g6<0>:F 
{  5}    8: linterp(8) vgrf24:F, g2:F, g7<0>:F 
{  5}    9: mov(8) vgrf38+3.0:F, 1f 
{  4}   10: mul(8) vgrf1:F, vgrf33:F, vgrf33:F 
{  5}   11: mul(8) vgrf9:F, vgrf35:F, vgrf35:F 
{  6}   12: mad(8) vgrf2:F, vgrf1:F, vgrf32:F, vgrf32:F 
{  7}   13: mad(8) vgrf10:F, vgrf9:F, vgrf34:F, vgrf34:F 
{  8}   14: mad(8) vgrf3:F, vgrf2:F, vgrf0:F, vgrf0:F 
{  8}   15: mad(8) vgrf11:F, vgrf10:F, vgrf8:F, vgrf8:F 
{  8}   16: rsq(8) vgrf4:F, vgrf3:F 
{  8}   17: rsq(8) vgrf12:F, vgrf11:F 
{  8}   18: mul(8) vgrf5:F, vgrf32:F, vgrf4:F 
{  8}   19: mul(8) vgrf6:F, vgrf33:F, vgrf4:F 
{  7}   20: mul(8) vgrf7:F, vgrf0:F, vgrf4:F 
{  8}   21: mul(8) vgrf13:F, vgrf34:F, vgrf12:F 
{  8}   22: mul(8) vgrf14:F, vgrf35:F, vgrf12:F 
{  8}   23: mul(8) vgrf15:F, vgrf8:F, vgrf12:F 
{  9}   24: mul(8) vgrf16:F, vgrf14:F, vgrf6:F 
{  9}   25: mad(8) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F 
{  9}   26: mad(8) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F 
{  8}   27: mul(8) vgrf19:F, vgrf18:F, 2f 
{  8}   28: sel.ge(8) vgrf23:F, vgrf18:F, 0f 
{  9}   29: mad(8) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F 
{ 10}   30: mad(8) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F 
{ 11}   31: mad(8) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F 
{ 10}   32: mul(8) vgrf25:F, vgrf21:F, vgrf14:F 
{  8}   33: mad(8) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F 
{  6}   34: mad(8) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F 
{  6}   35: sel.ge(8) vgrf28:F, vgrf27:F, 0f 
{  6}   36: pow(8) vgrf29:F, vgrf28:F, 8f 
{  9}   37: mul(8) vgrf30:F, vgrf29:F, 0.75f 
{  8}   38: mad(8) vgrf38+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F 
{  7}   39: mad(8) vgrf38+1.0:F, vgrf30:F, vgrf23:F, vgrf37:F 
{  4}   40: mad(8) vgrf38+2.0:F, vgrf30:F, vgrf23:F, vgrf24:F 
{  4}   41: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf38:F 
Maximum  11 registers live at once.
clock    2, scheduled: linterp(8) vgrf36:F, g2:F, g4<0>:F 
	child 3, 2 parents: linterp(8) vgrf4:F, g2:F, g5<0>:F 
	child 2, 41 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 1, 3 parents: mul(8) vgrf9:F, vgrf36:F, vgrf8:F 
	child 0, 4 parents: mad(8) vgrf6:F, vgrf5:F, vgrf36:F, vgrf36:F 
clock    4, scheduled: linterp(8) vgrf37:F, g2:F, g4<0>:F 
	child 3, 1 parents: linterp(8) vgrf4:F, g2:F, g5<0>:F 
		now available
	child 2, 40 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 1, 2 parents: mul(8) vgrf12:F, vgrf37:F, vgrf8:F 
	child 0, 2 parents: mul(8) vgrf5:F, vgrf37:F, vgrf37:F 
clock    6, scheduled: linterp(8) vgrf38+0.0:F, g2:F, g8<0>:F 
	child 3, 3 parents: rsq(8) vgrf8:F, vgrf7:F 
	child 2, 39 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 1, 2 parents: mul(8) vgrf64+0.0:F, vgrf38+0.0:F, vgrf16:F 
	child 0, 2 parents: mad(8) vgrf41:F, vgrf13:F, vgrf38+0.0:F, vgrf38+0.0:F 
clock    8, scheduled: linterp(8) vgrf39:F, g2:F, g8<0>:F 
	child 3, 2 parents: rsq(8) vgrf8:F, vgrf7:F 
	child 2, 38 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 1, 2 parents: mul(8) vgrf18:F, vgrf39:F, vgrf16:F 
	child 0, 1 parents: mul(8) vgrf13:F, vgrf39:F, vgrf39:F 
		now available
clock   10, scheduled: linterp(8) vgrf11:F, g2:F, g9<0>:F 
	child 3, 2 parents: mul(8) vgrf9:F, vgrf36:F, vgrf8:F 
	child 2, 37 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 1, 2 parents: mul(8) vgrf19:F, vgrf11:F, vgrf16:F 
	child 0, 2 parents: mad(8) vgrf15:F, vgrf41:F, vgrf11:F, vgrf11:F 
clock   12, scheduled: linterp(8) vgrf40:F, g2:F, g6<0>:F 
	child 2, 3 parents: mad(8) vgrf6:F, vgrf5:F, vgrf36:F, vgrf36:F 
	child 1, 36 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 3 parents: mad(8) vgrf123+0.0:F, vgrf34:F, vgrf27:F, vgrf40:F 
clock   14, scheduled: linterp(8) vgrf14:F, g2:F, g6<0>:F 
	child 2, 2 parents: mad(8) vgrf6:F, vgrf5:F, vgrf36:F, vgrf36:F 
	child 1, 35 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 3 parents: mad(8) vgrf124+0.0:F, vgrf34:F, vgrf27:F, vgrf14:F 
clock   16, scheduled: linterp(8) vgrf28:F, g2:F, g7<0>:F 
	child 2, 3 parents: mad(8) vgrf7:F, vgrf6:F, vgrf4:F, vgrf4:F 
	child 1, 34 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 3 parents: mad(8) vgrf125+0.0:F, vgrf34:F, vgrf27:F, vgrf28:F 
clock   18, scheduled: mov(8) vgrf126+0.0:F, 1f 
	child 0, 33 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
clock   20, scheduled: linterp(8) vgrf4:F, g2:F, g5<0>:F 
	child 3, 1 parents: mul(8) vgrf5:F, vgrf37:F, vgrf37:F 
		now available
	child 2, 32 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 1, 2 parents: mul(8) vgrf10:F, vgrf4:F, vgrf8:F 
	child 0, 2 parents: mad(8) vgrf7:F, vgrf6:F, vgrf4:F, vgrf4:F 
clock   22, scheduled: mul(8) vgrf5:F, vgrf37:F, vgrf37:F 
	child 1, 31 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mad(8) vgrf6:F, vgrf5:F, vgrf36:F, vgrf36:F 
		now available
clock   24, scheduled: mul(8) vgrf13:F, vgrf39:F, vgrf39:F 
	child 1, 30 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mad(8) vgrf41:F, vgrf13:F, vgrf38+0.0:F, vgrf38+0.0:F 
		now available
clock   38, scheduled: mad(8) vgrf6:F, vgrf5:F, vgrf36:F, vgrf36:F 
	child 1, 29 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mad(8) vgrf7:F, vgrf6:F, vgrf4:F, vgrf4:F 
		now available
clock   40, scheduled: mad(8) vgrf41:F, vgrf13:F, vgrf38+0.0:F, vgrf38+0.0:F 
	child 1, 28 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mad(8) vgrf15:F, vgrf41:F, vgrf11:F, vgrf11:F 
		now available
clock   58, scheduled: mad(8) vgrf7:F, vgrf6:F, vgrf4:F, vgrf4:F 
	child 1, 27 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: rsq(8) vgrf8:F, vgrf7:F 
		now available
clock   60, scheduled: mad(8) vgrf15:F, vgrf41:F, vgrf11:F, vgrf11:F 
	child 1, 26 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: rsq(8) vgrf16:F, vgrf15:F 
		now available
clock   78, scheduled: rsq(8) vgrf8:F, vgrf7:F 
	child 3, 25 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 1 parents: mul(8) vgrf10:F, vgrf4:F, vgrf8:F 
		now available
	child 1, 1 parents: mul(8) vgrf12:F, vgrf37:F, vgrf8:F 
		now available
	child 0, 1 parents: mul(8) vgrf9:F, vgrf36:F, vgrf8:F 
		now available
clock   80, scheduled: rsq(8) vgrf16:F, vgrf15:F 
	child 3, 24 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 1 parents: mul(8) vgrf19:F, vgrf11:F, vgrf16:F 
		now available
	child 1, 1 parents: mul(8) vgrf18:F, vgrf39:F, vgrf16:F 
		now available
	child 0, 1 parents: mul(8) vgrf64+0.0:F, vgrf38+0.0:F, vgrf16:F 
		now available
clock   96, scheduled: mul(8) vgrf9:F, vgrf36:F, vgrf8:F 
	child 2, 23 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 1, 3 parents: mad(8) vgrf24:F, -vgrf64+0.0:F, vgrf9:F, vgrf65+0.0:F 
	child 0, 3 parents: mad(8) vgrf21:F, vgrf20:F, vgrf9:F, vgrf64+0.0:F 
clock   98, scheduled: mul(8) vgrf12:F, vgrf37:F, vgrf8:F 
	child 2, 22 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 1, 3 parents: mad(8) vgrf25:F, -vgrf18:F, vgrf12:F, vgrf65+0.0:F 
	child 0, 2 parents: mul(8) vgrf20:F, vgrf18:F, vgrf12:F 
clock  100, scheduled: mul(8) vgrf10:F, vgrf4:F, vgrf8:F 
	child 2, 21 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 1, 3 parents: mad(8) vgrf26:F, -vgrf19:F, vgrf10:F, vgrf65+0.0:F 
	child 0, 3 parents: mad(8) vgrf22:F, vgrf21:F, vgrf10:F, vgrf19:F 
clock  102, scheduled: mul(8) vgrf64+0.0:F, vgrf38+0.0:F, vgrf16:F 
	child 3, 20 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 3 parents: mad(8) vgrf30:F, vgrf29:F, vgrf64+0.0:F, vgrf24:F 
	child 1, 2 parents: mad(8) vgrf24:F, -vgrf64+0.0:F, vgrf9:F, vgrf65+0.0:F 
	child 0, 2 parents: mad(8) vgrf21:F, vgrf20:F, vgrf9:F, vgrf64+0.0:F 
clock  104, scheduled: mul(8) vgrf18:F, vgrf39:F, vgrf16:F 
	child 3, 19 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 2 parents: mul(8) vgrf29:F, vgrf25:F, vgrf18:F 
	child 1, 2 parents: mad(8) vgrf25:F, -vgrf18:F, vgrf12:F, vgrf65+0.0:F 
	child 0, 1 parents: mul(8) vgrf20:F, vgrf18:F, vgrf12:F 
		now available
clock  106, scheduled: mul(8) vgrf19:F, vgrf11:F, vgrf16:F 
	child 3, 18 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 3 parents: mad(8) vgrf31:F, vgrf30:F, vgrf19:F, vgrf26:F 
	child 1, 2 parents: mad(8) vgrf26:F, -vgrf19:F, vgrf10:F, vgrf65+0.0:F 
	child 0, 2 parents: mad(8) vgrf22:F, vgrf21:F, vgrf10:F, vgrf19:F 
clock  120, scheduled: mul(8) vgrf20:F, vgrf18:F, vgrf12:F 
	child 1, 17 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mad(8) vgrf21:F, vgrf20:F, vgrf9:F, vgrf64+0.0:F 
		now available
clock  136, scheduled: mad(8) vgrf21:F, vgrf20:F, vgrf9:F, vgrf64+0.0:F 
	child 1, 16 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mad(8) vgrf22:F, vgrf21:F, vgrf10:F, vgrf19:F 
		now available
clock  156, scheduled: mad(8) vgrf22:F, vgrf21:F, vgrf10:F, vgrf19:F 
	child 2, 15 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 1, 1 parents: sel.ge(8) vgrf27:F, vgrf22:F, 0f 
		now available
	child 0, 1 parents: mul(8) vgrf65+0.0:F, vgrf22:F, 2f 
		now available
clock  176, scheduled: mul(8) vgrf65+0.0:F, vgrf22:F, 2f 
	child 3, 14 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 1 parents: mad(8) vgrf26:F, -vgrf19:F, vgrf10:F, vgrf65+0.0:F 
		now available
	child 1, 1 parents: mad(8) vgrf25:F, -vgrf18:F, vgrf12:F, vgrf65+0.0:F 
		now available
	child 0, 1 parents: mad(8) vgrf24:F, -vgrf64+0.0:F, vgrf9:F, vgrf65+0.0:F 
		now available
clock  178, scheduled: sel.ge(8) vgrf27:F, vgrf22:F, 0f 
	child 3, 13 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 2 parents: mad(8) vgrf125+0.0:F, vgrf34:F, vgrf27:F, vgrf28:F 
	child 1, 2 parents: mad(8) vgrf124+0.0:F, vgrf34:F, vgrf27:F, vgrf14:F 
	child 0, 2 parents: mad(8) vgrf123+0.0:F, vgrf34:F, vgrf27:F, vgrf40:F 
clock  192, scheduled: mad(8) vgrf24:F, -vgrf64+0.0:F, vgrf9:F, vgrf65+0.0:F 
	child 1, 12 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 2 parents: mad(8) vgrf30:F, vgrf29:F, vgrf64+0.0:F, vgrf24:F 
clock  194, scheduled: mad(8) vgrf25:F, -vgrf18:F, vgrf12:F, vgrf65+0.0:F 
	child 1, 11 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mul(8) vgrf29:F, vgrf25:F, vgrf18:F 
		now available
clock  196, scheduled: mad(8) vgrf26:F, -vgrf19:F, vgrf10:F, vgrf65+0.0:F 
	child 1, 10 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 2 parents: mad(8) vgrf31:F, vgrf30:F, vgrf19:F, vgrf26:F 
clock  214, scheduled: mul(8) vgrf29:F, vgrf25:F, vgrf18:F 
	child 1, 9 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mad(8) vgrf30:F, vgrf29:F, vgrf64+0.0:F, vgrf24:F 
		now available
clock  230, scheduled: mad(8) vgrf30:F, vgrf29:F, vgrf64+0.0:F, vgrf24:F 
	child 1, 8 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mad(8) vgrf31:F, vgrf30:F, vgrf19:F, vgrf26:F 
		now available
clock  250, scheduled: mad(8) vgrf31:F, vgrf30:F, vgrf19:F, vgrf26:F 
	child 1, 7 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: sel.ge(8) vgrf32:F, vgrf31:F, 0f 
		now available
clock  270, scheduled: sel.ge(8) vgrf32:F, vgrf31:F, 0f 
	child 1, 6 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: pow(8) vgrf33:F, vgrf32:F, 8f 
		now available
clock  286, scheduled: pow(8) vgrf33:F, vgrf32:F, 8f 
	child 1, 5 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mul(8) vgrf34:F, vgrf33:F, 0.75f 
		now available
clock  312, scheduled: mul(8) vgrf34:F, vgrf33:F, 0.75f 
	child 3, 4 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 1 parents: mad(8) vgrf125+0.0:F, vgrf34:F, vgrf27:F, vgrf28:F 
		now available
	child 1, 1 parents: mad(8) vgrf124+0.0:F, vgrf34:F, vgrf27:F, vgrf14:F 
		now available
	child 0, 1 parents: mad(8) vgrf123+0.0:F, vgrf34:F, vgrf27:F, vgrf40:F 
		now available
clock  328, scheduled: mad(8) vgrf123+0.0:F, vgrf34:F, vgrf27:F, vgrf40:F 
	child 0, 3 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
clock  330, scheduled: mad(8) vgrf124+0.0:F, vgrf34:F, vgrf27:F, vgrf14:F 
	child 0, 2 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
clock  332, scheduled: mad(8) vgrf125+0.0:F, vgrf34:F, vgrf27:F, vgrf28:F 
	child 0, 1 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
		now available
clock  352, scheduled: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 

Instructions before scheduling (reg_alloc 0)
{  2}    0: linterp(16) vgrf32:F, g2:F, g6<0>:F 
{  4}    1: linterp(16) vgrf33:F, g2:F, g6<0>:F 
{  6}    2: linterp(16) vgrf0:F, g2:F, g7<0>:F 
{  8}    3: mul(16) vgrf1:F, vgrf33:F, vgrf33:F 
{ 10}    4: mad(16) vgrf2:F, vgrf1:F, vgrf32:F, vgrf32:F 
{ 10}    5: mad(16) vgrf3:F, vgrf2:F, vgrf0:F, vgrf0:F 
{ 10}    6: rsq(16) vgrf4:F, vgrf3:F 
{ 10}    7: mul(16) vgrf5:F, vgrf32:F, vgrf4:F 
{ 10}    8: mul(16) vgrf6:F, vgrf33:F, vgrf4:F 
{ 10}    9: mul(16) vgrf7:F, vgrf0:F, vgrf4:F 
{  8}   10: linterp(16) vgrf34:F, g2:F, g10<0>:F 
{ 10}   11: linterp(16) vgrf35:F, g2:F, g10<0>:F 
{ 12}   12: linterp(16) vgrf8:F, g2:F, g11<0>:F 
{ 14}   13: mul(16) vgrf9:F, vgrf35:F, vgrf35:F 
{ 16}   14: mad(16) vgrf10:F, vgrf9:F, vgrf34:F, vgrf34:F 
{ 16}   15: mad(16) vgrf11:F, vgrf10:F, vgrf8:F, vgrf8:F 
{ 16}   16: rsq(16) vgrf12:F, vgrf11:F 
{ 16}   17: mul(16) vgrf13:F, vgrf34:F, vgrf12:F 
{ 16}   18: mul(16) vgrf14:F, vgrf35:F, vgrf12:F 
{ 16}   19: mul(16) vgrf15:F, vgrf8:F, vgrf12:F 
{ 14}   20: mul(16) vgrf16:F, vgrf14:F, vgrf6:F 
{ 16}   21: mad(16) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F 
{ 16}   22: mad(16) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F 
{ 16}   23: mul(16) vgrf19:F, vgrf18:F, 2f 
{ 18}   24: mad(16) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F 
{ 18}   25: mad(16) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F 
{ 18}   26: mad(16) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F 
{ 16}   27: sel.ge(16) vgrf23:F, vgrf18:F, 0f 
{ 16}   28: linterp(16) vgrf36:F, g2:F, g8<0>:F 
{ 18}   29: linterp(16) vgrf37:F, g2:F, g8<0>:F 
{ 20}   30: linterp(16) vgrf24:F, g2:F, g9<0>:F 
{ 22}   31: mul(16) vgrf25:F, vgrf21:F, vgrf14:F 
{ 20}   32: mad(16) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F 
{ 16}   33: mad(16) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F 
{ 12}   34: sel.ge(16) vgrf28:F, vgrf27:F, 0f 
{ 12}   35: pow(16) vgrf29:F, vgrf28:F, 8f 
{ 12}   36: mul(16) vgrf30:F, vgrf29:F, 0.75f 
{ 18}   37: mad(16) vgrf38+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F 
{ 16}   38: mad(16) vgrf38+2.0:F, vgrf30:F, vgrf23:F, vgrf37:F 
{ 14}   39: mad(16) vgrf38+4.0:F, vgrf30:F, vgrf23:F, vgrf24:F 
{  8}   40: mov(16) vgrf38+6.0:F, 1f 
{  8}   41: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
Maximum  22 registers live at once.
clock    4, scheduled: linterp(16) vgrf32:F, g2:F, g6<0>:F 
(register pressure 14)
	child 2, 41 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 1, 2 parents: mul(16) vgrf5:F, vgrf32:F, vgrf4:F 
	child 0, 2 parents: mad(16) vgrf2:F, vgrf1:F, vgrf32:F, vgrf32:F 
clock    8, scheduled: linterp(16) vgrf33:F, g2:F, g6<0>:F 
(register pressure 15)
	child 2, 40 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 1, 2 parents: mul(16) vgrf6:F, vgrf33:F, vgrf4:F 
	child 0, 1 parents: mul(16) vgrf1:F, vgrf33:F, vgrf33:F 
		now available
clock   12, scheduled: linterp(16) vgrf0:F, g2:F, g7<0>:F 
(register pressure 16)
	child 2, 39 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 1, 2 parents: mul(16) vgrf7:F, vgrf0:F, vgrf4:F 
	child 0, 2 parents: mad(16) vgrf3:F, vgrf2:F, vgrf0:F, vgrf0:F 
clock   16, scheduled: linterp(16) vgrf34:F, g2:F, g10<0>:F 
(register pressure 18)
	child 2, 38 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 1, 2 parents: mul(16) vgrf13:F, vgrf34:F, vgrf12:F 
	child 0, 2 parents: mad(16) vgrf10:F, vgrf9:F, vgrf34:F, vgrf34:F 
clock   20, scheduled: linterp(16) vgrf35:F, g2:F, g10<0>:F 
(register pressure 19)
	child 2, 37 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 1, 2 parents: mul(16) vgrf14:F, vgrf35:F, vgrf12:F 
	child 0, 1 parents: mul(16) vgrf9:F, vgrf35:F, vgrf35:F 
		now available
clock   24, scheduled: linterp(16) vgrf8:F, g2:F, g11<0>:F 
(register pressure 20)
	child 2, 36 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 1, 2 parents: mul(16) vgrf15:F, vgrf8:F, vgrf12:F 
	child 0, 2 parents: mad(16) vgrf11:F, vgrf10:F, vgrf8:F, vgrf8:F 
clock   28, scheduled: linterp(16) vgrf36:F, g2:F, g8<0>:F 
(register pressure 22)
	child 1, 35 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 3 parents: mad(16) vgrf38+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F 
clock   32, scheduled: linterp(16) vgrf37:F, g2:F, g8<0>:F 
(register pressure 23)
	child 1, 34 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 3 parents: mad(16) vgrf38+2.0:F, vgrf30:F, vgrf23:F, vgrf37:F 
clock   36, scheduled: linterp(16) vgrf24:F, g2:F, g9<0>:F 
(register pressure 20)
	child 1, 33 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 3 parents: mad(16) vgrf38+4.0:F, vgrf30:F, vgrf23:F, vgrf24:F 
clock   40, scheduled: mov(16) vgrf38+6.0:F, 1f 
(register pressure 28)
	child 0, 32 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
clock   44, scheduled: mul(16) vgrf1:F, vgrf33:F, vgrf33:F 
(register pressure 30)
	child 1, 31 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 1 parents: mad(16) vgrf2:F, vgrf1:F, vgrf32:F, vgrf32:F 
		now available
clock   48, scheduled: mul(16) vgrf9:F, vgrf35:F, vgrf35:F 
(register pressure 32)
	child 1, 30 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 1 parents: mad(16) vgrf10:F, vgrf9:F, vgrf34:F, vgrf34:F 
		now available
clock   52, scheduled: mad(16) vgrf2:F, vgrf1:F, vgrf32:F, vgrf32:F 
(register pressure 32)
	child 1, 29 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 1 parents: mad(16) vgrf3:F, vgrf2:F, vgrf0:F, vgrf0:F 
		now available
clock   56, scheduled: mad(16) vgrf10:F, vgrf9:F, vgrf34:F, vgrf34:F 
(register pressure 32)
	child 1, 28 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 1 parents: mad(16) vgrf11:F, vgrf10:F, vgrf8:F, vgrf8:F 
		now available
clock   60, scheduled: mad(16) vgrf3:F, vgrf2:F, vgrf0:F, vgrf0:F 
(register pressure 32)
	child 1, 27 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 1 parents: rsq(16) vgrf4:F, vgrf3:F 
		now available
clock   64, scheduled: mad(16) vgrf11:F, vgrf10:F, vgrf8:F, vgrf8:F 
(register pressure 32)
	child 1, 26 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 1 parents: rsq(16) vgrf12:F, vgrf11:F 
		now available
clock   68, scheduled: rsq(16) vgrf4:F, vgrf3:F 
(register pressure 32)
	child 3, 25 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 2, 1 parents: mul(16) vgrf7:F, vgrf0:F, vgrf4:F 
		now available
	child 1, 1 parents: mul(16) vgrf6:F, vgrf33:F, vgrf4:F 
		now available
	child 0, 1 parents: mul(16) vgrf5:F, vgrf32:F, vgrf4:F 
		now available
clock   72, scheduled: rsq(16) vgrf12:F, vgrf11:F 
(register pressure 32)
	child 3, 24 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 2, 1 parents: mul(16) vgrf15:F, vgrf8:F, vgrf12:F 
		now available
	child 1, 1 parents: mul(16) vgrf14:F, vgrf35:F, vgrf12:F 
		now available
	child 0, 1 parents: mul(16) vgrf13:F, vgrf34:F, vgrf12:F 
		now available
clock   76, scheduled: mul(16) vgrf5:F, vgrf32:F, vgrf4:F 
(register pressure 32)
	child 2, 23 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 1, 3 parents: mad(16) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F 
	child 0, 3 parents: mad(16) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F 
clock   80, scheduled: mul(16) vgrf6:F, vgrf33:F, vgrf4:F 
(register pressure 32)
	child 2, 22 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 1, 3 parents: mad(16) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F 
	child 0, 2 parents: mul(16) vgrf16:F, vgrf14:F, vgrf6:F 
clock   84, scheduled: mul(16) vgrf7:F, vgrf0:F, vgrf4:F 
(register pressure 30)
	child 2, 21 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 1, 3 parents: mad(16) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F 
	child 0, 3 parents: mad(16) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F 
clock   88, scheduled: mul(16) vgrf13:F, vgrf34:F, vgrf12:F 
(register pressure 30)
	child 3, 20 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 2, 3 parents: mad(16) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F 
	child 1, 2 parents: mad(16) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F 
	child 0, 2 parents: mad(16) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F 
clock   92, scheduled: mul(16) vgrf14:F, vgrf35:F, vgrf12:F 
(register pressure 30)
	child 3, 19 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 2, 2 parents: mul(16) vgrf25:F, vgrf21:F, vgrf14:F 
	child 1, 2 parents: mad(16) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F 
	child 0, 1 parents: mul(16) vgrf16:F, vgrf14:F, vgrf6:F 
		now available
clock   96, scheduled: mul(16) vgrf15:F, vgrf8:F, vgrf12:F 
(register pressure 28)
	child 3, 18 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 2, 3 parents: mad(16) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F 
	child 1, 2 parents: mad(16) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F 
	child 0, 2 parents: mad(16) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F 
clock  100, scheduled: mul(16) vgrf16:F, vgrf14:F, vgrf6:F 
(register pressure 30)
	child 1, 17 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 1 parents: mad(16) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F 
		now available
clock  105, scheduled: mad(16) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F 
(register pressure 30)
	child 1, 16 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 1 parents: mad(16) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F 
		now available
clock  110, scheduled: mad(16) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F 
(register pressure 30)
	child 2, 15 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 1, 1 parents: sel.ge(16) vgrf23:F, vgrf18:F, 0f 
		now available
	child 0, 1 parents: mul(16) vgrf19:F, vgrf18:F, 2f 
		now available
clock  115, scheduled: mul(16) vgrf19:F, vgrf18:F, 2f 
(register pressure 32)
	child 3, 14 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 2, 1 parents: mad(16) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F 
		now available
	child 1, 1 parents: mad(16) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F 
		now available
	child 0, 1 parents: mad(16) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F 
		now available
clock  119, scheduled: sel.ge(16) vgrf23:F, vgrf18:F, 0f 
(register pressure 32)
	child 3, 13 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 2, 2 parents: mad(16) vgrf38+4.0:F, vgrf30:F, vgrf23:F, vgrf24:F 
	child 1, 2 parents: mad(16) vgrf38+2.0:F, vgrf30:F, vgrf23:F, vgrf37:F 
	child 0, 2 parents: mad(16) vgrf38+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F 
clock  123, scheduled: mad(16) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F 
(register pressure 32)
	child 1, 12 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 2 parents: mad(16) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F 
clock  127, scheduled: mad(16) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F 
(register pressure 32)
	child 1, 11 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 1 parents: mul(16) vgrf25:F, vgrf21:F, vgrf14:F 
		now available
clock  131, scheduled: mad(16) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F 
(register pressure 30)
	child 1, 10 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 2 parents: mad(16) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F 
clock  135, scheduled: mul(16) vgrf25:F, vgrf21:F, vgrf14:F 
(register pressure 28)
	child 1, 9 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 1 parents: mad(16) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F 
		now available
clock  140, scheduled: mad(16) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F 
(register pressure 24)
	child 1, 8 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 1 parents: mad(16) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F 
		now available
clock  145, scheduled: mad(16) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F 
(register pressure 20)
	child 1, 7 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 1 parents: sel.ge(16) vgrf28:F, vgrf27:F, 0f 
		now available
clock  150, scheduled: sel.ge(16) vgrf28:F, vgrf27:F, 0f 
(register pressure 20)
	child 1, 6 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 1 parents: pow(16) vgrf29:F, vgrf28:F, 8f 
		now available
clock  155, scheduled: pow(16) vgrf29:F, vgrf28:F, 8f 
(register pressure 20)
	child 1, 5 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 0, 1 parents: mul(16) vgrf30:F, vgrf29:F, 0.75f 
		now available
clock  160, scheduled: mul(16) vgrf30:F, vgrf29:F, 0.75f 
(register pressure 20)
	child 3, 4 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
	child 2, 1 parents: mad(16) vgrf38+4.0:F, vgrf30:F, vgrf23:F, vgrf24:F 
		now available
	child 1, 1 parents: mad(16) vgrf38+2.0:F, vgrf30:F, vgrf23:F, vgrf37:F 
		now available
	child 0, 1 parents: mad(16) vgrf38+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F 
		now available
clock  165, scheduled: mad(16) vgrf38+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F 
(register pressure 18)
	child 0, 3 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
clock  169, scheduled: mad(16) vgrf38+2.0:F, vgrf30:F, vgrf23:F, vgrf37:F 
(register pressure 16)
	child 0, 2 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
clock  173, scheduled: mad(16) vgrf38+4.0:F, vgrf30:F, vgrf23:F, vgrf24:F 
(register pressure 10)
	child 0, 1 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
		now available
clock  178, scheduled: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
(register pressure 2)

Instructions after scheduling (reg_alloc 0)
{  2}    0: linterp(16) vgrf32:F, g2:F, g6<0>:F 
{  4}    1: linterp(16) vgrf33:F, g2:F, g6<0>:F 
{  6}    2: linterp(16) vgrf0:F, g2:F, g7<0>:F 
{  8}    3: linterp(16) vgrf34:F, g2:F, g10<0>:F 
{ 10}    4: linterp(16) vgrf35:F, g2:F, g10<0>:F 
{ 10}    5: linterp(16) vgrf8:F, g2:F, g11<0>:F 
{ 10}    6: linterp(16) vgrf36:F, g2:F, g8<0>:F 
{ 10}    7: linterp(16) vgrf37:F, g2:F, g8<0>:F 
{ 10}    8: linterp(16) vgrf24:F, g2:F, g9<0>:F 
{ 10}    9: mov(16) vgrf38+6.0:F, 1f 
{  8}   10: mul(16) vgrf1:F, vgrf33:F, vgrf33:F 
{ 10}   11: mul(16) vgrf9:F, vgrf35:F, vgrf35:F 
{ 12}   12: mad(16) vgrf2:F, vgrf1:F, vgrf32:F, vgrf32:F 
{ 14}   13: mad(16) vgrf10:F, vgrf9:F, vgrf34:F, vgrf34:F 
{ 16}   14: mad(16) vgrf3:F, vgrf2:F, vgrf0:F, vgrf0:F 
{ 16}   15: mad(16) vgrf11:F, vgrf10:F, vgrf8:F, vgrf8:F 
{ 16}   16: rsq(16) vgrf4:F, vgrf3:F 
{ 16}   17: rsq(16) vgrf12:F, vgrf11:F 
{ 16}   18: mul(16) vgrf5:F, vgrf32:F, vgrf4:F 
{ 16}   19: mul(16) vgrf6:F, vgrf33:F, vgrf4:F 
{ 14}   20: mul(16) vgrf7:F, vgrf0:F, vgrf4:F 
{ 16}   21: mul(16) vgrf13:F, vgrf34:F, vgrf12:F 
{ 16}   22: mul(16) vgrf14:F, vgrf35:F, vgrf12:F 
{ 16}   23: mul(16) vgrf15:F, vgrf8:F, vgrf12:F 
{ 18}   24: mul(16) vgrf16:F, vgrf14:F, vgrf6:F 
{ 18}   25: mad(16) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F 
{ 18}   26: mad(16) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F 
{ 16}   27: mul(16) vgrf19:F, vgrf18:F, 2f 
{ 16}   28: sel.ge(16) vgrf23:F, vgrf18:F, 0f 
{ 18}   29: mad(16) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F 
{ 20}   30: mad(16) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F 
{ 22}   31: mad(16) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F 
{ 20}   32: mul(16) vgrf25:F, vgrf21:F, vgrf14:F 
{ 16}   33: mad(16) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F 
{ 12}   34: mad(16) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F 
{ 12}   35: sel.ge(16) vgrf28:F, vgrf27:F, 0f 
{ 12}   36: pow(16) vgrf29:F, vgrf28:F, 8f 
{ 18}   37: mul(16) vgrf30:F, vgrf29:F, 0.75f 
{ 16}   38: mad(16) vgrf38+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F 
{ 14}   39: mad(16) vgrf38+2.0:F, vgrf30:F, vgrf23:F, vgrf37:F 
{  8}   40: mad(16) vgrf38+4.0:F, vgrf30:F, vgrf23:F, vgrf24:F 
{  8}   41: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf38:F 
Maximum  22 registers live at once.
clock    4, scheduled: linterp(16) vgrf58:F, g2:F, g6<0>:F 
	child 4, 3 parents: linterp(16) vgrf6:F, g2:F, g8<0>:F 
	child 3, 41 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 5 parents: mul(16) vgrf58:F, vgrf68+0.0:F, vgrf20:F 
	child 1, 2 parents: mul(16) vgrf64+0.0:F, vgrf58:F, vgrf20:F 
	child 0, 2 parents: mad(16) vgrf16:F, vgrf14:F, vgrf58:F, vgrf58:F 
clock    8, scheduled: linterp(16) vgrf68+0.0:F, g2:F, g6<0>:F 
	child 4, 2 parents: linterp(16) vgrf6:F, g2:F, g8<0>:F 
	child 3, 40 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 5 parents: mul(16) vgrf68+0.0:F, vgrf12:F, vgrf20:F 
	child 1, 4 parents: mul(16) vgrf58:F, vgrf68+0.0:F, vgrf20:F 
	child 0, 1 parents: mul(16) vgrf14:F, vgrf68+0.0:F, vgrf68+0.0:F 
		now available
clock   12, scheduled: linterp(16) vgrf12:F, g2:F, g7<0>:F 
	child 3, 1 parents: linterp(16) vgrf6:F, g2:F, g8<0>:F 
		now available
	child 2, 39 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 1, 4 parents: mul(16) vgrf68+0.0:F, vgrf12:F, vgrf20:F 
	child 0, 2 parents: mad(16) vgrf18:F, vgrf16:F, vgrf12:F, vgrf12:F 
clock   16, scheduled: linterp(16) vgrf40:F, g2:F, g10<0>:F 
	child 4, 3 parents: linterp(16) vgrf10:F, g2:F, g8<0>:F 
	child 3, 38 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 5 parents: mul(16) vgrf40:F, vgrf42+0.0:F, vgrf36:F 
	child 1, 2 parents: mul(16) vgrf38+0.0:F, vgrf40:F, vgrf36:F 
	child 0, 2 parents: mad(16) vgrf32:F, vgrf30:F, vgrf40:F, vgrf40:F 
clock   20, scheduled: linterp(16) vgrf42+0.0:F, g2:F, g10<0>:F 
	child 4, 2 parents: linterp(16) vgrf10:F, g2:F, g8<0>:F 
	child 3, 37 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 5 parents: mul(16) vgrf42+0.0:F, vgrf28:F, vgrf36:F 
	child 1, 4 parents: mul(16) vgrf40:F, vgrf42+0.0:F, vgrf36:F 
	child 0, 1 parents: mul(16) vgrf30:F, vgrf42+0.0:F, vgrf42+0.0:F 
		now available
clock   24, scheduled: linterp(16) vgrf28:F, g2:F, g11<0>:F 
	child 3, 1 parents: linterp(16) vgrf10:F, g2:F, g8<0>:F 
		now available
	child 2, 36 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 1, 4 parents: mul(16) vgrf42+0.0:F, vgrf28:F, vgrf36:F 
	child 0, 2 parents: mad(16) vgrf34:F, vgrf32:F, vgrf28:F, vgrf28:F 
clock   28, scheduled: linterp(16) vgrf60+0.0:F, g2:F, g9<0>:F 
	child 1, 35 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 3 parents: mad(16) vgrf123+0.0:F, vgrf56:F, vgrf66+0.0:F, vgrf60+0.0:F 
clock   32, scheduled: mov(16) vgrf125+0.0:F, 1f 
	child 0, 34 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
clock   36, scheduled: linterp(16) vgrf6:F, g2:F, g8<0>:F 
	child 1, 33 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 3 parents: mad(16) vgrf119+0.0:F, vgrf56:F, vgrf66+0.0:F, vgrf6:F 
clock   40, scheduled: mul(16) vgrf14:F, vgrf68+0.0:F, vgrf68+0.0:F 
	child 2, 3 parents: mul(16) vgrf68+0.0:F, vgrf12:F, vgrf20:F 
	child 1, 32 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mad(16) vgrf16:F, vgrf14:F, vgrf58:F, vgrf58:F 
		now available
clock   44, scheduled: linterp(16) vgrf10:F, g2:F, g8<0>:F 
	child 1, 31 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 3 parents: mad(16) vgrf121+0.0:F, vgrf56:F, vgrf66+0.0:F, vgrf10:F 
clock   48, scheduled: mul(16) vgrf30:F, vgrf42+0.0:F, vgrf42+0.0:F 
	child 2, 3 parents: mul(16) vgrf42+0.0:F, vgrf28:F, vgrf36:F 
	child 1, 30 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mad(16) vgrf32:F, vgrf30:F, vgrf40:F, vgrf40:F 
		now available
clock   58, scheduled: mad(16) vgrf16:F, vgrf14:F, vgrf58:F, vgrf58:F 
	child 2, 3 parents: mul(16) vgrf58:F, vgrf68+0.0:F, vgrf20:F 
	child 1, 29 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mad(16) vgrf18:F, vgrf16:F, vgrf12:F, vgrf12:F 
		now available
clock   66, scheduled: mad(16) vgrf32:F, vgrf30:F, vgrf40:F, vgrf40:F 
	child 2, 3 parents: mul(16) vgrf40:F, vgrf42+0.0:F, vgrf36:F 
	child 1, 28 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mad(16) vgrf34:F, vgrf32:F, vgrf28:F, vgrf28:F 
		now available
clock   80, scheduled: mad(16) vgrf18:F, vgrf16:F, vgrf12:F, vgrf12:F 
	child 1, 27 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: rsq(16) vgrf20:F, vgrf18:F 
		now available
clock   88, scheduled: mad(16) vgrf34:F, vgrf32:F, vgrf28:F, vgrf28:F 
	child 1, 26 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: rsq(16) vgrf36:F, vgrf34:F 
		now available
clock  102, scheduled: rsq(16) vgrf20:F, vgrf18:F 
	child 3, 25 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 2 parents: mul(16) vgrf68+0.0:F, vgrf12:F, vgrf20:F 
	child 1, 2 parents: mul(16) vgrf58:F, vgrf68+0.0:F, vgrf20:F 
	child 0, 1 parents: mul(16) vgrf64+0.0:F, vgrf58:F, vgrf20:F 
		now available
clock  110, scheduled: rsq(16) vgrf36:F, vgrf34:F 
	child 3, 24 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 2 parents: mul(16) vgrf42+0.0:F, vgrf28:F, vgrf36:F 
	child 1, 2 parents: mul(16) vgrf40:F, vgrf42+0.0:F, vgrf36:F 
	child 0, 1 parents: mul(16) vgrf38+0.0:F, vgrf40:F, vgrf36:F 
		now available
clock  122, scheduled: mul(16) vgrf64+0.0:F, vgrf58:F, vgrf20:F 
	child 3, 1 parents: mul(16) vgrf58:F, vgrf68+0.0:F, vgrf20:F 
		now available
	child 2, 23 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 1, 3 parents: mad(16) vgrf70+0.0:F, -vgrf38+0.0:F, vgrf64+0.0:F, vgrf50+0.0:F 
	child 0, 3 parents: mad(16) vgrf46+0.0:F, vgrf44+0.0:F, vgrf64+0.0:F, vgrf38+0.0:F 
clock  126, scheduled: mul(16) vgrf58:F, vgrf68+0.0:F, vgrf20:F 
	child 3, 1 parents: mul(16) vgrf68+0.0:F, vgrf12:F, vgrf20:F 
		now available
	child 2, 22 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 1, 3 parents: mad(16) vgrf54:F, -vgrf40:F, vgrf58:F, vgrf50+0.0:F 
	child 0, 2 parents: mul(16) vgrf44+0.0:F, vgrf40:F, vgrf58:F 
clock  130, scheduled: mul(16) vgrf68+0.0:F, vgrf12:F, vgrf20:F 
	child 2, 21 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 1, 3 parents: mad(16) vgrf72+0.0:F, -vgrf42+0.0:F, vgrf68+0.0:F, vgrf50+0.0:F 
	child 0, 3 parents: mad(16) vgrf48+0.0:F, vgrf46+0.0:F, vgrf68+0.0:F, vgrf42+0.0:F 
clock  134, scheduled: mul(16) vgrf38+0.0:F, vgrf40:F, vgrf36:F 
	child 4, 1 parents: mul(16) vgrf40:F, vgrf42+0.0:F, vgrf36:F 
		now available
	child 3, 20 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 3 parents: mad(16) vgrf22:F, vgrf62+0.0:F, vgrf38+0.0:F, vgrf70+0.0:F 
	child 1, 2 parents: mad(16) vgrf70+0.0:F, -vgrf38+0.0:F, vgrf64+0.0:F, vgrf50+0.0:F 
	child 0, 2 parents: mad(16) vgrf46+0.0:F, vgrf44+0.0:F, vgrf64+0.0:F, vgrf38+0.0:F 
clock  138, scheduled: mul(16) vgrf40:F, vgrf42+0.0:F, vgrf36:F 
	child 4, 1 parents: mul(16) vgrf42+0.0:F, vgrf28:F, vgrf36:F 
		now available
	child 3, 19 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 2 parents: mul(16) vgrf62+0.0:F, vgrf54:F, vgrf40:F 
	child 1, 2 parents: mad(16) vgrf54:F, -vgrf40:F, vgrf58:F, vgrf50+0.0:F 
	child 0, 1 parents: mul(16) vgrf44+0.0:F, vgrf40:F, vgrf58:F 
		now available
clock  142, scheduled: mul(16) vgrf42+0.0:F, vgrf28:F, vgrf36:F 
	child 3, 18 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 3 parents: mad(16) vgrf24:F, vgrf22:F, vgrf42+0.0:F, vgrf72+0.0:F 
	child 1, 2 parents: mad(16) vgrf72+0.0:F, -vgrf42+0.0:F, vgrf68+0.0:F, vgrf50+0.0:F 
	child 0, 2 parents: mad(16) vgrf48+0.0:F, vgrf46+0.0:F, vgrf68+0.0:F, vgrf42+0.0:F 
clock  156, scheduled: mul(16) vgrf44+0.0:F, vgrf40:F, vgrf58:F 
	child 1, 17 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mad(16) vgrf46+0.0:F, vgrf44+0.0:F, vgrf64+0.0:F, vgrf38+0.0:F 
		now available
clock  174, scheduled: mad(16) vgrf46+0.0:F, vgrf44+0.0:F, vgrf64+0.0:F, vgrf38+0.0:F 
	child 1, 16 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mad(16) vgrf48+0.0:F, vgrf46+0.0:F, vgrf68+0.0:F, vgrf42+0.0:F 
		now available
clock  196, scheduled: mad(16) vgrf48+0.0:F, vgrf46+0.0:F, vgrf68+0.0:F, vgrf42+0.0:F 
	child 2, 15 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 1, 1 parents: sel.ge(16) vgrf66+0.0:F, vgrf48+0.0:F, 0f 
		now available
	child 0, 1 parents: mul(16) vgrf50+0.0:F, vgrf48+0.0:F, 2f 
		now available
clock  218, scheduled: mul(16) vgrf50+0.0:F, vgrf48+0.0:F, 2f 
	child 3, 14 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 1 parents: mad(16) vgrf72+0.0:F, -vgrf42+0.0:F, vgrf68+0.0:F, vgrf50+0.0:F 
		now available
	child 1, 1 parents: mad(16) vgrf54:F, -vgrf40:F, vgrf58:F, vgrf50+0.0:F 
		now available
	child 0, 1 parents: mad(16) vgrf70+0.0:F, -vgrf38+0.0:F, vgrf64+0.0:F, vgrf50+0.0:F 
		now available
clock  222, scheduled: sel.ge(16) vgrf66+0.0:F, vgrf48+0.0:F, 0f 
	child 3, 13 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 2 parents: mad(16) vgrf123+0.0:F, vgrf56:F, vgrf66+0.0:F, vgrf60+0.0:F 
	child 1, 2 parents: mad(16) vgrf121+0.0:F, vgrf56:F, vgrf66+0.0:F, vgrf10:F 
	child 0, 2 parents: mad(16) vgrf119+0.0:F, vgrf56:F, vgrf66+0.0:F, vgrf6:F 
clock  236, scheduled: mad(16) vgrf70+0.0:F, -vgrf38+0.0:F, vgrf64+0.0:F, vgrf50+0.0:F 
	child 1, 12 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 2 parents: mad(16) vgrf22:F, vgrf62+0.0:F, vgrf38+0.0:F, vgrf70+0.0:F 
clock  242, scheduled: mad(16) vgrf54:F, -vgrf40:F, vgrf58:F, vgrf50+0.0:F 
	child 1, 11 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mul(16) vgrf62+0.0:F, vgrf54:F, vgrf40:F 
		now available
clock  246, scheduled: mad(16) vgrf72+0.0:F, -vgrf42+0.0:F, vgrf68+0.0:F, vgrf50+0.0:F 
	child 1, 10 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 2 parents: mad(16) vgrf24:F, vgrf22:F, vgrf42+0.0:F, vgrf72+0.0:F 
clock  264, scheduled: mul(16) vgrf62+0.0:F, vgrf54:F, vgrf40:F 
	child 1, 9 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mad(16) vgrf22:F, vgrf62+0.0:F, vgrf38+0.0:F, vgrf70+0.0:F 
		now available
clock  282, scheduled: mad(16) vgrf22:F, vgrf62+0.0:F, vgrf38+0.0:F, vgrf70+0.0:F 
	child 1, 8 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mad(16) vgrf24:F, vgrf22:F, vgrf42+0.0:F, vgrf72+0.0:F 
		now available
clock  304, scheduled: mad(16) vgrf24:F, vgrf22:F, vgrf42+0.0:F, vgrf72+0.0:F 
	child 1, 7 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: sel.ge(16) vgrf26:F, vgrf24:F, 0f 
		now available
clock  326, scheduled: sel.ge(16) vgrf26:F, vgrf24:F, 0f 
	child 1, 6 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: pow(16) vgrf52:F, vgrf26:F, 8f 
		now available
clock  344, scheduled: pow(16) vgrf52:F, vgrf26:F, 8f 
	child 1, 5 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mul(16) vgrf56:F, vgrf52:F, 0.75f 
		now available
clock  372, scheduled: mul(16) vgrf56:F, vgrf52:F, 0.75f 
	child 3, 4 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 1 parents: mad(16) vgrf123+0.0:F, vgrf56:F, vgrf66+0.0:F, vgrf60+0.0:F 
		now available
	child 1, 1 parents: mad(16) vgrf121+0.0:F, vgrf56:F, vgrf66+0.0:F, vgrf10:F 
		now available
	child 0, 1 parents: mad(16) vgrf119+0.0:F, vgrf56:F, vgrf66+0.0:F, vgrf6:F 
		now available
clock  390, scheduled: mad(16) vgrf119+0.0:F, vgrf56:F, vgrf66+0.0:F, vgrf6:F 
	child 0, 3 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
clock  394, scheduled: mad(16) vgrf121+0.0:F, vgrf56:F, vgrf66+0.0:F, vgrf10:F 
	child 0, 2 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
clock  398, scheduled: mad(16) vgrf123+0.0:F, vgrf56:F, vgrf66+0.0:F, vgrf60+0.0:F 
	child 0, 1 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
		now available
clock  420, scheduled: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 

Instructions before scheduling (reg_alloc 0)
{  2}    0: linterp(16) vgrf80:F, g3:F, g11<0>:F group0 
{  4}    1: linterp(16) vgrf32:F, g7:F, g11<0>:F group16 
{  6}    2: linterp(16) vgrf81:F, g3:F, g11<0>:F group0 
{  8}    3: linterp(16) vgrf33:F, g7:F, g11<0>:F group16 
{ 10}    4: linterp(16) vgrf40:F, g3:F, g12<0>:F group0 
{ 12}    5: linterp(16) vgrf0:F, g7:F, g12<0>:F group16 
{ 14}    6: mul(16) vgrf41:F, vgrf81:F, vgrf81:F group0 
{ 16}    7: mul(16) vgrf1:F, vgrf33:F, vgrf33:F group16 
{ 18}    8: mad(16) vgrf42:F, vgrf41:F, vgrf80:F, vgrf80:F group0 
{ 18}    9: mad(16) vgrf2:F, vgrf1:F, vgrf32:F, vgrf32:F group16 
{ 18}   10: mad(16) vgrf43:F, vgrf42:F, vgrf40:F, vgrf40:F group0 
{ 18}   11: mad(16) vgrf3:F, vgrf2:F, vgrf0:F, vgrf0:F group16 
{ 18}   12: rsq(16) vgrf44:F, vgrf43:F group0 
{ 18}   13: rsq(16) vgrf4:F, vgrf3:F group16 
{ 18}   14: mul(16) vgrf45:F, vgrf80:F, vgrf44:F group0 
{ 18}   15: mul(16) vgrf5:F, vgrf32:F, vgrf4:F group16 
{ 18}   16: mul(16) vgrf46:F, vgrf81:F, vgrf44:F group0 
{ 18}   17: mul(16) vgrf6:F, vgrf33:F, vgrf4:F group16 
{ 18}   18: mul(16) vgrf47:F, vgrf40:F, vgrf44:F group0 
{ 16}   19: mul(16) vgrf7:F, vgrf0:F, vgrf4:F group16 
{ 14}   20: linterp(16) vgrf82:F, g3:F, g15<0>:F group0 
{ 16}   21: linterp(16) vgrf34:F, g7:F, g15<0>:F group16 
{ 18}   22: linterp(16) vgrf83:F, g3:F, g15<0>:F group0 
{ 20}   23: linterp(16) vgrf35:F, g7:F, g15<0>:F group16 
{ 22}   24: linterp(16) vgrf48:F, g3:F, g16<0>:F group0 
{ 24}   25: linterp(16) vgrf8:F, g7:F, g16<0>:F group16 
{ 26}   26: mul(16) vgrf49:F, vgrf83:F, vgrf83:F group0 
{ 28}   27: mul(16) vgrf9:F, vgrf35:F, vgrf35:F group16 
{ 30}   28: mad(16) vgrf50:F, vgrf49:F, vgrf82:F, vgrf82:F group0 
{ 30}   29: mad(16) vgrf10:F, vgrf9:F, vgrf34:F, vgrf34:F group16 
{ 30}   30: mad(16) vgrf51:F, vgrf50:F, vgrf48:F, vgrf48:F group0 
{ 30}   31: mad(16) vgrf11:F, vgrf10:F, vgrf8:F, vgrf8:F group16 
{ 30}   32: rsq(16) vgrf52:F, vgrf51:F group0 
{ 30}   33: rsq(16) vgrf12:F, vgrf11:F group16 
{ 30}   34: mul(16) vgrf53:F, vgrf82:F, vgrf52:F group0 
{ 30}   35: mul(16) vgrf13:F, vgrf34:F, vgrf12:F group16 
{ 30}   36: mul(16) vgrf54:F, vgrf83:F, vgrf52:F group0 
{ 30}   37: mul(16) vgrf14:F, vgrf35:F, vgrf12:F group16 
{ 30}   38: mul(16) vgrf55:F, vgrf48:F, vgrf52:F group0 
{ 28}   39: mul(16) vgrf15:F, vgrf8:F, vgrf12:F group16 
{ 26}   40: mul(16) vgrf56:F, vgrf54:F, vgrf46:F group0 
{ 28}   41: mul(16) vgrf16:F, vgrf14:F, vgrf6:F group16 
{ 30}   42: mad(16) vgrf57:F, vgrf56:F, vgrf45:F, vgrf53:F group0 
{ 30}   43: mad(16) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F group16 
{ 30}   44: mad(16) vgrf58:F, vgrf57:F, vgrf47:F, vgrf55:F group0 
{ 30}   45: mad(16) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F group16 
{ 30}   46: mul(16) vgrf59:F, vgrf58:F, 2f group0 
{ 32}   47: mul(16) vgrf19:F, vgrf18:F, 2f group16 
{ 34}   48: mad(16) vgrf60:F, -vgrf53:F, vgrf45:F, vgrf59:F group0 
{ 34}   49: mad(16) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F group16 
{ 34}   50: mad(16) vgrf61:F, -vgrf54:F, vgrf46:F, vgrf59:F group0 
{ 34}   51: mad(16) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F group16 
{ 34}   52: mad(16) vgrf62:F, -vgrf55:F, vgrf47:F, vgrf59:F group0 
{ 32}   53: mad(16) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F group16 
{ 30}   54: sel.ge(16) vgrf63:F, vgrf58:F, 0f group0 
{ 30}   55: sel.ge(16) vgrf23:F, vgrf18:F, 0f group16 
{ 30}   56: linterp(16) vgrf84:F, g3:F, g13<0>:F group0 
{ 32}   57: linterp(16) vgrf36:F, g7:F, g13<0>:F group16 
{ 34}   58: linterp(16) vgrf85:F, g3:F, g13<0>:F group0 
{ 36}   59: linterp(16) vgrf37:F, g7:F, g13<0>:F group16 
{ 38}   60: linterp(16) vgrf64:F, g3:F, g14<0>:F group0 
{ 40}   61: linterp(16) vgrf24:F, g7:F, g14<0>:F group16 
{ 42}   62: mul(16) vgrf65:F, vgrf61:F, vgrf54:F group0 
{ 40}   63: mul(16) vgrf25:F, vgrf21:F, vgrf14:F group16 
{ 38}   64: mad(16) vgrf66:F, vgrf65:F, vgrf53:F, vgrf60:F group0 
{ 34}   65: mad(16) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F group16 
{ 30}   66: mad(16) vgrf67:F, vgrf66:F, vgrf55:F, vgrf62:F group0 
{ 26}   67: mad(16) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F group16 
{ 22}   68: sel.ge(16) vgrf68:F, vgrf67:F, 0f group0 
{ 22}   69: sel.ge(16) vgrf28:F, vgrf27:F, 0f group16 
{ 22}   70: pow(16) vgrf69:F, vgrf68:F, 8f group0 
{ 22}   71: pow(16) vgrf29:F, vgrf28:F, 8f group16 
{ 22}   72: mul(16) vgrf70:F, vgrf69:F, 0.75f group0 
{ 22}   73: mul(16) vgrf30:F, vgrf29:F, 0.75f group16 
{ 28}   74: mad(16) vgrf38+0.0:F, vgrf70:F, vgrf63:F, vgrf84:F group0 
{ 34}   75: mad(16) vgrf39+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F group16 
{ 32}   76: mad(16) vgrf38+2.0:F, vgrf70:F, vgrf63:F, vgrf85:F group0 
{ 30}   77: mad(16) vgrf39+2.0:F, vgrf30:F, vgrf23:F, vgrf37:F group16 
{ 28}   78: mad(16) vgrf38+4.0:F, vgrf70:F, vgrf63:F, vgrf64:F group0 
{ 22}   79: mad(16) vgrf39+4.0:F, vgrf30:F, vgrf23:F, vgrf24:F group16 
{ 16}   80: mov(16) vgrf38+6.0:F, 1f group0 
{ 16}   81: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
{  8}   82: mov(16) vgrf39+6.0:F, 1f group16 
{  8}   83: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf39:F group16 
Maximum  42 registers live at once.
clock    4, scheduled: linterp(16) vgrf80:F, g3:F, g11<0>:F group0 
(register pressure 18)
	child 2, 81 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 2 parents: mul(16) vgrf45:F, vgrf80:F, vgrf44:F group0 
	child 0, 2 parents: mad(16) vgrf42:F, vgrf41:F, vgrf80:F, vgrf80:F group0 
clock    8, scheduled: linterp(16) vgrf32:F, g7:F, g11<0>:F group16 
(register pressure 20)
	child 2, 80 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 2 parents: mul(16) vgrf5:F, vgrf32:F, vgrf4:F group16 
	child 0, 2 parents: mad(16) vgrf2:F, vgrf1:F, vgrf32:F, vgrf32:F group16 
clock   12, scheduled: linterp(16) vgrf81:F, g3:F, g11<0>:F group0 
(register pressure 22)
	child 2, 79 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 2 parents: mul(16) vgrf46:F, vgrf81:F, vgrf44:F group0 
	child 0, 1 parents: mul(16) vgrf41:F, vgrf81:F, vgrf81:F group0 
		now available
clock   16, scheduled: linterp(16) vgrf33:F, g7:F, g11<0>:F group16 
(register pressure 23)
	child 2, 78 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 2 parents: mul(16) vgrf6:F, vgrf33:F, vgrf4:F group16 
	child 0, 1 parents: mul(16) vgrf1:F, vgrf33:F, vgrf33:F group16 
		now available
clock   20, scheduled: linterp(16) vgrf40:F, g3:F, g12<0>:F group0 
(register pressure 25)
	child 2, 77 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 2 parents: mul(16) vgrf47:F, vgrf40:F, vgrf44:F group0 
	child 0, 2 parents: mad(16) vgrf43:F, vgrf42:F, vgrf40:F, vgrf40:F group0 
clock   24, scheduled: linterp(16) vgrf0:F, g7:F, g12<0>:F group16 
(register pressure 26)
	child 2, 76 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 2 parents: mul(16) vgrf7:F, vgrf0:F, vgrf4:F group16 
	child 0, 2 parents: mad(16) vgrf3:F, vgrf2:F, vgrf0:F, vgrf0:F group16 
clock   28, scheduled: linterp(16) vgrf82:F, g3:F, g15<0>:F group0 
(register pressure 28)
	child 2, 75 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 2 parents: mul(16) vgrf53:F, vgrf82:F, vgrf52:F group0 
	child 0, 2 parents: mad(16) vgrf50:F, vgrf49:F, vgrf82:F, vgrf82:F group0 
clock   32, scheduled: linterp(16) vgrf34:F, g7:F, g15<0>:F group16 
(register pressure 30)
	child 2, 74 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 2 parents: mul(16) vgrf13:F, vgrf34:F, vgrf12:F group16 
	child 0, 2 parents: mad(16) vgrf10:F, vgrf9:F, vgrf34:F, vgrf34:F group16 
clock   36, scheduled: linterp(16) vgrf83:F, g3:F, g15<0>:F group0 
(register pressure 32)
	child 2, 73 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 2 parents: mul(16) vgrf54:F, vgrf83:F, vgrf52:F group0 
	child 0, 1 parents: mul(16) vgrf49:F, vgrf83:F, vgrf83:F group0 
		now available
clock   40, scheduled: linterp(16) vgrf35:F, g7:F, g15<0>:F group16 
(register pressure 33)
	child 2, 72 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 2 parents: mul(16) vgrf14:F, vgrf35:F, vgrf12:F group16 
	child 0, 1 parents: mul(16) vgrf9:F, vgrf35:F, vgrf35:F group16 
		now available
clock   44, scheduled: linterp(16) vgrf48:F, g3:F, g16<0>:F group0 
(register pressure 35)
	child 2, 71 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 2 parents: mul(16) vgrf55:F, vgrf48:F, vgrf52:F group0 
	child 0, 2 parents: mad(16) vgrf51:F, vgrf50:F, vgrf48:F, vgrf48:F group0 
clock   48, scheduled: linterp(16) vgrf8:F, g7:F, g16<0>:F group16 
(register pressure 36)
	child 2, 70 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 2 parents: mul(16) vgrf15:F, vgrf8:F, vgrf12:F group16 
	child 0, 2 parents: mad(16) vgrf11:F, vgrf10:F, vgrf8:F, vgrf8:F group16 
clock   52, scheduled: linterp(16) vgrf84:F, g3:F, g13<0>:F group0 
(register pressure 38)
	child 1, 69 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 3 parents: mad(16) vgrf38+0.0:F, vgrf70:F, vgrf63:F, vgrf84:F group0 
clock   56, scheduled: linterp(16) vgrf36:F, g7:F, g13<0>:F group16 
(register pressure 40)
	child 1, 68 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 3 parents: mad(16) vgrf39+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F group16 
clock   60, scheduled: linterp(16) vgrf85:F, g3:F, g13<0>:F group0 
(register pressure 42)
	child 1, 67 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 3 parents: mad(16) vgrf38+2.0:F, vgrf70:F, vgrf63:F, vgrf85:F group0 
clock   64, scheduled: linterp(16) vgrf37:F, g7:F, g13<0>:F group16 
(register pressure 43)
	child 1, 66 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 3 parents: mad(16) vgrf39+2.0:F, vgrf30:F, vgrf23:F, vgrf37:F group16 
clock   68, scheduled: linterp(16) vgrf64:F, g3:F, g14<0>:F group0 
(register pressure 41)
	child 1, 65 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 3 parents: mad(16) vgrf38+4.0:F, vgrf70:F, vgrf63:F, vgrf64:F group0 
clock   72, scheduled: linterp(16) vgrf24:F, g7:F, g14<0>:F group16 
(register pressure 38)
	child 1, 64 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 3 parents: mad(16) vgrf39+4.0:F, vgrf30:F, vgrf23:F, vgrf24:F group16 
clock   76, scheduled: mov(16) vgrf38+6.0:F, 1f group0 
(register pressure 46)
	child 0, 63 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
clock   80, scheduled: mul(16) vgrf41:F, vgrf81:F, vgrf81:F group0 
(register pressure 48)
	child 1, 62 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mad(16) vgrf42:F, vgrf41:F, vgrf80:F, vgrf80:F group0 
		now available
clock   84, scheduled: mul(16) vgrf1:F, vgrf33:F, vgrf33:F group16 
(register pressure 50)
	child 1, 61 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mad(16) vgrf2:F, vgrf1:F, vgrf32:F, vgrf32:F group16 
		now available
clock   88, scheduled: mul(16) vgrf49:F, vgrf83:F, vgrf83:F group0 
(register pressure 52)
	child 1, 60 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mad(16) vgrf50:F, vgrf49:F, vgrf82:F, vgrf82:F group0 
		now available
clock   92, scheduled: mul(16) vgrf9:F, vgrf35:F, vgrf35:F group16 
(register pressure 54)
	child 1, 59 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mad(16) vgrf10:F, vgrf9:F, vgrf34:F, vgrf34:F group16 
		now available
clock   96, scheduled: mad(16) vgrf42:F, vgrf41:F, vgrf80:F, vgrf80:F group0 
(register pressure 54)
	child 1, 58 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mad(16) vgrf43:F, vgrf42:F, vgrf40:F, vgrf40:F group0 
		now available
clock  100, scheduled: mad(16) vgrf2:F, vgrf1:F, vgrf32:F, vgrf32:F group16 
(register pressure 54)
	child 1, 57 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mad(16) vgrf3:F, vgrf2:F, vgrf0:F, vgrf0:F group16 
		now available
clock  104, scheduled: mad(16) vgrf50:F, vgrf49:F, vgrf82:F, vgrf82:F group0 
(register pressure 54)
	child 1, 56 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mad(16) vgrf51:F, vgrf50:F, vgrf48:F, vgrf48:F group0 
		now available
clock  108, scheduled: mad(16) vgrf10:F, vgrf9:F, vgrf34:F, vgrf34:F group16 
(register pressure 54)
	child 1, 55 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mad(16) vgrf11:F, vgrf10:F, vgrf8:F, vgrf8:F group16 
		now available
clock  112, scheduled: mad(16) vgrf43:F, vgrf42:F, vgrf40:F, vgrf40:F group0 
(register pressure 54)
	child 1, 54 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: rsq(16) vgrf44:F, vgrf43:F group0 
		now available
clock  116, scheduled: mad(16) vgrf3:F, vgrf2:F, vgrf0:F, vgrf0:F group16 
(register pressure 54)
	child 1, 53 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: rsq(16) vgrf4:F, vgrf3:F group16 
		now available
clock  120, scheduled: mad(16) vgrf51:F, vgrf50:F, vgrf48:F, vgrf48:F group0 
(register pressure 54)
	child 1, 52 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: rsq(16) vgrf52:F, vgrf51:F group0 
		now available
clock  124, scheduled: mad(16) vgrf11:F, vgrf10:F, vgrf8:F, vgrf8:F group16 
(register pressure 54)
	child 1, 51 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: rsq(16) vgrf12:F, vgrf11:F group16 
		now available
clock  128, scheduled: rsq(16) vgrf44:F, vgrf43:F group0 
(register pressure 54)
	child 3, 50 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 2, 1 parents: mul(16) vgrf47:F, vgrf40:F, vgrf44:F group0 
		now available
	child 1, 1 parents: mul(16) vgrf46:F, vgrf81:F, vgrf44:F group0 
		now available
	child 0, 1 parents: mul(16) vgrf45:F, vgrf80:F, vgrf44:F group0 
		now available
clock  132, scheduled: rsq(16) vgrf4:F, vgrf3:F group16 
(register pressure 54)
	child 3, 49 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 2, 1 parents: mul(16) vgrf7:F, vgrf0:F, vgrf4:F group16 
		now available
	child 1, 1 parents: mul(16) vgrf6:F, vgrf33:F, vgrf4:F group16 
		now available
	child 0, 1 parents: mul(16) vgrf5:F, vgrf32:F, vgrf4:F group16 
		now available
clock  136, scheduled: rsq(16) vgrf52:F, vgrf51:F group0 
(register pressure 54)
	child 3, 48 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 2, 1 parents: mul(16) vgrf55:F, vgrf48:F, vgrf52:F group0 
		now available
	child 1, 1 parents: mul(16) vgrf54:F, vgrf83:F, vgrf52:F group0 
		now available
	child 0, 1 parents: mul(16) vgrf53:F, vgrf82:F, vgrf52:F group0 
		now available
clock  140, scheduled: rsq(16) vgrf12:F, vgrf11:F group16 
(register pressure 54)
	child 3, 47 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 2, 1 parents: mul(16) vgrf15:F, vgrf8:F, vgrf12:F group16 
		now available
	child 1, 1 parents: mul(16) vgrf14:F, vgrf35:F, vgrf12:F group16 
		now available
	child 0, 1 parents: mul(16) vgrf13:F, vgrf34:F, vgrf12:F group16 
		now available
clock  144, scheduled: mul(16) vgrf45:F, vgrf80:F, vgrf44:F group0 
(register pressure 54)
	child 2, 46 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 3 parents: mad(16) vgrf60:F, -vgrf53:F, vgrf45:F, vgrf59:F group0 
	child 0, 3 parents: mad(16) vgrf57:F, vgrf56:F, vgrf45:F, vgrf53:F group0 
clock  148, scheduled: mul(16) vgrf46:F, vgrf81:F, vgrf44:F group0 
(register pressure 54)
	child 2, 45 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 3 parents: mad(16) vgrf61:F, -vgrf54:F, vgrf46:F, vgrf59:F group0 
	child 0, 2 parents: mul(16) vgrf56:F, vgrf54:F, vgrf46:F group0 
clock  152, scheduled: mul(16) vgrf47:F, vgrf40:F, vgrf44:F group0 
(register pressure 52)
	child 2, 44 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 3 parents: mad(16) vgrf62:F, -vgrf55:F, vgrf47:F, vgrf59:F group0 
	child 0, 3 parents: mad(16) vgrf58:F, vgrf57:F, vgrf47:F, vgrf55:F group0 
clock  156, scheduled: mul(16) vgrf5:F, vgrf32:F, vgrf4:F group16 
(register pressure 52)
	child 2, 43 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 3 parents: mad(16) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F group16 
	child 0, 3 parents: mad(16) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F group16 
clock  160, scheduled: mul(16) vgrf6:F, vgrf33:F, vgrf4:F group16 
(register pressure 52)
	child 2, 42 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 3 parents: mad(16) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F group16 
	child 0, 2 parents: mul(16) vgrf16:F, vgrf14:F, vgrf6:F group16 
clock  164, scheduled: mul(16) vgrf7:F, vgrf0:F, vgrf4:F group16 
(register pressure 50)
	child 2, 41 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 3 parents: mad(16) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F group16 
	child 0, 3 parents: mad(16) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F group16 
clock  168, scheduled: mul(16) vgrf53:F, vgrf82:F, vgrf52:F group0 
(register pressure 50)
	child 3, 40 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 2, 3 parents: mad(16) vgrf66:F, vgrf65:F, vgrf53:F, vgrf60:F group0 
	child 1, 2 parents: mad(16) vgrf60:F, -vgrf53:F, vgrf45:F, vgrf59:F group0 
	child 0, 2 parents: mad(16) vgrf57:F, vgrf56:F, vgrf45:F, vgrf53:F group0 
clock  172, scheduled: mul(16) vgrf54:F, vgrf83:F, vgrf52:F group0 
(register pressure 50)
	child 3, 39 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 2, 2 parents: mul(16) vgrf65:F, vgrf61:F, vgrf54:F group0 
	child 1, 2 parents: mad(16) vgrf61:F, -vgrf54:F, vgrf46:F, vgrf59:F group0 
	child 0, 1 parents: mul(16) vgrf56:F, vgrf54:F, vgrf46:F group0 
		now available
clock  176, scheduled: mul(16) vgrf55:F, vgrf48:F, vgrf52:F group0 
(register pressure 48)
	child 3, 38 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 2, 3 parents: mad(16) vgrf67:F, vgrf66:F, vgrf55:F, vgrf62:F group0 
	child 1, 2 parents: mad(16) vgrf62:F, -vgrf55:F, vgrf47:F, vgrf59:F group0 
	child 0, 2 parents: mad(16) vgrf58:F, vgrf57:F, vgrf47:F, vgrf55:F group0 
clock  180, scheduled: mul(16) vgrf13:F, vgrf34:F, vgrf12:F group16 
(register pressure 48)
	child 3, 37 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 2, 3 parents: mad(16) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F group16 
	child 1, 2 parents: mad(16) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F group16 
	child 0, 2 parents: mad(16) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F group16 
clock  184, scheduled: mul(16) vgrf14:F, vgrf35:F, vgrf12:F group16 
(register pressure 48)
	child 3, 36 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 2, 2 parents: mul(16) vgrf25:F, vgrf21:F, vgrf14:F group16 
	child 1, 2 parents: mad(16) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F group16 
	child 0, 1 parents: mul(16) vgrf16:F, vgrf14:F, vgrf6:F group16 
		now available
clock  188, scheduled: mul(16) vgrf15:F, vgrf8:F, vgrf12:F group16 
(register pressure 46)
	child 3, 35 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 2, 3 parents: mad(16) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F group16 
	child 1, 2 parents: mad(16) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F group16 
	child 0, 2 parents: mad(16) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F group16 
clock  192, scheduled: mul(16) vgrf56:F, vgrf54:F, vgrf46:F group0 
(register pressure 48)
	child 1, 34 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mad(16) vgrf57:F, vgrf56:F, vgrf45:F, vgrf53:F group0 
		now available
clock  196, scheduled: mul(16) vgrf16:F, vgrf14:F, vgrf6:F group16 
(register pressure 50)
	child 1, 33 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mad(16) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F group16 
		now available
clock  200, scheduled: mad(16) vgrf57:F, vgrf56:F, vgrf45:F, vgrf53:F group0 
(register pressure 50)
	child 1, 32 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mad(16) vgrf58:F, vgrf57:F, vgrf47:F, vgrf55:F group0 
		now available
clock  204, scheduled: mad(16) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F group16 
(register pressure 50)
	child 1, 31 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mad(16) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F group16 
		now available
clock  208, scheduled: mad(16) vgrf58:F, vgrf57:F, vgrf47:F, vgrf55:F group0 
(register pressure 50)
	child 2, 30 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 1 parents: sel.ge(16) vgrf63:F, vgrf58:F, 0f group0 
		now available
	child 0, 1 parents: mul(16) vgrf59:F, vgrf58:F, 2f group0 
		now available
clock  212, scheduled: mad(16) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F group16 
(register pressure 50)
	child 2, 29 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 1, 1 parents: sel.ge(16) vgrf23:F, vgrf18:F, 0f group16 
		now available
	child 0, 1 parents: mul(16) vgrf19:F, vgrf18:F, 2f group16 
		now available
clock  216, scheduled: mul(16) vgrf59:F, vgrf58:F, 2f group0 
(register pressure 52)
	child 3, 28 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 2, 1 parents: mad(16) vgrf62:F, -vgrf55:F, vgrf47:F, vgrf59:F group0 
		now available
	child 1, 1 parents: mad(16) vgrf61:F, -vgrf54:F, vgrf46:F, vgrf59:F group0 
		now available
	child 0, 1 parents: mad(16) vgrf60:F, -vgrf53:F, vgrf45:F, vgrf59:F group0 
		now available
clock  220, scheduled: sel.ge(16) vgrf63:F, vgrf58:F, 0f group0 
(register pressure 52)
	child 3, 27 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 2, 2 parents: mad(16) vgrf38+4.0:F, vgrf70:F, vgrf63:F, vgrf64:F group0 
	child 1, 2 parents: mad(16) vgrf38+2.0:F, vgrf70:F, vgrf63:F, vgrf85:F group0 
	child 0, 2 parents: mad(16) vgrf38+0.0:F, vgrf70:F, vgrf63:F, vgrf84:F group0 
clock  224, scheduled: mul(16) vgrf19:F, vgrf18:F, 2f group16 
(register pressure 54)
	child 3, 26 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 2, 1 parents: mad(16) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F group16 
		now available
	child 1, 1 parents: mad(16) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F group16 
		now available
	child 0, 1 parents: mad(16) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F group16 
		now available
clock  228, scheduled: sel.ge(16) vgrf23:F, vgrf18:F, 0f group16 
(register pressure 54)
	child 3, 25 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 2, 2 parents: mad(16) vgrf39+4.0:F, vgrf30:F, vgrf23:F, vgrf24:F group16 
	child 1, 2 parents: mad(16) vgrf39+2.0:F, vgrf30:F, vgrf23:F, vgrf37:F group16 
	child 0, 2 parents: mad(16) vgrf39+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F group16 
clock  232, scheduled: mad(16) vgrf60:F, -vgrf53:F, vgrf45:F, vgrf59:F group0 
(register pressure 54)
	child 1, 24 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 2 parents: mad(16) vgrf66:F, vgrf65:F, vgrf53:F, vgrf60:F group0 
clock  236, scheduled: mad(16) vgrf61:F, -vgrf54:F, vgrf46:F, vgrf59:F group0 
(register pressure 54)
	child 1, 23 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mul(16) vgrf65:F, vgrf61:F, vgrf54:F group0 
		now available
clock  240, scheduled: mad(16) vgrf62:F, -vgrf55:F, vgrf47:F, vgrf59:F group0 
(register pressure 52)
	child 1, 22 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 2 parents: mad(16) vgrf67:F, vgrf66:F, vgrf55:F, vgrf62:F group0 
clock  244, scheduled: mad(16) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F group16 
(register pressure 52)
	child 1, 21 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 2 parents: mad(16) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F group16 
clock  248, scheduled: mad(16) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F group16 
(register pressure 52)
	child 1, 20 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mul(16) vgrf25:F, vgrf21:F, vgrf14:F group16 
		now available
clock  252, scheduled: mad(16) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F group16 
(register pressure 50)
	child 1, 19 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 2 parents: mad(16) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F group16 
clock  256, scheduled: mul(16) vgrf65:F, vgrf61:F, vgrf54:F group0 
(register pressure 48)
	child 1, 18 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mad(16) vgrf66:F, vgrf65:F, vgrf53:F, vgrf60:F group0 
		now available
clock  260, scheduled: mul(16) vgrf25:F, vgrf21:F, vgrf14:F group16 
(register pressure 46)
	child 1, 17 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mad(16) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F group16 
		now available
clock  264, scheduled: mad(16) vgrf66:F, vgrf65:F, vgrf53:F, vgrf60:F group0 
(register pressure 42)
	child 1, 16 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mad(16) vgrf67:F, vgrf66:F, vgrf55:F, vgrf62:F group0 
		now available
clock  268, scheduled: mad(16) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F group16 
(register pressure 38)
	child 1, 15 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mad(16) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F group16 
		now available
clock  272, scheduled: mad(16) vgrf67:F, vgrf66:F, vgrf55:F, vgrf62:F group0 
(register pressure 34)
	child 1, 14 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: sel.ge(16) vgrf68:F, vgrf67:F, 0f group0 
		now available
clock  276, scheduled: mad(16) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F group16 
(register pressure 30)
	child 1, 13 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: sel.ge(16) vgrf28:F, vgrf27:F, 0f group16 
		now available
clock  280, scheduled: sel.ge(16) vgrf68:F, vgrf67:F, 0f group0 
(register pressure 30)
	child 1, 12 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: pow(16) vgrf69:F, vgrf68:F, 8f group0 
		now available
clock  284, scheduled: sel.ge(16) vgrf28:F, vgrf27:F, 0f group16 
(register pressure 30)
	child 1, 11 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: pow(16) vgrf29:F, vgrf28:F, 8f group16 
		now available
clock  288, scheduled: pow(16) vgrf69:F, vgrf68:F, 8f group0 
(register pressure 30)
	child 1, 10 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mul(16) vgrf70:F, vgrf69:F, 0.75f group0 
		now available
clock  292, scheduled: pow(16) vgrf29:F, vgrf28:F, 8f group16 
(register pressure 30)
	child 1, 9 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 0, 1 parents: mul(16) vgrf30:F, vgrf29:F, 0.75f group16 
		now available
clock  296, scheduled: mul(16) vgrf70:F, vgrf69:F, 0.75f group0 
(register pressure 30)
	child 3, 8 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 2, 1 parents: mad(16) vgrf38+4.0:F, vgrf70:F, vgrf63:F, vgrf64:F group0 
		now available
	child 1, 1 parents: mad(16) vgrf38+2.0:F, vgrf70:F, vgrf63:F, vgrf85:F group0 
		now available
	child 0, 1 parents: mad(16) vgrf38+0.0:F, vgrf70:F, vgrf63:F, vgrf84:F group0 
		now available
clock  300, scheduled: mul(16) vgrf30:F, vgrf29:F, 0.75f group16 
(register pressure 30)
	child 3, 7 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
	child 2, 1 parents: mad(16) vgrf39+4.0:F, vgrf30:F, vgrf23:F, vgrf24:F group16 
		now available
	child 1, 1 parents: mad(16) vgrf39+2.0:F, vgrf30:F, vgrf23:F, vgrf37:F group16 
		now available
	child 0, 1 parents: mad(16) vgrf39+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F group16 
		now available
clock  304, scheduled: mad(16) vgrf38+0.0:F, vgrf70:F, vgrf63:F, vgrf84:F group0 
(register pressure 28)
	child 0, 6 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
clock  308, scheduled: mad(16) vgrf38+2.0:F, vgrf70:F, vgrf63:F, vgrf85:F group0 
(register pressure 26)
	child 0, 5 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
clock  312, scheduled: mad(16) vgrf38+4.0:F, vgrf70:F, vgrf63:F, vgrf64:F group0 
(register pressure 20)
	child 0, 4 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
clock  316, scheduled: mad(16) vgrf39+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F group16 
(register pressure 26)
	child 1, 5 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf39:F group16 
	child 0, 3 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
clock  320, scheduled: mad(16) vgrf39+2.0:F, vgrf30:F, vgrf23:F, vgrf37:F group16 
(register pressure 24)
	child 1, 4 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf39:F group16 
	child 0, 2 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
clock  324, scheduled: mad(16) vgrf39+4.0:F, vgrf30:F, vgrf23:F, vgrf24:F group16 
(register pressure 18)
	child 1, 3 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf39:F group16 
	child 0, 1 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
		now available
clock  328, scheduled: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
(register pressure 10)
	child 1, 2 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf39:F group16 
	child 0, 1 parents: mov(16) vgrf39+6.0:F, 1f group16 
		now available
clock  332, scheduled: mov(16) vgrf39+6.0:F, 1f group16 
(register pressure 10)
	child 0, 1 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf39:F group16 
		now available
clock  337, scheduled: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf39:F group16 
(register pressure 2)

Instructions after scheduling (reg_alloc 0)
{  2}    0: linterp(16) vgrf80:F, g3:F, g11<0>:F group0 
{  4}    1: linterp(16) vgrf32:F, g7:F, g11<0>:F group16 
{  6}    2: linterp(16) vgrf81:F, g3:F, g11<0>:F group0 
{  8}    3: linterp(16) vgrf33:F, g7:F, g11<0>:F group16 
{ 10}    4: linterp(16) vgrf40:F, g3:F, g12<0>:F group0 
{ 12}    5: linterp(16) vgrf0:F, g7:F, g12<0>:F group16 
{ 14}    6: linterp(16) vgrf82:F, g3:F, g15<0>:F group0 
{ 16}    7: linterp(16) vgrf34:F, g7:F, g15<0>:F group16 
{ 18}    8: linterp(16) vgrf83:F, g3:F, g15<0>:F group0 
{ 18}    9: linterp(16) vgrf35:F, g7:F, g15<0>:F group16 
{ 18}   10: linterp(16) vgrf48:F, g3:F, g16<0>:F group0 
{ 18}   11: linterp(16) vgrf8:F, g7:F, g16<0>:F group16 
{ 18}   12: linterp(16) vgrf84:F, g3:F, g13<0>:F group0 
{ 18}   13: linterp(16) vgrf36:F, g7:F, g13<0>:F group16 
{ 18}   14: linterp(16) vgrf85:F, g3:F, g13<0>:F group0 
{ 18}   15: linterp(16) vgrf37:F, g7:F, g13<0>:F group16 
{ 18}   16: linterp(16) vgrf64:F, g3:F, g14<0>:F group0 
{ 18}   17: linterp(16) vgrf24:F, g7:F, g14<0>:F group16 
{ 18}   18: mov(16) vgrf38+6.0:F, 1f group0 
{ 16}   19: mul(16) vgrf41:F, vgrf81:F, vgrf81:F group0 
{ 14}   20: mul(16) vgrf1:F, vgrf33:F, vgrf33:F group16 
{ 16}   21: mul(16) vgrf49:F, vgrf83:F, vgrf83:F group0 
{ 18}   22: mul(16) vgrf9:F, vgrf35:F, vgrf35:F group16 
{ 20}   23: mad(16) vgrf42:F, vgrf41:F, vgrf80:F, vgrf80:F group0 
{ 22}   24: mad(16) vgrf2:F, vgrf1:F, vgrf32:F, vgrf32:F group16 
{ 24}   25: mad(16) vgrf50:F, vgrf49:F, vgrf82:F, vgrf82:F group0 
{ 26}   26: mad(16) vgrf10:F, vgrf9:F, vgrf34:F, vgrf34:F group16 
{ 28}   27: mad(16) vgrf43:F, vgrf42:F, vgrf40:F, vgrf40:F group0 
{ 30}   28: mad(16) vgrf3:F, vgrf2:F, vgrf0:F, vgrf0:F group16 
{ 30}   29: mad(16) vgrf51:F, vgrf50:F, vgrf48:F, vgrf48:F group0 
{ 30}   30: mad(16) vgrf11:F, vgrf10:F, vgrf8:F, vgrf8:F group16 
{ 30}   31: rsq(16) vgrf44:F, vgrf43:F group0 
{ 30}   32: rsq(16) vgrf4:F, vgrf3:F group16 
{ 30}   33: rsq(16) vgrf52:F, vgrf51:F group0 
{ 30}   34: rsq(16) vgrf12:F, vgrf11:F group16 
{ 30}   35: mul(16) vgrf45:F, vgrf80:F, vgrf44:F group0 
{ 30}   36: mul(16) vgrf46:F, vgrf81:F, vgrf44:F group0 
{ 30}   37: mul(16) vgrf47:F, vgrf40:F, vgrf44:F group0 
{ 30}   38: mul(16) vgrf5:F, vgrf32:F, vgrf4:F group16 
{ 28}   39: mul(16) vgrf6:F, vgrf33:F, vgrf4:F group16 
{ 26}   40: mul(16) vgrf7:F, vgrf0:F, vgrf4:F group16 
{ 28}   41: mul(16) vgrf53:F, vgrf82:F, vgrf52:F group0 
{ 30}   42: mul(16) vgrf54:F, vgrf83:F, vgrf52:F group0 
{ 30}   43: mul(16) vgrf55:F, vgrf48:F, vgrf52:F group0 
{ 30}   44: mul(16) vgrf13:F, vgrf34:F, vgrf12:F group16 
{ 30}   45: mul(16) vgrf14:F, vgrf35:F, vgrf12:F group16 
{ 30}   46: mul(16) vgrf15:F, vgrf8:F, vgrf12:F group16 
{ 32}   47: mul(16) vgrf56:F, vgrf54:F, vgrf46:F group0 
{ 34}   48: mul(16) vgrf16:F, vgrf14:F, vgrf6:F group16 
{ 34}   49: mad(16) vgrf57:F, vgrf56:F, vgrf45:F, vgrf53:F group0 
{ 34}   50: mad(16) vgrf17:F, vgrf16:F, vgrf5:F, vgrf13:F group16 
{ 34}   51: mad(16) vgrf58:F, vgrf57:F, vgrf47:F, vgrf55:F group0 
{ 34}   52: mad(16) vgrf18:F, vgrf17:F, vgrf7:F, vgrf15:F group16 
{ 32}   53: mul(16) vgrf59:F, vgrf58:F, 2f group0 
{ 30}   54: sel.ge(16) vgrf63:F, vgrf58:F, 0f group0 
{ 30}   55: mul(16) vgrf19:F, vgrf18:F, 2f group16 
{ 30}   56: sel.ge(16) vgrf23:F, vgrf18:F, 0f group16 
{ 32}   57: mad(16) vgrf60:F, -vgrf53:F, vgrf45:F, vgrf59:F group0 
{ 34}   58: mad(16) vgrf61:F, -vgrf54:F, vgrf46:F, vgrf59:F group0 
{ 36}   59: mad(16) vgrf62:F, -vgrf55:F, vgrf47:F, vgrf59:F group0 
{ 38}   60: mad(16) vgrf20:F, -vgrf13:F, vgrf5:F, vgrf19:F group16 
{ 40}   61: mad(16) vgrf21:F, -vgrf14:F, vgrf6:F, vgrf19:F group16 
{ 42}   62: mad(16) vgrf22:F, -vgrf15:F, vgrf7:F, vgrf19:F group16 
{ 40}   63: mul(16) vgrf65:F, vgrf61:F, vgrf54:F group0 
{ 38}   64: mul(16) vgrf25:F, vgrf21:F, vgrf14:F group16 
{ 34}   65: mad(16) vgrf66:F, vgrf65:F, vgrf53:F, vgrf60:F group0 
{ 30}   66: mad(16) vgrf26:F, vgrf25:F, vgrf13:F, vgrf20:F group16 
{ 26}   67: mad(16) vgrf67:F, vgrf66:F, vgrf55:F, vgrf62:F group0 
{ 22}   68: mad(16) vgrf27:F, vgrf26:F, vgrf15:F, vgrf22:F group16 
{ 22}   69: sel.ge(16) vgrf68:F, vgrf67:F, 0f group0 
{ 22}   70: sel.ge(16) vgrf28:F, vgrf27:F, 0f group16 
{ 22}   71: pow(16) vgrf69:F, vgrf68:F, 8f group0 
{ 22}   72: pow(16) vgrf29:F, vgrf28:F, 8f group16 
{ 22}   73: mul(16) vgrf70:F, vgrf69:F, 0.75f group0 
{ 28}   74: mul(16) vgrf30:F, vgrf29:F, 0.75f group16 
{ 34}   75: mad(16) vgrf38+0.0:F, vgrf70:F, vgrf63:F, vgrf84:F group0 
{ 32}   76: mad(16) vgrf38+2.0:F, vgrf70:F, vgrf63:F, vgrf85:F group0 
{ 30}   77: mad(16) vgrf38+4.0:F, vgrf70:F, vgrf63:F, vgrf64:F group0 
{ 28}   78: mad(16) vgrf39+0.0:F, vgrf30:F, vgrf23:F, vgrf36:F group16 
{ 22}   79: mad(16) vgrf39+2.0:F, vgrf30:F, vgrf23:F, vgrf37:F group16 
{ 16}   80: mad(16) vgrf39+4.0:F, vgrf30:F, vgrf23:F, vgrf24:F group16 
{ 16}   81: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf38:F group0 
{  8}   82: mov(16) vgrf39+6.0:F, 1f group16 
{  8}   83: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf39:F group16 
Maximum  42 registers live at once.
clock    4, scheduled: linterp(16) vgrf102+0.0:F, g3:F, g11<0>:F group0 
	child 6, 6 parents: linterp(16) vgrf11:F, g7:F, g13<0>:F group16 
	child 5, 19 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 4, 10 parents: pow(16) vgrf4:F, vgrf126+0.0:F, 8f group0 
	child 3, 9 parents: linterp(16) vgrf2:F, g7:F, g14<0>:F group16 
	child 2, 81 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 2 parents: mul(16) vgrf83:F, vgrf102+0.0:F, vgrf25:F group0 
	child 0, 2 parents: mad(16) vgrf77+0.0:F, vgrf75:F, vgrf102+0.0:F, vgrf102+0.0:F group0 
clock    8, scheduled: linterp(16) vgrf53:F, g7:F, g11<0>:F group16 
	child 5, 5 parents: linterp(16) vgrf11:F, g7:F, g13<0>:F group16 
	child 4, 18 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 3, 80 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 5 parents: mul(16) vgrf53:F, vgrf55:F, vgrf49:F group16 
	child 1, 2 parents: mul(16) vgrf51:F, vgrf53:F, vgrf49:F group16 
	child 0, 2 parents: mad(16) vgrf45:F, vgrf43:F, vgrf53:F, vgrf53:F group16 
clock   12, scheduled: linterp(16) vgrf112+0.0:F, g3:F, g11<0>:F group0 
	child 6, 4 parents: linterp(16) vgrf11:F, g7:F, g13<0>:F group16 
	child 5, 17 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 4, 9 parents: pow(16) vgrf4:F, vgrf126+0.0:F, 8f group0 
	child 3, 8 parents: linterp(16) vgrf2:F, g7:F, g14<0>:F group16 
	child 2, 79 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 2 parents: mul(16) vgrf27:F, vgrf112+0.0:F, vgrf25:F group0 
	child 0, 1 parents: mul(16) vgrf75:F, vgrf112+0.0:F, vgrf112+0.0:F group0 
		now available
clock   16, scheduled: linterp(16) vgrf55:F, g7:F, g11<0>:F group16 
	child 5, 3 parents: linterp(16) vgrf11:F, g7:F, g13<0>:F group16 
	child 4, 16 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 3, 78 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 5 parents: mul(16) vgrf55:F, vgrf41:F, vgrf49:F group16 
	child 1, 4 parents: mul(16) vgrf53:F, vgrf55:F, vgrf49:F group16 
	child 0, 1 parents: mul(16) vgrf43:F, vgrf55:F, vgrf55:F group16 
		now available
clock   20, scheduled: linterp(16) vgrf73:F, g3:F, g12<0>:F group0 
	child 7, 2 parents: linterp(16) vgrf11:F, g7:F, g13<0>:F group16 
	child 6, 15 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 5, 8 parents: pow(16) vgrf4:F, vgrf126+0.0:F, 8f group0 
	child 4, 7 parents: linterp(16) vgrf2:F, g7:F, g14<0>:F group16 
	child 3, 77 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 5 parents: mul(16) vgrf73:F, vgrf69:F, vgrf53:F group16 
	child 1, 4 parents: mul(16) vgrf89+0.0:F, vgrf73:F, vgrf25:F group0 
	child 0, 2 parents: mad(16) vgrf79+0.0:F, vgrf77+0.0:F, vgrf73:F, vgrf73:F group0 
clock   24, scheduled: linterp(16) vgrf41:F, g7:F, g12<0>:F group16 
	child 4, 1 parents: linterp(16) vgrf11:F, g7:F, g13<0>:F group16 
		now available
	child 3, 14 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 2, 76 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 4 parents: mul(16) vgrf55:F, vgrf41:F, vgrf49:F group16 
	child 0, 2 parents: mad(16) vgrf47:F, vgrf45:F, vgrf41:F, vgrf41:F group16 
clock   28, scheduled: linterp(16) vgrf33:F, g3:F, g15<0>:F group0 
	child 6, 6 parents: linterp(16) vgrf15:F, g7:F, g13<0>:F group16 
	child 5, 13 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 4, 7 parents: pow(16) vgrf4:F, vgrf126+0.0:F, 8f group0 
	child 3, 6 parents: linterp(16) vgrf2:F, g7:F, g14<0>:F group16 
	child 2, 75 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 2 parents: mul(16) vgrf98+0.0:F, vgrf33:F, vgrf96+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf92+0.0:F, vgrf90+0.0:F, vgrf33:F, vgrf33:F group0 
clock   32, scheduled: linterp(16) vgrf69:F, g7:F, g15<0>:F group16 
	child 5, 5 parents: linterp(16) vgrf15:F, g7:F, g13<0>:F group16 
	child 4, 12 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 3, 74 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 5 parents: mul(16) vgrf69:F, vgrf71:F, vgrf65:F group16 
	child 1, 2 parents: mul(16) vgrf67:F, vgrf69:F, vgrf65:F group16 
	child 0, 2 parents: mad(16) vgrf61:F, vgrf59:F, vgrf69:F, vgrf69:F group16 
clock   36, scheduled: linterp(16) vgrf35:F, g3:F, g15<0>:F group0 
	child 6, 4 parents: linterp(16) vgrf15:F, g7:F, g13<0>:F group16 
	child 5, 11 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 4, 6 parents: pow(16) vgrf4:F, vgrf126+0.0:F, 8f group0 
	child 3, 5 parents: linterp(16) vgrf2:F, g7:F, g14<0>:F group16 
	child 2, 73 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 2 parents: mul(16) vgrf100+0.0:F, vgrf35:F, vgrf96+0.0:F group0 
	child 0, 1 parents: mul(16) vgrf90+0.0:F, vgrf35:F, vgrf35:F group0 
		now available
clock   40, scheduled: linterp(16) vgrf71:F, g7:F, g15<0>:F group16 
	child 5, 3 parents: linterp(16) vgrf15:F, g7:F, g13<0>:F group16 
	child 4, 10 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 3, 72 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 5 parents: mul(16) vgrf71:F, vgrf57:F, vgrf65:F group16 
	child 1, 4 parents: mul(16) vgrf69:F, vgrf71:F, vgrf65:F group16 
	child 0, 1 parents: mul(16) vgrf59:F, vgrf71:F, vgrf71:F group16 
		now available
clock   44, scheduled: linterp(16) vgrf81:F, g3:F, g16<0>:F group0 
	child 6, 2 parents: linterp(16) vgrf15:F, g7:F, g13<0>:F group16 
	child 5, 9 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 4, 5 parents: pow(16) vgrf4:F, vgrf126+0.0:F, 8f group0 
	child 3, 4 parents: linterp(16) vgrf2:F, g7:F, g14<0>:F group16 
	child 2, 71 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 2 parents: mul(16) vgrf29:F, vgrf81:F, vgrf96+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf94+0.0:F, vgrf92+0.0:F, vgrf81:F, vgrf81:F group0 
clock   48, scheduled: linterp(16) vgrf57:F, g7:F, g16<0>:F group16 
	child 4, 1 parents: linterp(16) vgrf15:F, g7:F, g13<0>:F group16 
		now available
	child 3, 8 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 2, 70 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 4 parents: mul(16) vgrf71:F, vgrf57:F, vgrf65:F group16 
	child 0, 2 parents: mad(16) vgrf63:F, vgrf61:F, vgrf57:F, vgrf57:F group16 
clock   52, scheduled: linterp(16) vgrf37:F, g3:F, g13<0>:F group0 
	child 4, 7 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 3, 4 parents: pow(16) vgrf4:F, vgrf126+0.0:F, 8f group0 
	child 2, 3 parents: linterp(16) vgrf2:F, g7:F, g14<0>:F group16 
	child 1, 69 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 3 parents: mad(16) vgrf17:F, vgrf6:F, vgrf118+0.0:F, vgrf37:F group0 
clock   56, scheduled: linterp(16) vgrf39+0.0:F, g3:F, g13<0>:F group0 
	child 4, 6 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 3, 3 parents: pow(16) vgrf4:F, vgrf126+0.0:F, 8f group0 
	child 2, 2 parents: linterp(16) vgrf2:F, g7:F, g14<0>:F group16 
	child 1, 68 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 3 parents: mad(16) vgrf19:F, vgrf6:F, vgrf118+0.0:F, vgrf39+0.0:F group0 
clock   60, scheduled: linterp(16) vgrf85:F, g3:F, g14<0>:F group0 
	child 4, 5 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 3, 2 parents: pow(16) vgrf4:F, vgrf126+0.0:F, 8f group0 
	child 2, 1 parents: linterp(16) vgrf2:F, g7:F, g14<0>:F group16 
		now available
	child 1, 67 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 3 parents: mad(16) vgrf21:F, vgrf6:F, vgrf118+0.0:F, vgrf85:F group0 
clock   64, scheduled: mov(16) vgrf23:F, 1f group0 
	child 0, 66 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
clock   68, scheduled: linterp(16) vgrf11:F, g7:F, g13<0>:F group16 
	child 2, 4 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 1, 65 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 9 parents: mad(16) vgrf119+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf11:F group16 
clock   72, scheduled: mul(16) vgrf75:F, vgrf112+0.0:F, vgrf112+0.0:F group0 
	child 2, 64 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 5 parents: mad(16) vgrf75:F, vgrf73:F, vgrf51:F, vgrf67:F group16 
	child 0, 1 parents: mad(16) vgrf77+0.0:F, vgrf75:F, vgrf102+0.0:F, vgrf102+0.0:F group0 
		now available
clock   76, scheduled: mul(16) vgrf43:F, vgrf55:F, vgrf55:F group16 
	child 2, 3 parents: mul(16) vgrf55:F, vgrf41:F, vgrf49:F group16 
	child 1, 63 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf45:F, vgrf43:F, vgrf53:F, vgrf53:F group16 
		now available
clock   80, scheduled: linterp(16) vgrf15:F, g7:F, g13<0>:F group16 
	child 2, 3 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 1, 62 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 6 parents: mad(16) vgrf121+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf15:F group16 
clock   84, scheduled: mul(16) vgrf90+0.0:F, vgrf35:F, vgrf35:F group0 
	child 3, 61 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 6 parents: mad(16) vgrf91+0.0:F, vgrf89+0.0:F, vgrf67:F, vgrf25:F group16 
	child 1, 3 parents: mul(16) vgrf89+0.0:F, vgrf73:F, vgrf25:F group0 
	child 0, 1 parents: mad(16) vgrf92+0.0:F, vgrf90+0.0:F, vgrf33:F, vgrf33:F group0 
		now available
clock   88, scheduled: mul(16) vgrf59:F, vgrf71:F, vgrf71:F group16 
	child 2, 3 parents: mul(16) vgrf71:F, vgrf57:F, vgrf65:F group16 
	child 1, 60 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf61:F, vgrf59:F, vgrf69:F, vgrf69:F group16 
		now available
clock   92, scheduled: linterp(16) vgrf2:F, g7:F, g14<0>:F group16 
	child 2, 2 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 1, 59 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 6 parents: mad(16) vgrf123+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf2:F group16 
clock   96, scheduled: mad(16) vgrf77+0.0:F, vgrf75:F, vgrf102+0.0:F, vgrf102+0.0:F group0 
	child 3, 4 parents: mad(16) vgrf75:F, vgrf73:F, vgrf51:F, vgrf67:F group16 
	child 2, 58 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 5 parents: mad(16) vgrf77+0.0:F, vgrf75:F, vgrf55:F, vgrf71:F group16 
	child 0, 1 parents: mad(16) vgrf79+0.0:F, vgrf77+0.0:F, vgrf73:F, vgrf73:F group0 
		now available
clock  100, scheduled: mad(16) vgrf45:F, vgrf43:F, vgrf53:F, vgrf53:F group16 
	child 2, 3 parents: mul(16) vgrf53:F, vgrf55:F, vgrf49:F group16 
	child 1, 57 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf47:F, vgrf45:F, vgrf41:F, vgrf41:F group16 
		now available
clock  104, scheduled: mad(16) vgrf92+0.0:F, vgrf90+0.0:F, vgrf33:F, vgrf33:F group0 
	child 4, 2 parents: mul(16) vgrf89+0.0:F, vgrf73:F, vgrf25:F group0 
	child 3, 56 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 6 parents: mad(16) vgrf93+0.0:F, vgrf91+0.0:F, vgrf71:F, vgrf27:F group16 
	child 1, 5 parents: mad(16) vgrf91+0.0:F, vgrf89+0.0:F, vgrf67:F, vgrf25:F group16 
	child 0, 1 parents: mad(16) vgrf94+0.0:F, vgrf92+0.0:F, vgrf81:F, vgrf81:F group0 
		now available
clock  108, scheduled: mad(16) vgrf61:F, vgrf59:F, vgrf69:F, vgrf69:F group16 
	child 2, 3 parents: mul(16) vgrf69:F, vgrf71:F, vgrf65:F group16 
	child 1, 55 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf63:F, vgrf61:F, vgrf57:F, vgrf57:F group16 
		now available
clock  118, scheduled: mad(16) vgrf79+0.0:F, vgrf77+0.0:F, vgrf73:F, vgrf73:F group0 
	child 4, 4 parents: mul(16) vgrf73:F, vgrf69:F, vgrf53:F group16 
	child 3, 4 parents: mad(16) vgrf77+0.0:F, vgrf75:F, vgrf55:F, vgrf71:F group16 
	child 2, 54 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 3 parents: mul(16) vgrf79+0.0:F, vgrf77+0.0:F, 2f group16 
	child 0, 1 parents: rsq(16) vgrf25:F, vgrf79+0.0:F group0 
		now available
clock  122, scheduled: mad(16) vgrf47:F, vgrf45:F, vgrf41:F, vgrf41:F group16 
	child 1, 53 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: rsq(16) vgrf49:F, vgrf47:F group16 
		now available
clock  126, scheduled: mad(16) vgrf94+0.0:F, vgrf92+0.0:F, vgrf81:F, vgrf81:F group0 
	child 4, 4 parents: mad(16) vgrf91+0.0:F, vgrf89+0.0:F, vgrf67:F, vgrf25:F group16 
	child 3, 52 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 6 parents: sel.ge(16) vgrf95+0.0:F, vgrf93+0.0:F, 0f group16 
	child 1, 5 parents: mad(16) vgrf93+0.0:F, vgrf91+0.0:F, vgrf71:F, vgrf27:F group16 
	child 0, 1 parents: rsq(16) vgrf96+0.0:F, vgrf94+0.0:F group0 
		now available
clock  130, scheduled: mad(16) vgrf63:F, vgrf61:F, vgrf57:F, vgrf57:F group16 
	child 1, 51 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: rsq(16) vgrf65:F, vgrf63:F group16 
		now available
clock  140, scheduled: rsq(16) vgrf25:F, vgrf79+0.0:F group0 
	child 5, 2 parents: mul(16) vgrf79+0.0:F, vgrf77+0.0:F, 2f group16 
	child 4, 50 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 3, 7 parents: mad(16) vgrf25:F, -vgrf67:F, vgrf51:F, vgrf79+0.0:F group16 
	child 2, 1 parents: mul(16) vgrf89+0.0:F, vgrf73:F, vgrf25:F group0 
		now available
	child 1, 1 parents: mul(16) vgrf27:F, vgrf112+0.0:F, vgrf25:F group0 
		now available
	child 0, 1 parents: mul(16) vgrf83:F, vgrf102+0.0:F, vgrf25:F group0 
		now available
clock  144, scheduled: rsq(16) vgrf49:F, vgrf47:F group16 
	child 3, 49 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 2 parents: mul(16) vgrf55:F, vgrf41:F, vgrf49:F group16 
	child 1, 2 parents: mul(16) vgrf53:F, vgrf55:F, vgrf49:F group16 
	child 0, 1 parents: mul(16) vgrf51:F, vgrf53:F, vgrf49:F group16 
		now available
clock  148, scheduled: rsq(16) vgrf96+0.0:F, vgrf94+0.0:F group0 
	child 6, 4 parents: mad(16) vgrf93+0.0:F, vgrf91+0.0:F, vgrf71:F, vgrf27:F group16 
	child 5, 48 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 4, 8 parents: pow(16) vgrf97+0.0:F, vgrf95+0.0:F, 8f group16 
	child 3, 5 parents: sel.ge(16) vgrf95+0.0:F, vgrf93+0.0:F, 0f group16 
	child 2, 1 parents: mul(16) vgrf29:F, vgrf81:F, vgrf96+0.0:F group0 
		now available
	child 1, 1 parents: mul(16) vgrf100+0.0:F, vgrf35:F, vgrf96+0.0:F group0 
		now available
	child 0, 1 parents: mul(16) vgrf98+0.0:F, vgrf33:F, vgrf96+0.0:F group0 
		now available
clock  152, scheduled: rsq(16) vgrf65:F, vgrf63:F group16 
	child 3, 47 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 2 parents: mul(16) vgrf71:F, vgrf57:F, vgrf65:F group16 
	child 1, 2 parents: mul(16) vgrf69:F, vgrf71:F, vgrf65:F group16 
	child 0, 1 parents: mul(16) vgrf67:F, vgrf69:F, vgrf65:F group16 
		now available
clock  160, scheduled: mul(16) vgrf83:F, vgrf102+0.0:F, vgrf25:F group0 
	child 4, 6 parents: mad(16) vgrf25:F, -vgrf67:F, vgrf51:F, vgrf79+0.0:F group16 
	child 3, 46 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 6 parents: mad(16) vgrf83:F, -vgrf69:F, vgrf53:F, vgrf79+0.0:F group16 
	child 1, 3 parents: mad(16) vgrf31+0.0:F, -vgrf98+0.0:F, vgrf83:F, vgrf110+0.0:F group0 
	child 0, 3 parents: mad(16) vgrf106+0.0:F, vgrf104+0.0:F, vgrf83:F, vgrf98+0.0:F group0 
clock  164, scheduled: mul(16) vgrf27:F, vgrf112+0.0:F, vgrf25:F group0 
	child 4, 5 parents: mad(16) vgrf25:F, -vgrf67:F, vgrf51:F, vgrf79+0.0:F group16 
	child 3, 45 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 6 parents: mad(16) vgrf27:F, -vgrf71:F, vgrf55:F, vgrf79+0.0:F group16 
	child 1, 3 parents: mad(16) vgrf114+0.0:F, -vgrf100+0.0:F, vgrf27:F, vgrf110+0.0:F group0 
	child 0, 2 parents: mul(16) vgrf104+0.0:F, vgrf100+0.0:F, vgrf27:F group0 
clock  168, scheduled: mul(16) vgrf89+0.0:F, vgrf73:F, vgrf25:F group0 
	child 5, 4 parents: mad(16) vgrf25:F, -vgrf67:F, vgrf51:F, vgrf79+0.0:F group16 
	child 4, 3 parents: mul(16) vgrf73:F, vgrf69:F, vgrf53:F group16 
	child 3, 44 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 5 parents: mul(16) vgrf89+0.0:F, vgrf83:F, vgrf69:F group16 
	child 1, 3 parents: mad(16) vgrf116+0.0:F, -vgrf29:F, vgrf89+0.0:F, vgrf110+0.0:F group0 
	child 0, 3 parents: mad(16) vgrf108+0.0:F, vgrf106+0.0:F, vgrf89+0.0:F, vgrf29:F group0 
clock  172, scheduled: mul(16) vgrf51:F, vgrf53:F, vgrf49:F group16 
	child 3, 1 parents: mul(16) vgrf53:F, vgrf55:F, vgrf49:F group16 
		now available
	child 2, 43 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 3 parents: mad(16) vgrf25:F, -vgrf67:F, vgrf51:F, vgrf79+0.0:F group16 
	child 0, 3 parents: mad(16) vgrf75:F, vgrf73:F, vgrf51:F, vgrf67:F group16 
clock  176, scheduled: mul(16) vgrf98+0.0:F, vgrf33:F, vgrf96+0.0:F group0 
	child 6, 4 parents: sel.ge(16) vgrf95+0.0:F, vgrf93+0.0:F, 0f group16 
	child 5, 42 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 4, 9 parents: mul(16) vgrf99+0.0:F, vgrf97+0.0:F, 0.75f group16 
	child 3, 7 parents: pow(16) vgrf97+0.0:F, vgrf95+0.0:F, 8f group16 
	child 2, 3 parents: mad(16) vgrf122+0.0:F, vgrf120+0.0:F, vgrf98+0.0:F, vgrf31+0.0:F group0 
	child 1, 2 parents: mad(16) vgrf31+0.0:F, -vgrf98+0.0:F, vgrf83:F, vgrf110+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf106+0.0:F, vgrf104+0.0:F, vgrf83:F, vgrf98+0.0:F group0 
clock  180, scheduled: mul(16) vgrf100+0.0:F, vgrf35:F, vgrf96+0.0:F group0 
	child 6, 6 parents: pow(16) vgrf97+0.0:F, vgrf95+0.0:F, 8f group16 
	child 5, 3 parents: sel.ge(16) vgrf95+0.0:F, vgrf93+0.0:F, 0f group16 
	child 4, 41 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 3, 8 parents: mul(16) vgrf99+0.0:F, vgrf97+0.0:F, 0.75f group16 
	child 2, 2 parents: mul(16) vgrf120+0.0:F, vgrf114+0.0:F, vgrf100+0.0:F group0 
	child 1, 2 parents: mad(16) vgrf114+0.0:F, -vgrf100+0.0:F, vgrf27:F, vgrf110+0.0:F group0 
	child 0, 1 parents: mul(16) vgrf104+0.0:F, vgrf100+0.0:F, vgrf27:F group0 
		now available
clock  184, scheduled: mul(16) vgrf29:F, vgrf81:F, vgrf96+0.0:F group0 
	child 5, 5 parents: pow(16) vgrf97+0.0:F, vgrf95+0.0:F, 8f group16 
	child 4, 2 parents: sel.ge(16) vgrf95+0.0:F, vgrf93+0.0:F, 0f group16 
	child 3, 40 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 3 parents: mad(16) vgrf124+0.0:F, vgrf122+0.0:F, vgrf29:F, vgrf116+0.0:F group0 
	child 1, 2 parents: mad(16) vgrf116+0.0:F, -vgrf29:F, vgrf89+0.0:F, vgrf110+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf108+0.0:F, vgrf106+0.0:F, vgrf89+0.0:F, vgrf29:F group0 
clock  188, scheduled: mul(16) vgrf67:F, vgrf69:F, vgrf65:F group16 
	child 4, 1 parents: mul(16) vgrf69:F, vgrf71:F, vgrf65:F group16 
		now available
	child 3, 39 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 3 parents: mad(16) vgrf91+0.0:F, vgrf89+0.0:F, vgrf67:F, vgrf25:F group16 
	child 1, 2 parents: mad(16) vgrf25:F, -vgrf67:F, vgrf51:F, vgrf79+0.0:F group16 
	child 0, 2 parents: mad(16) vgrf75:F, vgrf73:F, vgrf51:F, vgrf67:F group16 
clock  192, scheduled: mul(16) vgrf53:F, vgrf55:F, vgrf49:F group16 
	child 3, 1 parents: mul(16) vgrf55:F, vgrf41:F, vgrf49:F group16 
		now available
	child 2, 38 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 5 parents: mad(16) vgrf83:F, -vgrf69:F, vgrf53:F, vgrf79+0.0:F group16 
	child 0, 2 parents: mul(16) vgrf73:F, vgrf69:F, vgrf53:F group16 
clock  196, scheduled: mul(16) vgrf69:F, vgrf71:F, vgrf65:F group16 
	child 4, 1 parents: mul(16) vgrf71:F, vgrf57:F, vgrf65:F group16 
		now available
	child 3, 37 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 4 parents: mul(16) vgrf89+0.0:F, vgrf83:F, vgrf69:F group16 
	child 1, 4 parents: mad(16) vgrf83:F, -vgrf69:F, vgrf53:F, vgrf79+0.0:F group16 
	child 0, 1 parents: mul(16) vgrf73:F, vgrf69:F, vgrf53:F group16 
		now available
clock  200, scheduled: mul(16) vgrf55:F, vgrf41:F, vgrf49:F group16 
	child 2, 36 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 5 parents: mad(16) vgrf27:F, -vgrf71:F, vgrf55:F, vgrf79+0.0:F group16 
	child 0, 3 parents: mad(16) vgrf77+0.0:F, vgrf75:F, vgrf55:F, vgrf71:F group16 
clock  204, scheduled: mul(16) vgrf104+0.0:F, vgrf100+0.0:F, vgrf27:F group0 
	child 3, 4 parents: mad(16) vgrf27:F, -vgrf71:F, vgrf55:F, vgrf79+0.0:F group16 
	child 2, 7 parents: mul(16) vgrf99+0.0:F, vgrf97+0.0:F, 0.75f group16 
	child 1, 35 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf106+0.0:F, vgrf104+0.0:F, vgrf83:F, vgrf98+0.0:F group0 
		now available
clock  208, scheduled: mul(16) vgrf71:F, vgrf57:F, vgrf65:F group16 
	child 3, 34 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 3 parents: mad(16) vgrf93+0.0:F, vgrf91+0.0:F, vgrf71:F, vgrf27:F group16 
	child 1, 3 parents: mad(16) vgrf27:F, -vgrf71:F, vgrf55:F, vgrf79+0.0:F group16 
	child 0, 2 parents: mad(16) vgrf77+0.0:F, vgrf75:F, vgrf55:F, vgrf71:F group16 
clock  214, scheduled: mul(16) vgrf73:F, vgrf69:F, vgrf53:F group16 
	child 1, 33 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf75:F, vgrf73:F, vgrf51:F, vgrf67:F group16 
		now available
clock  222, scheduled: mad(16) vgrf106+0.0:F, vgrf104+0.0:F, vgrf83:F, vgrf98+0.0:F group0 
	child 4, 6 parents: mul(16) vgrf99+0.0:F, vgrf97+0.0:F, 0.75f group16 
	child 3, 4 parents: pow(16) vgrf97+0.0:F, vgrf95+0.0:F, 8f group16 
	child 2, 3 parents: mad(16) vgrf83:F, -vgrf69:F, vgrf53:F, vgrf79+0.0:F group16 
	child 1, 32 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf108+0.0:F, vgrf106+0.0:F, vgrf89+0.0:F, vgrf29:F group0 
		now available
clock  232, scheduled: mad(16) vgrf75:F, vgrf73:F, vgrf51:F, vgrf67:F group16 
	child 1, 31 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf77+0.0:F, vgrf75:F, vgrf55:F, vgrf71:F group16 
		now available
clock  244, scheduled: mad(16) vgrf108+0.0:F, vgrf106+0.0:F, vgrf89+0.0:F, vgrf29:F group0 
	child 3, 3 parents: mul(16) vgrf89+0.0:F, vgrf83:F, vgrf69:F group16 
	child 2, 30 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 1 parents: sel.ge(16) vgrf118+0.0:F, vgrf108+0.0:F, 0f group0 
		now available
	child 0, 1 parents: mul(16) vgrf110+0.0:F, vgrf108+0.0:F, 2f group0 
		now available
clock  254, scheduled: mad(16) vgrf77+0.0:F, vgrf75:F, vgrf55:F, vgrf71:F group16 
	child 2, 29 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 1 parents: sel.ge(16) vgrf87+0.0:F, vgrf77+0.0:F, 0f group16 
		now available
	child 0, 1 parents: mul(16) vgrf79+0.0:F, vgrf77+0.0:F, 2f group16 
		now available
clock  266, scheduled: mul(16) vgrf110+0.0:F, vgrf108+0.0:F, 2f group0 
	child 3, 28 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 1 parents: mad(16) vgrf116+0.0:F, -vgrf29:F, vgrf89+0.0:F, vgrf110+0.0:F group0 
		now available
	child 1, 1 parents: mad(16) vgrf114+0.0:F, -vgrf100+0.0:F, vgrf27:F, vgrf110+0.0:F group0 
		now available
	child 0, 1 parents: mad(16) vgrf31+0.0:F, -vgrf98+0.0:F, vgrf83:F, vgrf110+0.0:F group0 
		now available
clock  270, scheduled: sel.ge(16) vgrf118+0.0:F, vgrf108+0.0:F, 0f group0 
	child 4, 27 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 3, 8 parents: mad(16) vgrf119+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf11:F group16 
	child 2, 2 parents: mad(16) vgrf21:F, vgrf6:F, vgrf118+0.0:F, vgrf85:F group0 
	child 1, 2 parents: mad(16) vgrf19:F, vgrf6:F, vgrf118+0.0:F, vgrf39+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf17:F, vgrf6:F, vgrf118+0.0:F, vgrf37:F group0 
clock  276, scheduled: mul(16) vgrf79+0.0:F, vgrf77+0.0:F, 2f group16 
	child 3, 26 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 2 parents: mad(16) vgrf27:F, -vgrf71:F, vgrf55:F, vgrf79+0.0:F group16 
	child 1, 2 parents: mad(16) vgrf83:F, -vgrf69:F, vgrf53:F, vgrf79+0.0:F group16 
	child 0, 1 parents: mad(16) vgrf25:F, -vgrf67:F, vgrf51:F, vgrf79+0.0:F group16 
		now available
clock  280, scheduled: sel.ge(16) vgrf87+0.0:F, vgrf77+0.0:F, 0f group16 
	child 3, 25 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 5 parents: mad(16) vgrf123+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf2:F group16 
	child 1, 5 parents: mad(16) vgrf121+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf15:F group16 
	child 0, 7 parents: mad(16) vgrf119+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf11:F group16 
clock  284, scheduled: mad(16) vgrf31+0.0:F, -vgrf98+0.0:F, vgrf83:F, vgrf110+0.0:F group0 
	child 4, 1 parents: mad(16) vgrf83:F, -vgrf69:F, vgrf53:F, vgrf79+0.0:F group16 
		now available
	child 3, 5 parents: mul(16) vgrf99+0.0:F, vgrf97+0.0:F, 0.75f group16 
	child 2, 3 parents: pow(16) vgrf97+0.0:F, vgrf95+0.0:F, 8f group16 
	child 1, 24 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf122+0.0:F, vgrf120+0.0:F, vgrf98+0.0:F, vgrf31+0.0:F group0 
clock  288, scheduled: mad(16) vgrf114+0.0:F, -vgrf100+0.0:F, vgrf27:F, vgrf110+0.0:F group0 
	child 3, 1 parents: mad(16) vgrf27:F, -vgrf71:F, vgrf55:F, vgrf79+0.0:F group16 
		now available
	child 2, 4 parents: mul(16) vgrf99+0.0:F, vgrf97+0.0:F, 0.75f group16 
	child 1, 23 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: mul(16) vgrf120+0.0:F, vgrf114+0.0:F, vgrf100+0.0:F group0 
		now available
clock  292, scheduled: mad(16) vgrf116+0.0:F, -vgrf29:F, vgrf89+0.0:F, vgrf110+0.0:F group0 
	child 2, 2 parents: mul(16) vgrf89+0.0:F, vgrf83:F, vgrf69:F group16 
	child 1, 22 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf124+0.0:F, vgrf122+0.0:F, vgrf29:F, vgrf116+0.0:F group0 
clock  296, scheduled: mad(16) vgrf27:F, -vgrf71:F, vgrf55:F, vgrf79+0.0:F group16 
	child 1, 21 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf93+0.0:F, vgrf91+0.0:F, vgrf71:F, vgrf27:F group16 
clock  300, scheduled: mad(16) vgrf83:F, -vgrf69:F, vgrf53:F, vgrf79+0.0:F group16 
	child 1, 20 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: mul(16) vgrf89+0.0:F, vgrf83:F, vgrf69:F group16 
		now available
clock  304, scheduled: mad(16) vgrf25:F, -vgrf67:F, vgrf51:F, vgrf79+0.0:F group16 
	child 1, 19 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf91+0.0:F, vgrf89+0.0:F, vgrf67:F, vgrf25:F group16 
clock  310, scheduled: mul(16) vgrf120+0.0:F, vgrf114+0.0:F, vgrf100+0.0:F group0 
	child 4, 3 parents: mul(16) vgrf99+0.0:F, vgrf97+0.0:F, 0.75f group16 
	child 3, 18 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 4 parents: mad(16) vgrf121+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf15:F group16 
	child 1, 6 parents: mad(16) vgrf119+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf11:F group16 
	child 0, 1 parents: mad(16) vgrf122+0.0:F, vgrf120+0.0:F, vgrf98+0.0:F, vgrf31+0.0:F group0 
		now available
clock  322, scheduled: mul(16) vgrf89+0.0:F, vgrf83:F, vgrf69:F group16 
	child 1, 17 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf91+0.0:F, vgrf89+0.0:F, vgrf67:F, vgrf25:F group16 
		now available
clock  328, scheduled: mad(16) vgrf122+0.0:F, vgrf120+0.0:F, vgrf98+0.0:F, vgrf31+0.0:F group0 
	child 6, 2 parents: mul(16) vgrf99+0.0:F, vgrf97+0.0:F, 0.75f group16 
	child 5, 2 parents: pow(16) vgrf97+0.0:F, vgrf95+0.0:F, 8f group16 
	child 4, 5 parents: mad(16) vgrf119+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf11:F group16 
	child 3, 16 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 4 parents: mad(16) vgrf123+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf2:F group16 
	child 1, 3 parents: mad(16) vgrf121+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf15:F group16 
	child 0, 1 parents: mad(16) vgrf124+0.0:F, vgrf122+0.0:F, vgrf29:F, vgrf116+0.0:F group0 
		now available
clock  340, scheduled: mad(16) vgrf91+0.0:F, vgrf89+0.0:F, vgrf67:F, vgrf25:F group16 
	child 1, 15 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf93+0.0:F, vgrf91+0.0:F, vgrf71:F, vgrf27:F group16 
		now available
clock  350, scheduled: mad(16) vgrf124+0.0:F, vgrf122+0.0:F, vgrf29:F, vgrf116+0.0:F group0 
	child 4, 2 parents: mad(16) vgrf121+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf15:F group16 
	child 3, 4 parents: mov(16) vgrf125+0.0:F, 1f group16 
	child 2, 14 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 3 parents: mad(16) vgrf123+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf2:F group16 
	child 0, 1 parents: sel.ge(16) vgrf126+0.0:F, vgrf124+0.0:F, 0f group0 
		now available
clock  362, scheduled: mad(16) vgrf93+0.0:F, vgrf91+0.0:F, vgrf71:F, vgrf27:F group16 
	child 1, 13 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: sel.ge(16) vgrf95+0.0:F, vgrf93+0.0:F, 0f group16 
		now available
clock  372, scheduled: sel.ge(16) vgrf126+0.0:F, vgrf124+0.0:F, 0f group0 
	child 3, 2 parents: mad(16) vgrf123+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf2:F group16 
	child 2, 3 parents: mov(16) vgrf125+0.0:F, 1f group16 
	child 1, 12 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: pow(16) vgrf4:F, vgrf126+0.0:F, 8f group0 
		now available
clock  384, scheduled: sel.ge(16) vgrf95+0.0:F, vgrf93+0.0:F, 0f group16 
	child 1, 11 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: pow(16) vgrf97+0.0:F, vgrf95+0.0:F, 8f group16 
		now available
clock  390, scheduled: pow(16) vgrf4:F, vgrf126+0.0:F, 8f group0 
	child 2, 2 parents: mov(16) vgrf125+0.0:F, 1f group16 
	child 1, 10 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
		now available
clock  402, scheduled: pow(16) vgrf97+0.0:F, vgrf95+0.0:F, 8f group16 
	child 1, 9 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 0, 1 parents: mul(16) vgrf99+0.0:F, vgrf97+0.0:F, 0.75f group16 
		now available
clock  418, scheduled: mul(16) vgrf6:F, vgrf4:F, 0.75f group0 
	child 3, 8 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 1 parents: mad(16) vgrf21:F, vgrf6:F, vgrf118+0.0:F, vgrf85:F group0 
		now available
	child 1, 1 parents: mad(16) vgrf19:F, vgrf6:F, vgrf118+0.0:F, vgrf39+0.0:F group0 
		now available
	child 0, 1 parents: mad(16) vgrf17:F, vgrf6:F, vgrf118+0.0:F, vgrf37:F group0 
		now available
clock  430, scheduled: mul(16) vgrf99+0.0:F, vgrf97+0.0:F, 0.75f group16 
	child 3, 7 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 2, 1 parents: mad(16) vgrf123+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf2:F group16 
		now available
	child 1, 1 parents: mad(16) vgrf121+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf15:F group16 
		now available
	child 0, 4 parents: mad(16) vgrf119+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf11:F group16 
clock  436, scheduled: mad(16) vgrf17:F, vgrf6:F, vgrf118+0.0:F, vgrf37:F group0 
	child 1, 3 parents: mad(16) vgrf119+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf11:F group16 
	child 0, 6 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
clock  440, scheduled: mad(16) vgrf19:F, vgrf6:F, vgrf118+0.0:F, vgrf39+0.0:F group0 
	child 1, 2 parents: mad(16) vgrf119+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf11:F group16 
	child 0, 5 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
clock  444, scheduled: mad(16) vgrf21:F, vgrf6:F, vgrf118+0.0:F, vgrf85:F group0 
	child 1, 1 parents: mad(16) vgrf119+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf11:F group16 
		now available
	child 0, 4 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
clock  448, scheduled: mad(16) vgrf119+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf11:F group16 
	child 1, 5 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
	child 0, 3 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
clock  452, scheduled: mad(16) vgrf121+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf15:F group16 
	child 1, 4 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
	child 0, 2 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
clock  456, scheduled: mad(16) vgrf123+0.0:F, vgrf99+0.0:F, vgrf87+0.0:F, vgrf2:F group16 
	child 1, 3 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
	child 0, 1 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
		now available
clock  466, scheduled: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf17+0.0:F group0 
	child 1, 2 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
	child 0, 1 parents: mov(16) vgrf125+0.0:F, 1f group16 
		now available
clock  470, scheduled: mov(16) vgrf125+0.0:F, 1f group16 
	child 0, 1 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
		now available
clock  488, scheduled: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
nir_opt_algebraic_distribute_src_mods
nir_copy_prop
nir_opt_dce
nir_opt_move
nir_lower_bool_to_int32
nir_copy_prop
nir_opt_dce
nir_lower_locals_to_regs
nir_convert_from_ssa
nir_opt_dce
nir_opt_rematerialize_compares
nir_lower_variable_initializers
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_23.x
	vec1 32 ssa_25 = mov ssa_23.y
	vec1 32 ssa_26 = mov ssa_23.z
	vec4 32 ssa_28 = vec4 ssa_24, ssa_25, ssa_26, ssa_27
	vec1 32 ssa_29 = mov ssa_28.x
	vec4 32 ssa_30 = fmul ssa_6, ssa_29.xxxx
	vec1 32 ssa_31 = mov ssa_28.y
	vec4 32 ssa_32 = fmul ssa_11, ssa_31.xxxx
	vec4 32 ssa_33 = fadd ssa_30, ssa_32
	vec1 32 ssa_34 = mov ssa_28.z
	vec4 32 ssa_35 = fmul ssa_16, ssa_34.xxxx
	vec4 32 ssa_36 = fadd ssa_33, ssa_35
	vec1 32 ssa_37 = mov ssa_28.w
	vec4 32 ssa_38 = fmul ssa_21, ssa_37.xxxx
	vec4 32 ssa_39 = fadd ssa_36, ssa_38
	vec1 32 ssa_40 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_41 = deref_struct &ssa_40->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_41, ssa_39) (15, 0) /* wrmask=xyzw */ /* access=0 */
	return
	/* succs: block_1 */
	block block_1:
}

nir_lower_returns
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_23.x
	vec1 32 ssa_25 = mov ssa_23.y
	vec1 32 ssa_26 = mov ssa_23.z
	vec4 32 ssa_28 = vec4 ssa_24, ssa_25, ssa_26, ssa_27
	vec1 32 ssa_29 = mov ssa_28.x
	vec4 32 ssa_30 = fmul ssa_6, ssa_29.xxxx
	vec1 32 ssa_31 = mov ssa_28.y
	vec4 32 ssa_32 = fmul ssa_11, ssa_31.xxxx
	vec4 32 ssa_33 = fadd ssa_30, ssa_32
	vec1 32 ssa_34 = mov ssa_28.z
	vec4 32 ssa_35 = fmul ssa_16, ssa_34.xxxx
	vec4 32 ssa_36 = fadd ssa_33, ssa_35
	vec1 32 ssa_37 = mov ssa_28.w
	vec4 32 ssa_38 = fmul ssa_21, ssa_37.xxxx
	vec4 32 ssa_39 = fadd ssa_36, ssa_38
	vec1 32 ssa_40 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_41 = deref_struct &ssa_40->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_41, ssa_39) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_inline_functions
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_23.x
	vec1 32 ssa_25 = mov ssa_23.y
	vec1 32 ssa_26 = mov ssa_23.z
	vec4 32 ssa_28 = vec4 ssa_24, ssa_25, ssa_26, ssa_27
	vec1 32 ssa_29 = mov ssa_28.x
	vec4 32 ssa_30 = fmul ssa_6, ssa_29.xxxx
	vec1 32 ssa_31 = mov ssa_28.y
	vec4 32 ssa_32 = fmul ssa_11, ssa_31.xxxx
	vec4 32 ssa_33 = fadd ssa_30, ssa_32
	vec1 32 ssa_34 = mov ssa_28.z
	vec4 32 ssa_35 = fmul ssa_16, ssa_34.xxxx
	vec4 32 ssa_36 = fadd ssa_33, ssa_35
	vec1 32 ssa_37 = mov ssa_28.w
	vec4 32 ssa_38 = fmul ssa_21, ssa_37.xxxx
	vec4 32 ssa_39 = fadd ssa_36, ssa_38
	vec1 32 ssa_40 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_41 = deref_struct &ssa_40->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_41, ssa_39) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_copy_prop
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_23.x
	vec1 32 ssa_25 = mov ssa_23.y
	vec1 32 ssa_26 = mov ssa_23.z
	vec4 32 ssa_28 = vec4 ssa_23.x, ssa_23.y, ssa_23.z, ssa_27
	vec1 32 ssa_29 = mov ssa_23.x
	vec4 32 ssa_30 = fmul ssa_6, ssa_23.xxxx
	vec1 32 ssa_31 = mov ssa_23.y
	vec4 32 ssa_32 = fmul ssa_11, ssa_23.yyyy
	vec4 32 ssa_33 = fadd ssa_30, ssa_32
	vec1 32 ssa_34 = mov ssa_23.z
	vec4 32 ssa_35 = fmul ssa_16, ssa_23.zzzz
	vec4 32 ssa_36 = fadd ssa_33, ssa_35
	vec1 32 ssa_37 = mov ssa_27
	vec4 32 ssa_38 = fmul ssa_21, ssa_27.xxxx
	vec4 32 ssa_39 = fadd ssa_36, ssa_38
	vec1 32 ssa_40 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_41 = deref_struct &ssa_40->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_41, ssa_39) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_deref
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_23.x
	vec1 32 ssa_25 = mov ssa_23.y
	vec1 32 ssa_26 = mov ssa_23.z
	vec4 32 ssa_28 = vec4 ssa_23.x, ssa_23.y, ssa_23.z, ssa_27
	vec1 32 ssa_29 = mov ssa_23.x
	vec4 32 ssa_30 = fmul ssa_6, ssa_23.xxxx
	vec1 32 ssa_31 = mov ssa_23.y
	vec4 32 ssa_32 = fmul ssa_11, ssa_23.yyyy
	vec4 32 ssa_33 = fadd ssa_30, ssa_32
	vec1 32 ssa_34 = mov ssa_23.z
	vec4 32 ssa_35 = fmul ssa_16, ssa_23.zzzz
	vec4 32 ssa_36 = fadd ssa_33, ssa_35
	vec1 32 ssa_37 = mov ssa_27
	vec4 32 ssa_38 = fmul ssa_21, ssa_27.xxxx
	vec4 32 ssa_39 = fadd ssa_36, ssa_38
	vec1 32 ssa_40 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_41 = deref_struct &ssa_40->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_41, ssa_39) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_variable_initializers
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_23.x
	vec1 32 ssa_25 = mov ssa_23.y
	vec1 32 ssa_26 = mov ssa_23.z
	vec4 32 ssa_28 = vec4 ssa_23.x, ssa_23.y, ssa_23.z, ssa_27
	vec1 32 ssa_29 = mov ssa_23.x
	vec4 32 ssa_30 = fmul ssa_6, ssa_23.xxxx
	vec1 32 ssa_31 = mov ssa_23.y
	vec4 32 ssa_32 = fmul ssa_11, ssa_23.yyyy
	vec4 32 ssa_33 = fadd ssa_30, ssa_32
	vec1 32 ssa_34 = mov ssa_23.z
	vec4 32 ssa_35 = fmul ssa_16, ssa_23.zzzz
	vec4 32 ssa_36 = fadd ssa_33, ssa_35
	vec1 32 ssa_37 = mov ssa_27
	vec4 32 ssa_38 = fmul ssa_21, ssa_27.xxxx
	vec4 32 ssa_39 = fadd ssa_36, ssa_38
	vec1 32 ssa_40 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_41 = deref_struct &ssa_40->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_41, ssa_39) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_var_copies
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE gl_PerVertex  (VARYING_SLOT_POS, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_23.x
	vec1 32 ssa_25 = mov ssa_23.y
	vec1 32 ssa_26 = mov ssa_23.z
	vec4 32 ssa_28 = vec4 ssa_23.x, ssa_23.y, ssa_23.z, ssa_27
	vec1 32 ssa_29 = mov ssa_23.x
	vec4 32 ssa_30 = fmul ssa_6, ssa_23.xxxx
	vec1 32 ssa_31 = mov ssa_23.y
	vec4 32 ssa_32 = fmul ssa_11, ssa_23.yyyy
	vec4 32 ssa_33 = fadd ssa_30, ssa_32
	vec1 32 ssa_34 = mov ssa_23.z
	vec4 32 ssa_35 = fmul ssa_16, ssa_23.zzzz
	vec4 32 ssa_36 = fadd ssa_33, ssa_35
	vec1 32 ssa_37 = mov ssa_27
	vec4 32 ssa_38 = fmul ssa_21, ssa_27.xxxx
	vec4 32 ssa_39 = fadd ssa_36, ssa_38
	vec1 32 ssa_40 = deref_var & (shader_out gl_PerVertex) 
	vec1 32 ssa_41 = deref_struct &ssa_40->field0 (shader_out vec4) /* &.field0 */
	intrinsic store_deref (ssa_41, ssa_39) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_per_member_structs
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float .field1 (VARYING_SLOT_PSIZ.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float[1] .field2 (VARYING_SLOT_CLIP_DIST0.x, 0, 0) compact
decl_var shader_out INTERP_MODE_NONE float[1] .field3 (VARYING_SLOT_CULL_DIST0.x, 0, 0) compact
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_23.x
	vec1 32 ssa_25 = mov ssa_23.y
	vec1 32 ssa_26 = mov ssa_23.z
	vec4 32 ssa_28 = vec4 ssa_23.x, ssa_23.y, ssa_23.z, ssa_27
	vec1 32 ssa_29 = mov ssa_23.x
	vec4 32 ssa_30 = fmul ssa_6, ssa_23.xxxx
	vec1 32 ssa_31 = mov ssa_23.y
	vec4 32 ssa_32 = fmul ssa_11, ssa_23.yyyy
	vec4 32 ssa_33 = fadd ssa_30, ssa_32
	vec1 32 ssa_34 = mov ssa_23.z
	vec4 32 ssa_35 = fmul ssa_16, ssa_23.zzzz
	vec4 32 ssa_36 = fadd ssa_33, ssa_35
	vec1 32 ssa_37 = mov ssa_27
	vec4 32 ssa_38 = fmul ssa_21, ssa_27.xxxx
	vec4 32 ssa_39 = fadd ssa_36, ssa_38
	vec1 32 ssa_42 = deref_var &.field0 (shader_out vec4) 
	intrinsic store_deref (ssa_42, ssa_39) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_remove_dead_variables
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_23.x
	vec1 32 ssa_25 = mov ssa_23.y
	vec1 32 ssa_26 = mov ssa_23.z
	vec4 32 ssa_28 = vec4 ssa_23.x, ssa_23.y, ssa_23.z, ssa_27
	vec1 32 ssa_29 = mov ssa_23.x
	vec4 32 ssa_30 = fmul ssa_6, ssa_23.xxxx
	vec1 32 ssa_31 = mov ssa_23.y
	vec4 32 ssa_32 = fmul ssa_11, ssa_23.yyyy
	vec4 32 ssa_33 = fadd ssa_30, ssa_32
	vec1 32 ssa_34 = mov ssa_23.z
	vec4 32 ssa_35 = fmul ssa_16, ssa_23.zzzz
	vec4 32 ssa_36 = fadd ssa_33, ssa_35
	vec1 32 ssa_37 = mov ssa_27
	vec4 32 ssa_38 = fmul ssa_21, ssa_27.xxxx
	vec4 32 ssa_39 = fadd ssa_36, ssa_38
	vec1 32 ssa_42 = deref_var &.field0 (shader_out vec4) 
	intrinsic store_deref (ssa_42, ssa_39) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_propagate_invariant
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_23.x
	vec1 32 ssa_25 = mov ssa_23.y
	vec1 32 ssa_26 = mov ssa_23.z
	vec4 32 ssa_28 = vec4 ssa_23.x, ssa_23.y, ssa_23.z, ssa_27
	vec1 32 ssa_29 = mov ssa_23.x
	vec4 32 ssa_30 = fmul ssa_6, ssa_23.xxxx
	vec1 32 ssa_31 = mov ssa_23.y
	vec4 32 ssa_32 = fmul ssa_11, ssa_23.yyyy
	vec4 32 ssa_33 = fadd ssa_30, ssa_32
	vec1 32 ssa_34 = mov ssa_23.z
	vec4 32 ssa_35 = fmul ssa_16, ssa_23.zzzz
	vec4 32 ssa_36 = fadd ssa_33, ssa_35
	vec1 32 ssa_37 = mov ssa_27
	vec4 32 ssa_38 = fmul ssa_21, ssa_27.xxxx
	vec4 32 ssa_39 = fadd ssa_36, ssa_38
	vec1 32 ssa_42 = deref_var &.field0 (shader_out vec4) 
	intrinsic store_deref (ssa_42, ssa_39) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_io_to_temporaries
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp
decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUVW-temp (shader_temp vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_23.x
	vec1 32 ssa_25 = mov ssa_23.y
	vec1 32 ssa_26 = mov ssa_23.z
	vec4 32 ssa_28 = vec4 ssa_23.x, ssa_23.y, ssa_23.z, ssa_27
	vec1 32 ssa_29 = mov ssa_23.x
	vec4 32 ssa_30 = fmul ssa_6, ssa_23.xxxx
	vec1 32 ssa_31 = mov ssa_23.y
	vec4 32 ssa_32 = fmul ssa_11, ssa_23.yyyy
	vec4 32 ssa_33 = fadd ssa_30, ssa_32
	vec1 32 ssa_34 = mov ssa_23.z
	vec4 32 ssa_35 = fmul ssa_16, ssa_23.zzzz
	vec4 32 ssa_36 = fadd ssa_33, ssa_35
	vec1 32 ssa_37 = mov ssa_27
	vec4 32 ssa_38 = fmul ssa_21, ssa_27.xxxx
	vec4 32 ssa_39 = fadd ssa_36, ssa_38
	vec1 32 ssa_42 = deref_var &out@.field0-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_42, ssa_39) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_43 = deref_var &out@outUVW-temp (shader_temp vec3) 
	vec1 32 ssa_44 = deref_var &outUVW (shader_out vec3) 
	intrinsic copy_deref (ssa_44, ssa_43) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_45 = deref_var &out@.field0-temp (shader_temp vec4) 
	vec1 32 ssa_46 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_46, ssa_45) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_frexp
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp
decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUVW-temp (shader_temp vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_23.x
	vec1 32 ssa_25 = mov ssa_23.y
	vec1 32 ssa_26 = mov ssa_23.z
	vec4 32 ssa_28 = vec4 ssa_23.x, ssa_23.y, ssa_23.z, ssa_27
	vec1 32 ssa_29 = mov ssa_23.x
	vec4 32 ssa_30 = fmul ssa_6, ssa_23.xxxx
	vec1 32 ssa_31 = mov ssa_23.y
	vec4 32 ssa_32 = fmul ssa_11, ssa_23.yyyy
	vec4 32 ssa_33 = fadd ssa_30, ssa_32
	vec1 32 ssa_34 = mov ssa_23.z
	vec4 32 ssa_35 = fmul ssa_16, ssa_23.zzzz
	vec4 32 ssa_36 = fadd ssa_33, ssa_35
	vec1 32 ssa_37 = mov ssa_27
	vec4 32 ssa_38 = fmul ssa_21, ssa_27.xxxx
	vec4 32 ssa_39 = fadd ssa_36, ssa_38
	vec1 32 ssa_42 = deref_var &out@.field0-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_42, ssa_39) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_43 = deref_var &out@outUVW-temp (shader_temp vec3) 
	vec1 32 ssa_44 = deref_var &outUVW (shader_out vec3) 
	intrinsic copy_deref (ssa_44, ssa_43) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_45 = deref_var &out@.field0-temp (shader_temp vec4) 
	vec1 32 ssa_46 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_46, ssa_45) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_alu_to_scalar
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp
decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUVW-temp (shader_temp vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_23.x
	vec1 32 ssa_25 = mov ssa_23.y
	vec1 32 ssa_26 = mov ssa_23.z
	vec4 32 ssa_28 = vec4 ssa_23.x, ssa_23.y, ssa_23.z, ssa_27
	vec1 32 ssa_29 = mov ssa_23.x
	vec1 32 ssa_47 = fmul ssa_6.x, ssa_23.x
	vec1 32 ssa_48 = fmul ssa_6.y, ssa_23.x
	vec1 32 ssa_49 = fmul ssa_6.z, ssa_23.x
	vec1 32 ssa_50 = fmul ssa_6.w, ssa_23.x
	vec4 32 ssa_51 = vec4 ssa_47, ssa_48, ssa_49, ssa_50
	vec1 32 ssa_31 = mov ssa_23.y
	vec1 32 ssa_52 = fmul ssa_11.x, ssa_23.y
	vec1 32 ssa_53 = fmul ssa_11.y, ssa_23.y
	vec1 32 ssa_54 = fmul ssa_11.z, ssa_23.y
	vec1 32 ssa_55 = fmul ssa_11.w, ssa_23.y
	vec4 32 ssa_56 = vec4 ssa_52, ssa_53, ssa_54, ssa_55
	vec1 32 ssa_57 = fadd ssa_51.x, ssa_56.x
	vec1 32 ssa_58 = fadd ssa_51.y, ssa_56.y
	vec1 32 ssa_59 = fadd ssa_51.z, ssa_56.z
	vec1 32 ssa_60 = fadd ssa_51.w, ssa_56.w
	vec4 32 ssa_61 = vec4 ssa_57, ssa_58, ssa_59, ssa_60
	vec1 32 ssa_34 = mov ssa_23.z
	vec1 32 ssa_62 = fmul ssa_16.x, ssa_23.z
	vec1 32 ssa_63 = fmul ssa_16.y, ssa_23.z
	vec1 32 ssa_64 = fmul ssa_16.z, ssa_23.z
	vec1 32 ssa_65 = fmul ssa_16.w, ssa_23.z
	vec4 32 ssa_66 = vec4 ssa_62, ssa_63, ssa_64, ssa_65
	vec1 32 ssa_67 = fadd ssa_61.x, ssa_66.x
	vec1 32 ssa_68 = fadd ssa_61.y, ssa_66.y
	vec1 32 ssa_69 = fadd ssa_61.z, ssa_66.z
	vec1 32 ssa_70 = fadd ssa_61.w, ssa_66.w
	vec4 32 ssa_71 = vec4 ssa_67, ssa_68, ssa_69, ssa_70
	vec1 32 ssa_37 = mov ssa_27
	vec1 32 ssa_72 = fmul ssa_21.x, ssa_27
	vec1 32 ssa_73 = fmul ssa_21.y, ssa_27
	vec1 32 ssa_74 = fmul ssa_21.z, ssa_27
	vec1 32 ssa_75 = fmul ssa_21.w, ssa_27
	vec4 32 ssa_76 = vec4 ssa_72, ssa_73, ssa_74, ssa_75
	vec1 32 ssa_77 = fadd ssa_71.x, ssa_76.x
	vec1 32 ssa_78 = fadd ssa_71.y, ssa_76.y
	vec1 32 ssa_79 = fadd ssa_71.z, ssa_76.z
	vec1 32 ssa_80 = fadd ssa_71.w, ssa_76.w
	vec4 32 ssa_81 = vec4 ssa_77, ssa_78, ssa_79, ssa_80
	vec1 32 ssa_42 = deref_var &out@.field0-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_42, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_43 = deref_var &out@outUVW-temp (shader_temp vec3) 
	vec1 32 ssa_44 = deref_var &outUVW (shader_out vec3) 
	intrinsic copy_deref (ssa_44, ssa_43) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_45 = deref_var &out@.field0-temp (shader_temp vec4) 
	vec1 32 ssa_46 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_46, ssa_45) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_tex
nir_normalize_cubemap_coords
nir_lower_global_vars_to_local
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUVW-temp (function_temp vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_23.x
	vec1 32 ssa_25 = mov ssa_23.y
	vec1 32 ssa_26 = mov ssa_23.z
	vec4 32 ssa_28 = vec4 ssa_23.x, ssa_23.y, ssa_23.z, ssa_27
	vec1 32 ssa_29 = mov ssa_23.x
	vec1 32 ssa_47 = fmul ssa_6.x, ssa_23.x
	vec1 32 ssa_48 = fmul ssa_6.y, ssa_23.x
	vec1 32 ssa_49 = fmul ssa_6.z, ssa_23.x
	vec1 32 ssa_50 = fmul ssa_6.w, ssa_23.x
	vec4 32 ssa_51 = vec4 ssa_47, ssa_48, ssa_49, ssa_50
	vec1 32 ssa_31 = mov ssa_23.y
	vec1 32 ssa_52 = fmul ssa_11.x, ssa_23.y
	vec1 32 ssa_53 = fmul ssa_11.y, ssa_23.y
	vec1 32 ssa_54 = fmul ssa_11.z, ssa_23.y
	vec1 32 ssa_55 = fmul ssa_11.w, ssa_23.y
	vec4 32 ssa_56 = vec4 ssa_52, ssa_53, ssa_54, ssa_55
	vec1 32 ssa_57 = fadd ssa_51.x, ssa_56.x
	vec1 32 ssa_58 = fadd ssa_51.y, ssa_56.y
	vec1 32 ssa_59 = fadd ssa_51.z, ssa_56.z
	vec1 32 ssa_60 = fadd ssa_51.w, ssa_56.w
	vec4 32 ssa_61 = vec4 ssa_57, ssa_58, ssa_59, ssa_60
	vec1 32 ssa_34 = mov ssa_23.z
	vec1 32 ssa_62 = fmul ssa_16.x, ssa_23.z
	vec1 32 ssa_63 = fmul ssa_16.y, ssa_23.z
	vec1 32 ssa_64 = fmul ssa_16.z, ssa_23.z
	vec1 32 ssa_65 = fmul ssa_16.w, ssa_23.z
	vec4 32 ssa_66 = vec4 ssa_62, ssa_63, ssa_64, ssa_65
	vec1 32 ssa_67 = fadd ssa_61.x, ssa_66.x
	vec1 32 ssa_68 = fadd ssa_61.y, ssa_66.y
	vec1 32 ssa_69 = fadd ssa_61.z, ssa_66.z
	vec1 32 ssa_70 = fadd ssa_61.w, ssa_66.w
	vec4 32 ssa_71 = vec4 ssa_67, ssa_68, ssa_69, ssa_70
	vec1 32 ssa_37 = mov ssa_27
	vec1 32 ssa_72 = fmul ssa_21.x, ssa_27
	vec1 32 ssa_73 = fmul ssa_21.y, ssa_27
	vec1 32 ssa_74 = fmul ssa_21.z, ssa_27
	vec1 32 ssa_75 = fmul ssa_21.w, ssa_27
	vec4 32 ssa_76 = vec4 ssa_72, ssa_73, ssa_74, ssa_75
	vec1 32 ssa_77 = fadd ssa_71.x, ssa_76.x
	vec1 32 ssa_78 = fadd ssa_71.y, ssa_76.y
	vec1 32 ssa_79 = fadd ssa_71.z, ssa_76.z
	vec1 32 ssa_80 = fadd ssa_71.w, ssa_76.w
	vec4 32 ssa_81 = vec4 ssa_77, ssa_78, ssa_79, ssa_80
	vec1 32 ssa_42 = deref_var &out@.field0-temp (function_temp vec4) 
	intrinsic store_deref (ssa_42, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_43 = deref_var &out@outUVW-temp (function_temp vec3) 
	vec1 32 ssa_44 = deref_var &outUVW (shader_out vec3) 
	intrinsic copy_deref (ssa_44, ssa_43) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_45 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_46 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_46, ssa_45) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_var_copies
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUVW-temp (function_temp vec3) 
	intrinsic store_deref (ssa_2, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_23.x
	vec1 32 ssa_25 = mov ssa_23.y
	vec1 32 ssa_26 = mov ssa_23.z
	vec4 32 ssa_28 = vec4 ssa_23.x, ssa_23.y, ssa_23.z, ssa_27
	vec1 32 ssa_29 = mov ssa_23.x
	vec1 32 ssa_47 = fmul ssa_6.x, ssa_23.x
	vec1 32 ssa_48 = fmul ssa_6.y, ssa_23.x
	vec1 32 ssa_49 = fmul ssa_6.z, ssa_23.x
	vec1 32 ssa_50 = fmul ssa_6.w, ssa_23.x
	vec4 32 ssa_51 = vec4 ssa_47, ssa_48, ssa_49, ssa_50
	vec1 32 ssa_31 = mov ssa_23.y
	vec1 32 ssa_52 = fmul ssa_11.x, ssa_23.y
	vec1 32 ssa_53 = fmul ssa_11.y, ssa_23.y
	vec1 32 ssa_54 = fmul ssa_11.z, ssa_23.y
	vec1 32 ssa_55 = fmul ssa_11.w, ssa_23.y
	vec4 32 ssa_56 = vec4 ssa_52, ssa_53, ssa_54, ssa_55
	vec1 32 ssa_57 = fadd ssa_51.x, ssa_56.x
	vec1 32 ssa_58 = fadd ssa_51.y, ssa_56.y
	vec1 32 ssa_59 = fadd ssa_51.z, ssa_56.z
	vec1 32 ssa_60 = fadd ssa_51.w, ssa_56.w
	vec4 32 ssa_61 = vec4 ssa_57, ssa_58, ssa_59, ssa_60
	vec1 32 ssa_34 = mov ssa_23.z
	vec1 32 ssa_62 = fmul ssa_16.x, ssa_23.z
	vec1 32 ssa_63 = fmul ssa_16.y, ssa_23.z
	vec1 32 ssa_64 = fmul ssa_16.z, ssa_23.z
	vec1 32 ssa_65 = fmul ssa_16.w, ssa_23.z
	vec4 32 ssa_66 = vec4 ssa_62, ssa_63, ssa_64, ssa_65
	vec1 32 ssa_67 = fadd ssa_61.x, ssa_66.x
	vec1 32 ssa_68 = fadd ssa_61.y, ssa_66.y
	vec1 32 ssa_69 = fadd ssa_61.z, ssa_66.z
	vec1 32 ssa_70 = fadd ssa_61.w, ssa_66.w
	vec4 32 ssa_71 = vec4 ssa_67, ssa_68, ssa_69, ssa_70
	vec1 32 ssa_37 = mov ssa_27
	vec1 32 ssa_72 = fmul ssa_21.x, ssa_27
	vec1 32 ssa_73 = fmul ssa_21.y, ssa_27
	vec1 32 ssa_74 = fmul ssa_21.z, ssa_27
	vec1 32 ssa_75 = fmul ssa_21.w, ssa_27
	vec4 32 ssa_76 = vec4 ssa_72, ssa_73, ssa_74, ssa_75
	vec1 32 ssa_77 = fadd ssa_71.x, ssa_76.x
	vec1 32 ssa_78 = fadd ssa_71.y, ssa_76.y
	vec1 32 ssa_79 = fadd ssa_71.z, ssa_76.z
	vec1 32 ssa_80 = fadd ssa_71.w, ssa_76.w
	vec4 32 ssa_81 = vec4 ssa_77, ssa_78, ssa_79, ssa_80
	vec1 32 ssa_42 = deref_var &out@.field0-temp (function_temp vec4) 
	intrinsic store_deref (ssa_42, ssa_81) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_43 = deref_var &out@outUVW-temp (function_temp vec3) 
	vec1 32 ssa_44 = deref_var &outUVW (shader_out vec3) 
	intrinsic copy_deref (ssa_44, ssa_43) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_45 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_46 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_46, ssa_45) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_struct_vars
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUVW-temp (function_temp vec3) 
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_24 = mov ssa_23.x
	vec1 32 ssa_25 = mov ssa_23.y
	vec1 32 ssa_26 = mov ssa_23.z
	vec4 32 ssa_28 = vec4 ssa_23.x, ssa_23.y, ssa_23.z, ssa_27
	vec1 32 ssa_29 = mov ssa_23.x
	vec1 32 ssa_47 = fmul ssa_6.x, ssa_23.x
	vec1 32 ssa_48 = fmul ssa_6.y, ssa_23.x
	vec1 32 ssa_49 = fmul ssa_6.z, ssa_23.x
	vec1 32 ssa_50 = fmul ssa_6.w, ssa_23.x
	vec4 32 ssa_51 = vec4 ssa_47, ssa_48, ssa_49, ssa_50
	vec1 32 ssa_31 = mov ssa_23.y
	vec1 32 ssa_52 = fmul ssa_11.x, ssa_23.y
	vec1 32 ssa_53 = fmul ssa_11.y, ssa_23.y
	vec1 32 ssa_54 = fmul ssa_11.z, ssa_23.y
	vec1 32 ssa_55 = fmul ssa_11.w, ssa_23.y
	vec4 32 ssa_56 = vec4 ssa_52, ssa_53, ssa_54, ssa_55
	vec1 32 ssa_57 = fadd ssa_51.x, ssa_56.x
	vec1 32 ssa_58 = fadd ssa_51.y, ssa_56.y
	vec1 32 ssa_59 = fadd ssa_51.z, ssa_56.z
	vec1 32 ssa_60 = fadd ssa_51.w, ssa_56.w
	vec4 32 ssa_61 = vec4 ssa_57, ssa_58, ssa_59, ssa_60
	vec1 32 ssa_34 = mov ssa_23.z
	vec1 32 ssa_62 = fmul ssa_16.x, ssa_23.z
	vec1 32 ssa_63 = fmul ssa_16.y, ssa_23.z
	vec1 32 ssa_64 = fmul ssa_16.z, ssa_23.z
	vec1 32 ssa_65 = fmul ssa_16.w, ssa_23.z
	vec4 32 ssa_66 = vec4 ssa_62, ssa_63, ssa_64, ssa_65
	vec1 32 ssa_67 = fadd ssa_61.x, ssa_66.x
	vec1 32 ssa_68 = fadd ssa_61.y, ssa_66.y
	vec1 32 ssa_69 = fadd ssa_61.z, ssa_66.z
	vec1 32 ssa_70 = fadd ssa_61.w, ssa_66.w
	vec4 32 ssa_71 = vec4 ssa_67, ssa_68, ssa_69, ssa_70
	vec1 32 ssa_37 = mov ssa_27
	vec1 32 ssa_72 = fmul ssa_21.x, ssa_27
	vec1 32 ssa_73 = fmul ssa_21.y, ssa_27
	vec1 32 ssa_74 = fmul ssa_21.z, ssa_27
	vec1 32 ssa_75 = fmul ssa_21.w, ssa_27
	vec4 32 ssa_76 = vec4 ssa_72, ssa_73, ssa_74, ssa_75
	vec1 32 ssa_77 = fadd ssa_71.x, ssa_76.x
	vec1 32 ssa_78 = fadd ssa_71.y, ssa_76.y
	vec1 32 ssa_79 = fadd ssa_71.z, ssa_76.z
	vec1 32 ssa_80 = fadd ssa_71.w, ssa_76.w
	vec4 32 ssa_81 = vec4 ssa_77, ssa_78, ssa_79, ssa_80
	vec1 32 ssa_42 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_43 = deref_var &out@outUVW-temp (function_temp vec3) 
	vec1 32 ssa_44 = deref_var &outUVW (shader_out vec3) 
	vec3 32 ssa_84 = mov ssa_1
	intrinsic store_deref (ssa_44, ssa_84) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_45 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_46 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_85 = mov ssa_81
	intrinsic store_deref (ssa_46, ssa_85) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_find_array_copies
nir_opt_copy_prop_vars
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUVW-temp (function_temp vec3) 
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec1 32 ssa_24 = mov ssa_1.x
	vec1 32 ssa_25 = mov ssa_1.y
	vec1 32 ssa_26 = mov ssa_1.z
	vec4 32 ssa_28 = vec4 ssa_1.x, ssa_1.y, ssa_1.z, ssa_27
	vec1 32 ssa_29 = mov ssa_1.x
	vec1 32 ssa_47 = fmul ssa_6.x, ssa_1.x
	vec1 32 ssa_48 = fmul ssa_6.y, ssa_1.x
	vec1 32 ssa_49 = fmul ssa_6.z, ssa_1.x
	vec1 32 ssa_50 = fmul ssa_6.w, ssa_1.x
	vec4 32 ssa_51 = vec4 ssa_47, ssa_48, ssa_49, ssa_50
	vec1 32 ssa_31 = mov ssa_1.y
	vec1 32 ssa_52 = fmul ssa_11.x, ssa_1.y
	vec1 32 ssa_53 = fmul ssa_11.y, ssa_1.y
	vec1 32 ssa_54 = fmul ssa_11.z, ssa_1.y
	vec1 32 ssa_55 = fmul ssa_11.w, ssa_1.y
	vec4 32 ssa_56 = vec4 ssa_52, ssa_53, ssa_54, ssa_55
	vec1 32 ssa_57 = fadd ssa_51.x, ssa_56.x
	vec1 32 ssa_58 = fadd ssa_51.y, ssa_56.y
	vec1 32 ssa_59 = fadd ssa_51.z, ssa_56.z
	vec1 32 ssa_60 = fadd ssa_51.w, ssa_56.w
	vec4 32 ssa_61 = vec4 ssa_57, ssa_58, ssa_59, ssa_60
	vec1 32 ssa_34 = mov ssa_1.z
	vec1 32 ssa_62 = fmul ssa_16.x, ssa_1.z
	vec1 32 ssa_63 = fmul ssa_16.y, ssa_1.z
	vec1 32 ssa_64 = fmul ssa_16.z, ssa_1.z
	vec1 32 ssa_65 = fmul ssa_16.w, ssa_1.z
	vec4 32 ssa_66 = vec4 ssa_62, ssa_63, ssa_64, ssa_65
	vec1 32 ssa_67 = fadd ssa_61.x, ssa_66.x
	vec1 32 ssa_68 = fadd ssa_61.y, ssa_66.y
	vec1 32 ssa_69 = fadd ssa_61.z, ssa_66.z
	vec1 32 ssa_70 = fadd ssa_61.w, ssa_66.w
	vec4 32 ssa_71 = vec4 ssa_67, ssa_68, ssa_69, ssa_70
	vec1 32 ssa_37 = mov ssa_27
	vec1 32 ssa_72 = fmul ssa_21.x, ssa_27
	vec1 32 ssa_73 = fmul ssa_21.y, ssa_27
	vec1 32 ssa_74 = fmul ssa_21.z, ssa_27
	vec1 32 ssa_75 = fmul ssa_21.w, ssa_27
	vec4 32 ssa_76 = vec4 ssa_72, ssa_73, ssa_74, ssa_75
	vec1 32 ssa_77 = fadd ssa_71.x, ssa_76.x
	vec1 32 ssa_78 = fadd ssa_71.y, ssa_76.y
	vec1 32 ssa_79 = fadd ssa_71.z, ssa_76.z
	vec1 32 ssa_80 = fadd ssa_71.w, ssa_76.w
	vec4 32 ssa_81 = vec4 ssa_77, ssa_78, ssa_79, ssa_80
	vec1 32 ssa_42 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_43 = deref_var &out@outUVW-temp (function_temp vec3) 
	vec1 32 ssa_44 = deref_var &outUVW (shader_out vec3) 
	vec3 32 ssa_84 = mov ssa_1
	intrinsic store_deref (ssa_44, ssa_84) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_45 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_46 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_85 = mov ssa_81
	intrinsic store_deref (ssa_46, ssa_85) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUVW-temp (function_temp vec3) 
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec1 32 ssa_24 = mov ssa_1.x
	vec1 32 ssa_25 = mov ssa_1.y
	vec1 32 ssa_26 = mov ssa_1.z
	vec4 32 ssa_28 = vec4 ssa_1.x, ssa_1.y, ssa_1.z, ssa_27
	vec1 32 ssa_29 = mov ssa_1.x
	vec1 32 ssa_47 = fmul ssa_6.x, ssa_1.x
	vec1 32 ssa_48 = fmul ssa_6.y, ssa_1.x
	vec1 32 ssa_49 = fmul ssa_6.z, ssa_1.x
	vec1 32 ssa_50 = fmul ssa_6.w, ssa_1.x
	vec4 32 ssa_51 = vec4 ssa_47, ssa_48, ssa_49, ssa_50
	vec1 32 ssa_31 = mov ssa_1.y
	vec1 32 ssa_52 = fmul ssa_11.x, ssa_1.y
	vec1 32 ssa_53 = fmul ssa_11.y, ssa_1.y
	vec1 32 ssa_54 = fmul ssa_11.z, ssa_1.y
	vec1 32 ssa_55 = fmul ssa_11.w, ssa_1.y
	vec4 32 ssa_56 = vec4 ssa_52, ssa_53, ssa_54, ssa_55
	vec1 32 ssa_57 = fadd ssa_51.x, ssa_56.x
	vec1 32 ssa_58 = fadd ssa_51.y, ssa_56.y
	vec1 32 ssa_59 = fadd ssa_51.z, ssa_56.z
	vec1 32 ssa_60 = fadd ssa_51.w, ssa_56.w
	vec4 32 ssa_61 = vec4 ssa_57, ssa_58, ssa_59, ssa_60
	vec1 32 ssa_34 = mov ssa_1.z
	vec1 32 ssa_62 = fmul ssa_16.x, ssa_1.z
	vec1 32 ssa_63 = fmul ssa_16.y, ssa_1.z
	vec1 32 ssa_64 = fmul ssa_16.z, ssa_1.z
	vec1 32 ssa_65 = fmul ssa_16.w, ssa_1.z
	vec4 32 ssa_66 = vec4 ssa_62, ssa_63, ssa_64, ssa_65
	vec1 32 ssa_67 = fadd ssa_61.x, ssa_66.x
	vec1 32 ssa_68 = fadd ssa_61.y, ssa_66.y
	vec1 32 ssa_69 = fadd ssa_61.z, ssa_66.z
	vec1 32 ssa_70 = fadd ssa_61.w, ssa_66.w
	vec4 32 ssa_71 = vec4 ssa_67, ssa_68, ssa_69, ssa_70
	vec1 32 ssa_37 = mov ssa_27
	vec1 32 ssa_72 = fmul ssa_21.x, ssa_27
	vec1 32 ssa_73 = fmul ssa_21.y, ssa_27
	vec1 32 ssa_74 = fmul ssa_21.z, ssa_27
	vec1 32 ssa_75 = fmul ssa_21.w, ssa_27
	vec4 32 ssa_76 = vec4 ssa_72, ssa_73, ssa_74, ssa_75
	vec1 32 ssa_77 = fadd ssa_71.x, ssa_76.x
	vec1 32 ssa_78 = fadd ssa_71.y, ssa_76.y
	vec1 32 ssa_79 = fadd ssa_71.z, ssa_76.z
	vec1 32 ssa_80 = fadd ssa_71.w, ssa_76.w
	vec4 32 ssa_81 = vec4 ssa_77, ssa_78, ssa_79, ssa_80
	vec1 32 ssa_42 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_43 = deref_var &out@outUVW-temp (function_temp vec3) 
	vec1 32 ssa_44 = deref_var &outUVW (shader_out vec3) 
	vec1 32 ssa_86 = mov ssa_1.x
	vec1 32 ssa_87 = mov ssa_1.y
	vec1 32 ssa_88 = mov ssa_1.z
	vec3 32 ssa_89 = vec3 ssa_86, ssa_87, ssa_88
	intrinsic store_deref (ssa_44, ssa_89) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_45 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_46 = deref_var &.field0 (shader_out vec4) 
	vec1 32 ssa_90 = mov ssa_81.x
	vec1 32 ssa_91 = mov ssa_81.y
	vec1 32 ssa_92 = mov ssa_81.z
	vec1 32 ssa_93 = mov ssa_81.w
	vec4 32 ssa_94 = vec4 ssa_90, ssa_91, ssa_92, ssa_93
	intrinsic store_deref (ssa_46, ssa_94) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_copy_prop
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = deref_var &out@outUVW-temp (function_temp vec3) 
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_22 = deref_var &inPos (shader_in vec3) 
	vec1 32 ssa_24 = mov ssa_1.x
	vec1 32 ssa_25 = mov ssa_1.y
	vec1 32 ssa_26 = mov ssa_1.z
	vec4 32 ssa_28 = vec4 ssa_1.x, ssa_1.y, ssa_1.z, ssa_27
	vec1 32 ssa_29 = mov ssa_1.x
	vec1 32 ssa_47 = fmul ssa_6.x, ssa_1.x
	vec1 32 ssa_48 = fmul ssa_6.y, ssa_1.x
	vec1 32 ssa_49 = fmul ssa_6.z, ssa_1.x
	vec1 32 ssa_50 = fmul ssa_6.w, ssa_1.x
	vec4 32 ssa_51 = vec4 ssa_47, ssa_48, ssa_49, ssa_50
	vec1 32 ssa_31 = mov ssa_1.y
	vec1 32 ssa_52 = fmul ssa_11.x, ssa_1.y
	vec1 32 ssa_53 = fmul ssa_11.y, ssa_1.y
	vec1 32 ssa_54 = fmul ssa_11.z, ssa_1.y
	vec1 32 ssa_55 = fmul ssa_11.w, ssa_1.y
	vec4 32 ssa_56 = vec4 ssa_52, ssa_53, ssa_54, ssa_55
	vec1 32 ssa_57 = fadd ssa_47, ssa_52
	vec1 32 ssa_58 = fadd ssa_48, ssa_53
	vec1 32 ssa_59 = fadd ssa_49, ssa_54
	vec1 32 ssa_60 = fadd ssa_50, ssa_55
	vec4 32 ssa_61 = vec4 ssa_57, ssa_58, ssa_59, ssa_60
	vec1 32 ssa_34 = mov ssa_1.z
	vec1 32 ssa_62 = fmul ssa_16.x, ssa_1.z
	vec1 32 ssa_63 = fmul ssa_16.y, ssa_1.z
	vec1 32 ssa_64 = fmul ssa_16.z, ssa_1.z
	vec1 32 ssa_65 = fmul ssa_16.w, ssa_1.z
	vec4 32 ssa_66 = vec4 ssa_62, ssa_63, ssa_64, ssa_65
	vec1 32 ssa_67 = fadd ssa_57, ssa_62
	vec1 32 ssa_68 = fadd ssa_58, ssa_63
	vec1 32 ssa_69 = fadd ssa_59, ssa_64
	vec1 32 ssa_70 = fadd ssa_60, ssa_65
	vec4 32 ssa_71 = vec4 ssa_67, ssa_68, ssa_69, ssa_70
	vec1 32 ssa_37 = mov ssa_27
	vec1 32 ssa_72 = fmul ssa_21.x, ssa_27
	vec1 32 ssa_73 = fmul ssa_21.y, ssa_27
	vec1 32 ssa_74 = fmul ssa_21.z, ssa_27
	vec1 32 ssa_75 = fmul ssa_21.w, ssa_27
	vec4 32 ssa_76 = vec4 ssa_72, ssa_73, ssa_74, ssa_75
	vec1 32 ssa_77 = fadd ssa_67, ssa_72
	vec1 32 ssa_78 = fadd ssa_68, ssa_73
	vec1 32 ssa_79 = fadd ssa_69, ssa_74
	vec1 32 ssa_80 = fadd ssa_70, ssa_75
	vec4 32 ssa_81 = vec4 ssa_77, ssa_78, ssa_79, ssa_80
	vec1 32 ssa_42 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_43 = deref_var &out@outUVW-temp (function_temp vec3) 
	vec1 32 ssa_44 = deref_var &outUVW (shader_out vec3) 
	vec1 32 ssa_86 = mov ssa_1.x
	vec1 32 ssa_87 = mov ssa_1.y
	vec1 32 ssa_88 = mov ssa_1.z
	vec3 32 ssa_89 = vec3 ssa_1.x, ssa_1.y, ssa_1.z
	intrinsic store_deref (ssa_44, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_45 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_46 = deref_var &.field0 (shader_out vec4) 
	vec1 32 ssa_90 = mov ssa_77
	vec1 32 ssa_91 = mov ssa_78
	vec1 32 ssa_92 = mov ssa_79
	vec1 32 ssa_93 = mov ssa_80
	vec4 32 ssa_94 = vec4 ssa_77, ssa_78, ssa_79, ssa_80
	intrinsic store_deref (ssa_46, ssa_94) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_4
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = isub ssa_8, ssa_9
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_14 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_15 = isub ssa_13, ssa_14
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_19 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_20 = isub ssa_18, ssa_19
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_47 = fmul ssa_6.x, ssa_1.x
	vec1 32 ssa_48 = fmul ssa_6.y, ssa_1.x
	vec1 32 ssa_49 = fmul ssa_6.z, ssa_1.x
	vec1 32 ssa_50 = fmul ssa_6.w, ssa_1.x
	vec1 32 ssa_52 = fmul ssa_11.x, ssa_1.y
	vec1 32 ssa_53 = fmul ssa_11.y, ssa_1.y
	vec1 32 ssa_54 = fmul ssa_11.z, ssa_1.y
	vec1 32 ssa_55 = fmul ssa_11.w, ssa_1.y
	vec1 32 ssa_57 = fadd ssa_47, ssa_52
	vec1 32 ssa_58 = fadd ssa_48, ssa_53
	vec1 32 ssa_59 = fadd ssa_49, ssa_54
	vec1 32 ssa_60 = fadd ssa_50, ssa_55
	vec1 32 ssa_62 = fmul ssa_16.x, ssa_1.z
	vec1 32 ssa_63 = fmul ssa_16.y, ssa_1.z
	vec1 32 ssa_64 = fmul ssa_16.z, ssa_1.z
	vec1 32 ssa_65 = fmul ssa_16.w, ssa_1.z
	vec1 32 ssa_67 = fadd ssa_57, ssa_62
	vec1 32 ssa_68 = fadd ssa_58, ssa_63
	vec1 32 ssa_69 = fadd ssa_59, ssa_64
	vec1 32 ssa_70 = fadd ssa_60, ssa_65
	vec1 32 ssa_72 = fmul ssa_21.x, ssa_27
	vec1 32 ssa_73 = fmul ssa_21.y, ssa_27
	vec1 32 ssa_74 = fmul ssa_21.z, ssa_27
	vec1 32 ssa_75 = fmul ssa_21.w, ssa_27
	vec1 32 ssa_77 = fadd ssa_67, ssa_72
	vec1 32 ssa_78 = fadd ssa_68, ssa_73
	vec1 32 ssa_79 = fadd ssa_69, ssa_74
	vec1 32 ssa_80 = fadd ssa_70, ssa_75
	vec1 32 ssa_44 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_44, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_46 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_94 = vec4 ssa_77, ssa_78, ssa_79, ssa_80
	intrinsic store_deref (ssa_46, ssa_94) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = isub ssa_3, ssa_3
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = iadd ssa_3, ssa_7
	vec1 32 ssa_10 = isub ssa_8, ssa_3
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_10) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_13 = iadd ssa_3, ssa_12
	vec1 32 ssa_15 = isub ssa_13, ssa_3
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_15) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_18 = iadd ssa_3, ssa_17
	vec1 32 ssa_20 = isub ssa_18, ssa_3
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_20) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_47 = fmul ssa_6.x, ssa_1.x
	vec1 32 ssa_48 = fmul ssa_6.y, ssa_1.x
	vec1 32 ssa_49 = fmul ssa_6.z, ssa_1.x
	vec1 32 ssa_50 = fmul ssa_6.w, ssa_1.x
	vec1 32 ssa_52 = fmul ssa_11.x, ssa_1.y
	vec1 32 ssa_53 = fmul ssa_11.y, ssa_1.y
	vec1 32 ssa_54 = fmul ssa_11.z, ssa_1.y
	vec1 32 ssa_55 = fmul ssa_11.w, ssa_1.y
	vec1 32 ssa_57 = fadd ssa_47, ssa_52
	vec1 32 ssa_58 = fadd ssa_48, ssa_53
	vec1 32 ssa_59 = fadd ssa_49, ssa_54
	vec1 32 ssa_60 = fadd ssa_50, ssa_55
	vec1 32 ssa_62 = fmul ssa_16.x, ssa_1.z
	vec1 32 ssa_63 = fmul ssa_16.y, ssa_1.z
	vec1 32 ssa_64 = fmul ssa_16.z, ssa_1.z
	vec1 32 ssa_65 = fmul ssa_16.w, ssa_1.z
	vec1 32 ssa_67 = fadd ssa_57, ssa_62
	vec1 32 ssa_68 = fadd ssa_58, ssa_63
	vec1 32 ssa_69 = fadd ssa_59, ssa_64
	vec1 32 ssa_70 = fadd ssa_60, ssa_65
	vec1 32 ssa_72 = fmul ssa_21.x, ssa_27
	vec1 32 ssa_73 = fmul ssa_21.y, ssa_27
	vec1 32 ssa_74 = fmul ssa_21.z, ssa_27
	vec1 32 ssa_75 = fmul ssa_21.w, ssa_27
	vec1 32 ssa_77 = fadd ssa_67, ssa_72
	vec1 32 ssa_78 = fadd ssa_68, ssa_73
	vec1 32 ssa_79 = fadd ssa_69, ssa_74
	vec1 32 ssa_80 = fadd ssa_70, ssa_75
	vec1 32 ssa_44 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_44, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_46 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_94 = vec4 ssa_77, ssa_78, ssa_79, ssa_80
	intrinsic store_deref (ssa_46, ssa_94) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_105 = ineg ssa_3
	vec1 32 ssa_106 = iadd ssa_3, ssa_105
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_106) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_103 = ineg ssa_3
	vec1 32 ssa_104 = iadd ssa_7, ssa_103
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_104) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_101 = ineg ssa_3
	vec1 32 ssa_102 = iadd ssa_12, ssa_101
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_102) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_99 = ineg ssa_3
	vec1 32 ssa_100 = iadd ssa_17, ssa_99
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_100) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_47 = fmul ssa_6.x, ssa_1.x
	vec1 32 ssa_48 = fmul ssa_6.y, ssa_1.x
	vec1 32 ssa_49 = fmul ssa_6.z, ssa_1.x
	vec1 32 ssa_50 = fmul ssa_6.w, ssa_1.x
	vec1 32 ssa_52 = fmul ssa_11.x, ssa_1.y
	vec1 32 ssa_53 = fmul ssa_11.y, ssa_1.y
	vec1 32 ssa_54 = fmul ssa_11.z, ssa_1.y
	vec1 32 ssa_55 = fmul ssa_11.w, ssa_1.y
	vec1 32 ssa_57 = fadd ssa_47, ssa_52
	vec1 32 ssa_58 = fadd ssa_48, ssa_53
	vec1 32 ssa_59 = fadd ssa_49, ssa_54
	vec1 32 ssa_60 = fadd ssa_50, ssa_55
	vec1 32 ssa_62 = fmul ssa_16.x, ssa_1.z
	vec1 32 ssa_63 = fmul ssa_16.y, ssa_1.z
	vec1 32 ssa_64 = fmul ssa_16.z, ssa_1.z
	vec1 32 ssa_65 = fmul ssa_16.w, ssa_1.z
	vec1 32 ssa_67 = fadd ssa_57, ssa_62
	vec1 32 ssa_68 = fadd ssa_58, ssa_63
	vec1 32 ssa_69 = fadd ssa_59, ssa_64
	vec1 32 ssa_70 = fadd ssa_60, ssa_65
	vec1 32 ssa_98 = mov ssa_21.x
	vec1 32 ssa_97 = mov ssa_21.y
	vec1 32 ssa_96 = mov ssa_21.z
	vec1 32 ssa_95 = mov ssa_21.w
	vec1 32 ssa_77 = fadd ssa_67, ssa_98
	vec1 32 ssa_78 = fadd ssa_68, ssa_97
	vec1 32 ssa_79 = fadd ssa_69, ssa_96
	vec1 32 ssa_80 = fadd ssa_70, ssa_95
	vec1 32 ssa_44 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_44, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_46 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_94 = vec4 ssa_77, ssa_78, ssa_79, ssa_80
	intrinsic store_deref (ssa_46, ssa_94) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_constant_folding
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_107 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_108 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_108) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_109 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_110 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_11 = intrinsic load_push_constant (ssa_110) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_12 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_111 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_112 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_16 = intrinsic load_push_constant (ssa_112) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_113 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_114 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_21 = intrinsic load_push_constant (ssa_114) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_47 = fmul ssa_6.x, ssa_1.x
	vec1 32 ssa_48 = fmul ssa_6.y, ssa_1.x
	vec1 32 ssa_49 = fmul ssa_6.z, ssa_1.x
	vec1 32 ssa_50 = fmul ssa_6.w, ssa_1.x
	vec1 32 ssa_52 = fmul ssa_11.x, ssa_1.y
	vec1 32 ssa_53 = fmul ssa_11.y, ssa_1.y
	vec1 32 ssa_54 = fmul ssa_11.z, ssa_1.y
	vec1 32 ssa_55 = fmul ssa_11.w, ssa_1.y
	vec1 32 ssa_57 = fadd ssa_47, ssa_52
	vec1 32 ssa_58 = fadd ssa_48, ssa_53
	vec1 32 ssa_59 = fadd ssa_49, ssa_54
	vec1 32 ssa_60 = fadd ssa_50, ssa_55
	vec1 32 ssa_62 = fmul ssa_16.x, ssa_1.z
	vec1 32 ssa_63 = fmul ssa_16.y, ssa_1.z
	vec1 32 ssa_64 = fmul ssa_16.z, ssa_1.z
	vec1 32 ssa_65 = fmul ssa_16.w, ssa_1.z
	vec1 32 ssa_67 = fadd ssa_57, ssa_62
	vec1 32 ssa_68 = fadd ssa_58, ssa_63
	vec1 32 ssa_69 = fadd ssa_59, ssa_64
	vec1 32 ssa_70 = fadd ssa_60, ssa_65
	vec1 32 ssa_98 = mov ssa_21.x
	vec1 32 ssa_97 = mov ssa_21.y
	vec1 32 ssa_96 = mov ssa_21.z
	vec1 32 ssa_95 = mov ssa_21.w
	vec1 32 ssa_77 = fadd ssa_67, ssa_98
	vec1 32 ssa_78 = fadd ssa_68, ssa_97
	vec1 32 ssa_79 = fadd ssa_69, ssa_96
	vec1 32 ssa_80 = fadd ssa_70, ssa_95
	vec1 32 ssa_44 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_44, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_46 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_94 = vec4 ssa_77, ssa_78, ssa_79, ssa_80
	intrinsic store_deref (ssa_46, ssa_94) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_2 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_7 = load_const (0x00000010 /* 0.000000 */)
	vec1 32 ssa_8 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_10 = intrinsic load_push_constant (ssa_9) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_11 = load_const (0x00000020 /* 0.000000 */)
	vec1 32 ssa_12 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_13 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_14 = intrinsic load_push_constant (ssa_13) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_15 = load_const (0x00000030 /* 0.000000 */)
	vec1 32 ssa_16 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_19 = fmul ssa_6.x, ssa_2.x
	vec1 32 ssa_20 = fmul ssa_6.y, ssa_2.x
	vec1 32 ssa_21 = fmul ssa_6.z, ssa_2.x
	vec1 32 ssa_22 = fmul ssa_6.w, ssa_2.x
	vec1 32 ssa_23 = fmul ssa_10.x, ssa_2.y
	vec1 32 ssa_24 = fmul ssa_10.y, ssa_2.y
	vec1 32 ssa_25 = fmul ssa_10.z, ssa_2.y
	vec1 32 ssa_26 = fmul ssa_10.w, ssa_2.y
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_22, ssa_26
	vec1 32 ssa_31 = fmul ssa_14.x, ssa_2.z
	vec1 32 ssa_32 = fmul ssa_14.y, ssa_2.z
	vec1 32 ssa_33 = fmul ssa_14.z, ssa_2.z
	vec1 32 ssa_34 = fmul ssa_14.w, ssa_2.z
	vec1 32 ssa_35 = fadd ssa_27, ssa_31
	vec1 32 ssa_36 = fadd ssa_28, ssa_32
	vec1 32 ssa_37 = fadd ssa_29, ssa_33
	vec1 32 ssa_38 = fadd ssa_30, ssa_34
	vec1 32 ssa_39 = mov ssa_18.x
	vec1 32 ssa_40 = mov ssa_18.y
	vec1 32 ssa_41 = mov ssa_18.z
	vec1 32 ssa_42 = mov ssa_18.w
	vec1 32 ssa_43 = fadd ssa_35, ssa_18.x
	vec1 32 ssa_44 = fadd ssa_36, ssa_18.y
	vec1 32 ssa_45 = fadd ssa_37, ssa_18.z
	vec1 32 ssa_46 = fadd ssa_38, ssa_18.w
	vec1 32 ssa_47 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_47, ssa_2) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_48 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_49 = vec4 ssa_43, ssa_44, ssa_45, ssa_46
	intrinsic store_deref (ssa_48, ssa_49) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_1 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_2 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_6 = intrinsic load_push_constant (ssa_5) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_9 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_10 = intrinsic load_push_constant (ssa_9) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_13 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_14 = intrinsic load_push_constant (ssa_13) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_17 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_18 = intrinsic load_push_constant (ssa_17) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_19 = fmul ssa_6.x, ssa_2.x
	vec1 32 ssa_20 = fmul ssa_6.y, ssa_2.x
	vec1 32 ssa_21 = fmul ssa_6.z, ssa_2.x
	vec1 32 ssa_22 = fmul ssa_6.w, ssa_2.x
	vec1 32 ssa_23 = fmul ssa_10.x, ssa_2.y
	vec1 32 ssa_24 = fmul ssa_10.y, ssa_2.y
	vec1 32 ssa_25 = fmul ssa_10.z, ssa_2.y
	vec1 32 ssa_26 = fmul ssa_10.w, ssa_2.y
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_22, ssa_26
	vec1 32 ssa_31 = fmul ssa_14.x, ssa_2.z
	vec1 32 ssa_32 = fmul ssa_14.y, ssa_2.z
	vec1 32 ssa_33 = fmul ssa_14.z, ssa_2.z
	vec1 32 ssa_34 = fmul ssa_14.w, ssa_2.z
	vec1 32 ssa_35 = fadd ssa_27, ssa_31
	vec1 32 ssa_36 = fadd ssa_28, ssa_32
	vec1 32 ssa_37 = fadd ssa_29, ssa_33
	vec1 32 ssa_38 = fadd ssa_30, ssa_34
	vec1 32 ssa_43 = fadd ssa_35, ssa_18.x
	vec1 32 ssa_44 = fadd ssa_36, ssa_18.y
	vec1 32 ssa_45 = fadd ssa_37, ssa_18.z
	vec1 32 ssa_46 = fadd ssa_38, ssa_18.w
	vec1 32 ssa_47 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_47, ssa_2) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_48 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_49 = vec4 ssa_43, ssa_44, ssa_45, ssa_46
	intrinsic store_deref (ssa_48, ssa_49) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &outUVW (shader_out vec3) 
	intrinsic store_deref (ssa_34, ssa_1) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_35 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_36 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_35, ssa_36) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_doubles
nir_lower_int64
nir_lower_bit_size
nir_lower_load_const_to_scalar
nir_lower_var_copies
nir_opt_large_constants
nir_lower_system_values
nir_lower_compute_system_values
nir_lower_subgroups
nir_lower_clip_cull_distance_arrays
nir_lower_vars_to_scratch
nir_lower_indirect_derefs
nir_lower_array_deref_of_vec
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_lower_variable_initializers
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	block block_0:
	/* preds: */
	vec1 32 ssa_35 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_15 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_14 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_13 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_11 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_5 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_0 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_4 = mov ssa_3.y
	vec1 32 ssa_6 = fadd ssa_4, ssa_5
	vec3 32 ssa_8 = fmul ssa_7, ssa_6.xxx
	vec3 32 ssa_12 = vec3 ssa_9, ssa_10, ssa_11
	vec3 32 ssa_16 = vec3 ssa_13, ssa_14, ssa_15
	vec3 32 ssa_17 = fmax ssa_8, ssa_12
	vec3 32 ssa_18 = fmin ssa_17, ssa_16
	vec1 32 ssa_19 = deref_var &atmosphere (function_temp vec3) 
	intrinsic store_deref (ssa_19, ssa_18) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_20 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_21 = intrinsic load_deref (ssa_20) (0) /* access=0 */
	vec1 32 ssa_22 = deref_var &param (function_temp vec3) 
	intrinsic store_deref (ssa_22, ssa_21) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_23 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_24 = deref_var &param (function_temp vec3) 
	call starField(vf3; ssa_23, ssa_24
	vec3 32 ssa_25 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_26 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	vec3 32 ssa_28 = fadd ssa_25, ssa_27
	vec1 32 ssa_29 = deref_var &color (function_temp vec3) 
	intrinsic store_deref (ssa_29, ssa_28) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_30 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_31 = intrinsic load_deref (ssa_30) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_31.x
	vec1 32 ssa_33 = mov ssa_31.y
	vec1 32 ssa_34 = mov ssa_31.z
	vec4 32 ssa_36 = vec4 ssa_32, ssa_33, ssa_34, ssa_35
	vec1 32 ssa_37 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_37, ssa_36) (15, 0) /* wrmask=xyzw */ /* access=0 */
	return
	/* succs: block_1 */
	block block_1:
}

decl_function hash33(vf3; (2 params)

impl hash33(vf3; {
	block block_0:
	/* preds: */
	vec3 32 ssa_9 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_3 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_0 = intrinsic load_param () (1) /* param_idx=1 */
	vec1 32 ssa_1 = deref_cast (vec3 *)ssa_0 (function_temp vec3)  /* ptr_stride=0 */
	vec3 32 ssa_2 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_4 = fmul ssa_2, ssa_3
	vec3 32 ssa_5 = ffract ssa_4
	intrinsic store_deref (ssa_1, ssa_5) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_6 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_7 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_8 = vec3 ssa_7.y, ssa_7.x, ssa_7.z
	vec3 32 ssa_10 = fadd ssa_8, ssa_9
	vec1 32 ssa_11 = fdot3 ssa_6, ssa_10
	vec3 32 ssa_12 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_13 = vec3 ssa_11, ssa_11, ssa_11
	vec3 32 ssa_14 = fadd ssa_12, ssa_13
	intrinsic store_deref (ssa_1, ssa_14) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_17 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_18 = mov ssa_17.x
	vec3 32 ssa_21 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_22 = mov ssa_21.y
	vec1 32 ssa_23 = fadd ssa_18, ssa_22
	vec3 32 ssa_26 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_27 = mov ssa_26.z
	vec1 32 ssa_28 = fmul ssa_23, ssa_27
	vec3 32 ssa_31 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_31.x
	vec3 32 ssa_35 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_36 = mov ssa_35.z
	vec1 32 ssa_37 = fadd ssa_32, ssa_36
	vec3 32 ssa_40 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_41 = mov ssa_40.y
	vec1 32 ssa_42 = fmul ssa_37, ssa_41
	vec1 32 ssa_43 = fadd ssa_28, ssa_42
	vec3 32 ssa_46 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_47 = mov ssa_46.y
	vec3 32 ssa_50 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_51 = mov ssa_50.z
	vec1 32 ssa_52 = fadd ssa_47, ssa_51
	vec3 32 ssa_55 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_56 = mov ssa_55.x
	vec1 32 ssa_57 = fmul ssa_52, ssa_56
	vec1 32 ssa_58 = fadd ssa_43, ssa_57
	vec1 32 ssa_59 = ffract ssa_58
	vec1 32 ssa_60 = intrinsic load_param () (0) /* param_idx=0 */
	vec1 32 ssa_61 = deref_cast (float *)ssa_60 (function_temp float)  /* ptr_stride=0 */
	intrinsic store_deref (ssa_61, ssa_59) (1, 0) /* wrmask=x */ /* access=0 */
	return
	/* succs: block_1 */
	block block_1:
}

decl_function starField(vf3; (2 params)

impl starField(vf3; {
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_24 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_2 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = intrinsic load_param () (1) /* param_idx=1 */
	vec1 32 ssa_1 = deref_cast (vec3 *)ssa_0 (function_temp vec3)  /* ptr_stride=0 */
	vec1 32 ssa_3 = deref_var &color@0 (function_temp vec3) 
	intrinsic store_deref (ssa_3, ssa_2) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_5 = deref_var &threshhold (function_temp float) 
	intrinsic store_deref (ssa_5, ssa_4) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_6 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_7 = deref_var &param@1 (function_temp vec3) 
	intrinsic store_deref (ssa_7, ssa_6) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_8 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_9 = deref_var &param@1 (function_temp vec3) 
	call hash33(vf3; ssa_8, ssa_9
	vec1 32 ssa_10 = intrinsic load_deref (ssa_8) (0) /* access=0 */
	vec1 32 ssa_11 = deref_var &rnd (function_temp float) 
	intrinsic store_deref (ssa_11, ssa_10) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_12 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_15 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 1 ssa_16 = fge ssa_13, ssa_15
	/* succs: block_1 block_2 */
	if ssa_16 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_17 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
		vec1 32 ssa_19 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_21 = fsub ssa_18, ssa_20
		vec1 32 ssa_22 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
		vec1 32 ssa_25 = fsub ssa_24, ssa_23
		vec1 32 ssa_26 = fdiv ssa_21, ssa_25
		vec1 32 ssa_28 = fpow ssa_26, ssa_27
		vec1 32 ssa_29 = deref_var &starCol (function_temp float) 
		intrinsic store_deref (ssa_29, ssa_28) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_30 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_31 = intrinsic load_deref (ssa_30) (0) /* access=0 */
		vec3 32 ssa_32 = vec3 ssa_31, ssa_31, ssa_31
		vec1 32 ssa_33 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_34 = intrinsic load_deref (ssa_33) (0) /* access=0 */
		vec3 32 ssa_35 = fadd ssa_34, ssa_32
		vec1 32 ssa_36 = deref_var &color@0 (function_temp vec3) 
		intrinsic store_deref (ssa_36, ssa_35) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_37 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_38 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_39 = intrinsic load_param () (0) /* param_idx=0 */
	vec1 32 ssa_40 = deref_cast (vec3 *)ssa_39 (function_temp vec3)  /* ptr_stride=0 */
	intrinsic store_deref (ssa_40, ssa_38) (7, 0) /* wrmask=xyz */ /* access=0 */
	return
	/* succs: block_4 */
	block block_4:
}

nir_lower_returns
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	block block_0:
	/* preds: */
	vec1 32 ssa_35 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_15 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_14 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_13 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_11 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_10 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_9 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_5 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_0 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_3 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_4 = mov ssa_3.y
	vec1 32 ssa_6 = fadd ssa_4, ssa_5
	vec3 32 ssa_8 = fmul ssa_7, ssa_6.xxx
	vec3 32 ssa_12 = vec3 ssa_9, ssa_10, ssa_11
	vec3 32 ssa_16 = vec3 ssa_13, ssa_14, ssa_15
	vec3 32 ssa_17 = fmax ssa_8, ssa_12
	vec3 32 ssa_18 = fmin ssa_17, ssa_16
	vec1 32 ssa_19 = deref_var &atmosphere (function_temp vec3) 
	intrinsic store_deref (ssa_19, ssa_18) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_20 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_21 = intrinsic load_deref (ssa_20) (0) /* access=0 */
	vec1 32 ssa_22 = deref_var &param (function_temp vec3) 
	intrinsic store_deref (ssa_22, ssa_21) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_23 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_24 = deref_var &param (function_temp vec3) 
	call starField(vf3; ssa_23, ssa_24
	vec3 32 ssa_25 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_26 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_27 = intrinsic load_deref (ssa_26) (0) /* access=0 */
	vec3 32 ssa_28 = fadd ssa_25, ssa_27
	vec1 32 ssa_29 = deref_var &color (function_temp vec3) 
	intrinsic store_deref (ssa_29, ssa_28) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_30 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_31 = intrinsic load_deref (ssa_30) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_31.x
	vec1 32 ssa_33 = mov ssa_31.y
	vec1 32 ssa_34 = mov ssa_31.z
	vec4 32 ssa_36 = vec4 ssa_32, ssa_33, ssa_34, ssa_35
	vec1 32 ssa_37 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_37, ssa_36) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

decl_function hash33(vf3; (2 params)

impl hash33(vf3; {
	block block_0:
	/* preds: */
	vec3 32 ssa_9 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_3 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_0 = intrinsic load_param () (1) /* param_idx=1 */
	vec1 32 ssa_1 = deref_cast (vec3 *)ssa_0 (function_temp vec3)  /* ptr_stride=0 */
	vec3 32 ssa_2 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_4 = fmul ssa_2, ssa_3
	vec3 32 ssa_5 = ffract ssa_4
	intrinsic store_deref (ssa_1, ssa_5) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_6 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_7 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_8 = vec3 ssa_7.y, ssa_7.x, ssa_7.z
	vec3 32 ssa_10 = fadd ssa_8, ssa_9
	vec1 32 ssa_11 = fdot3 ssa_6, ssa_10
	vec3 32 ssa_12 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_13 = vec3 ssa_11, ssa_11, ssa_11
	vec3 32 ssa_14 = fadd ssa_12, ssa_13
	intrinsic store_deref (ssa_1, ssa_14) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_17 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_18 = mov ssa_17.x
	vec3 32 ssa_21 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_22 = mov ssa_21.y
	vec1 32 ssa_23 = fadd ssa_18, ssa_22
	vec3 32 ssa_26 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_27 = mov ssa_26.z
	vec1 32 ssa_28 = fmul ssa_23, ssa_27
	vec3 32 ssa_31 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_31.x
	vec3 32 ssa_35 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_36 = mov ssa_35.z
	vec1 32 ssa_37 = fadd ssa_32, ssa_36
	vec3 32 ssa_40 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_41 = mov ssa_40.y
	vec1 32 ssa_42 = fmul ssa_37, ssa_41
	vec1 32 ssa_43 = fadd ssa_28, ssa_42
	vec3 32 ssa_46 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_47 = mov ssa_46.y
	vec3 32 ssa_50 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_51 = mov ssa_50.z
	vec1 32 ssa_52 = fadd ssa_47, ssa_51
	vec3 32 ssa_55 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_56 = mov ssa_55.x
	vec1 32 ssa_57 = fmul ssa_52, ssa_56
	vec1 32 ssa_58 = fadd ssa_43, ssa_57
	vec1 32 ssa_59 = ffract ssa_58
	vec1 32 ssa_60 = intrinsic load_param () (0) /* param_idx=0 */
	vec1 32 ssa_61 = deref_cast (float *)ssa_60 (function_temp float)  /* ptr_stride=0 */
	intrinsic store_deref (ssa_61, ssa_59) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

decl_function starField(vf3; (2 params)

impl starField(vf3; {
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	block block_0:
	/* preds: */
	vec1 32 ssa_27 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_24 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_2 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_0 = intrinsic load_param () (1) /* param_idx=1 */
	vec1 32 ssa_1 = deref_cast (vec3 *)ssa_0 (function_temp vec3)  /* ptr_stride=0 */
	vec1 32 ssa_3 = deref_var &color@0 (function_temp vec3) 
	intrinsic store_deref (ssa_3, ssa_2) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_5 = deref_var &threshhold (function_temp float) 
	intrinsic store_deref (ssa_5, ssa_4) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_6 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_7 = deref_var &param@1 (function_temp vec3) 
	intrinsic store_deref (ssa_7, ssa_6) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_8 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_9 = deref_var &param@1 (function_temp vec3) 
	call hash33(vf3; ssa_8, ssa_9
	vec1 32 ssa_10 = intrinsic load_deref (ssa_8) (0) /* access=0 */
	vec1 32 ssa_11 = deref_var &rnd (function_temp float) 
	intrinsic store_deref (ssa_11, ssa_10) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_12 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_13 = intrinsic load_deref (ssa_12) (0) /* access=0 */
	vec1 32 ssa_14 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_15 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 1 ssa_16 = fge ssa_13, ssa_15
	/* succs: block_1 block_2 */
	if ssa_16 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_17 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_18 = intrinsic load_deref (ssa_17) (0) /* access=0 */
		vec1 32 ssa_19 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
		vec1 32 ssa_21 = fsub ssa_18, ssa_20
		vec1 32 ssa_22 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_23 = intrinsic load_deref (ssa_22) (0) /* access=0 */
		vec1 32 ssa_25 = fsub ssa_24, ssa_23
		vec1 32 ssa_26 = fdiv ssa_21, ssa_25
		vec1 32 ssa_28 = fpow ssa_26, ssa_27
		vec1 32 ssa_29 = deref_var &starCol (function_temp float) 
		intrinsic store_deref (ssa_29, ssa_28) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_30 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_31 = intrinsic load_deref (ssa_30) (0) /* access=0 */
		vec3 32 ssa_32 = vec3 ssa_31, ssa_31, ssa_31
		vec1 32 ssa_33 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_34 = intrinsic load_deref (ssa_33) (0) /* access=0 */
		vec3 32 ssa_35 = fadd ssa_34, ssa_32
		vec1 32 ssa_36 = deref_var &color@0 (function_temp vec3) 
		intrinsic store_deref (ssa_36, ssa_35) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_37 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_38 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_39 = intrinsic load_param () (0) /* param_idx=0 */
	vec1 32 ssa_40 = deref_cast (vec3 *)ssa_39 (function_temp vec3)  /* ptr_stride=0 */
	intrinsic store_deref (ssa_40, ssa_38) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_inline_functions
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_11, ssa_8
	vec3 32 ssa_13 = fmul ssa_7, ssa_12.xxx
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec3 32 ssa_16 = fmax ssa_13, ssa_14
	vec3 32 ssa_17 = fmin ssa_16, ssa_15
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	intrinsic store_deref (ssa_18, ssa_17) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	intrinsic store_deref (ssa_21, ssa_20) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_28 = deref_cast (vec3 *)ssa_23 (function_temp vec3)  /* ptr_stride=0 */
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	intrinsic store_deref (ssa_29, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	intrinsic store_deref (ssa_30, ssa_26) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_31 = intrinsic load_deref (ssa_28) (0) /* access=0 */
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	intrinsic store_deref (ssa_32, ssa_31) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_37 = deref_cast (vec3 *)ssa_34 (function_temp vec3)  /* ptr_stride=0 */
	vec3 32 ssa_38 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec3 32 ssa_39 = fmul ssa_38, ssa_36
	vec3 32 ssa_40 = ffract ssa_39
	intrinsic store_deref (ssa_37, ssa_40) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_41 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec3 32 ssa_42 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec3 32 ssa_43 = vec3 ssa_42.y, ssa_42.x, ssa_42.z
	vec3 32 ssa_44 = fadd ssa_43, ssa_35
	vec1 32 ssa_45 = fdot3 ssa_41, ssa_44
	vec3 32 ssa_46 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec3 32 ssa_47 = vec3 ssa_45, ssa_45, ssa_45
	vec3 32 ssa_48 = fadd ssa_46, ssa_47
	intrinsic store_deref (ssa_37, ssa_48) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_49 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_50 = mov ssa_49.x
	vec3 32 ssa_51 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_52 = mov ssa_51.y
	vec1 32 ssa_53 = fadd ssa_50, ssa_52
	vec3 32 ssa_54 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_55 = mov ssa_54.z
	vec1 32 ssa_56 = fmul ssa_53, ssa_55
	vec3 32 ssa_57 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_58 = mov ssa_57.x
	vec3 32 ssa_59 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_60 = mov ssa_59.z
	vec1 32 ssa_61 = fadd ssa_58, ssa_60
	vec3 32 ssa_62 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_63 = mov ssa_62.y
	vec1 32 ssa_64 = fmul ssa_61, ssa_63
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec3 32 ssa_66 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_67 = mov ssa_66.y
	vec3 32 ssa_68 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_69 = mov ssa_68.z
	vec1 32 ssa_70 = fadd ssa_67, ssa_69
	vec3 32 ssa_71 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_72 = mov ssa_71.x
	vec1 32 ssa_73 = fmul ssa_70, ssa_72
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	vec1 32 ssa_76 = deref_cast (float *)ssa_33 (function_temp float)  /* ptr_stride=0 */
	intrinsic store_deref (ssa_76, ssa_75) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = intrinsic load_deref (ssa_33) (0) /* access=0 */
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	intrinsic store_deref (ssa_78, ssa_77) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 1 ssa_83 = fge ssa_80, ssa_82
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_85 = intrinsic load_deref (ssa_84) (0) /* access=0 */
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_87 = intrinsic load_deref (ssa_86) (0) /* access=0 */
		vec1 32 ssa_88 = fsub ssa_85, ssa_87
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_90 = intrinsic load_deref (ssa_89) (0) /* access=0 */
		vec1 32 ssa_91 = fsub ssa_25, ssa_90
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		intrinsic store_deref (ssa_94, ssa_93) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_96 = intrinsic load_deref (ssa_95) (0) /* access=0 */
		vec3 32 ssa_97 = vec3 ssa_96, ssa_96, ssa_96
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
		vec3 32 ssa_100 = fadd ssa_99, ssa_97
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		intrinsic store_deref (ssa_101, ssa_100) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_103 = intrinsic load_deref (ssa_102) (0) /* access=0 */
	vec1 32 ssa_104 = deref_cast (vec3 *)ssa_22 (function_temp vec3)  /* ptr_stride=0 */
	intrinsic store_deref (ssa_104, ssa_103) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_105 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_107 = intrinsic load_deref (ssa_106) (0) /* access=0 */
	vec3 32 ssa_108 = fadd ssa_105, ssa_107
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	intrinsic store_deref (ssa_109, ssa_108) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_111 = intrinsic load_deref (ssa_110) (0) /* access=0 */
	vec1 32 ssa_112 = mov ssa_111.x
	vec1 32 ssa_113 = mov ssa_111.y
	vec1 32 ssa_114 = mov ssa_111.z
	vec4 32 ssa_115 = vec4 ssa_112, ssa_113, ssa_114, ssa_0
	vec1 32 ssa_116 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_116, ssa_115) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

decl_function hash33(vf3; (2 params)

impl hash33(vf3; {
	block block_0:
	/* preds: */
	vec3 32 ssa_9 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_3 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_0 = intrinsic load_param () (1) /* param_idx=1 */
	vec1 32 ssa_1 = deref_cast (vec3 *)ssa_0 (function_temp vec3)  /* ptr_stride=0 */
	vec3 32 ssa_2 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_4 = fmul ssa_2, ssa_3
	vec3 32 ssa_5 = ffract ssa_4
	intrinsic store_deref (ssa_1, ssa_5) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_6 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_7 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_8 = vec3 ssa_7.y, ssa_7.x, ssa_7.z
	vec3 32 ssa_10 = fadd ssa_8, ssa_9
	vec1 32 ssa_11 = fdot3 ssa_6, ssa_10
	vec3 32 ssa_12 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_13 = vec3 ssa_11, ssa_11, ssa_11
	vec3 32 ssa_14 = fadd ssa_12, ssa_13
	intrinsic store_deref (ssa_1, ssa_14) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_17 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_18 = mov ssa_17.x
	vec3 32 ssa_21 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_22 = mov ssa_21.y
	vec1 32 ssa_23 = fadd ssa_18, ssa_22
	vec3 32 ssa_26 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_27 = mov ssa_26.z
	vec1 32 ssa_28 = fmul ssa_23, ssa_27
	vec3 32 ssa_31 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_31.x
	vec3 32 ssa_35 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_36 = mov ssa_35.z
	vec1 32 ssa_37 = fadd ssa_32, ssa_36
	vec3 32 ssa_40 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_41 = mov ssa_40.y
	vec1 32 ssa_42 = fmul ssa_37, ssa_41
	vec1 32 ssa_43 = fadd ssa_28, ssa_42
	vec3 32 ssa_46 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_47 = mov ssa_46.y
	vec3 32 ssa_50 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_51 = mov ssa_50.z
	vec1 32 ssa_52 = fadd ssa_47, ssa_51
	vec3 32 ssa_55 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_56 = mov ssa_55.x
	vec1 32 ssa_57 = fmul ssa_52, ssa_56
	vec1 32 ssa_58 = fadd ssa_43, ssa_57
	vec1 32 ssa_59 = ffract ssa_58
	vec1 32 ssa_60 = intrinsic load_param () (0) /* param_idx=0 */
	vec1 32 ssa_61 = deref_cast (float *)ssa_60 (function_temp float)  /* ptr_stride=0 */
	intrinsic store_deref (ssa_61, ssa_59) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

decl_function starField(vf3; (2 params)

impl starField(vf3; {
	decl_var  INTERP_MODE_NONE vec3 color@3
	decl_var  INTERP_MODE_NONE float threshhold@4
	decl_var  INTERP_MODE_NONE float rnd@5
	decl_var  INTERP_MODE_NONE vec3 param@6
	decl_var  INTERP_MODE_NONE float starCol@7
	decl_var  INTERP_MODE_NONE float return_tmp@8
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_3 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = intrinsic load_param () (1) /* param_idx=1 */
	vec1 32 ssa_5 = deref_cast (vec3 *)ssa_4 (function_temp vec3)  /* ptr_stride=0 */
	vec1 32 ssa_6 = deref_var &color@3 (function_temp vec3) 
	intrinsic store_deref (ssa_6, ssa_3) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_7 = deref_var &threshhold@4 (function_temp float) 
	intrinsic store_deref (ssa_7, ssa_2) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_8 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_9 = deref_var &param@6 (function_temp vec3) 
	intrinsic store_deref (ssa_9, ssa_8) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_10 = deref_var &return_tmp@8 (function_temp float) 
	vec1 32 ssa_11 = deref_var &param@6 (function_temp vec3) 
	vec3 32 ssa_12 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_13 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_14 = deref_cast (vec3 *)ssa_11 (function_temp vec3)  /* ptr_stride=0 */
	vec3 32 ssa_15 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec3 32 ssa_16 = fmul ssa_15, ssa_13
	vec3 32 ssa_17 = ffract ssa_16
	intrinsic store_deref (ssa_14, ssa_17) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_18 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec3 32 ssa_19 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec3 32 ssa_20 = vec3 ssa_19.y, ssa_19.x, ssa_19.z
	vec3 32 ssa_21 = fadd ssa_20, ssa_12
	vec1 32 ssa_22 = fdot3 ssa_18, ssa_21
	vec3 32 ssa_23 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec3 32 ssa_24 = vec3 ssa_22, ssa_22, ssa_22
	vec3 32 ssa_25 = fadd ssa_23, ssa_24
	intrinsic store_deref (ssa_14, ssa_25) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_26 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_27 = mov ssa_26.x
	vec3 32 ssa_28 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_29 = mov ssa_28.y
	vec1 32 ssa_30 = fadd ssa_27, ssa_29
	vec3 32 ssa_31 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_31.z
	vec1 32 ssa_33 = fmul ssa_30, ssa_32
	vec3 32 ssa_34 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_35 = mov ssa_34.x
	vec3 32 ssa_36 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_37 = mov ssa_36.z
	vec1 32 ssa_38 = fadd ssa_35, ssa_37
	vec3 32 ssa_39 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_40 = mov ssa_39.y
	vec1 32 ssa_41 = fmul ssa_38, ssa_40
	vec1 32 ssa_42 = fadd ssa_33, ssa_41
	vec3 32 ssa_43 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_44 = mov ssa_43.y
	vec3 32 ssa_45 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_46 = mov ssa_45.z
	vec1 32 ssa_47 = fadd ssa_44, ssa_46
	vec3 32 ssa_48 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_49 = mov ssa_48.x
	vec1 32 ssa_50 = fmul ssa_47, ssa_49
	vec1 32 ssa_51 = fadd ssa_42, ssa_50
	vec1 32 ssa_52 = ffract ssa_51
	vec1 32 ssa_53 = deref_cast (float *)ssa_10 (function_temp float)  /* ptr_stride=0 */
	intrinsic store_deref (ssa_53, ssa_52) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_54 = intrinsic load_deref (ssa_10) (0) /* access=0 */
	vec1 32 ssa_55 = deref_var &rnd@5 (function_temp float) 
	intrinsic store_deref (ssa_55, ssa_54) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_56 = deref_var &rnd@5 (function_temp float) 
	vec1 32 ssa_57 = intrinsic load_deref (ssa_56) (0) /* access=0 */
	vec1 32 ssa_58 = deref_var &threshhold@4 (function_temp float) 
	vec1 32 ssa_59 = intrinsic load_deref (ssa_58) (0) /* access=0 */
	vec1 1 ssa_60 = fge ssa_57, ssa_59
	/* succs: block_1 block_2 */
	if ssa_60 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_61 = deref_var &rnd@5 (function_temp float) 
		vec1 32 ssa_62 = intrinsic load_deref (ssa_61) (0) /* access=0 */
		vec1 32 ssa_63 = deref_var &threshhold@4 (function_temp float) 
		vec1 32 ssa_64 = intrinsic load_deref (ssa_63) (0) /* access=0 */
		vec1 32 ssa_65 = fsub ssa_62, ssa_64
		vec1 32 ssa_66 = deref_var &threshhold@4 (function_temp float) 
		vec1 32 ssa_67 = intrinsic load_deref (ssa_66) (0) /* access=0 */
		vec1 32 ssa_68 = fsub ssa_1, ssa_67
		vec1 32 ssa_69 = fdiv ssa_65, ssa_68
		vec1 32 ssa_70 = fpow ssa_69, ssa_0
		vec1 32 ssa_71 = deref_var &starCol@7 (function_temp float) 
		intrinsic store_deref (ssa_71, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_72 = deref_var &starCol@7 (function_temp float) 
		vec1 32 ssa_73 = intrinsic load_deref (ssa_72) (0) /* access=0 */
		vec3 32 ssa_74 = vec3 ssa_73, ssa_73, ssa_73
		vec1 32 ssa_75 = deref_var &color@3 (function_temp vec3) 
		vec3 32 ssa_76 = intrinsic load_deref (ssa_75) (0) /* access=0 */
		vec3 32 ssa_77 = fadd ssa_76, ssa_74
		vec1 32 ssa_78 = deref_var &color@3 (function_temp vec3) 
		intrinsic store_deref (ssa_78, ssa_77) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_79 = deref_var &color@3 (function_temp vec3) 
	vec3 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = intrinsic load_param () (0) /* param_idx=0 */
	vec1 32 ssa_82 = deref_cast (vec3 *)ssa_81 (function_temp vec3)  /* ptr_stride=0 */
	intrinsic store_deref (ssa_82, ssa_80) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_copy_prop
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec3 32 ssa_13 = fmul ssa_7, ssa_12.xxx
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec3 32 ssa_16 = fmax ssa_13, ssa_14
	vec3 32 ssa_17 = fmin ssa_16, ssa_15
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	intrinsic store_deref (ssa_18, ssa_17) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	intrinsic store_deref (ssa_21, ssa_20) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_28 = deref_cast (vec3 *)ssa_23 (function_temp vec3)  /* ptr_stride=0 */
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	intrinsic store_deref (ssa_29, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	intrinsic store_deref (ssa_30, ssa_26) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_31 = intrinsic load_deref (ssa_28) (0) /* access=0 */
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	intrinsic store_deref (ssa_32, ssa_31) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_37 = deref_cast (vec3 *)ssa_34 (function_temp vec3)  /* ptr_stride=0 */
	vec3 32 ssa_38 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec3 32 ssa_39 = fmul ssa_38, ssa_36
	vec3 32 ssa_40 = ffract ssa_39
	intrinsic store_deref (ssa_37, ssa_40) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_41 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec3 32 ssa_42 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec3 32 ssa_43 = vec3 ssa_42.y, ssa_42.x, ssa_42.z
	vec3 32 ssa_44 = fadd ssa_42.yxz, ssa_35
	vec1 32 ssa_45 = fdot3 ssa_41, ssa_44
	vec3 32 ssa_46 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec3 32 ssa_47 = vec3 ssa_45, ssa_45, ssa_45
	vec3 32 ssa_48 = fadd ssa_46, ssa_45.xxx
	intrinsic store_deref (ssa_37, ssa_48) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_49 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_50 = mov ssa_49.x
	vec3 32 ssa_51 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_52 = mov ssa_51.y
	vec1 32 ssa_53 = fadd ssa_49.x, ssa_51.y
	vec3 32 ssa_54 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_55 = mov ssa_54.z
	vec1 32 ssa_56 = fmul ssa_53, ssa_54.z
	vec3 32 ssa_57 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_58 = mov ssa_57.x
	vec3 32 ssa_59 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_60 = mov ssa_59.z
	vec1 32 ssa_61 = fadd ssa_57.x, ssa_59.z
	vec3 32 ssa_62 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_63 = mov ssa_62.y
	vec1 32 ssa_64 = fmul ssa_61, ssa_62.y
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec3 32 ssa_66 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_67 = mov ssa_66.y
	vec3 32 ssa_68 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_69 = mov ssa_68.z
	vec1 32 ssa_70 = fadd ssa_66.y, ssa_68.z
	vec3 32 ssa_71 = intrinsic load_deref (ssa_37) (0) /* access=0 */
	vec1 32 ssa_72 = mov ssa_71.x
	vec1 32 ssa_73 = fmul ssa_70, ssa_71.x
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	vec1 32 ssa_76 = deref_cast (float *)ssa_33 (function_temp float)  /* ptr_stride=0 */
	intrinsic store_deref (ssa_76, ssa_75) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = intrinsic load_deref (ssa_33) (0) /* access=0 */
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	intrinsic store_deref (ssa_78, ssa_77) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 1 ssa_83 = fge ssa_80, ssa_82
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_85 = intrinsic load_deref (ssa_84) (0) /* access=0 */
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_87 = intrinsic load_deref (ssa_86) (0) /* access=0 */
		vec1 32 ssa_88 = fsub ssa_85, ssa_87
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_90 = intrinsic load_deref (ssa_89) (0) /* access=0 */
		vec1 32 ssa_91 = fsub ssa_25, ssa_90
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		intrinsic store_deref (ssa_94, ssa_93) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_96 = intrinsic load_deref (ssa_95) (0) /* access=0 */
		vec3 32 ssa_97 = vec3 ssa_96, ssa_96, ssa_96
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
		vec3 32 ssa_100 = fadd ssa_99, ssa_96.xxx
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		intrinsic store_deref (ssa_101, ssa_100) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_103 = intrinsic load_deref (ssa_102) (0) /* access=0 */
	vec1 32 ssa_104 = deref_cast (vec3 *)ssa_22 (function_temp vec3)  /* ptr_stride=0 */
	intrinsic store_deref (ssa_104, ssa_103) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_105 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_107 = intrinsic load_deref (ssa_106) (0) /* access=0 */
	vec3 32 ssa_108 = fadd ssa_105, ssa_107
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	intrinsic store_deref (ssa_109, ssa_108) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_111 = intrinsic load_deref (ssa_110) (0) /* access=0 */
	vec1 32 ssa_112 = mov ssa_111.x
	vec1 32 ssa_113 = mov ssa_111.y
	vec1 32 ssa_114 = mov ssa_111.z
	vec4 32 ssa_115 = vec4 ssa_111.x, ssa_111.y, ssa_111.z, ssa_0
	vec1 32 ssa_116 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_116, ssa_115) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

decl_function hash33(vf3; (2 params)

impl hash33(vf3; {
	block block_0:
	/* preds: */
	vec3 32 ssa_9 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_3 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_0 = intrinsic load_param () (1) /* param_idx=1 */
	vec1 32 ssa_1 = deref_cast (vec3 *)ssa_0 (function_temp vec3)  /* ptr_stride=0 */
	vec3 32 ssa_2 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_4 = fmul ssa_2, ssa_3
	vec3 32 ssa_5 = ffract ssa_4
	intrinsic store_deref (ssa_1, ssa_5) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_6 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_7 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_8 = vec3 ssa_7.y, ssa_7.x, ssa_7.z
	vec3 32 ssa_10 = fadd ssa_7.yxz, ssa_9
	vec1 32 ssa_11 = fdot3 ssa_6, ssa_10
	vec3 32 ssa_12 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_13 = vec3 ssa_11, ssa_11, ssa_11
	vec3 32 ssa_14 = fadd ssa_12, ssa_11.xxx
	intrinsic store_deref (ssa_1, ssa_14) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_17 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_18 = mov ssa_17.x
	vec3 32 ssa_21 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_22 = mov ssa_21.y
	vec1 32 ssa_23 = fadd ssa_17.x, ssa_21.y
	vec3 32 ssa_26 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_27 = mov ssa_26.z
	vec1 32 ssa_28 = fmul ssa_23, ssa_26.z
	vec3 32 ssa_31 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_31.x
	vec3 32 ssa_35 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_36 = mov ssa_35.z
	vec1 32 ssa_37 = fadd ssa_31.x, ssa_35.z
	vec3 32 ssa_40 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_41 = mov ssa_40.y
	vec1 32 ssa_42 = fmul ssa_37, ssa_40.y
	vec1 32 ssa_43 = fadd ssa_28, ssa_42
	vec3 32 ssa_46 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_47 = mov ssa_46.y
	vec3 32 ssa_50 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_51 = mov ssa_50.z
	vec1 32 ssa_52 = fadd ssa_46.y, ssa_50.z
	vec3 32 ssa_55 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_56 = mov ssa_55.x
	vec1 32 ssa_57 = fmul ssa_52, ssa_55.x
	vec1 32 ssa_58 = fadd ssa_43, ssa_57
	vec1 32 ssa_59 = ffract ssa_58
	vec1 32 ssa_60 = intrinsic load_param () (0) /* param_idx=0 */
	vec1 32 ssa_61 = deref_cast (float *)ssa_60 (function_temp float)  /* ptr_stride=0 */
	intrinsic store_deref (ssa_61, ssa_59) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

decl_function starField(vf3; (2 params)

impl starField(vf3; {
	decl_var  INTERP_MODE_NONE vec3 color@3
	decl_var  INTERP_MODE_NONE float threshhold@4
	decl_var  INTERP_MODE_NONE float rnd@5
	decl_var  INTERP_MODE_NONE vec3 param@6
	decl_var  INTERP_MODE_NONE float starCol@7
	decl_var  INTERP_MODE_NONE float return_tmp@8
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_3 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = intrinsic load_param () (1) /* param_idx=1 */
	vec1 32 ssa_5 = deref_cast (vec3 *)ssa_4 (function_temp vec3)  /* ptr_stride=0 */
	vec1 32 ssa_6 = deref_var &color@3 (function_temp vec3) 
	intrinsic store_deref (ssa_6, ssa_3) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_7 = deref_var &threshhold@4 (function_temp float) 
	intrinsic store_deref (ssa_7, ssa_2) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_8 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_9 = deref_var &param@6 (function_temp vec3) 
	intrinsic store_deref (ssa_9, ssa_8) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_10 = deref_var &return_tmp@8 (function_temp float) 
	vec1 32 ssa_11 = deref_var &param@6 (function_temp vec3) 
	vec3 32 ssa_12 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_13 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_14 = deref_cast (vec3 *)ssa_11 (function_temp vec3)  /* ptr_stride=0 */
	vec3 32 ssa_15 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec3 32 ssa_16 = fmul ssa_15, ssa_13
	vec3 32 ssa_17 = ffract ssa_16
	intrinsic store_deref (ssa_14, ssa_17) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_18 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec3 32 ssa_19 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec3 32 ssa_20 = vec3 ssa_19.y, ssa_19.x, ssa_19.z
	vec3 32 ssa_21 = fadd ssa_19.yxz, ssa_12
	vec1 32 ssa_22 = fdot3 ssa_18, ssa_21
	vec3 32 ssa_23 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec3 32 ssa_24 = vec3 ssa_22, ssa_22, ssa_22
	vec3 32 ssa_25 = fadd ssa_23, ssa_22.xxx
	intrinsic store_deref (ssa_14, ssa_25) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_26 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_27 = mov ssa_26.x
	vec3 32 ssa_28 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_29 = mov ssa_28.y
	vec1 32 ssa_30 = fadd ssa_26.x, ssa_28.y
	vec3 32 ssa_31 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_31.z
	vec1 32 ssa_33 = fmul ssa_30, ssa_31.z
	vec3 32 ssa_34 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_35 = mov ssa_34.x
	vec3 32 ssa_36 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_37 = mov ssa_36.z
	vec1 32 ssa_38 = fadd ssa_34.x, ssa_36.z
	vec3 32 ssa_39 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_40 = mov ssa_39.y
	vec1 32 ssa_41 = fmul ssa_38, ssa_39.y
	vec1 32 ssa_42 = fadd ssa_33, ssa_41
	vec3 32 ssa_43 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_44 = mov ssa_43.y
	vec3 32 ssa_45 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_46 = mov ssa_45.z
	vec1 32 ssa_47 = fadd ssa_43.y, ssa_45.z
	vec3 32 ssa_48 = intrinsic load_deref (ssa_14) (0) /* access=0 */
	vec1 32 ssa_49 = mov ssa_48.x
	vec1 32 ssa_50 = fmul ssa_47, ssa_48.x
	vec1 32 ssa_51 = fadd ssa_42, ssa_50
	vec1 32 ssa_52 = ffract ssa_51
	vec1 32 ssa_53 = deref_cast (float *)ssa_10 (function_temp float)  /* ptr_stride=0 */
	intrinsic store_deref (ssa_53, ssa_52) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_54 = intrinsic load_deref (ssa_10) (0) /* access=0 */
	vec1 32 ssa_55 = deref_var &rnd@5 (function_temp float) 
	intrinsic store_deref (ssa_55, ssa_54) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_56 = deref_var &rnd@5 (function_temp float) 
	vec1 32 ssa_57 = intrinsic load_deref (ssa_56) (0) /* access=0 */
	vec1 32 ssa_58 = deref_var &threshhold@4 (function_temp float) 
	vec1 32 ssa_59 = intrinsic load_deref (ssa_58) (0) /* access=0 */
	vec1 1 ssa_60 = fge ssa_57, ssa_59
	/* succs: block_1 block_2 */
	if ssa_60 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_61 = deref_var &rnd@5 (function_temp float) 
		vec1 32 ssa_62 = intrinsic load_deref (ssa_61) (0) /* access=0 */
		vec1 32 ssa_63 = deref_var &threshhold@4 (function_temp float) 
		vec1 32 ssa_64 = intrinsic load_deref (ssa_63) (0) /* access=0 */
		vec1 32 ssa_65 = fsub ssa_62, ssa_64
		vec1 32 ssa_66 = deref_var &threshhold@4 (function_temp float) 
		vec1 32 ssa_67 = intrinsic load_deref (ssa_66) (0) /* access=0 */
		vec1 32 ssa_68 = fsub ssa_1, ssa_67
		vec1 32 ssa_69 = fdiv ssa_65, ssa_68
		vec1 32 ssa_70 = fpow ssa_69, ssa_0
		vec1 32 ssa_71 = deref_var &starCol@7 (function_temp float) 
		intrinsic store_deref (ssa_71, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_72 = deref_var &starCol@7 (function_temp float) 
		vec1 32 ssa_73 = intrinsic load_deref (ssa_72) (0) /* access=0 */
		vec3 32 ssa_74 = vec3 ssa_73, ssa_73, ssa_73
		vec1 32 ssa_75 = deref_var &color@3 (function_temp vec3) 
		vec3 32 ssa_76 = intrinsic load_deref (ssa_75) (0) /* access=0 */
		vec3 32 ssa_77 = fadd ssa_76, ssa_73.xxx
		vec1 32 ssa_78 = deref_var &color@3 (function_temp vec3) 
		intrinsic store_deref (ssa_78, ssa_77) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_79 = deref_var &color@3 (function_temp vec3) 
	vec3 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = intrinsic load_param () (0) /* param_idx=0 */
	vec1 32 ssa_82 = deref_cast (vec3 *)ssa_81 (function_temp vec3)  /* ptr_stride=0 */
	intrinsic store_deref (ssa_82, ssa_80) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_deref
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec3 32 ssa_13 = fmul ssa_7, ssa_12.xxx
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec3 32 ssa_16 = fmax ssa_13, ssa_14
	vec3 32 ssa_17 = fmin ssa_16, ssa_15
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	intrinsic store_deref (ssa_18, ssa_17) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	intrinsic store_deref (ssa_21, ssa_20) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	intrinsic store_deref (ssa_29, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	intrinsic store_deref (ssa_30, ssa_26) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_31 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	intrinsic store_deref (ssa_32, ssa_31) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec3 32 ssa_38 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_39 = fmul ssa_38, ssa_36
	vec3 32 ssa_40 = ffract ssa_39
	intrinsic store_deref (ssa_34, ssa_40) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_41 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_42 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_43 = vec3 ssa_42.y, ssa_42.x, ssa_42.z
	vec3 32 ssa_44 = fadd ssa_42.yxz, ssa_35
	vec1 32 ssa_45 = fdot3 ssa_41, ssa_44
	vec3 32 ssa_46 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_47 = vec3 ssa_45, ssa_45, ssa_45
	vec3 32 ssa_48 = fadd ssa_46, ssa_45.xxx
	intrinsic store_deref (ssa_34, ssa_48) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_49 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_50 = mov ssa_49.x
	vec3 32 ssa_51 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_52 = mov ssa_51.y
	vec1 32 ssa_53 = fadd ssa_49.x, ssa_51.y
	vec3 32 ssa_54 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_55 = mov ssa_54.z
	vec1 32 ssa_56 = fmul ssa_53, ssa_54.z
	vec3 32 ssa_57 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_58 = mov ssa_57.x
	vec3 32 ssa_59 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_60 = mov ssa_59.z
	vec1 32 ssa_61 = fadd ssa_57.x, ssa_59.z
	vec3 32 ssa_62 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_63 = mov ssa_62.y
	vec1 32 ssa_64 = fmul ssa_61, ssa_62.y
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec3 32 ssa_66 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_67 = mov ssa_66.y
	vec3 32 ssa_68 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_69 = mov ssa_68.z
	vec1 32 ssa_70 = fadd ssa_66.y, ssa_68.z
	vec3 32 ssa_71 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_72 = mov ssa_71.x
	vec1 32 ssa_73 = fmul ssa_70, ssa_71.x
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	intrinsic store_deref (ssa_33, ssa_75) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = intrinsic load_deref (ssa_33) (0) /* access=0 */
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	intrinsic store_deref (ssa_78, ssa_77) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 1 ssa_83 = fge ssa_80, ssa_82
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_85 = intrinsic load_deref (ssa_84) (0) /* access=0 */
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_87 = intrinsic load_deref (ssa_86) (0) /* access=0 */
		vec1 32 ssa_88 = fsub ssa_85, ssa_87
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_90 = intrinsic load_deref (ssa_89) (0) /* access=0 */
		vec1 32 ssa_91 = fsub ssa_25, ssa_90
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		intrinsic store_deref (ssa_94, ssa_93) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_96 = intrinsic load_deref (ssa_95) (0) /* access=0 */
		vec3 32 ssa_97 = vec3 ssa_96, ssa_96, ssa_96
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
		vec3 32 ssa_100 = fadd ssa_99, ssa_96.xxx
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		intrinsic store_deref (ssa_101, ssa_100) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_103 = intrinsic load_deref (ssa_102) (0) /* access=0 */
	intrinsic store_deref (ssa_22, ssa_103) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_105 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_107 = intrinsic load_deref (ssa_106) (0) /* access=0 */
	vec3 32 ssa_108 = fadd ssa_105, ssa_107
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	intrinsic store_deref (ssa_109, ssa_108) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_111 = intrinsic load_deref (ssa_110) (0) /* access=0 */
	vec1 32 ssa_112 = mov ssa_111.x
	vec1 32 ssa_113 = mov ssa_111.y
	vec1 32 ssa_114 = mov ssa_111.z
	vec4 32 ssa_115 = vec4 ssa_111.x, ssa_111.y, ssa_111.z, ssa_0
	vec1 32 ssa_116 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_116, ssa_115) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

decl_function hash33(vf3; (2 params)

impl hash33(vf3; {
	block block_0:
	/* preds: */
	vec3 32 ssa_9 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_3 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_0 = intrinsic load_param () (1) /* param_idx=1 */
	vec1 32 ssa_1 = deref_cast (vec3 *)ssa_0 (function_temp vec3)  /* ptr_stride=0 */
	vec3 32 ssa_2 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_4 = fmul ssa_2, ssa_3
	vec3 32 ssa_5 = ffract ssa_4
	intrinsic store_deref (ssa_1, ssa_5) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_6 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_7 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_8 = vec3 ssa_7.y, ssa_7.x, ssa_7.z
	vec3 32 ssa_10 = fadd ssa_7.yxz, ssa_9
	vec1 32 ssa_11 = fdot3 ssa_6, ssa_10
	vec3 32 ssa_12 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec3 32 ssa_13 = vec3 ssa_11, ssa_11, ssa_11
	vec3 32 ssa_14 = fadd ssa_12, ssa_11.xxx
	intrinsic store_deref (ssa_1, ssa_14) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_17 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_18 = mov ssa_17.x
	vec3 32 ssa_21 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_22 = mov ssa_21.y
	vec1 32 ssa_23 = fadd ssa_17.x, ssa_21.y
	vec3 32 ssa_26 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_27 = mov ssa_26.z
	vec1 32 ssa_28 = fmul ssa_23, ssa_26.z
	vec3 32 ssa_31 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_31.x
	vec3 32 ssa_35 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_36 = mov ssa_35.z
	vec1 32 ssa_37 = fadd ssa_31.x, ssa_35.z
	vec3 32 ssa_40 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_41 = mov ssa_40.y
	vec1 32 ssa_42 = fmul ssa_37, ssa_40.y
	vec1 32 ssa_43 = fadd ssa_28, ssa_42
	vec3 32 ssa_46 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_47 = mov ssa_46.y
	vec3 32 ssa_50 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_51 = mov ssa_50.z
	vec1 32 ssa_52 = fadd ssa_46.y, ssa_50.z
	vec3 32 ssa_55 = intrinsic load_deref (ssa_1) (0) /* access=0 */
	vec1 32 ssa_56 = mov ssa_55.x
	vec1 32 ssa_57 = fmul ssa_52, ssa_55.x
	vec1 32 ssa_58 = fadd ssa_43, ssa_57
	vec1 32 ssa_59 = ffract ssa_58
	vec1 32 ssa_60 = intrinsic load_param () (0) /* param_idx=0 */
	vec1 32 ssa_61 = deref_cast (float *)ssa_60 (function_temp float)  /* ptr_stride=0 */
	intrinsic store_deref (ssa_61, ssa_59) (1, 0) /* wrmask=x */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

decl_function starField(vf3; (2 params)

impl starField(vf3; {
	decl_var  INTERP_MODE_NONE vec3 color@3
	decl_var  INTERP_MODE_NONE float threshhold@4
	decl_var  INTERP_MODE_NONE float rnd@5
	decl_var  INTERP_MODE_NONE vec3 param@6
	decl_var  INTERP_MODE_NONE float starCol@7
	decl_var  INTERP_MODE_NONE float return_tmp@8
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_3 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_4 = intrinsic load_param () (1) /* param_idx=1 */
	vec1 32 ssa_5 = deref_cast (vec3 *)ssa_4 (function_temp vec3)  /* ptr_stride=0 */
	vec1 32 ssa_6 = deref_var &color@3 (function_temp vec3) 
	intrinsic store_deref (ssa_6, ssa_3) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_7 = deref_var &threshhold@4 (function_temp float) 
	intrinsic store_deref (ssa_7, ssa_2) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_8 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_9 = deref_var &param@6 (function_temp vec3) 
	intrinsic store_deref (ssa_9, ssa_8) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_10 = deref_var &return_tmp@8 (function_temp float) 
	vec1 32 ssa_11 = deref_var &param@6 (function_temp vec3) 
	vec3 32 ssa_12 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_13 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec3 32 ssa_15 = intrinsic load_deref (ssa_11) (0) /* access=0 */
	vec3 32 ssa_16 = fmul ssa_15, ssa_13
	vec3 32 ssa_17 = ffract ssa_16
	intrinsic store_deref (ssa_11, ssa_17) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_18 = intrinsic load_deref (ssa_11) (0) /* access=0 */
	vec3 32 ssa_19 = intrinsic load_deref (ssa_11) (0) /* access=0 */
	vec3 32 ssa_20 = vec3 ssa_19.y, ssa_19.x, ssa_19.z
	vec3 32 ssa_21 = fadd ssa_19.yxz, ssa_12
	vec1 32 ssa_22 = fdot3 ssa_18, ssa_21
	vec3 32 ssa_23 = intrinsic load_deref (ssa_11) (0) /* access=0 */
	vec3 32 ssa_24 = vec3 ssa_22, ssa_22, ssa_22
	vec3 32 ssa_25 = fadd ssa_23, ssa_22.xxx
	intrinsic store_deref (ssa_11, ssa_25) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_26 = intrinsic load_deref (ssa_11) (0) /* access=0 */
	vec1 32 ssa_27 = mov ssa_26.x
	vec3 32 ssa_28 = intrinsic load_deref (ssa_11) (0) /* access=0 */
	vec1 32 ssa_29 = mov ssa_28.y
	vec1 32 ssa_30 = fadd ssa_26.x, ssa_28.y
	vec3 32 ssa_31 = intrinsic load_deref (ssa_11) (0) /* access=0 */
	vec1 32 ssa_32 = mov ssa_31.z
	vec1 32 ssa_33 = fmul ssa_30, ssa_31.z
	vec3 32 ssa_34 = intrinsic load_deref (ssa_11) (0) /* access=0 */
	vec1 32 ssa_35 = mov ssa_34.x
	vec3 32 ssa_36 = intrinsic load_deref (ssa_11) (0) /* access=0 */
	vec1 32 ssa_37 = mov ssa_36.z
	vec1 32 ssa_38 = fadd ssa_34.x, ssa_36.z
	vec3 32 ssa_39 = intrinsic load_deref (ssa_11) (0) /* access=0 */
	vec1 32 ssa_40 = mov ssa_39.y
	vec1 32 ssa_41 = fmul ssa_38, ssa_39.y
	vec1 32 ssa_42 = fadd ssa_33, ssa_41
	vec3 32 ssa_43 = intrinsic load_deref (ssa_11) (0) /* access=0 */
	vec1 32 ssa_44 = mov ssa_43.y
	vec3 32 ssa_45 = intrinsic load_deref (ssa_11) (0) /* access=0 */
	vec1 32 ssa_46 = mov ssa_45.z
	vec1 32 ssa_47 = fadd ssa_43.y, ssa_45.z
	vec3 32 ssa_48 = intrinsic load_deref (ssa_11) (0) /* access=0 */
	vec1 32 ssa_49 = mov ssa_48.x
	vec1 32 ssa_50 = fmul ssa_47, ssa_48.x
	vec1 32 ssa_51 = fadd ssa_42, ssa_50
	vec1 32 ssa_52 = ffract ssa_51
	intrinsic store_deref (ssa_10, ssa_52) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_54 = intrinsic load_deref (ssa_10) (0) /* access=0 */
	vec1 32 ssa_55 = deref_var &rnd@5 (function_temp float) 
	intrinsic store_deref (ssa_55, ssa_54) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_56 = deref_var &rnd@5 (function_temp float) 
	vec1 32 ssa_57 = intrinsic load_deref (ssa_56) (0) /* access=0 */
	vec1 32 ssa_58 = deref_var &threshhold@4 (function_temp float) 
	vec1 32 ssa_59 = intrinsic load_deref (ssa_58) (0) /* access=0 */
	vec1 1 ssa_60 = fge ssa_57, ssa_59
	/* succs: block_1 block_2 */
	if ssa_60 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_61 = deref_var &rnd@5 (function_temp float) 
		vec1 32 ssa_62 = intrinsic load_deref (ssa_61) (0) /* access=0 */
		vec1 32 ssa_63 = deref_var &threshhold@4 (function_temp float) 
		vec1 32 ssa_64 = intrinsic load_deref (ssa_63) (0) /* access=0 */
		vec1 32 ssa_65 = fsub ssa_62, ssa_64
		vec1 32 ssa_66 = deref_var &threshhold@4 (function_temp float) 
		vec1 32 ssa_67 = intrinsic load_deref (ssa_66) (0) /* access=0 */
		vec1 32 ssa_68 = fsub ssa_1, ssa_67
		vec1 32 ssa_69 = fdiv ssa_65, ssa_68
		vec1 32 ssa_70 = fpow ssa_69, ssa_0
		vec1 32 ssa_71 = deref_var &starCol@7 (function_temp float) 
		intrinsic store_deref (ssa_71, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_72 = deref_var &starCol@7 (function_temp float) 
		vec1 32 ssa_73 = intrinsic load_deref (ssa_72) (0) /* access=0 */
		vec3 32 ssa_74 = vec3 ssa_73, ssa_73, ssa_73
		vec1 32 ssa_75 = deref_var &color@3 (function_temp vec3) 
		vec3 32 ssa_76 = intrinsic load_deref (ssa_75) (0) /* access=0 */
		vec3 32 ssa_77 = fadd ssa_76, ssa_73.xxx
		vec1 32 ssa_78 = deref_var &color@3 (function_temp vec3) 
		intrinsic store_deref (ssa_78, ssa_77) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_79 = deref_var &color@3 (function_temp vec3) 
	vec3 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = intrinsic load_param () (0) /* param_idx=0 */
	vec1 32 ssa_82 = deref_cast (vec3 *)ssa_81 (function_temp vec3)  /* ptr_stride=0 */
	intrinsic store_deref (ssa_82, ssa_80) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_variable_initializers
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec3 32 ssa_13 = fmul ssa_7, ssa_12.xxx
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec3 32 ssa_16 = fmax ssa_13, ssa_14
	vec3 32 ssa_17 = fmin ssa_16, ssa_15
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	intrinsic store_deref (ssa_18, ssa_17) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	intrinsic store_deref (ssa_21, ssa_20) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	intrinsic store_deref (ssa_29, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	intrinsic store_deref (ssa_30, ssa_26) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_31 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	intrinsic store_deref (ssa_32, ssa_31) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec3 32 ssa_38 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_39 = fmul ssa_38, ssa_36
	vec3 32 ssa_40 = ffract ssa_39
	intrinsic store_deref (ssa_34, ssa_40) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_41 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_42 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_43 = vec3 ssa_42.y, ssa_42.x, ssa_42.z
	vec3 32 ssa_44 = fadd ssa_42.yxz, ssa_35
	vec1 32 ssa_45 = fdot3 ssa_41, ssa_44
	vec3 32 ssa_46 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_47 = vec3 ssa_45, ssa_45, ssa_45
	vec3 32 ssa_48 = fadd ssa_46, ssa_45.xxx
	intrinsic store_deref (ssa_34, ssa_48) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_49 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_50 = mov ssa_49.x
	vec3 32 ssa_51 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_52 = mov ssa_51.y
	vec1 32 ssa_53 = fadd ssa_49.x, ssa_51.y
	vec3 32 ssa_54 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_55 = mov ssa_54.z
	vec1 32 ssa_56 = fmul ssa_53, ssa_54.z
	vec3 32 ssa_57 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_58 = mov ssa_57.x
	vec3 32 ssa_59 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_60 = mov ssa_59.z
	vec1 32 ssa_61 = fadd ssa_57.x, ssa_59.z
	vec3 32 ssa_62 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_63 = mov ssa_62.y
	vec1 32 ssa_64 = fmul ssa_61, ssa_62.y
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec3 32 ssa_66 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_67 = mov ssa_66.y
	vec3 32 ssa_68 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_69 = mov ssa_68.z
	vec1 32 ssa_70 = fadd ssa_66.y, ssa_68.z
	vec3 32 ssa_71 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_72 = mov ssa_71.x
	vec1 32 ssa_73 = fmul ssa_70, ssa_71.x
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	intrinsic store_deref (ssa_33, ssa_75) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = intrinsic load_deref (ssa_33) (0) /* access=0 */
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	intrinsic store_deref (ssa_78, ssa_77) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 1 ssa_83 = fge ssa_80, ssa_82
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_85 = intrinsic load_deref (ssa_84) (0) /* access=0 */
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_87 = intrinsic load_deref (ssa_86) (0) /* access=0 */
		vec1 32 ssa_88 = fsub ssa_85, ssa_87
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_90 = intrinsic load_deref (ssa_89) (0) /* access=0 */
		vec1 32 ssa_91 = fsub ssa_25, ssa_90
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		intrinsic store_deref (ssa_94, ssa_93) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_96 = intrinsic load_deref (ssa_95) (0) /* access=0 */
		vec3 32 ssa_97 = vec3 ssa_96, ssa_96, ssa_96
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
		vec3 32 ssa_100 = fadd ssa_99, ssa_96.xxx
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		intrinsic store_deref (ssa_101, ssa_100) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_103 = intrinsic load_deref (ssa_102) (0) /* access=0 */
	intrinsic store_deref (ssa_22, ssa_103) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_105 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_107 = intrinsic load_deref (ssa_106) (0) /* access=0 */
	vec3 32 ssa_108 = fadd ssa_105, ssa_107
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	intrinsic store_deref (ssa_109, ssa_108) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_111 = intrinsic load_deref (ssa_110) (0) /* access=0 */
	vec1 32 ssa_112 = mov ssa_111.x
	vec1 32 ssa_113 = mov ssa_111.y
	vec1 32 ssa_114 = mov ssa_111.z
	vec4 32 ssa_115 = vec4 ssa_111.x, ssa_111.y, ssa_111.z, ssa_0
	vec1 32 ssa_116 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_116, ssa_115) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_split_var_copies
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec3 32 ssa_13 = fmul ssa_7, ssa_12.xxx
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec3 32 ssa_16 = fmax ssa_13, ssa_14
	vec3 32 ssa_17 = fmin ssa_16, ssa_15
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	intrinsic store_deref (ssa_18, ssa_17) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	intrinsic store_deref (ssa_21, ssa_20) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	intrinsic store_deref (ssa_29, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	intrinsic store_deref (ssa_30, ssa_26) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_31 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	intrinsic store_deref (ssa_32, ssa_31) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec3 32 ssa_38 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_39 = fmul ssa_38, ssa_36
	vec3 32 ssa_40 = ffract ssa_39
	intrinsic store_deref (ssa_34, ssa_40) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_41 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_42 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_43 = vec3 ssa_42.y, ssa_42.x, ssa_42.z
	vec3 32 ssa_44 = fadd ssa_42.yxz, ssa_35
	vec1 32 ssa_45 = fdot3 ssa_41, ssa_44
	vec3 32 ssa_46 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_47 = vec3 ssa_45, ssa_45, ssa_45
	vec3 32 ssa_48 = fadd ssa_46, ssa_45.xxx
	intrinsic store_deref (ssa_34, ssa_48) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_49 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_50 = mov ssa_49.x
	vec3 32 ssa_51 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_52 = mov ssa_51.y
	vec1 32 ssa_53 = fadd ssa_49.x, ssa_51.y
	vec3 32 ssa_54 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_55 = mov ssa_54.z
	vec1 32 ssa_56 = fmul ssa_53, ssa_54.z
	vec3 32 ssa_57 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_58 = mov ssa_57.x
	vec3 32 ssa_59 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_60 = mov ssa_59.z
	vec1 32 ssa_61 = fadd ssa_57.x, ssa_59.z
	vec3 32 ssa_62 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_63 = mov ssa_62.y
	vec1 32 ssa_64 = fmul ssa_61, ssa_62.y
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec3 32 ssa_66 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_67 = mov ssa_66.y
	vec3 32 ssa_68 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_69 = mov ssa_68.z
	vec1 32 ssa_70 = fadd ssa_66.y, ssa_68.z
	vec3 32 ssa_71 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_72 = mov ssa_71.x
	vec1 32 ssa_73 = fmul ssa_70, ssa_71.x
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	intrinsic store_deref (ssa_33, ssa_75) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = intrinsic load_deref (ssa_33) (0) /* access=0 */
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	intrinsic store_deref (ssa_78, ssa_77) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 1 ssa_83 = fge ssa_80, ssa_82
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_85 = intrinsic load_deref (ssa_84) (0) /* access=0 */
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_87 = intrinsic load_deref (ssa_86) (0) /* access=0 */
		vec1 32 ssa_88 = fsub ssa_85, ssa_87
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_90 = intrinsic load_deref (ssa_89) (0) /* access=0 */
		vec1 32 ssa_91 = fsub ssa_25, ssa_90
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		intrinsic store_deref (ssa_94, ssa_93) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_96 = intrinsic load_deref (ssa_95) (0) /* access=0 */
		vec3 32 ssa_97 = vec3 ssa_96, ssa_96, ssa_96
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
		vec3 32 ssa_100 = fadd ssa_99, ssa_96.xxx
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		intrinsic store_deref (ssa_101, ssa_100) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_103 = intrinsic load_deref (ssa_102) (0) /* access=0 */
	intrinsic store_deref (ssa_22, ssa_103) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_105 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_107 = intrinsic load_deref (ssa_106) (0) /* access=0 */
	vec3 32 ssa_108 = fadd ssa_105, ssa_107
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	intrinsic store_deref (ssa_109, ssa_108) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_111 = intrinsic load_deref (ssa_110) (0) /* access=0 */
	vec1 32 ssa_112 = mov ssa_111.x
	vec1 32 ssa_113 = mov ssa_111.y
	vec1 32 ssa_114 = mov ssa_111.z
	vec4 32 ssa_115 = vec4 ssa_111.x, ssa_111.y, ssa_111.z, ssa_0
	vec1 32 ssa_116 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_116, ssa_115) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_split_per_member_structs
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec3 32 ssa_13 = fmul ssa_7, ssa_12.xxx
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec3 32 ssa_16 = fmax ssa_13, ssa_14
	vec3 32 ssa_17 = fmin ssa_16, ssa_15
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	intrinsic store_deref (ssa_18, ssa_17) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	intrinsic store_deref (ssa_21, ssa_20) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	intrinsic store_deref (ssa_29, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	intrinsic store_deref (ssa_30, ssa_26) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_31 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	intrinsic store_deref (ssa_32, ssa_31) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec3 32 ssa_38 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_39 = fmul ssa_38, ssa_36
	vec3 32 ssa_40 = ffract ssa_39
	intrinsic store_deref (ssa_34, ssa_40) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_41 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_42 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_43 = vec3 ssa_42.y, ssa_42.x, ssa_42.z
	vec3 32 ssa_44 = fadd ssa_42.yxz, ssa_35
	vec1 32 ssa_45 = fdot3 ssa_41, ssa_44
	vec3 32 ssa_46 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_47 = vec3 ssa_45, ssa_45, ssa_45
	vec3 32 ssa_48 = fadd ssa_46, ssa_45.xxx
	intrinsic store_deref (ssa_34, ssa_48) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_49 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_50 = mov ssa_49.x
	vec3 32 ssa_51 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_52 = mov ssa_51.y
	vec1 32 ssa_53 = fadd ssa_49.x, ssa_51.y
	vec3 32 ssa_54 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_55 = mov ssa_54.z
	vec1 32 ssa_56 = fmul ssa_53, ssa_54.z
	vec3 32 ssa_57 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_58 = mov ssa_57.x
	vec3 32 ssa_59 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_60 = mov ssa_59.z
	vec1 32 ssa_61 = fadd ssa_57.x, ssa_59.z
	vec3 32 ssa_62 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_63 = mov ssa_62.y
	vec1 32 ssa_64 = fmul ssa_61, ssa_62.y
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec3 32 ssa_66 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_67 = mov ssa_66.y
	vec3 32 ssa_68 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_69 = mov ssa_68.z
	vec1 32 ssa_70 = fadd ssa_66.y, ssa_68.z
	vec3 32 ssa_71 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_72 = mov ssa_71.x
	vec1 32 ssa_73 = fmul ssa_70, ssa_71.x
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	intrinsic store_deref (ssa_33, ssa_75) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = intrinsic load_deref (ssa_33) (0) /* access=0 */
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	intrinsic store_deref (ssa_78, ssa_77) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 1 ssa_83 = fge ssa_80, ssa_82
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_85 = intrinsic load_deref (ssa_84) (0) /* access=0 */
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_87 = intrinsic load_deref (ssa_86) (0) /* access=0 */
		vec1 32 ssa_88 = fsub ssa_85, ssa_87
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_90 = intrinsic load_deref (ssa_89) (0) /* access=0 */
		vec1 32 ssa_91 = fsub ssa_25, ssa_90
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		intrinsic store_deref (ssa_94, ssa_93) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_96 = intrinsic load_deref (ssa_95) (0) /* access=0 */
		vec3 32 ssa_97 = vec3 ssa_96, ssa_96, ssa_96
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
		vec3 32 ssa_100 = fadd ssa_99, ssa_96.xxx
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		intrinsic store_deref (ssa_101, ssa_100) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_103 = intrinsic load_deref (ssa_102) (0) /* access=0 */
	intrinsic store_deref (ssa_22, ssa_103) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_105 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_107 = intrinsic load_deref (ssa_106) (0) /* access=0 */
	vec3 32 ssa_108 = fadd ssa_105, ssa_107
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	intrinsic store_deref (ssa_109, ssa_108) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_111 = intrinsic load_deref (ssa_110) (0) /* access=0 */
	vec1 32 ssa_112 = mov ssa_111.x
	vec1 32 ssa_113 = mov ssa_111.y
	vec1 32 ssa_114 = mov ssa_111.z
	vec4 32 ssa_115 = vec4 ssa_111.x, ssa_111.y, ssa_111.z, ssa_0
	vec1 32 ssa_116 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_116, ssa_115) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_remove_dead_variables
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec3 32 ssa_13 = fmul ssa_7, ssa_12.xxx
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec3 32 ssa_16 = fmax ssa_13, ssa_14
	vec3 32 ssa_17 = fmin ssa_16, ssa_15
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	intrinsic store_deref (ssa_18, ssa_17) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	intrinsic store_deref (ssa_21, ssa_20) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	intrinsic store_deref (ssa_29, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	intrinsic store_deref (ssa_30, ssa_26) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_31 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	intrinsic store_deref (ssa_32, ssa_31) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec3 32 ssa_38 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_39 = fmul ssa_38, ssa_36
	vec3 32 ssa_40 = ffract ssa_39
	intrinsic store_deref (ssa_34, ssa_40) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_41 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_42 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_43 = vec3 ssa_42.y, ssa_42.x, ssa_42.z
	vec3 32 ssa_44 = fadd ssa_42.yxz, ssa_35
	vec1 32 ssa_45 = fdot3 ssa_41, ssa_44
	vec3 32 ssa_46 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_47 = vec3 ssa_45, ssa_45, ssa_45
	vec3 32 ssa_48 = fadd ssa_46, ssa_45.xxx
	intrinsic store_deref (ssa_34, ssa_48) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_49 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_50 = mov ssa_49.x
	vec3 32 ssa_51 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_52 = mov ssa_51.y
	vec1 32 ssa_53 = fadd ssa_49.x, ssa_51.y
	vec3 32 ssa_54 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_55 = mov ssa_54.z
	vec1 32 ssa_56 = fmul ssa_53, ssa_54.z
	vec3 32 ssa_57 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_58 = mov ssa_57.x
	vec3 32 ssa_59 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_60 = mov ssa_59.z
	vec1 32 ssa_61 = fadd ssa_57.x, ssa_59.z
	vec3 32 ssa_62 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_63 = mov ssa_62.y
	vec1 32 ssa_64 = fmul ssa_61, ssa_62.y
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec3 32 ssa_66 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_67 = mov ssa_66.y
	vec3 32 ssa_68 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_69 = mov ssa_68.z
	vec1 32 ssa_70 = fadd ssa_66.y, ssa_68.z
	vec3 32 ssa_71 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_72 = mov ssa_71.x
	vec1 32 ssa_73 = fmul ssa_70, ssa_71.x
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	intrinsic store_deref (ssa_33, ssa_75) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = intrinsic load_deref (ssa_33) (0) /* access=0 */
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	intrinsic store_deref (ssa_78, ssa_77) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 1 ssa_83 = fge ssa_80, ssa_82
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_85 = intrinsic load_deref (ssa_84) (0) /* access=0 */
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_87 = intrinsic load_deref (ssa_86) (0) /* access=0 */
		vec1 32 ssa_88 = fsub ssa_85, ssa_87
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_90 = intrinsic load_deref (ssa_89) (0) /* access=0 */
		vec1 32 ssa_91 = fsub ssa_25, ssa_90
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		intrinsic store_deref (ssa_94, ssa_93) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_96 = intrinsic load_deref (ssa_95) (0) /* access=0 */
		vec3 32 ssa_97 = vec3 ssa_96, ssa_96, ssa_96
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
		vec3 32 ssa_100 = fadd ssa_99, ssa_96.xxx
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		intrinsic store_deref (ssa_101, ssa_100) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_103 = intrinsic load_deref (ssa_102) (0) /* access=0 */
	intrinsic store_deref (ssa_22, ssa_103) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_105 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_107 = intrinsic load_deref (ssa_106) (0) /* access=0 */
	vec3 32 ssa_108 = fadd ssa_105, ssa_107
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	intrinsic store_deref (ssa_109, ssa_108) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_111 = intrinsic load_deref (ssa_110) (0) /* access=0 */
	vec1 32 ssa_112 = mov ssa_111.x
	vec1 32 ssa_113 = mov ssa_111.y
	vec1 32 ssa_114 = mov ssa_111.z
	vec4 32 ssa_115 = vec4 ssa_111.x, ssa_111.y, ssa_111.z, ssa_0
	vec1 32 ssa_116 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_116, ssa_115) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_propagate_invariant
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec3 32 ssa_13 = fmul ssa_7, ssa_12.xxx
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec3 32 ssa_16 = fmax ssa_13, ssa_14
	vec3 32 ssa_17 = fmin ssa_16, ssa_15
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	intrinsic store_deref (ssa_18, ssa_17) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	intrinsic store_deref (ssa_21, ssa_20) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	intrinsic store_deref (ssa_29, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	intrinsic store_deref (ssa_30, ssa_26) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_31 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	intrinsic store_deref (ssa_32, ssa_31) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec3 32 ssa_38 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_39 = fmul ssa_38, ssa_36
	vec3 32 ssa_40 = ffract ssa_39
	intrinsic store_deref (ssa_34, ssa_40) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_41 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_42 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_43 = vec3 ssa_42.y, ssa_42.x, ssa_42.z
	vec3 32 ssa_44 = fadd ssa_42.yxz, ssa_35
	vec1 32 ssa_45 = fdot3 ssa_41, ssa_44
	vec3 32 ssa_46 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_47 = vec3 ssa_45, ssa_45, ssa_45
	vec3 32 ssa_48 = fadd ssa_46, ssa_45.xxx
	intrinsic store_deref (ssa_34, ssa_48) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_49 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_50 = mov ssa_49.x
	vec3 32 ssa_51 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_52 = mov ssa_51.y
	vec1 32 ssa_53 = fadd ssa_49.x, ssa_51.y
	vec3 32 ssa_54 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_55 = mov ssa_54.z
	vec1 32 ssa_56 = fmul ssa_53, ssa_54.z
	vec3 32 ssa_57 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_58 = mov ssa_57.x
	vec3 32 ssa_59 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_60 = mov ssa_59.z
	vec1 32 ssa_61 = fadd ssa_57.x, ssa_59.z
	vec3 32 ssa_62 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_63 = mov ssa_62.y
	vec1 32 ssa_64 = fmul ssa_61, ssa_62.y
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec3 32 ssa_66 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_67 = mov ssa_66.y
	vec3 32 ssa_68 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_69 = mov ssa_68.z
	vec1 32 ssa_70 = fadd ssa_66.y, ssa_68.z
	vec3 32 ssa_71 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_72 = mov ssa_71.x
	vec1 32 ssa_73 = fmul ssa_70, ssa_71.x
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	intrinsic store_deref (ssa_33, ssa_75) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = intrinsic load_deref (ssa_33) (0) /* access=0 */
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	intrinsic store_deref (ssa_78, ssa_77) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 1 ssa_83 = fge ssa_80, ssa_82
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_85 = intrinsic load_deref (ssa_84) (0) /* access=0 */
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_87 = intrinsic load_deref (ssa_86) (0) /* access=0 */
		vec1 32 ssa_88 = fsub ssa_85, ssa_87
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_90 = intrinsic load_deref (ssa_89) (0) /* access=0 */
		vec1 32 ssa_91 = fsub ssa_25, ssa_90
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		intrinsic store_deref (ssa_94, ssa_93) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_96 = intrinsic load_deref (ssa_95) (0) /* access=0 */
		vec3 32 ssa_97 = vec3 ssa_96, ssa_96, ssa_96
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
		vec3 32 ssa_100 = fadd ssa_99, ssa_96.xxx
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		intrinsic store_deref (ssa_101, ssa_100) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_103 = intrinsic load_deref (ssa_102) (0) /* access=0 */
	intrinsic store_deref (ssa_22, ssa_103) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_105 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_107 = intrinsic load_deref (ssa_106) (0) /* access=0 */
	vec3 32 ssa_108 = fadd ssa_105, ssa_107
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	intrinsic store_deref (ssa_109, ssa_108) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_111 = intrinsic load_deref (ssa_110) (0) /* access=0 */
	vec1 32 ssa_112 = mov ssa_111.x
	vec1 32 ssa_113 = mov ssa_111.y
	vec1 32 ssa_114 = mov ssa_111.z
	vec4 32 ssa_115 = vec4 ssa_111.x, ssa_111.y, ssa_111.z, ssa_0
	vec1 32 ssa_116 = deref_var &outFragColor (shader_out vec4) 
	intrinsic store_deref (ssa_116, ssa_115) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_io_to_temporaries
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec3 32 ssa_13 = fmul ssa_7, ssa_12.xxx
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec3 32 ssa_16 = fmax ssa_13, ssa_14
	vec3 32 ssa_17 = fmin ssa_16, ssa_15
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	intrinsic store_deref (ssa_18, ssa_17) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	intrinsic store_deref (ssa_21, ssa_20) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	intrinsic store_deref (ssa_29, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	intrinsic store_deref (ssa_30, ssa_26) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_31 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	intrinsic store_deref (ssa_32, ssa_31) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec3 32 ssa_38 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_39 = fmul ssa_38, ssa_36
	vec3 32 ssa_40 = ffract ssa_39
	intrinsic store_deref (ssa_34, ssa_40) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_41 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_42 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_43 = vec3 ssa_42.y, ssa_42.x, ssa_42.z
	vec3 32 ssa_44 = fadd ssa_42.yxz, ssa_35
	vec1 32 ssa_45 = fdot3 ssa_41, ssa_44
	vec3 32 ssa_46 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_47 = vec3 ssa_45, ssa_45, ssa_45
	vec3 32 ssa_48 = fadd ssa_46, ssa_45.xxx
	intrinsic store_deref (ssa_34, ssa_48) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_49 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_50 = mov ssa_49.x
	vec3 32 ssa_51 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_52 = mov ssa_51.y
	vec1 32 ssa_53 = fadd ssa_49.x, ssa_51.y
	vec3 32 ssa_54 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_55 = mov ssa_54.z
	vec1 32 ssa_56 = fmul ssa_53, ssa_54.z
	vec3 32 ssa_57 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_58 = mov ssa_57.x
	vec3 32 ssa_59 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_60 = mov ssa_59.z
	vec1 32 ssa_61 = fadd ssa_57.x, ssa_59.z
	vec3 32 ssa_62 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_63 = mov ssa_62.y
	vec1 32 ssa_64 = fmul ssa_61, ssa_62.y
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec3 32 ssa_66 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_67 = mov ssa_66.y
	vec3 32 ssa_68 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_69 = mov ssa_68.z
	vec1 32 ssa_70 = fadd ssa_66.y, ssa_68.z
	vec3 32 ssa_71 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_72 = mov ssa_71.x
	vec1 32 ssa_73 = fmul ssa_70, ssa_71.x
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	intrinsic store_deref (ssa_33, ssa_75) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = intrinsic load_deref (ssa_33) (0) /* access=0 */
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	intrinsic store_deref (ssa_78, ssa_77) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 1 ssa_83 = fge ssa_80, ssa_82
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_85 = intrinsic load_deref (ssa_84) (0) /* access=0 */
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_87 = intrinsic load_deref (ssa_86) (0) /* access=0 */
		vec1 32 ssa_88 = fsub ssa_85, ssa_87
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_90 = intrinsic load_deref (ssa_89) (0) /* access=0 */
		vec1 32 ssa_91 = fsub ssa_25, ssa_90
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		intrinsic store_deref (ssa_94, ssa_93) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_96 = intrinsic load_deref (ssa_95) (0) /* access=0 */
		vec3 32 ssa_97 = vec3 ssa_96, ssa_96, ssa_96
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
		vec3 32 ssa_100 = fadd ssa_99, ssa_96.xxx
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		intrinsic store_deref (ssa_101, ssa_100) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_103 = intrinsic load_deref (ssa_102) (0) /* access=0 */
	intrinsic store_deref (ssa_22, ssa_103) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_105 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_107 = intrinsic load_deref (ssa_106) (0) /* access=0 */
	vec3 32 ssa_108 = fadd ssa_105, ssa_107
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	intrinsic store_deref (ssa_109, ssa_108) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_111 = intrinsic load_deref (ssa_110) (0) /* access=0 */
	vec1 32 ssa_112 = mov ssa_111.x
	vec1 32 ssa_113 = mov ssa_111.y
	vec1 32 ssa_114 = mov ssa_111.z
	vec4 32 ssa_115 = vec4 ssa_111.x, ssa_111.y, ssa_111.z, ssa_0
	vec1 32 ssa_116 = deref_var &out@outFragColor-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_116, ssa_115) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_117 = deref_var &out@outFragColor-temp (shader_temp vec4) 
	vec1 32 ssa_118 = deref_var &outFragColor (shader_out vec4) 
	intrinsic copy_deref (ssa_118, ssa_117) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_frexp
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec3 32 ssa_13 = fmul ssa_7, ssa_12.xxx
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec3 32 ssa_16 = fmax ssa_13, ssa_14
	vec3 32 ssa_17 = fmin ssa_16, ssa_15
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	intrinsic store_deref (ssa_18, ssa_17) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	intrinsic store_deref (ssa_21, ssa_20) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	intrinsic store_deref (ssa_29, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	intrinsic store_deref (ssa_30, ssa_26) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_31 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	intrinsic store_deref (ssa_32, ssa_31) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec3 32 ssa_38 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_39 = fmul ssa_38, ssa_36
	vec3 32 ssa_40 = ffract ssa_39
	intrinsic store_deref (ssa_34, ssa_40) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_41 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_42 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_43 = vec3 ssa_42.y, ssa_42.x, ssa_42.z
	vec3 32 ssa_44 = fadd ssa_42.yxz, ssa_35
	vec1 32 ssa_45 = fdot3 ssa_41, ssa_44
	vec3 32 ssa_46 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_47 = vec3 ssa_45, ssa_45, ssa_45
	vec3 32 ssa_48 = fadd ssa_46, ssa_45.xxx
	intrinsic store_deref (ssa_34, ssa_48) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_49 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_50 = mov ssa_49.x
	vec3 32 ssa_51 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_52 = mov ssa_51.y
	vec1 32 ssa_53 = fadd ssa_49.x, ssa_51.y
	vec3 32 ssa_54 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_55 = mov ssa_54.z
	vec1 32 ssa_56 = fmul ssa_53, ssa_54.z
	vec3 32 ssa_57 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_58 = mov ssa_57.x
	vec3 32 ssa_59 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_60 = mov ssa_59.z
	vec1 32 ssa_61 = fadd ssa_57.x, ssa_59.z
	vec3 32 ssa_62 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_63 = mov ssa_62.y
	vec1 32 ssa_64 = fmul ssa_61, ssa_62.y
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec3 32 ssa_66 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_67 = mov ssa_66.y
	vec3 32 ssa_68 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_69 = mov ssa_68.z
	vec1 32 ssa_70 = fadd ssa_66.y, ssa_68.z
	vec3 32 ssa_71 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_72 = mov ssa_71.x
	vec1 32 ssa_73 = fmul ssa_70, ssa_71.x
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	intrinsic store_deref (ssa_33, ssa_75) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = intrinsic load_deref (ssa_33) (0) /* access=0 */
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	intrinsic store_deref (ssa_78, ssa_77) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 1 ssa_83 = fge ssa_80, ssa_82
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_85 = intrinsic load_deref (ssa_84) (0) /* access=0 */
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_87 = intrinsic load_deref (ssa_86) (0) /* access=0 */
		vec1 32 ssa_88 = fsub ssa_85, ssa_87
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_90 = intrinsic load_deref (ssa_89) (0) /* access=0 */
		vec1 32 ssa_91 = fsub ssa_25, ssa_90
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		intrinsic store_deref (ssa_94, ssa_93) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_96 = intrinsic load_deref (ssa_95) (0) /* access=0 */
		vec3 32 ssa_97 = vec3 ssa_96, ssa_96, ssa_96
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
		vec3 32 ssa_100 = fadd ssa_99, ssa_96.xxx
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		intrinsic store_deref (ssa_101, ssa_100) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_103 = intrinsic load_deref (ssa_102) (0) /* access=0 */
	intrinsic store_deref (ssa_22, ssa_103) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_105 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_107 = intrinsic load_deref (ssa_106) (0) /* access=0 */
	vec3 32 ssa_108 = fadd ssa_105, ssa_107
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	intrinsic store_deref (ssa_109, ssa_108) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_111 = intrinsic load_deref (ssa_110) (0) /* access=0 */
	vec1 32 ssa_112 = mov ssa_111.x
	vec1 32 ssa_113 = mov ssa_111.y
	vec1 32 ssa_114 = mov ssa_111.z
	vec4 32 ssa_115 = vec4 ssa_111.x, ssa_111.y, ssa_111.z, ssa_0
	vec1 32 ssa_116 = deref_var &out@outFragColor-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_116, ssa_115) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_117 = deref_var &out@outFragColor-temp (shader_temp vec4) 
	vec1 32 ssa_118 = deref_var &outFragColor (shader_out vec4) 
	intrinsic copy_deref (ssa_118, ssa_117) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_alu_to_scalar
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec1 32 ssa_119 = fmul ssa_7.x, ssa_12
	vec1 32 ssa_120 = fmul ssa_7.y, ssa_12
	vec1 32 ssa_121 = fmul ssa_7.z, ssa_12
	vec3 32 ssa_122 = vec3 ssa_119, ssa_120, ssa_121
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec1 32 ssa_123 = fmax ssa_122.x, ssa_14.x
	vec1 32 ssa_124 = fmax ssa_122.y, ssa_14.y
	vec1 32 ssa_125 = fmax ssa_122.z, ssa_14.z
	vec3 32 ssa_126 = vec3 ssa_123, ssa_124, ssa_125
	vec1 32 ssa_127 = fmin ssa_126.x, ssa_15.x
	vec1 32 ssa_128 = fmin ssa_126.y, ssa_15.y
	vec1 32 ssa_129 = fmin ssa_126.z, ssa_15.z
	vec3 32 ssa_130 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	intrinsic store_deref (ssa_18, ssa_130) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	intrinsic store_deref (ssa_21, ssa_20) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	intrinsic store_deref (ssa_29, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	intrinsic store_deref (ssa_30, ssa_26) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_31 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	intrinsic store_deref (ssa_32, ssa_31) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec3 32 ssa_38 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_131 = fmul ssa_38.x, ssa_36.x
	vec1 32 ssa_132 = fmul ssa_38.y, ssa_36.y
	vec1 32 ssa_133 = fmul ssa_38.z, ssa_36.z
	vec3 32 ssa_134 = vec3 ssa_131, ssa_132, ssa_133
	vec1 32 ssa_135 = ffract ssa_134.x
	vec1 32 ssa_136 = ffract ssa_134.y
	vec1 32 ssa_137 = ffract ssa_134.z
	vec3 32 ssa_138 = vec3 ssa_135, ssa_136, ssa_137
	intrinsic store_deref (ssa_34, ssa_138) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_41 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_42 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_43 = vec3 ssa_42.y, ssa_42.x, ssa_42.z
	vec1 32 ssa_139 = fadd ssa_42.y, ssa_35.x
	vec1 32 ssa_140 = fadd ssa_42.x, ssa_35.y
	vec1 32 ssa_141 = fadd ssa_42.z, ssa_35.z
	vec3 32 ssa_142 = vec3 ssa_139, ssa_140, ssa_141
	vec1 32 ssa_143 = fmul ssa_41.x, ssa_142.x
	vec1 32 ssa_144 = fmul ssa_41.y, ssa_142.y
	vec1 32 ssa_145 = fadd ssa_143, ssa_144
	vec1 32 ssa_146 = fmul ssa_41.z, ssa_142.z
	vec1 32 ssa_147 = fadd ssa_145, ssa_146
	vec3 32 ssa_46 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_47 = vec3 ssa_147, ssa_147, ssa_147
	vec1 32 ssa_148 = fadd ssa_46.x, ssa_147
	vec1 32 ssa_149 = fadd ssa_46.y, ssa_147
	vec1 32 ssa_150 = fadd ssa_46.z, ssa_147
	vec3 32 ssa_151 = vec3 ssa_148, ssa_149, ssa_150
	intrinsic store_deref (ssa_34, ssa_151) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_49 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_50 = mov ssa_49.x
	vec3 32 ssa_51 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_52 = mov ssa_51.y
	vec1 32 ssa_53 = fadd ssa_49.x, ssa_51.y
	vec3 32 ssa_54 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_55 = mov ssa_54.z
	vec1 32 ssa_56 = fmul ssa_53, ssa_54.z
	vec3 32 ssa_57 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_58 = mov ssa_57.x
	vec3 32 ssa_59 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_60 = mov ssa_59.z
	vec1 32 ssa_61 = fadd ssa_57.x, ssa_59.z
	vec3 32 ssa_62 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_63 = mov ssa_62.y
	vec1 32 ssa_64 = fmul ssa_61, ssa_62.y
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec3 32 ssa_66 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_67 = mov ssa_66.y
	vec3 32 ssa_68 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_69 = mov ssa_68.z
	vec1 32 ssa_70 = fadd ssa_66.y, ssa_68.z
	vec3 32 ssa_71 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_72 = mov ssa_71.x
	vec1 32 ssa_73 = fmul ssa_70, ssa_71.x
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	intrinsic store_deref (ssa_33, ssa_75) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = intrinsic load_deref (ssa_33) (0) /* access=0 */
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	intrinsic store_deref (ssa_78, ssa_77) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 1 ssa_83 = fge ssa_80, ssa_82
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_85 = intrinsic load_deref (ssa_84) (0) /* access=0 */
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_87 = intrinsic load_deref (ssa_86) (0) /* access=0 */
		vec1 32 ssa_88 = fsub ssa_85, ssa_87
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_90 = intrinsic load_deref (ssa_89) (0) /* access=0 */
		vec1 32 ssa_91 = fsub ssa_25, ssa_90
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		intrinsic store_deref (ssa_94, ssa_93) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_96 = intrinsic load_deref (ssa_95) (0) /* access=0 */
		vec3 32 ssa_97 = vec3 ssa_96, ssa_96, ssa_96
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
		vec1 32 ssa_152 = fadd ssa_99.x, ssa_96
		vec1 32 ssa_153 = fadd ssa_99.y, ssa_96
		vec1 32 ssa_154 = fadd ssa_99.z, ssa_96
		vec3 32 ssa_155 = vec3 ssa_152, ssa_153, ssa_154
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		intrinsic store_deref (ssa_101, ssa_155) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_103 = intrinsic load_deref (ssa_102) (0) /* access=0 */
	intrinsic store_deref (ssa_22, ssa_103) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_105 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_107 = intrinsic load_deref (ssa_106) (0) /* access=0 */
	vec1 32 ssa_156 = fadd ssa_105.x, ssa_107.x
	vec1 32 ssa_157 = fadd ssa_105.y, ssa_107.y
	vec1 32 ssa_158 = fadd ssa_105.z, ssa_107.z
	vec3 32 ssa_159 = vec3 ssa_156, ssa_157, ssa_158
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	intrinsic store_deref (ssa_109, ssa_159) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_111 = intrinsic load_deref (ssa_110) (0) /* access=0 */
	vec1 32 ssa_112 = mov ssa_111.x
	vec1 32 ssa_113 = mov ssa_111.y
	vec1 32 ssa_114 = mov ssa_111.z
	vec4 32 ssa_115 = vec4 ssa_111.x, ssa_111.y, ssa_111.z, ssa_0
	vec1 32 ssa_116 = deref_var &out@outFragColor-temp (shader_temp vec4) 
	intrinsic store_deref (ssa_116, ssa_115) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_117 = deref_var &out@outFragColor-temp (shader_temp vec4) 
	vec1 32 ssa_118 = deref_var &outFragColor (shader_out vec4) 
	intrinsic copy_deref (ssa_118, ssa_117) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_tex
nir_normalize_cubemap_coords
nir_lower_global_vars_to_local
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec1 32 ssa_119 = fmul ssa_7.x, ssa_12
	vec1 32 ssa_120 = fmul ssa_7.y, ssa_12
	vec1 32 ssa_121 = fmul ssa_7.z, ssa_12
	vec3 32 ssa_122 = vec3 ssa_119, ssa_120, ssa_121
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec1 32 ssa_123 = fmax ssa_122.x, ssa_14.x
	vec1 32 ssa_124 = fmax ssa_122.y, ssa_14.y
	vec1 32 ssa_125 = fmax ssa_122.z, ssa_14.z
	vec3 32 ssa_126 = vec3 ssa_123, ssa_124, ssa_125
	vec1 32 ssa_127 = fmin ssa_126.x, ssa_15.x
	vec1 32 ssa_128 = fmin ssa_126.y, ssa_15.y
	vec1 32 ssa_129 = fmin ssa_126.z, ssa_15.z
	vec3 32 ssa_130 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	intrinsic store_deref (ssa_18, ssa_130) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	intrinsic store_deref (ssa_21, ssa_20) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	intrinsic store_deref (ssa_29, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	intrinsic store_deref (ssa_30, ssa_26) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_31 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	intrinsic store_deref (ssa_32, ssa_31) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec3 32 ssa_38 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_131 = fmul ssa_38.x, ssa_36.x
	vec1 32 ssa_132 = fmul ssa_38.y, ssa_36.y
	vec1 32 ssa_133 = fmul ssa_38.z, ssa_36.z
	vec3 32 ssa_134 = vec3 ssa_131, ssa_132, ssa_133
	vec1 32 ssa_135 = ffract ssa_134.x
	vec1 32 ssa_136 = ffract ssa_134.y
	vec1 32 ssa_137 = ffract ssa_134.z
	vec3 32 ssa_138 = vec3 ssa_135, ssa_136, ssa_137
	intrinsic store_deref (ssa_34, ssa_138) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_41 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_42 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_43 = vec3 ssa_42.y, ssa_42.x, ssa_42.z
	vec1 32 ssa_139 = fadd ssa_42.y, ssa_35.x
	vec1 32 ssa_140 = fadd ssa_42.x, ssa_35.y
	vec1 32 ssa_141 = fadd ssa_42.z, ssa_35.z
	vec3 32 ssa_142 = vec3 ssa_139, ssa_140, ssa_141
	vec1 32 ssa_143 = fmul ssa_41.x, ssa_142.x
	vec1 32 ssa_144 = fmul ssa_41.y, ssa_142.y
	vec1 32 ssa_145 = fadd ssa_143, ssa_144
	vec1 32 ssa_146 = fmul ssa_41.z, ssa_142.z
	vec1 32 ssa_147 = fadd ssa_145, ssa_146
	vec3 32 ssa_46 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_47 = vec3 ssa_147, ssa_147, ssa_147
	vec1 32 ssa_148 = fadd ssa_46.x, ssa_147
	vec1 32 ssa_149 = fadd ssa_46.y, ssa_147
	vec1 32 ssa_150 = fadd ssa_46.z, ssa_147
	vec3 32 ssa_151 = vec3 ssa_148, ssa_149, ssa_150
	intrinsic store_deref (ssa_34, ssa_151) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_49 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_50 = mov ssa_49.x
	vec3 32 ssa_51 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_52 = mov ssa_51.y
	vec1 32 ssa_53 = fadd ssa_49.x, ssa_51.y
	vec3 32 ssa_54 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_55 = mov ssa_54.z
	vec1 32 ssa_56 = fmul ssa_53, ssa_54.z
	vec3 32 ssa_57 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_58 = mov ssa_57.x
	vec3 32 ssa_59 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_60 = mov ssa_59.z
	vec1 32 ssa_61 = fadd ssa_57.x, ssa_59.z
	vec3 32 ssa_62 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_63 = mov ssa_62.y
	vec1 32 ssa_64 = fmul ssa_61, ssa_62.y
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec3 32 ssa_66 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_67 = mov ssa_66.y
	vec3 32 ssa_68 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_69 = mov ssa_68.z
	vec1 32 ssa_70 = fadd ssa_66.y, ssa_68.z
	vec3 32 ssa_71 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_72 = mov ssa_71.x
	vec1 32 ssa_73 = fmul ssa_70, ssa_71.x
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	intrinsic store_deref (ssa_33, ssa_75) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = intrinsic load_deref (ssa_33) (0) /* access=0 */
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	intrinsic store_deref (ssa_78, ssa_77) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 1 ssa_83 = fge ssa_80, ssa_82
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_85 = intrinsic load_deref (ssa_84) (0) /* access=0 */
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_87 = intrinsic load_deref (ssa_86) (0) /* access=0 */
		vec1 32 ssa_88 = fsub ssa_85, ssa_87
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_90 = intrinsic load_deref (ssa_89) (0) /* access=0 */
		vec1 32 ssa_91 = fsub ssa_25, ssa_90
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		intrinsic store_deref (ssa_94, ssa_93) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_96 = intrinsic load_deref (ssa_95) (0) /* access=0 */
		vec3 32 ssa_97 = vec3 ssa_96, ssa_96, ssa_96
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
		vec1 32 ssa_152 = fadd ssa_99.x, ssa_96
		vec1 32 ssa_153 = fadd ssa_99.y, ssa_96
		vec1 32 ssa_154 = fadd ssa_99.z, ssa_96
		vec3 32 ssa_155 = vec3 ssa_152, ssa_153, ssa_154
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		intrinsic store_deref (ssa_101, ssa_155) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_103 = intrinsic load_deref (ssa_102) (0) /* access=0 */
	intrinsic store_deref (ssa_22, ssa_103) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_105 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_107 = intrinsic load_deref (ssa_106) (0) /* access=0 */
	vec1 32 ssa_156 = fadd ssa_105.x, ssa_107.x
	vec1 32 ssa_157 = fadd ssa_105.y, ssa_107.y
	vec1 32 ssa_158 = fadd ssa_105.z, ssa_107.z
	vec3 32 ssa_159 = vec3 ssa_156, ssa_157, ssa_158
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	intrinsic store_deref (ssa_109, ssa_159) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_111 = intrinsic load_deref (ssa_110) (0) /* access=0 */
	vec1 32 ssa_112 = mov ssa_111.x
	vec1 32 ssa_113 = mov ssa_111.y
	vec1 32 ssa_114 = mov ssa_111.z
	vec4 32 ssa_115 = vec4 ssa_111.x, ssa_111.y, ssa_111.z, ssa_0
	vec1 32 ssa_116 = deref_var &out@outFragColor-temp (function_temp vec4) 
	intrinsic store_deref (ssa_116, ssa_115) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_117 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_118 = deref_var &outFragColor (shader_out vec4) 
	intrinsic copy_deref (ssa_118, ssa_117) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_split_var_copies
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec1 32 ssa_119 = fmul ssa_7.x, ssa_12
	vec1 32 ssa_120 = fmul ssa_7.y, ssa_12
	vec1 32 ssa_121 = fmul ssa_7.z, ssa_12
	vec3 32 ssa_122 = vec3 ssa_119, ssa_120, ssa_121
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec1 32 ssa_123 = fmax ssa_122.x, ssa_14.x
	vec1 32 ssa_124 = fmax ssa_122.y, ssa_14.y
	vec1 32 ssa_125 = fmax ssa_122.z, ssa_14.z
	vec3 32 ssa_126 = vec3 ssa_123, ssa_124, ssa_125
	vec1 32 ssa_127 = fmin ssa_126.x, ssa_15.x
	vec1 32 ssa_128 = fmin ssa_126.y, ssa_15.y
	vec1 32 ssa_129 = fmin ssa_126.z, ssa_15.z
	vec3 32 ssa_130 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	intrinsic store_deref (ssa_18, ssa_130) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	intrinsic store_deref (ssa_21, ssa_20) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	intrinsic store_deref (ssa_29, ssa_27) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	intrinsic store_deref (ssa_30, ssa_26) (1, 0) /* wrmask=x */ /* access=0 */
	vec3 32 ssa_31 = intrinsic load_deref (ssa_23) (0) /* access=0 */
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	intrinsic store_deref (ssa_32, ssa_31) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec3 32 ssa_38 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_131 = fmul ssa_38.x, ssa_36.x
	vec1 32 ssa_132 = fmul ssa_38.y, ssa_36.y
	vec1 32 ssa_133 = fmul ssa_38.z, ssa_36.z
	vec3 32 ssa_134 = vec3 ssa_131, ssa_132, ssa_133
	vec1 32 ssa_135 = ffract ssa_134.x
	vec1 32 ssa_136 = ffract ssa_134.y
	vec1 32 ssa_137 = ffract ssa_134.z
	vec3 32 ssa_138 = vec3 ssa_135, ssa_136, ssa_137
	intrinsic store_deref (ssa_34, ssa_138) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_41 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_42 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_43 = vec3 ssa_42.y, ssa_42.x, ssa_42.z
	vec1 32 ssa_139 = fadd ssa_42.y, ssa_35.x
	vec1 32 ssa_140 = fadd ssa_42.x, ssa_35.y
	vec1 32 ssa_141 = fadd ssa_42.z, ssa_35.z
	vec3 32 ssa_142 = vec3 ssa_139, ssa_140, ssa_141
	vec1 32 ssa_143 = fmul ssa_41.x, ssa_142.x
	vec1 32 ssa_144 = fmul ssa_41.y, ssa_142.y
	vec1 32 ssa_145 = fadd ssa_143, ssa_144
	vec1 32 ssa_146 = fmul ssa_41.z, ssa_142.z
	vec1 32 ssa_147 = fadd ssa_145, ssa_146
	vec3 32 ssa_46 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec3 32 ssa_47 = vec3 ssa_147, ssa_147, ssa_147
	vec1 32 ssa_148 = fadd ssa_46.x, ssa_147
	vec1 32 ssa_149 = fadd ssa_46.y, ssa_147
	vec1 32 ssa_150 = fadd ssa_46.z, ssa_147
	vec3 32 ssa_151 = vec3 ssa_148, ssa_149, ssa_150
	intrinsic store_deref (ssa_34, ssa_151) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_49 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_50 = mov ssa_49.x
	vec3 32 ssa_51 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_52 = mov ssa_51.y
	vec1 32 ssa_53 = fadd ssa_49.x, ssa_51.y
	vec3 32 ssa_54 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_55 = mov ssa_54.z
	vec1 32 ssa_56 = fmul ssa_53, ssa_54.z
	vec3 32 ssa_57 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_58 = mov ssa_57.x
	vec3 32 ssa_59 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_60 = mov ssa_59.z
	vec1 32 ssa_61 = fadd ssa_57.x, ssa_59.z
	vec3 32 ssa_62 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_63 = mov ssa_62.y
	vec1 32 ssa_64 = fmul ssa_61, ssa_62.y
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec3 32 ssa_66 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_67 = mov ssa_66.y
	vec3 32 ssa_68 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_69 = mov ssa_68.z
	vec1 32 ssa_70 = fadd ssa_66.y, ssa_68.z
	vec3 32 ssa_71 = intrinsic load_deref (ssa_34) (0) /* access=0 */
	vec1 32 ssa_72 = mov ssa_71.x
	vec1 32 ssa_73 = fmul ssa_70, ssa_71.x
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	intrinsic store_deref (ssa_33, ssa_75) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_77 = intrinsic load_deref (ssa_33) (0) /* access=0 */
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	intrinsic store_deref (ssa_78, ssa_77) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_80 = intrinsic load_deref (ssa_79) (0) /* access=0 */
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_82 = intrinsic load_deref (ssa_81) (0) /* access=0 */
	vec1 1 ssa_83 = fge ssa_80, ssa_82
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_85 = intrinsic load_deref (ssa_84) (0) /* access=0 */
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_87 = intrinsic load_deref (ssa_86) (0) /* access=0 */
		vec1 32 ssa_88 = fsub ssa_85, ssa_87
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_90 = intrinsic load_deref (ssa_89) (0) /* access=0 */
		vec1 32 ssa_91 = fsub ssa_25, ssa_90
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		intrinsic store_deref (ssa_94, ssa_93) (1, 0) /* wrmask=x */ /* access=0 */
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_96 = intrinsic load_deref (ssa_95) (0) /* access=0 */
		vec3 32 ssa_97 = vec3 ssa_96, ssa_96, ssa_96
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_99 = intrinsic load_deref (ssa_98) (0) /* access=0 */
		vec1 32 ssa_152 = fadd ssa_99.x, ssa_96
		vec1 32 ssa_153 = fadd ssa_99.y, ssa_96
		vec1 32 ssa_154 = fadd ssa_99.z, ssa_96
		vec3 32 ssa_155 = vec3 ssa_152, ssa_153, ssa_154
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		intrinsic store_deref (ssa_101, ssa_155) (7, 0) /* wrmask=xyz */ /* access=0 */
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_103 = intrinsic load_deref (ssa_102) (0) /* access=0 */
	intrinsic store_deref (ssa_22, ssa_103) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec3 32 ssa_105 = intrinsic load_deref (ssa_22) (0) /* access=0 */
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_107 = intrinsic load_deref (ssa_106) (0) /* access=0 */
	vec1 32 ssa_156 = fadd ssa_105.x, ssa_107.x
	vec1 32 ssa_157 = fadd ssa_105.y, ssa_107.y
	vec1 32 ssa_158 = fadd ssa_105.z, ssa_107.z
	vec3 32 ssa_159 = vec3 ssa_156, ssa_157, ssa_158
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	intrinsic store_deref (ssa_109, ssa_159) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_111 = intrinsic load_deref (ssa_110) (0) /* access=0 */
	vec1 32 ssa_112 = mov ssa_111.x
	vec1 32 ssa_113 = mov ssa_111.y
	vec1 32 ssa_114 = mov ssa_111.z
	vec4 32 ssa_115 = vec4 ssa_111.x, ssa_111.y, ssa_111.z, ssa_0
	vec1 32 ssa_116 = deref_var &out@outFragColor-temp (function_temp vec4) 
	intrinsic store_deref (ssa_116, ssa_115) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_117 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_118 = deref_var &outFragColor (shader_out vec4) 
	intrinsic copy_deref (ssa_118, ssa_117) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_split_struct_vars
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec1 32 ssa_119 = fmul ssa_7.x, ssa_12
	vec1 32 ssa_120 = fmul ssa_7.y, ssa_12
	vec1 32 ssa_121 = fmul ssa_7.z, ssa_12
	vec3 32 ssa_122 = vec3 ssa_119, ssa_120, ssa_121
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec1 32 ssa_123 = fmax ssa_122.x, ssa_14.x
	vec1 32 ssa_124 = fmax ssa_122.y, ssa_14.y
	vec1 32 ssa_125 = fmax ssa_122.z, ssa_14.z
	vec3 32 ssa_126 = vec3 ssa_123, ssa_124, ssa_125
	vec1 32 ssa_127 = fmin ssa_126.x, ssa_15.x
	vec1 32 ssa_128 = fmin ssa_126.y, ssa_15.y
	vec1 32 ssa_129 = fmin ssa_126.z, ssa_15.z
	vec3 32 ssa_130 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_20 = intrinsic load_deref (ssa_19) (0) /* access=0 */
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	vec3 32 ssa_161 = mov ssa_20
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec3 32 ssa_162 = mov ssa_161
	vec1 32 ssa_131 = fmul ssa_162.x, ssa_36.x
	vec1 32 ssa_132 = fmul ssa_162.y, ssa_36.y
	vec1 32 ssa_133 = fmul ssa_162.z, ssa_36.z
	vec3 32 ssa_134 = vec3 ssa_131, ssa_132, ssa_133
	vec1 32 ssa_135 = ffract ssa_134.x
	vec1 32 ssa_136 = ffract ssa_134.y
	vec1 32 ssa_137 = ffract ssa_134.z
	vec3 32 ssa_138 = vec3 ssa_135, ssa_136, ssa_137
	vec3 32 ssa_163 = mov ssa_138
	vec3 32 ssa_164 = mov ssa_138
	vec3 32 ssa_43 = vec3 ssa_164.y, ssa_164.x, ssa_164.z
	vec1 32 ssa_139 = fadd ssa_164.y, ssa_35.x
	vec1 32 ssa_140 = fadd ssa_164.x, ssa_35.y
	vec1 32 ssa_141 = fadd ssa_164.z, ssa_35.z
	vec3 32 ssa_142 = vec3 ssa_139, ssa_140, ssa_141
	vec1 32 ssa_143 = fmul ssa_163.x, ssa_142.x
	vec1 32 ssa_144 = fmul ssa_163.y, ssa_142.y
	vec1 32 ssa_145 = fadd ssa_143, ssa_144
	vec1 32 ssa_146 = fmul ssa_163.z, ssa_142.z
	vec1 32 ssa_147 = fadd ssa_145, ssa_146
	vec3 32 ssa_165 = mov ssa_138
	vec3 32 ssa_47 = vec3 ssa_147, ssa_147, ssa_147
	vec1 32 ssa_148 = fadd ssa_165.x, ssa_147
	vec1 32 ssa_149 = fadd ssa_165.y, ssa_147
	vec1 32 ssa_150 = fadd ssa_165.z, ssa_147
	vec3 32 ssa_151 = vec3 ssa_148, ssa_149, ssa_150
	vec3 32 ssa_166 = mov ssa_151
	vec1 32 ssa_50 = mov ssa_166.x
	vec3 32 ssa_167 = mov ssa_151
	vec1 32 ssa_52 = mov ssa_167.y
	vec1 32 ssa_53 = fadd ssa_166.x, ssa_167.y
	vec3 32 ssa_168 = mov ssa_151
	vec1 32 ssa_55 = mov ssa_168.z
	vec1 32 ssa_56 = fmul ssa_53, ssa_168.z
	vec3 32 ssa_169 = mov ssa_151
	vec1 32 ssa_58 = mov ssa_169.x
	vec3 32 ssa_170 = mov ssa_151
	vec1 32 ssa_60 = mov ssa_170.z
	vec1 32 ssa_61 = fadd ssa_169.x, ssa_170.z
	vec3 32 ssa_171 = mov ssa_151
	vec1 32 ssa_63 = mov ssa_171.y
	vec1 32 ssa_64 = fmul ssa_61, ssa_171.y
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec3 32 ssa_172 = mov ssa_151
	vec1 32 ssa_67 = mov ssa_172.y
	vec3 32 ssa_173 = mov ssa_151
	vec1 32 ssa_69 = mov ssa_173.z
	vec1 32 ssa_70 = fadd ssa_172.y, ssa_173.z
	vec3 32 ssa_174 = mov ssa_151
	vec1 32 ssa_72 = mov ssa_174.x
	vec1 32 ssa_73 = fmul ssa_70, ssa_174.x
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	vec1 32 ssa_175 = mov ssa_75
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_176 = mov ssa_175
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_177 = mov ssa_26
	vec1 1 ssa_83 = fge ssa_176, ssa_177
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_178 = mov ssa_175
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_179 = mov ssa_26
		vec1 32 ssa_88 = fsub ssa_178, ssa_179
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_180 = mov ssa_26
		vec1 32 ssa_91 = fsub ssa_25, ssa_180
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_181 = mov ssa_93
		vec3 32 ssa_97 = vec3 ssa_181, ssa_181, ssa_181
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_182 = mov ssa_27
		vec1 32 ssa_152 = fadd ssa_182.x, ssa_181
		vec1 32 ssa_153 = fadd ssa_182.y, ssa_181
		vec1 32 ssa_154 = fadd ssa_182.z, ssa_181
		vec3 32 ssa_155 = vec3 ssa_152, ssa_153, ssa_154
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec3 32 ssa_188 = phi block_1: ssa_155, block_2: ssa_27
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_183 = mov ssa_188
	vec3 32 ssa_184 = mov ssa_183
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_185 = mov ssa_130
	vec1 32 ssa_156 = fadd ssa_184.x, ssa_185.x
	vec1 32 ssa_157 = fadd ssa_184.y, ssa_185.y
	vec1 32 ssa_158 = fadd ssa_184.z, ssa_185.z
	vec3 32 ssa_159 = vec3 ssa_156, ssa_157, ssa_158
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_186 = mov ssa_159
	vec1 32 ssa_112 = mov ssa_186.x
	vec1 32 ssa_113 = mov ssa_186.y
	vec1 32 ssa_114 = mov ssa_186.z
	vec4 32 ssa_115 = vec4 ssa_186.x, ssa_186.y, ssa_186.z, ssa_0
	vec1 32 ssa_116 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_117 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_118 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_187 = mov ssa_115
	intrinsic store_deref (ssa_118, ssa_187) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_find_array_copies
nir_opt_copy_prop_vars
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec1 32 ssa_119 = fmul ssa_7.x, ssa_12
	vec1 32 ssa_120 = fmul ssa_7.y, ssa_12
	vec1 32 ssa_121 = fmul ssa_7.z, ssa_12
	vec3 32 ssa_122 = vec3 ssa_119, ssa_120, ssa_121
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec1 32 ssa_123 = fmax ssa_122.x, ssa_14.x
	vec1 32 ssa_124 = fmax ssa_122.y, ssa_14.y
	vec1 32 ssa_125 = fmax ssa_122.z, ssa_14.z
	vec3 32 ssa_126 = vec3 ssa_123, ssa_124, ssa_125
	vec1 32 ssa_127 = fmin ssa_126.x, ssa_15.x
	vec1 32 ssa_128 = fmin ssa_126.y, ssa_15.y
	vec1 32 ssa_129 = fmin ssa_126.z, ssa_15.z
	vec3 32 ssa_130 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	vec3 32 ssa_161 = mov ssa_10
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec3 32 ssa_162 = mov ssa_161
	vec1 32 ssa_131 = fmul ssa_162.x, ssa_36.x
	vec1 32 ssa_132 = fmul ssa_162.y, ssa_36.y
	vec1 32 ssa_133 = fmul ssa_162.z, ssa_36.z
	vec3 32 ssa_134 = vec3 ssa_131, ssa_132, ssa_133
	vec1 32 ssa_135 = ffract ssa_134.x
	vec1 32 ssa_136 = ffract ssa_134.y
	vec1 32 ssa_137 = ffract ssa_134.z
	vec3 32 ssa_138 = vec3 ssa_135, ssa_136, ssa_137
	vec3 32 ssa_163 = mov ssa_138
	vec3 32 ssa_164 = mov ssa_138
	vec3 32 ssa_43 = vec3 ssa_164.y, ssa_164.x, ssa_164.z
	vec1 32 ssa_139 = fadd ssa_164.y, ssa_35.x
	vec1 32 ssa_140 = fadd ssa_164.x, ssa_35.y
	vec1 32 ssa_141 = fadd ssa_164.z, ssa_35.z
	vec3 32 ssa_142 = vec3 ssa_139, ssa_140, ssa_141
	vec1 32 ssa_143 = fmul ssa_163.x, ssa_142.x
	vec1 32 ssa_144 = fmul ssa_163.y, ssa_142.y
	vec1 32 ssa_145 = fadd ssa_143, ssa_144
	vec1 32 ssa_146 = fmul ssa_163.z, ssa_142.z
	vec1 32 ssa_147 = fadd ssa_145, ssa_146
	vec3 32 ssa_165 = mov ssa_138
	vec3 32 ssa_47 = vec3 ssa_147, ssa_147, ssa_147
	vec1 32 ssa_148 = fadd ssa_165.x, ssa_147
	vec1 32 ssa_149 = fadd ssa_165.y, ssa_147
	vec1 32 ssa_150 = fadd ssa_165.z, ssa_147
	vec3 32 ssa_151 = vec3 ssa_148, ssa_149, ssa_150
	vec3 32 ssa_166 = mov ssa_151
	vec1 32 ssa_50 = mov ssa_166.x
	vec3 32 ssa_167 = mov ssa_151
	vec1 32 ssa_52 = mov ssa_167.y
	vec1 32 ssa_53 = fadd ssa_166.x, ssa_167.y
	vec3 32 ssa_168 = mov ssa_151
	vec1 32 ssa_55 = mov ssa_168.z
	vec1 32 ssa_56 = fmul ssa_53, ssa_168.z
	vec3 32 ssa_169 = mov ssa_151
	vec1 32 ssa_58 = mov ssa_169.x
	vec3 32 ssa_170 = mov ssa_151
	vec1 32 ssa_60 = mov ssa_170.z
	vec1 32 ssa_61 = fadd ssa_169.x, ssa_170.z
	vec3 32 ssa_171 = mov ssa_151
	vec1 32 ssa_63 = mov ssa_171.y
	vec1 32 ssa_64 = fmul ssa_61, ssa_171.y
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec3 32 ssa_172 = mov ssa_151
	vec1 32 ssa_67 = mov ssa_172.y
	vec3 32 ssa_173 = mov ssa_151
	vec1 32 ssa_69 = mov ssa_173.z
	vec1 32 ssa_70 = fadd ssa_172.y, ssa_173.z
	vec3 32 ssa_174 = mov ssa_151
	vec1 32 ssa_72 = mov ssa_174.x
	vec1 32 ssa_73 = fmul ssa_70, ssa_174.x
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	vec1 32 ssa_175 = mov ssa_75
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_176 = mov ssa_175
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_177 = mov ssa_26
	vec1 1 ssa_83 = fge ssa_176, ssa_177
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_178 = mov ssa_175
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_179 = mov ssa_26
		vec1 32 ssa_88 = fsub ssa_178, ssa_179
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_180 = mov ssa_26
		vec1 32 ssa_91 = fsub ssa_25, ssa_180
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_181 = mov ssa_93
		vec3 32 ssa_97 = vec3 ssa_181, ssa_181, ssa_181
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec3 32 ssa_182 = mov ssa_27
		vec1 32 ssa_152 = fadd ssa_182.x, ssa_181
		vec1 32 ssa_153 = fadd ssa_182.y, ssa_181
		vec1 32 ssa_154 = fadd ssa_182.z, ssa_181
		vec3 32 ssa_155 = vec3 ssa_152, ssa_153, ssa_154
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec3 32 ssa_188 = phi block_1: ssa_155, block_2: ssa_27
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec3 32 ssa_183 = mov ssa_188
	vec3 32 ssa_184 = mov ssa_183
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec3 32 ssa_185 = mov ssa_130
	vec1 32 ssa_156 = fadd ssa_184.x, ssa_185.x
	vec1 32 ssa_157 = fadd ssa_184.y, ssa_185.y
	vec1 32 ssa_158 = fadd ssa_184.z, ssa_185.z
	vec3 32 ssa_159 = vec3 ssa_156, ssa_157, ssa_158
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec3 32 ssa_186 = mov ssa_159
	vec1 32 ssa_112 = mov ssa_186.x
	vec1 32 ssa_113 = mov ssa_186.y
	vec1 32 ssa_114 = mov ssa_186.z
	vec4 32 ssa_115 = vec4 ssa_186.x, ssa_186.y, ssa_186.z, ssa_0
	vec1 32 ssa_116 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_117 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_118 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_187 = mov ssa_115
	intrinsic store_deref (ssa_118, ssa_187) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec1 32 ssa_119 = fmul ssa_7.x, ssa_12
	vec1 32 ssa_120 = fmul ssa_7.y, ssa_12
	vec1 32 ssa_121 = fmul ssa_7.z, ssa_12
	vec3 32 ssa_122 = vec3 ssa_119, ssa_120, ssa_121
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec1 32 ssa_123 = fmax ssa_122.x, ssa_14.x
	vec1 32 ssa_124 = fmax ssa_122.y, ssa_14.y
	vec1 32 ssa_125 = fmax ssa_122.z, ssa_14.z
	vec3 32 ssa_126 = vec3 ssa_123, ssa_124, ssa_125
	vec1 32 ssa_127 = fmin ssa_126.x, ssa_15.x
	vec1 32 ssa_128 = fmin ssa_126.y, ssa_15.y
	vec1 32 ssa_129 = fmin ssa_126.z, ssa_15.z
	vec3 32 ssa_130 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_189 = mov ssa_10.x
	vec1 32 ssa_190 = mov ssa_10.y
	vec1 32 ssa_191 = mov ssa_10.z
	vec3 32 ssa_192 = vec3 ssa_189, ssa_190, ssa_191
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_193 = mov ssa_192.x
	vec1 32 ssa_194 = mov ssa_192.y
	vec1 32 ssa_195 = mov ssa_192.z
	vec3 32 ssa_196 = vec3 ssa_193, ssa_194, ssa_195
	vec1 32 ssa_131 = fmul ssa_196.x, ssa_36.x
	vec1 32 ssa_132 = fmul ssa_196.y, ssa_36.y
	vec1 32 ssa_133 = fmul ssa_196.z, ssa_36.z
	vec3 32 ssa_134 = vec3 ssa_131, ssa_132, ssa_133
	vec1 32 ssa_135 = ffract ssa_134.x
	vec1 32 ssa_136 = ffract ssa_134.y
	vec1 32 ssa_137 = ffract ssa_134.z
	vec3 32 ssa_138 = vec3 ssa_135, ssa_136, ssa_137
	vec1 32 ssa_197 = mov ssa_138.x
	vec1 32 ssa_198 = mov ssa_138.y
	vec1 32 ssa_199 = mov ssa_138.z
	vec3 32 ssa_200 = vec3 ssa_197, ssa_198, ssa_199
	vec1 32 ssa_201 = mov ssa_138.x
	vec1 32 ssa_202 = mov ssa_138.y
	vec1 32 ssa_203 = mov ssa_138.z
	vec3 32 ssa_204 = vec3 ssa_201, ssa_202, ssa_203
	vec3 32 ssa_43 = vec3 ssa_204.y, ssa_204.x, ssa_204.z
	vec1 32 ssa_139 = fadd ssa_204.y, ssa_35.x
	vec1 32 ssa_140 = fadd ssa_204.x, ssa_35.y
	vec1 32 ssa_141 = fadd ssa_204.z, ssa_35.z
	vec3 32 ssa_142 = vec3 ssa_139, ssa_140, ssa_141
	vec1 32 ssa_143 = fmul ssa_200.x, ssa_142.x
	vec1 32 ssa_144 = fmul ssa_200.y, ssa_142.y
	vec1 32 ssa_145 = fadd ssa_143, ssa_144
	vec1 32 ssa_146 = fmul ssa_200.z, ssa_142.z
	vec1 32 ssa_147 = fadd ssa_145, ssa_146
	vec1 32 ssa_205 = mov ssa_138.x
	vec1 32 ssa_206 = mov ssa_138.y
	vec1 32 ssa_207 = mov ssa_138.z
	vec3 32 ssa_208 = vec3 ssa_205, ssa_206, ssa_207
	vec3 32 ssa_47 = vec3 ssa_147, ssa_147, ssa_147
	vec1 32 ssa_148 = fadd ssa_208.x, ssa_147
	vec1 32 ssa_149 = fadd ssa_208.y, ssa_147
	vec1 32 ssa_150 = fadd ssa_208.z, ssa_147
	vec3 32 ssa_151 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_209 = mov ssa_151.x
	vec1 32 ssa_210 = mov ssa_151.y
	vec1 32 ssa_211 = mov ssa_151.z
	vec3 32 ssa_212 = vec3 ssa_209, ssa_210, ssa_211
	vec1 32 ssa_50 = mov ssa_212.x
	vec1 32 ssa_213 = mov ssa_151.x
	vec1 32 ssa_214 = mov ssa_151.y
	vec1 32 ssa_215 = mov ssa_151.z
	vec3 32 ssa_216 = vec3 ssa_213, ssa_214, ssa_215
	vec1 32 ssa_52 = mov ssa_216.y
	vec1 32 ssa_53 = fadd ssa_212.x, ssa_216.y
	vec1 32 ssa_217 = mov ssa_151.x
	vec1 32 ssa_218 = mov ssa_151.y
	vec1 32 ssa_219 = mov ssa_151.z
	vec3 32 ssa_220 = vec3 ssa_217, ssa_218, ssa_219
	vec1 32 ssa_55 = mov ssa_220.z
	vec1 32 ssa_56 = fmul ssa_53, ssa_220.z
	vec1 32 ssa_221 = mov ssa_151.x
	vec1 32 ssa_222 = mov ssa_151.y
	vec1 32 ssa_223 = mov ssa_151.z
	vec3 32 ssa_224 = vec3 ssa_221, ssa_222, ssa_223
	vec1 32 ssa_58 = mov ssa_224.x
	vec1 32 ssa_225 = mov ssa_151.x
	vec1 32 ssa_226 = mov ssa_151.y
	vec1 32 ssa_227 = mov ssa_151.z
	vec3 32 ssa_228 = vec3 ssa_225, ssa_226, ssa_227
	vec1 32 ssa_60 = mov ssa_228.z
	vec1 32 ssa_61 = fadd ssa_224.x, ssa_228.z
	vec1 32 ssa_229 = mov ssa_151.x
	vec1 32 ssa_230 = mov ssa_151.y
	vec1 32 ssa_231 = mov ssa_151.z
	vec3 32 ssa_232 = vec3 ssa_229, ssa_230, ssa_231
	vec1 32 ssa_63 = mov ssa_232.y
	vec1 32 ssa_64 = fmul ssa_61, ssa_232.y
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec1 32 ssa_233 = mov ssa_151.x
	vec1 32 ssa_234 = mov ssa_151.y
	vec1 32 ssa_235 = mov ssa_151.z
	vec3 32 ssa_236 = vec3 ssa_233, ssa_234, ssa_235
	vec1 32 ssa_67 = mov ssa_236.y
	vec1 32 ssa_237 = mov ssa_151.x
	vec1 32 ssa_238 = mov ssa_151.y
	vec1 32 ssa_239 = mov ssa_151.z
	vec3 32 ssa_240 = vec3 ssa_237, ssa_238, ssa_239
	vec1 32 ssa_69 = mov ssa_240.z
	vec1 32 ssa_70 = fadd ssa_236.y, ssa_240.z
	vec1 32 ssa_241 = mov ssa_151.x
	vec1 32 ssa_242 = mov ssa_151.y
	vec1 32 ssa_243 = mov ssa_151.z
	vec3 32 ssa_244 = vec3 ssa_241, ssa_242, ssa_243
	vec1 32 ssa_72 = mov ssa_244.x
	vec1 32 ssa_73 = fmul ssa_70, ssa_244.x
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	vec1 32 ssa_175 = mov ssa_75
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_176 = mov ssa_175
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_177 = mov ssa_26
	vec1 1 ssa_83 = fge ssa_176, ssa_177
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_178 = mov ssa_175
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_179 = mov ssa_26
		vec1 32 ssa_88 = fsub ssa_178, ssa_179
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_180 = mov ssa_26
		vec1 32 ssa_91 = fsub ssa_25, ssa_180
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_181 = mov ssa_93
		vec3 32 ssa_97 = vec3 ssa_181, ssa_181, ssa_181
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec1 32 ssa_245 = mov ssa_27.x
		vec1 32 ssa_246 = mov ssa_27.y
		vec1 32 ssa_247 = mov ssa_27.z
		vec3 32 ssa_248 = vec3 ssa_245, ssa_246, ssa_247
		vec1 32 ssa_152 = fadd ssa_248.x, ssa_181
		vec1 32 ssa_153 = fadd ssa_248.y, ssa_181
		vec1 32 ssa_154 = fadd ssa_248.z, ssa_181
		vec3 32 ssa_155 = vec3 ssa_152, ssa_153, ssa_154
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec3 32 ssa_188 = phi block_1: ssa_155, block_2: ssa_27
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec1 32 ssa_249 = mov ssa_188.x
	vec1 32 ssa_250 = mov ssa_188.y
	vec1 32 ssa_251 = mov ssa_188.z
	vec3 32 ssa_252 = vec3 ssa_249, ssa_250, ssa_251
	vec1 32 ssa_253 = mov ssa_252.x
	vec1 32 ssa_254 = mov ssa_252.y
	vec1 32 ssa_255 = mov ssa_252.z
	vec3 32 ssa_256 = vec3 ssa_253, ssa_254, ssa_255
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec1 32 ssa_257 = mov ssa_130.x
	vec1 32 ssa_258 = mov ssa_130.y
	vec1 32 ssa_259 = mov ssa_130.z
	vec3 32 ssa_260 = vec3 ssa_257, ssa_258, ssa_259
	vec1 32 ssa_156 = fadd ssa_256.x, ssa_260.x
	vec1 32 ssa_157 = fadd ssa_256.y, ssa_260.y
	vec1 32 ssa_158 = fadd ssa_256.z, ssa_260.z
	vec3 32 ssa_159 = vec3 ssa_156, ssa_157, ssa_158
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec1 32 ssa_261 = mov ssa_159.x
	vec1 32 ssa_262 = mov ssa_159.y
	vec1 32 ssa_263 = mov ssa_159.z
	vec3 32 ssa_264 = vec3 ssa_261, ssa_262, ssa_263
	vec1 32 ssa_112 = mov ssa_264.x
	vec1 32 ssa_113 = mov ssa_264.y
	vec1 32 ssa_114 = mov ssa_264.z
	vec4 32 ssa_115 = vec4 ssa_264.x, ssa_264.y, ssa_264.z, ssa_0
	vec1 32 ssa_116 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_117 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_118 = deref_var &outFragColor (shader_out vec4) 
	vec1 32 ssa_265 = mov ssa_115.x
	vec1 32 ssa_266 = mov ssa_115.y
	vec1 32 ssa_267 = mov ssa_115.z
	vec1 32 ssa_268 = mov ssa_115.w
	vec4 32 ssa_269 = vec4 ssa_265, ssa_266, ssa_267, ssa_268
	intrinsic store_deref (ssa_118, ssa_269) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_copy_prop
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec1 32 ssa_119 = fmul ssa_7.x, ssa_12
	vec1 32 ssa_120 = fmul ssa_7.y, ssa_12
	vec1 32 ssa_121 = fmul ssa_7.z, ssa_12
	vec3 32 ssa_122 = vec3 ssa_119, ssa_120, ssa_121
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec1 32 ssa_123 = fmax ssa_119, ssa_6
	vec1 32 ssa_124 = fmax ssa_120, ssa_5
	vec1 32 ssa_125 = fmax ssa_121, ssa_4
	vec3 32 ssa_126 = vec3 ssa_123, ssa_124, ssa_125
	vec1 32 ssa_127 = fmin ssa_123, ssa_3
	vec1 32 ssa_128 = fmin ssa_124, ssa_2
	vec1 32 ssa_129 = fmin ssa_125, ssa_1
	vec3 32 ssa_130 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_189 = mov ssa_10.x
	vec1 32 ssa_190 = mov ssa_10.y
	vec1 32 ssa_191 = mov ssa_10.z
	vec3 32 ssa_192 = vec3 ssa_10.x, ssa_10.y, ssa_10.z
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_193 = mov ssa_10.x
	vec1 32 ssa_194 = mov ssa_10.y
	vec1 32 ssa_195 = mov ssa_10.z
	vec3 32 ssa_196 = vec3 ssa_10.x, ssa_10.y, ssa_10.z
	vec1 32 ssa_131 = fmul ssa_10.x, ssa_36.x
	vec1 32 ssa_132 = fmul ssa_10.y, ssa_36.y
	vec1 32 ssa_133 = fmul ssa_10.z, ssa_36.z
	vec3 32 ssa_134 = vec3 ssa_131, ssa_132, ssa_133
	vec1 32 ssa_135 = ffract ssa_131
	vec1 32 ssa_136 = ffract ssa_132
	vec1 32 ssa_137 = ffract ssa_133
	vec3 32 ssa_138 = vec3 ssa_135, ssa_136, ssa_137
	vec1 32 ssa_197 = mov ssa_135
	vec1 32 ssa_198 = mov ssa_136
	vec1 32 ssa_199 = mov ssa_137
	vec3 32 ssa_200 = vec3 ssa_135, ssa_136, ssa_137
	vec1 32 ssa_201 = mov ssa_135
	vec1 32 ssa_202 = mov ssa_136
	vec1 32 ssa_203 = mov ssa_137
	vec3 32 ssa_204 = vec3 ssa_135, ssa_136, ssa_137
	vec3 32 ssa_43 = vec3 ssa_136, ssa_135, ssa_137
	vec1 32 ssa_139 = fadd ssa_136, ssa_35.x
	vec1 32 ssa_140 = fadd ssa_135, ssa_35.y
	vec1 32 ssa_141 = fadd ssa_137, ssa_35.z
	vec3 32 ssa_142 = vec3 ssa_139, ssa_140, ssa_141
	vec1 32 ssa_143 = fmul ssa_135, ssa_139
	vec1 32 ssa_144 = fmul ssa_136, ssa_140
	vec1 32 ssa_145 = fadd ssa_143, ssa_144
	vec1 32 ssa_146 = fmul ssa_137, ssa_141
	vec1 32 ssa_147 = fadd ssa_145, ssa_146
	vec1 32 ssa_205 = mov ssa_135
	vec1 32 ssa_206 = mov ssa_136
	vec1 32 ssa_207 = mov ssa_137
	vec3 32 ssa_208 = vec3 ssa_135, ssa_136, ssa_137
	vec3 32 ssa_47 = vec3 ssa_147, ssa_147, ssa_147
	vec1 32 ssa_148 = fadd ssa_135, ssa_147
	vec1 32 ssa_149 = fadd ssa_136, ssa_147
	vec1 32 ssa_150 = fadd ssa_137, ssa_147
	vec3 32 ssa_151 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_209 = mov ssa_148
	vec1 32 ssa_210 = mov ssa_149
	vec1 32 ssa_211 = mov ssa_150
	vec3 32 ssa_212 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_50 = mov ssa_148
	vec1 32 ssa_213 = mov ssa_148
	vec1 32 ssa_214 = mov ssa_149
	vec1 32 ssa_215 = mov ssa_150
	vec3 32 ssa_216 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_52 = mov ssa_149
	vec1 32 ssa_53 = fadd ssa_148, ssa_149
	vec1 32 ssa_217 = mov ssa_148
	vec1 32 ssa_218 = mov ssa_149
	vec1 32 ssa_219 = mov ssa_150
	vec3 32 ssa_220 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_55 = mov ssa_150
	vec1 32 ssa_56 = fmul ssa_53, ssa_150
	vec1 32 ssa_221 = mov ssa_148
	vec1 32 ssa_222 = mov ssa_149
	vec1 32 ssa_223 = mov ssa_150
	vec3 32 ssa_224 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_58 = mov ssa_148
	vec1 32 ssa_225 = mov ssa_148
	vec1 32 ssa_226 = mov ssa_149
	vec1 32 ssa_227 = mov ssa_150
	vec3 32 ssa_228 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_60 = mov ssa_150
	vec1 32 ssa_61 = fadd ssa_148, ssa_150
	vec1 32 ssa_229 = mov ssa_148
	vec1 32 ssa_230 = mov ssa_149
	vec1 32 ssa_231 = mov ssa_150
	vec3 32 ssa_232 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_63 = mov ssa_149
	vec1 32 ssa_64 = fmul ssa_61, ssa_149
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec1 32 ssa_233 = mov ssa_148
	vec1 32 ssa_234 = mov ssa_149
	vec1 32 ssa_235 = mov ssa_150
	vec3 32 ssa_236 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_67 = mov ssa_149
	vec1 32 ssa_237 = mov ssa_148
	vec1 32 ssa_238 = mov ssa_149
	vec1 32 ssa_239 = mov ssa_150
	vec3 32 ssa_240 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_69 = mov ssa_150
	vec1 32 ssa_70 = fadd ssa_149, ssa_150
	vec1 32 ssa_241 = mov ssa_148
	vec1 32 ssa_242 = mov ssa_149
	vec1 32 ssa_243 = mov ssa_150
	vec3 32 ssa_244 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_72 = mov ssa_148
	vec1 32 ssa_73 = fmul ssa_70, ssa_148
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	vec1 32 ssa_175 = mov ssa_75
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_176 = mov ssa_75
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_177 = mov ssa_26
	vec1 1 ssa_83 = fge ssa_75, ssa_26
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_178 = mov ssa_75
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_179 = mov ssa_26
		vec1 32 ssa_88 = fsub ssa_75, ssa_26
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_180 = mov ssa_26
		vec1 32 ssa_91 = fsub ssa_25, ssa_26
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_181 = mov ssa_93
		vec3 32 ssa_97 = vec3 ssa_93, ssa_93, ssa_93
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec1 32 ssa_245 = mov ssa_27.x
		vec1 32 ssa_246 = mov ssa_27.y
		vec1 32 ssa_247 = mov ssa_27.z
		vec3 32 ssa_248 = vec3 ssa_27.x, ssa_27.y, ssa_27.z
		vec1 32 ssa_152 = fadd ssa_27.x, ssa_93
		vec1 32 ssa_153 = fadd ssa_27.y, ssa_93
		vec1 32 ssa_154 = fadd ssa_27.z, ssa_93
		vec3 32 ssa_155 = vec3 ssa_152, ssa_153, ssa_154
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec3 32 ssa_188 = phi block_1: ssa_155, block_2: ssa_27
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec1 32 ssa_249 = mov ssa_188.x
	vec1 32 ssa_250 = mov ssa_188.y
	vec1 32 ssa_251 = mov ssa_188.z
	vec3 32 ssa_252 = vec3 ssa_188.x, ssa_188.y, ssa_188.z
	vec1 32 ssa_253 = mov ssa_188.x
	vec1 32 ssa_254 = mov ssa_188.y
	vec1 32 ssa_255 = mov ssa_188.z
	vec3 32 ssa_256 = vec3 ssa_188.x, ssa_188.y, ssa_188.z
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec1 32 ssa_257 = mov ssa_127
	vec1 32 ssa_258 = mov ssa_128
	vec1 32 ssa_259 = mov ssa_129
	vec3 32 ssa_260 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_156 = fadd ssa_188.x, ssa_127
	vec1 32 ssa_157 = fadd ssa_188.y, ssa_128
	vec1 32 ssa_158 = fadd ssa_188.z, ssa_129
	vec3 32 ssa_159 = vec3 ssa_156, ssa_157, ssa_158
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec1 32 ssa_261 = mov ssa_156
	vec1 32 ssa_262 = mov ssa_157
	vec1 32 ssa_263 = mov ssa_158
	vec3 32 ssa_264 = vec3 ssa_156, ssa_157, ssa_158
	vec1 32 ssa_112 = mov ssa_156
	vec1 32 ssa_113 = mov ssa_157
	vec1 32 ssa_114 = mov ssa_158
	vec4 32 ssa_115 = vec4 ssa_156, ssa_157, ssa_158, ssa_0
	vec1 32 ssa_116 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_117 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_118 = deref_var &outFragColor (shader_out vec4) 
	vec1 32 ssa_265 = mov ssa_156
	vec1 32 ssa_266 = mov ssa_157
	vec1 32 ssa_267 = mov ssa_158
	vec1 32 ssa_268 = mov ssa_0
	vec4 32 ssa_269 = vec4 ssa_156, ssa_157, ssa_158, ssa_0
	intrinsic store_deref (ssa_118, ssa_269) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_lower_phis_to_scalar
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec1 32 ssa_119 = fmul ssa_7.x, ssa_12
	vec1 32 ssa_120 = fmul ssa_7.y, ssa_12
	vec1 32 ssa_121 = fmul ssa_7.z, ssa_12
	vec3 32 ssa_122 = vec3 ssa_119, ssa_120, ssa_121
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec1 32 ssa_123 = fmax ssa_119, ssa_6
	vec1 32 ssa_124 = fmax ssa_120, ssa_5
	vec1 32 ssa_125 = fmax ssa_121, ssa_4
	vec3 32 ssa_126 = vec3 ssa_123, ssa_124, ssa_125
	vec1 32 ssa_127 = fmin ssa_123, ssa_3
	vec1 32 ssa_128 = fmin ssa_124, ssa_2
	vec1 32 ssa_129 = fmin ssa_125, ssa_1
	vec3 32 ssa_130 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_189 = mov ssa_10.x
	vec1 32 ssa_190 = mov ssa_10.y
	vec1 32 ssa_191 = mov ssa_10.z
	vec3 32 ssa_192 = vec3 ssa_10.x, ssa_10.y, ssa_10.z
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_193 = mov ssa_10.x
	vec1 32 ssa_194 = mov ssa_10.y
	vec1 32 ssa_195 = mov ssa_10.z
	vec3 32 ssa_196 = vec3 ssa_10.x, ssa_10.y, ssa_10.z
	vec1 32 ssa_131 = fmul ssa_10.x, ssa_36.x
	vec1 32 ssa_132 = fmul ssa_10.y, ssa_36.y
	vec1 32 ssa_133 = fmul ssa_10.z, ssa_36.z
	vec3 32 ssa_134 = vec3 ssa_131, ssa_132, ssa_133
	vec1 32 ssa_135 = ffract ssa_131
	vec1 32 ssa_136 = ffract ssa_132
	vec1 32 ssa_137 = ffract ssa_133
	vec3 32 ssa_138 = vec3 ssa_135, ssa_136, ssa_137
	vec1 32 ssa_197 = mov ssa_135
	vec1 32 ssa_198 = mov ssa_136
	vec1 32 ssa_199 = mov ssa_137
	vec3 32 ssa_200 = vec3 ssa_135, ssa_136, ssa_137
	vec1 32 ssa_201 = mov ssa_135
	vec1 32 ssa_202 = mov ssa_136
	vec1 32 ssa_203 = mov ssa_137
	vec3 32 ssa_204 = vec3 ssa_135, ssa_136, ssa_137
	vec3 32 ssa_43 = vec3 ssa_136, ssa_135, ssa_137
	vec1 32 ssa_139 = fadd ssa_136, ssa_35.x
	vec1 32 ssa_140 = fadd ssa_135, ssa_35.y
	vec1 32 ssa_141 = fadd ssa_137, ssa_35.z
	vec3 32 ssa_142 = vec3 ssa_139, ssa_140, ssa_141
	vec1 32 ssa_143 = fmul ssa_135, ssa_139
	vec1 32 ssa_144 = fmul ssa_136, ssa_140
	vec1 32 ssa_145 = fadd ssa_143, ssa_144
	vec1 32 ssa_146 = fmul ssa_137, ssa_141
	vec1 32 ssa_147 = fadd ssa_145, ssa_146
	vec1 32 ssa_205 = mov ssa_135
	vec1 32 ssa_206 = mov ssa_136
	vec1 32 ssa_207 = mov ssa_137
	vec3 32 ssa_208 = vec3 ssa_135, ssa_136, ssa_137
	vec3 32 ssa_47 = vec3 ssa_147, ssa_147, ssa_147
	vec1 32 ssa_148 = fadd ssa_135, ssa_147
	vec1 32 ssa_149 = fadd ssa_136, ssa_147
	vec1 32 ssa_150 = fadd ssa_137, ssa_147
	vec3 32 ssa_151 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_209 = mov ssa_148
	vec1 32 ssa_210 = mov ssa_149
	vec1 32 ssa_211 = mov ssa_150
	vec3 32 ssa_212 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_50 = mov ssa_148
	vec1 32 ssa_213 = mov ssa_148
	vec1 32 ssa_214 = mov ssa_149
	vec1 32 ssa_215 = mov ssa_150
	vec3 32 ssa_216 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_52 = mov ssa_149
	vec1 32 ssa_53 = fadd ssa_148, ssa_149
	vec1 32 ssa_217 = mov ssa_148
	vec1 32 ssa_218 = mov ssa_149
	vec1 32 ssa_219 = mov ssa_150
	vec3 32 ssa_220 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_55 = mov ssa_150
	vec1 32 ssa_56 = fmul ssa_53, ssa_150
	vec1 32 ssa_221 = mov ssa_148
	vec1 32 ssa_222 = mov ssa_149
	vec1 32 ssa_223 = mov ssa_150
	vec3 32 ssa_224 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_58 = mov ssa_148
	vec1 32 ssa_225 = mov ssa_148
	vec1 32 ssa_226 = mov ssa_149
	vec1 32 ssa_227 = mov ssa_150
	vec3 32 ssa_228 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_60 = mov ssa_150
	vec1 32 ssa_61 = fadd ssa_148, ssa_150
	vec1 32 ssa_229 = mov ssa_148
	vec1 32 ssa_230 = mov ssa_149
	vec1 32 ssa_231 = mov ssa_150
	vec3 32 ssa_232 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_63 = mov ssa_149
	vec1 32 ssa_64 = fmul ssa_61, ssa_149
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec1 32 ssa_233 = mov ssa_148
	vec1 32 ssa_234 = mov ssa_149
	vec1 32 ssa_235 = mov ssa_150
	vec3 32 ssa_236 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_67 = mov ssa_149
	vec1 32 ssa_237 = mov ssa_148
	vec1 32 ssa_238 = mov ssa_149
	vec1 32 ssa_239 = mov ssa_150
	vec3 32 ssa_240 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_69 = mov ssa_150
	vec1 32 ssa_70 = fadd ssa_149, ssa_150
	vec1 32 ssa_241 = mov ssa_148
	vec1 32 ssa_242 = mov ssa_149
	vec1 32 ssa_243 = mov ssa_150
	vec3 32 ssa_244 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_72 = mov ssa_148
	vec1 32 ssa_73 = fmul ssa_70, ssa_148
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	vec1 32 ssa_175 = mov ssa_75
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_176 = mov ssa_75
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_177 = mov ssa_26
	vec1 1 ssa_83 = fge ssa_75, ssa_26
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_178 = mov ssa_75
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_179 = mov ssa_26
		vec1 32 ssa_88 = fsub ssa_75, ssa_26
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_180 = mov ssa_26
		vec1 32 ssa_91 = fsub ssa_25, ssa_26
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_181 = mov ssa_93
		vec3 32 ssa_97 = vec3 ssa_93, ssa_93, ssa_93
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec1 32 ssa_245 = mov ssa_27.x
		vec1 32 ssa_246 = mov ssa_27.y
		vec1 32 ssa_247 = mov ssa_27.z
		vec3 32 ssa_248 = vec3 ssa_27.x, ssa_27.y, ssa_27.z
		vec1 32 ssa_152 = fadd ssa_27.x, ssa_93
		vec1 32 ssa_153 = fadd ssa_27.y, ssa_93
		vec1 32 ssa_154 = fadd ssa_27.z, ssa_93
		vec3 32 ssa_155 = vec3 ssa_152, ssa_153, ssa_154
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		vec1 32 ssa_270 = mov ssa_155.x
		vec1 32 ssa_273 = mov ssa_155.y
		vec1 32 ssa_276 = mov ssa_155.z
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_271 = mov ssa_27.x
		vec1 32 ssa_274 = mov ssa_27.y
		vec1 32 ssa_277 = mov ssa_27.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_272 = phi block_1: ssa_270, block_2: ssa_271
	vec1 32 ssa_275 = phi block_1: ssa_273, block_2: ssa_274
	vec1 32 ssa_278 = phi block_1: ssa_276, block_2: ssa_277
	vec3 32 ssa_279 = vec3 ssa_272, ssa_275, ssa_278
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec1 32 ssa_249 = mov ssa_279.x
	vec1 32 ssa_250 = mov ssa_279.y
	vec1 32 ssa_251 = mov ssa_279.z
	vec3 32 ssa_252 = vec3 ssa_279.x, ssa_279.y, ssa_279.z
	vec1 32 ssa_253 = mov ssa_279.x
	vec1 32 ssa_254 = mov ssa_279.y
	vec1 32 ssa_255 = mov ssa_279.z
	vec3 32 ssa_256 = vec3 ssa_279.x, ssa_279.y, ssa_279.z
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec1 32 ssa_257 = mov ssa_127
	vec1 32 ssa_258 = mov ssa_128
	vec1 32 ssa_259 = mov ssa_129
	vec3 32 ssa_260 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_156 = fadd ssa_279.x, ssa_127
	vec1 32 ssa_157 = fadd ssa_279.y, ssa_128
	vec1 32 ssa_158 = fadd ssa_279.z, ssa_129
	vec3 32 ssa_159 = vec3 ssa_156, ssa_157, ssa_158
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec1 32 ssa_261 = mov ssa_156
	vec1 32 ssa_262 = mov ssa_157
	vec1 32 ssa_263 = mov ssa_158
	vec3 32 ssa_264 = vec3 ssa_156, ssa_157, ssa_158
	vec1 32 ssa_112 = mov ssa_156
	vec1 32 ssa_113 = mov ssa_157
	vec1 32 ssa_114 = mov ssa_158
	vec4 32 ssa_115 = vec4 ssa_156, ssa_157, ssa_158, ssa_0
	vec1 32 ssa_116 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_117 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_118 = deref_var &outFragColor (shader_out vec4) 
	vec1 32 ssa_265 = mov ssa_156
	vec1 32 ssa_266 = mov ssa_157
	vec1 32 ssa_267 = mov ssa_158
	vec1 32 ssa_268 = mov ssa_0
	vec4 32 ssa_269 = vec4 ssa_156, ssa_157, ssa_158, ssa_0
	intrinsic store_deref (ssa_118, ssa_269) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_copy_prop
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = mov ssa_10.y
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec1 32 ssa_119 = fmul ssa_7.x, ssa_12
	vec1 32 ssa_120 = fmul ssa_7.y, ssa_12
	vec1 32 ssa_121 = fmul ssa_7.z, ssa_12
	vec3 32 ssa_122 = vec3 ssa_119, ssa_120, ssa_121
	vec3 32 ssa_14 = vec3 ssa_6, ssa_5, ssa_4
	vec3 32 ssa_15 = vec3 ssa_3, ssa_2, ssa_1
	vec1 32 ssa_123 = fmax ssa_119, ssa_6
	vec1 32 ssa_124 = fmax ssa_120, ssa_5
	vec1 32 ssa_125 = fmax ssa_121, ssa_4
	vec3 32 ssa_126 = vec3 ssa_123, ssa_124, ssa_125
	vec1 32 ssa_127 = fmin ssa_123, ssa_3
	vec1 32 ssa_128 = fmin ssa_124, ssa_2
	vec1 32 ssa_129 = fmin ssa_125, ssa_1
	vec3 32 ssa_130 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_18 = deref_var &atmosphere (function_temp vec3) 
	vec1 32 ssa_19 = deref_var &inUVW (shader_in vec3) 
	vec1 32 ssa_21 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_22 = deref_var &return_tmp (function_temp vec3) 
	vec1 32 ssa_23 = deref_var &param (function_temp vec3) 
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec1 32 ssa_29 = deref_var &color@0 (function_temp vec3) 
	vec1 32 ssa_30 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_189 = mov ssa_10.x
	vec1 32 ssa_190 = mov ssa_10.y
	vec1 32 ssa_191 = mov ssa_10.z
	vec3 32 ssa_192 = vec3 ssa_10.x, ssa_10.y, ssa_10.z
	vec1 32 ssa_32 = deref_var &param@1 (function_temp vec3) 
	vec1 32 ssa_33 = deref_var &return_tmp@2 (function_temp float) 
	vec1 32 ssa_34 = deref_var &param@1 (function_temp vec3) 
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_193 = mov ssa_10.x
	vec1 32 ssa_194 = mov ssa_10.y
	vec1 32 ssa_195 = mov ssa_10.z
	vec3 32 ssa_196 = vec3 ssa_10.x, ssa_10.y, ssa_10.z
	vec1 32 ssa_131 = fmul ssa_10.x, ssa_36.x
	vec1 32 ssa_132 = fmul ssa_10.y, ssa_36.y
	vec1 32 ssa_133 = fmul ssa_10.z, ssa_36.z
	vec3 32 ssa_134 = vec3 ssa_131, ssa_132, ssa_133
	vec1 32 ssa_135 = ffract ssa_131
	vec1 32 ssa_136 = ffract ssa_132
	vec1 32 ssa_137 = ffract ssa_133
	vec3 32 ssa_138 = vec3 ssa_135, ssa_136, ssa_137
	vec1 32 ssa_197 = mov ssa_135
	vec1 32 ssa_198 = mov ssa_136
	vec1 32 ssa_199 = mov ssa_137
	vec3 32 ssa_200 = vec3 ssa_135, ssa_136, ssa_137
	vec1 32 ssa_201 = mov ssa_135
	vec1 32 ssa_202 = mov ssa_136
	vec1 32 ssa_203 = mov ssa_137
	vec3 32 ssa_204 = vec3 ssa_135, ssa_136, ssa_137
	vec3 32 ssa_43 = vec3 ssa_136, ssa_135, ssa_137
	vec1 32 ssa_139 = fadd ssa_136, ssa_35.x
	vec1 32 ssa_140 = fadd ssa_135, ssa_35.y
	vec1 32 ssa_141 = fadd ssa_137, ssa_35.z
	vec3 32 ssa_142 = vec3 ssa_139, ssa_140, ssa_141
	vec1 32 ssa_143 = fmul ssa_135, ssa_139
	vec1 32 ssa_144 = fmul ssa_136, ssa_140
	vec1 32 ssa_145 = fadd ssa_143, ssa_144
	vec1 32 ssa_146 = fmul ssa_137, ssa_141
	vec1 32 ssa_147 = fadd ssa_145, ssa_146
	vec1 32 ssa_205 = mov ssa_135
	vec1 32 ssa_206 = mov ssa_136
	vec1 32 ssa_207 = mov ssa_137
	vec3 32 ssa_208 = vec3 ssa_135, ssa_136, ssa_137
	vec3 32 ssa_47 = vec3 ssa_147, ssa_147, ssa_147
	vec1 32 ssa_148 = fadd ssa_135, ssa_147
	vec1 32 ssa_149 = fadd ssa_136, ssa_147
	vec1 32 ssa_150 = fadd ssa_137, ssa_147
	vec3 32 ssa_151 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_209 = mov ssa_148
	vec1 32 ssa_210 = mov ssa_149
	vec1 32 ssa_211 = mov ssa_150
	vec3 32 ssa_212 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_50 = mov ssa_148
	vec1 32 ssa_213 = mov ssa_148
	vec1 32 ssa_214 = mov ssa_149
	vec1 32 ssa_215 = mov ssa_150
	vec3 32 ssa_216 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_52 = mov ssa_149
	vec1 32 ssa_53 = fadd ssa_148, ssa_149
	vec1 32 ssa_217 = mov ssa_148
	vec1 32 ssa_218 = mov ssa_149
	vec1 32 ssa_219 = mov ssa_150
	vec3 32 ssa_220 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_55 = mov ssa_150
	vec1 32 ssa_56 = fmul ssa_53, ssa_150
	vec1 32 ssa_221 = mov ssa_148
	vec1 32 ssa_222 = mov ssa_149
	vec1 32 ssa_223 = mov ssa_150
	vec3 32 ssa_224 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_58 = mov ssa_148
	vec1 32 ssa_225 = mov ssa_148
	vec1 32 ssa_226 = mov ssa_149
	vec1 32 ssa_227 = mov ssa_150
	vec3 32 ssa_228 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_60 = mov ssa_150
	vec1 32 ssa_61 = fadd ssa_148, ssa_150
	vec1 32 ssa_229 = mov ssa_148
	vec1 32 ssa_230 = mov ssa_149
	vec1 32 ssa_231 = mov ssa_150
	vec3 32 ssa_232 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_63 = mov ssa_149
	vec1 32 ssa_64 = fmul ssa_61, ssa_149
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec1 32 ssa_233 = mov ssa_148
	vec1 32 ssa_234 = mov ssa_149
	vec1 32 ssa_235 = mov ssa_150
	vec3 32 ssa_236 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_67 = mov ssa_149
	vec1 32 ssa_237 = mov ssa_148
	vec1 32 ssa_238 = mov ssa_149
	vec1 32 ssa_239 = mov ssa_150
	vec3 32 ssa_240 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_69 = mov ssa_150
	vec1 32 ssa_70 = fadd ssa_149, ssa_150
	vec1 32 ssa_241 = mov ssa_148
	vec1 32 ssa_242 = mov ssa_149
	vec1 32 ssa_243 = mov ssa_150
	vec3 32 ssa_244 = vec3 ssa_148, ssa_149, ssa_150
	vec1 32 ssa_72 = mov ssa_148
	vec1 32 ssa_73 = fmul ssa_70, ssa_148
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	vec1 32 ssa_175 = mov ssa_75
	vec1 32 ssa_78 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_79 = deref_var &rnd (function_temp float) 
	vec1 32 ssa_176 = mov ssa_75
	vec1 32 ssa_81 = deref_var &threshhold (function_temp float) 
	vec1 32 ssa_177 = mov ssa_26
	vec1 1 ssa_83 = fge ssa_75, ssa_26
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_84 = deref_var &rnd (function_temp float) 
		vec1 32 ssa_178 = mov ssa_75
		vec1 32 ssa_86 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_179 = mov ssa_26
		vec1 32 ssa_88 = fsub ssa_75, ssa_26
		vec1 32 ssa_89 = deref_var &threshhold (function_temp float) 
		vec1 32 ssa_180 = mov ssa_26
		vec1 32 ssa_91 = fsub ssa_25, ssa_26
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_94 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_95 = deref_var &starCol (function_temp float) 
		vec1 32 ssa_181 = mov ssa_93
		vec3 32 ssa_97 = vec3 ssa_93, ssa_93, ssa_93
		vec1 32 ssa_98 = deref_var &color@0 (function_temp vec3) 
		vec1 32 ssa_245 = mov ssa_27.x
		vec1 32 ssa_246 = mov ssa_27.y
		vec1 32 ssa_247 = mov ssa_27.z
		vec3 32 ssa_248 = vec3 ssa_27.x, ssa_27.y, ssa_27.z
		vec1 32 ssa_152 = fadd ssa_27.x, ssa_93
		vec1 32 ssa_153 = fadd ssa_27.y, ssa_93
		vec1 32 ssa_154 = fadd ssa_27.z, ssa_93
		vec3 32 ssa_155 = vec3 ssa_152, ssa_153, ssa_154
		vec1 32 ssa_101 = deref_var &color@0 (function_temp vec3) 
		vec1 32 ssa_270 = mov ssa_152
		vec1 32 ssa_273 = mov ssa_153
		vec1 32 ssa_276 = mov ssa_154
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_271 = mov ssa_27.x
		vec1 32 ssa_274 = mov ssa_27.y
		vec1 32 ssa_277 = mov ssa_27.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_272 = phi block_1: ssa_152, block_2: ssa_271
	vec1 32 ssa_275 = phi block_1: ssa_153, block_2: ssa_274
	vec1 32 ssa_278 = phi block_1: ssa_154, block_2: ssa_277
	vec3 32 ssa_279 = vec3 ssa_272, ssa_275, ssa_278
	vec1 32 ssa_102 = deref_var &color@0 (function_temp vec3) 
	vec1 32 ssa_249 = mov ssa_272
	vec1 32 ssa_250 = mov ssa_275
	vec1 32 ssa_251 = mov ssa_278
	vec3 32 ssa_252 = vec3 ssa_272, ssa_275, ssa_278
	vec1 32 ssa_253 = mov ssa_272
	vec1 32 ssa_254 = mov ssa_275
	vec1 32 ssa_255 = mov ssa_278
	vec3 32 ssa_256 = vec3 ssa_272, ssa_275, ssa_278
	vec1 32 ssa_106 = deref_var &atmosphere (function_temp vec3) 
	vec1 32 ssa_257 = mov ssa_127
	vec1 32 ssa_258 = mov ssa_128
	vec1 32 ssa_259 = mov ssa_129
	vec3 32 ssa_260 = vec3 ssa_127, ssa_128, ssa_129
	vec1 32 ssa_156 = fadd ssa_272, ssa_127
	vec1 32 ssa_157 = fadd ssa_275, ssa_128
	vec1 32 ssa_158 = fadd ssa_278, ssa_129
	vec3 32 ssa_159 = vec3 ssa_156, ssa_157, ssa_158
	vec1 32 ssa_109 = deref_var &color (function_temp vec3) 
	vec1 32 ssa_110 = deref_var &color (function_temp vec3) 
	vec1 32 ssa_261 = mov ssa_156
	vec1 32 ssa_262 = mov ssa_157
	vec1 32 ssa_263 = mov ssa_158
	vec3 32 ssa_264 = vec3 ssa_156, ssa_157, ssa_158
	vec1 32 ssa_112 = mov ssa_156
	vec1 32 ssa_113 = mov ssa_157
	vec1 32 ssa_114 = mov ssa_158
	vec4 32 ssa_115 = vec4 ssa_156, ssa_157, ssa_158, ssa_0
	vec1 32 ssa_116 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_117 = deref_var &out@outFragColor-temp (function_temp vec4) 
	vec1 32 ssa_118 = deref_var &outFragColor (shader_out vec4) 
	vec1 32 ssa_265 = mov ssa_156
	vec1 32 ssa_266 = mov ssa_157
	vec1 32 ssa_267 = mov ssa_158
	vec1 32 ssa_268 = mov ssa_0
	vec4 32 ssa_269 = vec4 ssa_156, ssa_157, ssa_158, ssa_0
	intrinsic store_deref (ssa_118, ssa_269) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_2 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_3 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_5 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec1 32 ssa_119 = fmul ssa_7.x, ssa_12
	vec1 32 ssa_120 = fmul ssa_7.y, ssa_12
	vec1 32 ssa_121 = fmul ssa_7.z, ssa_12
	vec1 32 ssa_123 = fmax ssa_119, ssa_6
	vec1 32 ssa_124 = fmax ssa_120, ssa_5
	vec1 32 ssa_125 = fmax ssa_121, ssa_4
	vec1 32 ssa_127 = fmin ssa_123, ssa_3
	vec1 32 ssa_128 = fmin ssa_124, ssa_2
	vec1 32 ssa_129 = fmin ssa_125, ssa_1
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_25 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_131 = fmul ssa_10.x, ssa_36.x
	vec1 32 ssa_132 = fmul ssa_10.y, ssa_36.y
	vec1 32 ssa_133 = fmul ssa_10.z, ssa_36.z
	vec1 32 ssa_135 = ffract ssa_131
	vec1 32 ssa_136 = ffract ssa_132
	vec1 32 ssa_137 = ffract ssa_133
	vec1 32 ssa_139 = fadd ssa_136, ssa_35.x
	vec1 32 ssa_140 = fadd ssa_135, ssa_35.y
	vec1 32 ssa_141 = fadd ssa_137, ssa_35.z
	vec1 32 ssa_143 = fmul ssa_135, ssa_139
	vec1 32 ssa_144 = fmul ssa_136, ssa_140
	vec1 32 ssa_145 = fadd ssa_143, ssa_144
	vec1 32 ssa_146 = fmul ssa_137, ssa_141
	vec1 32 ssa_147 = fadd ssa_145, ssa_146
	vec1 32 ssa_148 = fadd ssa_135, ssa_147
	vec1 32 ssa_149 = fadd ssa_136, ssa_147
	vec1 32 ssa_150 = fadd ssa_137, ssa_147
	vec1 32 ssa_53 = fadd ssa_148, ssa_149
	vec1 32 ssa_56 = fmul ssa_53, ssa_150
	vec1 32 ssa_61 = fadd ssa_148, ssa_150
	vec1 32 ssa_64 = fmul ssa_61, ssa_149
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec1 32 ssa_70 = fadd ssa_149, ssa_150
	vec1 32 ssa_73 = fmul ssa_70, ssa_148
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	vec1 1 ssa_83 = fge ssa_75, ssa_26
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_88 = fsub ssa_75, ssa_26
		vec1 32 ssa_91 = fsub ssa_25, ssa_26
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_152 = fadd ssa_27.x, ssa_93
		vec1 32 ssa_153 = fadd ssa_27.y, ssa_93
		vec1 32 ssa_154 = fadd ssa_27.z, ssa_93
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_271 = mov ssa_27.x
		vec1 32 ssa_274 = mov ssa_27.y
		vec1 32 ssa_277 = mov ssa_27.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_272 = phi block_1: ssa_152, block_2: ssa_271
	vec1 32 ssa_275 = phi block_1: ssa_153, block_2: ssa_274
	vec1 32 ssa_278 = phi block_1: ssa_154, block_2: ssa_277
	vec1 32 ssa_156 = fadd ssa_272, ssa_127
	vec1 32 ssa_157 = fadd ssa_275, ssa_128
	vec1 32 ssa_158 = fadd ssa_278, ssa_129
	vec1 32 ssa_118 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_269 = vec4 ssa_156, ssa_157, ssa_158, ssa_0
	intrinsic store_deref (ssa_118, ssa_269) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_cse
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec1 32 ssa_119 = fmul ssa_7.x, ssa_12
	vec1 32 ssa_120 = fmul ssa_7.y, ssa_12
	vec1 32 ssa_121 = fmul ssa_7.z, ssa_12
	vec1 32 ssa_123 = fmax ssa_119, ssa_4
	vec1 32 ssa_124 = fmax ssa_120, ssa_4
	vec1 32 ssa_125 = fmax ssa_121, ssa_4
	vec1 32 ssa_127 = fmin ssa_123, ssa_0
	vec1 32 ssa_128 = fmin ssa_124, ssa_0
	vec1 32 ssa_129 = fmin ssa_125, ssa_0
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_131 = fmul ssa_10.x, ssa_36.x
	vec1 32 ssa_132 = fmul ssa_10.y, ssa_36.y
	vec1 32 ssa_133 = fmul ssa_10.z, ssa_36.z
	vec1 32 ssa_135 = ffract ssa_131
	vec1 32 ssa_136 = ffract ssa_132
	vec1 32 ssa_137 = ffract ssa_133
	vec1 32 ssa_139 = fadd ssa_136, ssa_35.x
	vec1 32 ssa_140 = fadd ssa_135, ssa_35.y
	vec1 32 ssa_141 = fadd ssa_137, ssa_35.z
	vec1 32 ssa_143 = fmul ssa_135, ssa_139
	vec1 32 ssa_144 = fmul ssa_136, ssa_140
	vec1 32 ssa_145 = fadd ssa_143, ssa_144
	vec1 32 ssa_146 = fmul ssa_137, ssa_141
	vec1 32 ssa_147 = fadd ssa_145, ssa_146
	vec1 32 ssa_148 = fadd ssa_135, ssa_147
	vec1 32 ssa_149 = fadd ssa_136, ssa_147
	vec1 32 ssa_150 = fadd ssa_137, ssa_147
	vec1 32 ssa_53 = fadd ssa_148, ssa_149
	vec1 32 ssa_56 = fmul ssa_53, ssa_150
	vec1 32 ssa_61 = fadd ssa_148, ssa_150
	vec1 32 ssa_64 = fmul ssa_61, ssa_149
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec1 32 ssa_70 = fadd ssa_149, ssa_150
	vec1 32 ssa_73 = fmul ssa_70, ssa_148
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	vec1 1 ssa_83 = fge ssa_75, ssa_26
	/* succs: block_1 block_2 */
	if ssa_83 {
		block block_1:
		/* preds: block_0 */
		vec1 32 ssa_88 = fsub ssa_75, ssa_26
		vec1 32 ssa_91 = fsub ssa_0, ssa_26
		vec1 32 ssa_92 = fdiv ssa_88, ssa_91
		vec1 32 ssa_93 = fpow ssa_92, ssa_24
		vec1 32 ssa_152 = fadd ssa_27.x, ssa_93
		vec1 32 ssa_153 = fadd ssa_27.y, ssa_93
		vec1 32 ssa_154 = fadd ssa_27.z, ssa_93
		/* succs: block_3 */
	} else {
		block block_2:
		/* preds: block_0 */
		vec1 32 ssa_271 = mov ssa_27.x
		vec1 32 ssa_274 = mov ssa_27.y
		vec1 32 ssa_277 = mov ssa_27.z
		/* succs: block_3 */
	}
	block block_3:
	/* preds: block_1 block_2 */
	vec1 32 ssa_272 = phi block_1: ssa_152, block_2: ssa_271
	vec1 32 ssa_275 = phi block_1: ssa_153, block_2: ssa_274
	vec1 32 ssa_278 = phi block_1: ssa_154, block_2: ssa_277
	vec1 32 ssa_156 = fadd ssa_272, ssa_127
	vec1 32 ssa_157 = fadd ssa_275, ssa_128
	vec1 32 ssa_158 = fadd ssa_278, ssa_129
	vec1 32 ssa_118 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_269 = vec4 ssa_156, ssa_157, ssa_158, ssa_0
	intrinsic store_deref (ssa_118, ssa_269) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_4 */
	block block_4:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec1 32 ssa_119 = fmul ssa_7.x, ssa_12
	vec1 32 ssa_120 = fmul ssa_7.y, ssa_12
	vec1 32 ssa_121 = fmul ssa_7.z, ssa_12
	vec1 32 ssa_123 = fmax ssa_119, ssa_4
	vec1 32 ssa_124 = fmax ssa_120, ssa_4
	vec1 32 ssa_125 = fmax ssa_121, ssa_4
	vec1 32 ssa_127 = fmin ssa_123, ssa_0
	vec1 32 ssa_128 = fmin ssa_124, ssa_0
	vec1 32 ssa_129 = fmin ssa_125, ssa_0
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_131 = fmul ssa_10.x, ssa_36.x
	vec1 32 ssa_132 = fmul ssa_10.y, ssa_36.y
	vec1 32 ssa_133 = fmul ssa_10.z, ssa_36.z
	vec1 32 ssa_135 = ffract ssa_131
	vec1 32 ssa_136 = ffract ssa_132
	vec1 32 ssa_137 = ffract ssa_133
	vec1 32 ssa_139 = fadd ssa_136, ssa_35.x
	vec1 32 ssa_140 = fadd ssa_135, ssa_35.y
	vec1 32 ssa_141 = fadd ssa_137, ssa_35.z
	vec1 32 ssa_143 = fmul ssa_135, ssa_139
	vec1 32 ssa_144 = fmul ssa_136, ssa_140
	vec1 32 ssa_145 = fadd ssa_143, ssa_144
	vec1 32 ssa_146 = fmul ssa_137, ssa_141
	vec1 32 ssa_147 = fadd ssa_145, ssa_146
	vec1 32 ssa_148 = fadd ssa_135, ssa_147
	vec1 32 ssa_149 = fadd ssa_136, ssa_147
	vec1 32 ssa_150 = fadd ssa_137, ssa_147
	vec1 32 ssa_53 = fadd ssa_148, ssa_149
	vec1 32 ssa_56 = fmul ssa_53, ssa_150
	vec1 32 ssa_61 = fadd ssa_148, ssa_150
	vec1 32 ssa_64 = fmul ssa_61, ssa_149
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec1 32 ssa_70 = fadd ssa_149, ssa_150
	vec1 32 ssa_73 = fmul ssa_70, ssa_148
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	vec1 1 ssa_83 = fge ssa_75, ssa_26
	vec1 32 ssa_88 = fsub ssa_75, ssa_26
	vec1 32 ssa_91 = fsub ssa_0, ssa_26
	vec1 32 ssa_92 = fdiv ssa_88, ssa_91
	vec1 32 ssa_93 = fpow ssa_92, ssa_24
	vec1 32 ssa_152 = fadd ssa_27.x, ssa_93
	vec1 32 ssa_153 = fadd ssa_27.y, ssa_93
	vec1 32 ssa_154 = fadd ssa_27.z, ssa_93
	vec1 32 ssa_271 = mov ssa_27.x
	vec1 32 ssa_274 = mov ssa_27.y
	vec1 32 ssa_277 = mov ssa_27.z
	vec1 32 ssa_280 = bcsel ssa_83, ssa_152, ssa_271
	vec1 32 ssa_281 = bcsel ssa_83, ssa_153, ssa_274
	vec1 32 ssa_282 = bcsel ssa_83, ssa_154, ssa_277
	vec1 32 ssa_156 = fadd ssa_280, ssa_127
	vec1 32 ssa_157 = fadd ssa_281, ssa_128
	vec1 32 ssa_158 = fadd ssa_282, ssa_129
	vec1 32 ssa_118 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_269 = vec4 ssa_156, ssa_157, ssa_158, ssa_0
	intrinsic store_deref (ssa_118, ssa_269) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec1 32 ssa_119 = fmul ssa_7.x, ssa_12
	vec1 32 ssa_120 = fmul ssa_7.y, ssa_12
	vec1 32 ssa_121 = fmul ssa_7.z, ssa_12
	vec1 32 ssa_123 = fmax ssa_119, ssa_4
	vec1 32 ssa_124 = fmax ssa_120, ssa_4
	vec1 32 ssa_125 = fmax ssa_121, ssa_4
	vec1 32 ssa_291 = fsat ssa_119
	vec1 32 ssa_290 = fsat ssa_120
	vec1 32 ssa_289 = fsat ssa_121
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_131 = fmul ssa_10.x, ssa_36.x
	vec1 32 ssa_132 = fmul ssa_10.y, ssa_36.y
	vec1 32 ssa_133 = fmul ssa_10.z, ssa_36.z
	vec1 32 ssa_135 = ffract ssa_131
	vec1 32 ssa_136 = ffract ssa_132
	vec1 32 ssa_137 = ffract ssa_133
	vec1 32 ssa_139 = fadd ssa_136, ssa_35.x
	vec1 32 ssa_140 = fadd ssa_135, ssa_35.y
	vec1 32 ssa_141 = fadd ssa_137, ssa_35.z
	vec1 32 ssa_143 = fmul ssa_135, ssa_139
	vec1 32 ssa_144 = fmul ssa_136, ssa_140
	vec1 32 ssa_145 = fadd ssa_143, ssa_144
	vec1 32 ssa_146 = fmul ssa_137, ssa_141
	vec1 32 ssa_147 = fadd ssa_145, ssa_146
	vec1 32 ssa_148 = fadd ssa_135, ssa_147
	vec1 32 ssa_149 = fadd ssa_136, ssa_147
	vec1 32 ssa_150 = fadd ssa_137, ssa_147
	vec1 32 ssa_53 = fadd ssa_148, ssa_149
	vec1 32 ssa_56 = fmul ssa_53, ssa_150
	vec1 32 ssa_61 = fadd ssa_148, ssa_150
	vec1 32 ssa_64 = fmul ssa_61, ssa_149
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec1 32 ssa_70 = fadd ssa_149, ssa_150
	vec1 32 ssa_73 = fmul ssa_70, ssa_148
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	vec1 1 ssa_83 = fge ssa_75, ssa_26
	vec1 32 ssa_287 = fneg ssa_26
	vec1 32 ssa_288 = fadd ssa_75, ssa_287
	vec1 32 ssa_285 = fneg ssa_26
	vec1 32 ssa_286 = fadd ssa_0, ssa_285
	vec1 32 ssa_283 = frcp ssa_286
	vec1 32 ssa_284 = fmul ssa_288, ssa_283
	vec1 32 ssa_93 = fpow ssa_284, ssa_24
	vec1 32 ssa_271 = mov ssa_27.x
	vec1 32 ssa_274 = mov ssa_27.y
	vec1 32 ssa_277 = mov ssa_27.z
	vec1 32 ssa_280 = bcsel ssa_83, ssa_93, ssa_271
	vec1 32 ssa_281 = bcsel ssa_83, ssa_93, ssa_274
	vec1 32 ssa_282 = bcsel ssa_83, ssa_93, ssa_277
	vec1 32 ssa_156 = fadd ssa_280, ssa_291
	vec1 32 ssa_157 = fadd ssa_281, ssa_290
	vec1 32 ssa_158 = fadd ssa_282, ssa_289
	vec1 32 ssa_118 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_269 = vec4 ssa_156, ssa_157, ssa_158, ssa_0
	intrinsic store_deref (ssa_118, ssa_269) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_constant_folding
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_4 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_8 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_9 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_12 = fadd ssa_10.y, ssa_8
	vec1 32 ssa_119 = fmul ssa_7.x, ssa_12
	vec1 32 ssa_120 = fmul ssa_7.y, ssa_12
	vec1 32 ssa_121 = fmul ssa_7.z, ssa_12
	vec1 32 ssa_123 = fmax ssa_119, ssa_4
	vec1 32 ssa_124 = fmax ssa_120, ssa_4
	vec1 32 ssa_125 = fmax ssa_121, ssa_4
	vec1 32 ssa_291 = fsat ssa_119
	vec1 32 ssa_290 = fsat ssa_120
	vec1 32 ssa_289 = fsat ssa_121
	vec1 32 ssa_24 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_26 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_27 = load_const (0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */, 0x00000000 /* 0.000000 */)
	vec3 32 ssa_35 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_36 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_131 = fmul ssa_10.x, ssa_36.x
	vec1 32 ssa_132 = fmul ssa_10.y, ssa_36.y
	vec1 32 ssa_133 = fmul ssa_10.z, ssa_36.z
	vec1 32 ssa_135 = ffract ssa_131
	vec1 32 ssa_136 = ffract ssa_132
	vec1 32 ssa_137 = ffract ssa_133
	vec1 32 ssa_139 = fadd ssa_136, ssa_35.x
	vec1 32 ssa_140 = fadd ssa_135, ssa_35.y
	vec1 32 ssa_141 = fadd ssa_137, ssa_35.z
	vec1 32 ssa_143 = fmul ssa_135, ssa_139
	vec1 32 ssa_144 = fmul ssa_136, ssa_140
	vec1 32 ssa_145 = fadd ssa_143, ssa_144
	vec1 32 ssa_146 = fmul ssa_137, ssa_141
	vec1 32 ssa_147 = fadd ssa_145, ssa_146
	vec1 32 ssa_148 = fadd ssa_135, ssa_147
	vec1 32 ssa_149 = fadd ssa_136, ssa_147
	vec1 32 ssa_150 = fadd ssa_137, ssa_147
	vec1 32 ssa_53 = fadd ssa_148, ssa_149
	vec1 32 ssa_56 = fmul ssa_53, ssa_150
	vec1 32 ssa_61 = fadd ssa_148, ssa_150
	vec1 32 ssa_64 = fmul ssa_61, ssa_149
	vec1 32 ssa_65 = fadd ssa_56, ssa_64
	vec1 32 ssa_70 = fadd ssa_149, ssa_150
	vec1 32 ssa_73 = fmul ssa_70, ssa_148
	vec1 32 ssa_74 = fadd ssa_65, ssa_73
	vec1 32 ssa_75 = ffract ssa_74
	vec1 1 ssa_83 = fge ssa_75, ssa_26
	vec1 32 ssa_292 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_288 = fadd ssa_75, ssa_292
	vec1 32 ssa_293 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_294 = load_const (0x3c23d700 /* 0.010000 */)
	vec1 32 ssa_295 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_284 = fmul ssa_288, ssa_295
	vec1 32 ssa_93 = fpow ssa_284, ssa_24
	vec1 32 ssa_296 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_297 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_298 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_280 = bcsel ssa_83, ssa_93, ssa_296
	vec1 32 ssa_281 = bcsel ssa_83, ssa_93, ssa_297
	vec1 32 ssa_282 = bcsel ssa_83, ssa_93, ssa_298
	vec1 32 ssa_156 = fadd ssa_280, ssa_291
	vec1 32 ssa_157 = fadd ssa_281, ssa_290
	vec1 32 ssa_158 = fadd ssa_282, ssa_289
	vec1 32 ssa_118 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_269 = vec4 ssa_156, ssa_157, ssa_158, ssa_0
	intrinsic store_deref (ssa_118, ssa_269) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_2 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_3 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_4 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = fadd ssa_5.y, ssa_3
	vec1 32 ssa_7 = fmul ssa_2.x, ssa_6
	vec1 32 ssa_8 = fmul ssa_2.y, ssa_6
	vec1 32 ssa_9 = fmul ssa_2.z, ssa_6
	vec1 32 ssa_13 = fsat ssa_7
	vec1 32 ssa_14 = fsat ssa_8
	vec1 32 ssa_15 = fsat ssa_9
	vec1 32 ssa_16 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_17 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_19 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_20 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_21 = fmul ssa_5.x, ssa_20.x
	vec1 32 ssa_22 = fmul ssa_5.y, ssa_20.y
	vec1 32 ssa_23 = fmul ssa_5.z, ssa_20.z
	vec1 32 ssa_24 = ffract ssa_21
	vec1 32 ssa_25 = ffract ssa_22
	vec1 32 ssa_26 = ffract ssa_23
	vec1 32 ssa_27 = fadd ssa_25, ssa_19.x
	vec1 32 ssa_28 = fadd ssa_24, ssa_19.y
	vec1 32 ssa_29 = fadd ssa_26, ssa_19.z
	vec1 32 ssa_30 = fmul ssa_24, ssa_27
	vec1 32 ssa_31 = fmul ssa_25, ssa_28
	vec1 32 ssa_32 = fadd ssa_30, ssa_31
	vec1 32 ssa_33 = fmul ssa_26, ssa_29
	vec1 32 ssa_34 = fadd ssa_32, ssa_33
	vec1 32 ssa_35 = fadd ssa_24, ssa_34
	vec1 32 ssa_36 = fadd ssa_25, ssa_34
	vec1 32 ssa_37 = fadd ssa_26, ssa_34
	vec1 32 ssa_38 = fadd ssa_35, ssa_36
	vec1 32 ssa_39 = fmul ssa_38, ssa_37
	vec1 32 ssa_40 = fadd ssa_35, ssa_37
	vec1 32 ssa_41 = fmul ssa_40, ssa_36
	vec1 32 ssa_42 = fadd ssa_39, ssa_41
	vec1 32 ssa_43 = fadd ssa_36, ssa_37
	vec1 32 ssa_44 = fmul ssa_43, ssa_35
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = ffract ssa_45
	vec1 1 ssa_47 = fge ssa_46, ssa_17
	vec1 32 ssa_48 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_49 = fadd ssa_46, ssa_48
	vec1 32 ssa_52 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_53 = fmul ssa_49, ssa_52
	vec1 32 ssa_54 = fpow ssa_53, ssa_16
	vec1 32 ssa_55 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_58 = bcsel ssa_47, ssa_54, ssa_55
	vec1 32 ssa_59 = bcsel ssa_47, ssa_54, ssa_56
	vec1 32 ssa_60 = bcsel ssa_47, ssa_54, ssa_57
	vec1 32 ssa_61 = fadd ssa_58, ssa_13
	vec1 32 ssa_62 = fadd ssa_59, ssa_14
	vec1 32 ssa_63 = fadd ssa_60, ssa_15
	vec1 32 ssa_64 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_65 = vec4 ssa_61, ssa_62, ssa_63, ssa_0
	intrinsic store_deref (ssa_64, ssa_65) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec3 atmosphere
	decl_var  INTERP_MODE_NONE vec3 color
	decl_var  INTERP_MODE_NONE vec3 param
	decl_var  INTERP_MODE_NONE vec3 return_tmp
	decl_var  INTERP_MODE_NONE vec3 color@0
	decl_var  INTERP_MODE_NONE float threshhold
	decl_var  INTERP_MODE_NONE float rnd
	decl_var  INTERP_MODE_NONE vec3 param@1
	decl_var  INTERP_MODE_NONE float starCol
	decl_var  INTERP_MODE_NONE float return_tmp@2
	decl_var  INTERP_MODE_NONE vec4 out@outFragColor-temp
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_2 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_3 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_4 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_5 = intrinsic load_deref (ssa_4) (0) /* access=0 */
	vec1 32 ssa_6 = fadd ssa_5.y, ssa_3
	vec1 32 ssa_7 = fmul ssa_2.x, ssa_6
	vec1 32 ssa_8 = fmul ssa_2.y, ssa_6
	vec1 32 ssa_9 = fmul ssa_2.z, ssa_6
	vec1 32 ssa_13 = fsat ssa_7
	vec1 32 ssa_14 = fsat ssa_8
	vec1 32 ssa_15 = fsat ssa_9
	vec1 32 ssa_16 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_17 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_19 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_20 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_21 = fmul ssa_5.x, ssa_20.x
	vec1 32 ssa_22 = fmul ssa_5.y, ssa_20.y
	vec1 32 ssa_23 = fmul ssa_5.z, ssa_20.z
	vec1 32 ssa_24 = ffract ssa_21
	vec1 32 ssa_25 = ffract ssa_22
	vec1 32 ssa_26 = ffract ssa_23
	vec1 32 ssa_27 = fadd ssa_25, ssa_19.x
	vec1 32 ssa_28 = fadd ssa_24, ssa_19.y
	vec1 32 ssa_29 = fadd ssa_26, ssa_19.z
	vec1 32 ssa_30 = fmul ssa_24, ssa_27
	vec1 32 ssa_31 = fmul ssa_25, ssa_28
	vec1 32 ssa_32 = fadd ssa_30, ssa_31
	vec1 32 ssa_33 = fmul ssa_26, ssa_29
	vec1 32 ssa_34 = fadd ssa_32, ssa_33
	vec1 32 ssa_35 = fadd ssa_24, ssa_34
	vec1 32 ssa_36 = fadd ssa_25, ssa_34
	vec1 32 ssa_37 = fadd ssa_26, ssa_34
	vec1 32 ssa_38 = fadd ssa_35, ssa_36
	vec1 32 ssa_39 = fmul ssa_38, ssa_37
	vec1 32 ssa_40 = fadd ssa_35, ssa_37
	vec1 32 ssa_41 = fmul ssa_40, ssa_36
	vec1 32 ssa_42 = fadd ssa_39, ssa_41
	vec1 32 ssa_43 = fadd ssa_36, ssa_37
	vec1 32 ssa_44 = fmul ssa_43, ssa_35
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = ffract ssa_45
	vec1 1 ssa_47 = fge ssa_46, ssa_17
	vec1 32 ssa_48 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_49 = fadd ssa_46, ssa_48
	vec1 32 ssa_52 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_53 = fmul ssa_49, ssa_52
	vec1 32 ssa_54 = fpow ssa_53, ssa_16
	vec1 32 ssa_55 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_58 = bcsel ssa_47, ssa_54, ssa_55
	vec1 32 ssa_61 = fadd ssa_58, ssa_13
	vec1 32 ssa_62 = fadd ssa_58, ssa_14
	vec1 32 ssa_63 = fadd ssa_58, ssa_15
	vec1 32 ssa_64 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_65 = vec4 ssa_61, ssa_62, ssa_63, ssa_0
	intrinsic store_deref (ssa_64, ssa_65) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_find_array_copies
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec3 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */, 0x3e19999a /* 0.150000 */, 0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_2 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_3 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = fadd ssa_4.y, ssa_2
	vec1 32 ssa_6 = fmul ssa_1.x, ssa_5
	vec1 32 ssa_7 = fmul ssa_1.y, ssa_5
	vec1 32 ssa_8 = fmul ssa_1.z, ssa_5
	vec1 32 ssa_9 = fsat ssa_6
	vec1 32 ssa_10 = fsat ssa_7
	vec1 32 ssa_11 = fsat ssa_8
	vec1 32 ssa_12 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_13 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec3 32 ssa_14 = load_const (0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */, 0x4199851f /* 19.190001 */)
	vec3 32 ssa_15 = load_const (0x43ddf2d1 /* 443.897003 */, 0x43dcb625 /* 441.423004 */, 0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_16 = fmul ssa_4.x, ssa_15.x
	vec1 32 ssa_17 = fmul ssa_4.y, ssa_15.y
	vec1 32 ssa_18 = fmul ssa_4.z, ssa_15.z
	vec1 32 ssa_19 = ffract ssa_16
	vec1 32 ssa_20 = ffract ssa_17
	vec1 32 ssa_21 = ffract ssa_18
	vec1 32 ssa_22 = fadd ssa_20, ssa_14.x
	vec1 32 ssa_23 = fadd ssa_19, ssa_14.y
	vec1 32 ssa_24 = fadd ssa_21, ssa_14.z
	vec1 32 ssa_25 = fmul ssa_19, ssa_22
	vec1 32 ssa_26 = fmul ssa_20, ssa_23
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_21, ssa_24
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = fadd ssa_19, ssa_29
	vec1 32 ssa_31 = fadd ssa_20, ssa_29
	vec1 32 ssa_32 = fadd ssa_21, ssa_29
	vec1 32 ssa_33 = fadd ssa_30, ssa_31
	vec1 32 ssa_34 = fmul ssa_33, ssa_32
	vec1 32 ssa_35 = fadd ssa_30, ssa_32
	vec1 32 ssa_36 = fmul ssa_35, ssa_31
	vec1 32 ssa_37 = fadd ssa_34, ssa_36
	vec1 32 ssa_38 = fadd ssa_31, ssa_32
	vec1 32 ssa_39 = fmul ssa_38, ssa_30
	vec1 32 ssa_40 = fadd ssa_37, ssa_39
	vec1 32 ssa_41 = ffract ssa_40
	vec1 1 ssa_42 = fge ssa_41, ssa_13
	vec1 32 ssa_43 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fpow ssa_46, ssa_12
	vec1 32 ssa_48 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_49 = bcsel ssa_42, ssa_47, ssa_48
	vec1 32 ssa_50 = fadd ssa_49, ssa_9
	vec1 32 ssa_51 = fadd ssa_49, ssa_10
	vec1 32 ssa_52 = fadd ssa_49, ssa_11
	vec1 32 ssa_53 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_54 = vec4 ssa_50, ssa_51, ssa_52, ssa_0
	intrinsic store_deref (ssa_53, ssa_54) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_doubles
nir_lower_int64
nir_lower_bit_size
nir_lower_load_const_to_scalar
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_55 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_56 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_57 = load_const (0x3ecccccd /* 0.400000 */)
	vec3 32 ssa_58 = vec3 ssa_55, ssa_56, ssa_57
	vec1 32 ssa_2 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_3 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = fadd ssa_4.y, ssa_2
	vec1 32 ssa_6 = fmul ssa_58.x, ssa_5
	vec1 32 ssa_7 = fmul ssa_58.y, ssa_5
	vec1 32 ssa_8 = fmul ssa_58.z, ssa_5
	vec1 32 ssa_9 = fsat ssa_6
	vec1 32 ssa_10 = fsat ssa_7
	vec1 32 ssa_11 = fsat ssa_8
	vec1 32 ssa_12 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_13 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_59 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_60 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_61 = load_const (0x4199851f /* 19.190001 */)
	vec3 32 ssa_62 = vec3 ssa_59, ssa_60, ssa_61
	vec1 32 ssa_63 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_64 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_65 = load_const (0x43da98f6 /* 437.195007 */)
	vec3 32 ssa_66 = vec3 ssa_63, ssa_64, ssa_65
	vec1 32 ssa_16 = fmul ssa_4.x, ssa_66.x
	vec1 32 ssa_17 = fmul ssa_4.y, ssa_66.y
	vec1 32 ssa_18 = fmul ssa_4.z, ssa_66.z
	vec1 32 ssa_19 = ffract ssa_16
	vec1 32 ssa_20 = ffract ssa_17
	vec1 32 ssa_21 = ffract ssa_18
	vec1 32 ssa_22 = fadd ssa_20, ssa_62.x
	vec1 32 ssa_23 = fadd ssa_19, ssa_62.y
	vec1 32 ssa_24 = fadd ssa_21, ssa_62.z
	vec1 32 ssa_25 = fmul ssa_19, ssa_22
	vec1 32 ssa_26 = fmul ssa_20, ssa_23
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_21, ssa_24
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = fadd ssa_19, ssa_29
	vec1 32 ssa_31 = fadd ssa_20, ssa_29
	vec1 32 ssa_32 = fadd ssa_21, ssa_29
	vec1 32 ssa_33 = fadd ssa_30, ssa_31
	vec1 32 ssa_34 = fmul ssa_33, ssa_32
	vec1 32 ssa_35 = fadd ssa_30, ssa_32
	vec1 32 ssa_36 = fmul ssa_35, ssa_31
	vec1 32 ssa_37 = fadd ssa_34, ssa_36
	vec1 32 ssa_38 = fadd ssa_31, ssa_32
	vec1 32 ssa_39 = fmul ssa_38, ssa_30
	vec1 32 ssa_40 = fadd ssa_37, ssa_39
	vec1 32 ssa_41 = ffract ssa_40
	vec1 1 ssa_42 = fge ssa_41, ssa_13
	vec1 32 ssa_43 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fpow ssa_46, ssa_12
	vec1 32 ssa_48 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_49 = bcsel ssa_42, ssa_47, ssa_48
	vec1 32 ssa_50 = fadd ssa_49, ssa_9
	vec1 32 ssa_51 = fadd ssa_49, ssa_10
	vec1 32 ssa_52 = fadd ssa_49, ssa_11
	vec1 32 ssa_53 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_54 = vec4 ssa_50, ssa_51, ssa_52, ssa_0
	intrinsic store_deref (ssa_53, ssa_54) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_var_copies
nir_opt_large_constants
nir_lower_system_values
nir_lower_compute_system_values
nir_lower_subgroups
nir_lower_clip_cull_distance_arrays
nir_lower_vars_to_scratch
nir_lower_indirect_derefs
nir_lower_array_deref_of_vec
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_55 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_56 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_57 = load_const (0x3ecccccd /* 0.400000 */)
	vec3 32 ssa_58 = vec3 ssa_55, ssa_56, ssa_57
	vec1 32 ssa_2 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_3 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = fadd ssa_4.y, ssa_2
	vec1 32 ssa_6 = fmul ssa_55, ssa_5
	vec1 32 ssa_7 = fmul ssa_56, ssa_5
	vec1 32 ssa_8 = fmul ssa_57, ssa_5
	vec1 32 ssa_9 = fsat ssa_6
	vec1 32 ssa_10 = fsat ssa_7
	vec1 32 ssa_11 = fsat ssa_8
	vec1 32 ssa_12 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_13 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_59 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_60 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_61 = load_const (0x4199851f /* 19.190001 */)
	vec3 32 ssa_62 = vec3 ssa_59, ssa_60, ssa_61
	vec1 32 ssa_63 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_64 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_65 = load_const (0x43da98f6 /* 437.195007 */)
	vec3 32 ssa_66 = vec3 ssa_63, ssa_64, ssa_65
	vec1 32 ssa_16 = fmul ssa_4.x, ssa_63
	vec1 32 ssa_17 = fmul ssa_4.y, ssa_64
	vec1 32 ssa_18 = fmul ssa_4.z, ssa_65
	vec1 32 ssa_19 = ffract ssa_16
	vec1 32 ssa_20 = ffract ssa_17
	vec1 32 ssa_21 = ffract ssa_18
	vec1 32 ssa_22 = fadd ssa_20, ssa_59
	vec1 32 ssa_23 = fadd ssa_19, ssa_60
	vec1 32 ssa_24 = fadd ssa_21, ssa_61
	vec1 32 ssa_25 = fmul ssa_19, ssa_22
	vec1 32 ssa_26 = fmul ssa_20, ssa_23
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_21, ssa_24
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = fadd ssa_19, ssa_29
	vec1 32 ssa_31 = fadd ssa_20, ssa_29
	vec1 32 ssa_32 = fadd ssa_21, ssa_29
	vec1 32 ssa_33 = fadd ssa_30, ssa_31
	vec1 32 ssa_34 = fmul ssa_33, ssa_32
	vec1 32 ssa_35 = fadd ssa_30, ssa_32
	vec1 32 ssa_36 = fmul ssa_35, ssa_31
	vec1 32 ssa_37 = fadd ssa_34, ssa_36
	vec1 32 ssa_38 = fadd ssa_31, ssa_32
	vec1 32 ssa_39 = fmul ssa_38, ssa_30
	vec1 32 ssa_40 = fadd ssa_37, ssa_39
	vec1 32 ssa_41 = ffract ssa_40
	vec1 1 ssa_42 = fge ssa_41, ssa_13
	vec1 32 ssa_43 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fpow ssa_46, ssa_12
	vec1 32 ssa_48 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_49 = bcsel ssa_42, ssa_47, ssa_48
	vec1 32 ssa_50 = fadd ssa_49, ssa_9
	vec1 32 ssa_51 = fadd ssa_49, ssa_10
	vec1 32 ssa_52 = fadd ssa_49, ssa_11
	vec1 32 ssa_53 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_54 = vec4 ssa_50, ssa_51, ssa_52, ssa_0
	intrinsic store_deref (ssa_53, ssa_54) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_55 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_56 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_57 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_2 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_3 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = fadd ssa_4.y, ssa_2
	vec1 32 ssa_6 = fmul ssa_55, ssa_5
	vec1 32 ssa_7 = fmul ssa_56, ssa_5
	vec1 32 ssa_8 = fmul ssa_57, ssa_5
	vec1 32 ssa_9 = fsat ssa_6
	vec1 32 ssa_10 = fsat ssa_7
	vec1 32 ssa_11 = fsat ssa_8
	vec1 32 ssa_12 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_13 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_59 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_60 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_61 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_63 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_64 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_65 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_16 = fmul ssa_4.x, ssa_63
	vec1 32 ssa_17 = fmul ssa_4.y, ssa_64
	vec1 32 ssa_18 = fmul ssa_4.z, ssa_65
	vec1 32 ssa_19 = ffract ssa_16
	vec1 32 ssa_20 = ffract ssa_17
	vec1 32 ssa_21 = ffract ssa_18
	vec1 32 ssa_22 = fadd ssa_20, ssa_59
	vec1 32 ssa_23 = fadd ssa_19, ssa_60
	vec1 32 ssa_24 = fadd ssa_21, ssa_61
	vec1 32 ssa_25 = fmul ssa_19, ssa_22
	vec1 32 ssa_26 = fmul ssa_20, ssa_23
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_21, ssa_24
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = fadd ssa_19, ssa_29
	vec1 32 ssa_31 = fadd ssa_20, ssa_29
	vec1 32 ssa_32 = fadd ssa_21, ssa_29
	vec1 32 ssa_33 = fadd ssa_30, ssa_31
	vec1 32 ssa_34 = fmul ssa_33, ssa_32
	vec1 32 ssa_35 = fadd ssa_30, ssa_32
	vec1 32 ssa_36 = fmul ssa_35, ssa_31
	vec1 32 ssa_37 = fadd ssa_34, ssa_36
	vec1 32 ssa_38 = fadd ssa_31, ssa_32
	vec1 32 ssa_39 = fmul ssa_38, ssa_30
	vec1 32 ssa_40 = fadd ssa_37, ssa_39
	vec1 32 ssa_41 = ffract ssa_40
	vec1 1 ssa_42 = fge ssa_41, ssa_13
	vec1 32 ssa_43 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fpow ssa_46, ssa_12
	vec1 32 ssa_48 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_49 = bcsel ssa_42, ssa_47, ssa_48
	vec1 32 ssa_50 = fadd ssa_49, ssa_9
	vec1 32 ssa_51 = fadd ssa_49, ssa_10
	vec1 32 ssa_52 = fadd ssa_49, ssa_11
	vec1 32 ssa_53 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_54 = vec4 ssa_50, ssa_51, ssa_52, ssa_0
	intrinsic store_deref (ssa_53, ssa_54) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inUVW (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_55 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_56 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_57 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_2 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_3 = deref_var &inUVW (shader_in vec3) 
	vec3 32 ssa_4 = intrinsic load_deref (ssa_3) (0) /* access=0 */
	vec1 32 ssa_5 = fadd ssa_4.y, ssa_2
	vec1 32 ssa_6 = fmul ssa_55, ssa_5
	vec1 32 ssa_7 = fmul ssa_56, ssa_5
	vec1 32 ssa_8 = fmul ssa_57, ssa_5
	vec1 32 ssa_9 = fsat ssa_6
	vec1 32 ssa_10 = fsat ssa_7
	vec1 32 ssa_11 = fsat ssa_8
	vec1 32 ssa_12 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_13 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_59 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_63 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_64 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_65 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_16 = fmul ssa_4.x, ssa_63
	vec1 32 ssa_17 = fmul ssa_4.y, ssa_64
	vec1 32 ssa_18 = fmul ssa_4.z, ssa_65
	vec1 32 ssa_19 = ffract ssa_16
	vec1 32 ssa_20 = ffract ssa_17
	vec1 32 ssa_21 = ffract ssa_18
	vec1 32 ssa_22 = fadd ssa_20, ssa_59
	vec1 32 ssa_23 = fadd ssa_19, ssa_59
	vec1 32 ssa_24 = fadd ssa_21, ssa_59
	vec1 32 ssa_25 = fmul ssa_19, ssa_22
	vec1 32 ssa_26 = fmul ssa_20, ssa_23
	vec1 32 ssa_27 = fadd ssa_25, ssa_26
	vec1 32 ssa_28 = fmul ssa_21, ssa_24
	vec1 32 ssa_29 = fadd ssa_27, ssa_28
	vec1 32 ssa_30 = fadd ssa_19, ssa_29
	vec1 32 ssa_31 = fadd ssa_20, ssa_29
	vec1 32 ssa_32 = fadd ssa_21, ssa_29
	vec1 32 ssa_33 = fadd ssa_30, ssa_31
	vec1 32 ssa_34 = fmul ssa_33, ssa_32
	vec1 32 ssa_35 = fadd ssa_30, ssa_32
	vec1 32 ssa_36 = fmul ssa_35, ssa_31
	vec1 32 ssa_37 = fadd ssa_34, ssa_36
	vec1 32 ssa_38 = fadd ssa_31, ssa_32
	vec1 32 ssa_39 = fmul ssa_38, ssa_30
	vec1 32 ssa_40 = fadd ssa_37, ssa_39
	vec1 32 ssa_41 = ffract ssa_40
	vec1 1 ssa_42 = fge ssa_41, ssa_13
	vec1 32 ssa_43 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_46 = fmul ssa_44, ssa_45
	vec1 32 ssa_47 = fpow ssa_46, ssa_12
	vec1 32 ssa_48 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_49 = bcsel ssa_42, ssa_47, ssa_48
	vec1 32 ssa_50 = fadd ssa_49, ssa_9
	vec1 32 ssa_51 = fadd ssa_49, ssa_10
	vec1 32 ssa_52 = fadd ssa_49, ssa_11
	vec1 32 ssa_53 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_54 = vec4 ssa_50, ssa_51, ssa_52, ssa_0
	intrinsic store_deref (ssa_53, ssa_54) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_lower_io_to_scalar_early
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_37 = deref_var &outUVW (shader_out float) 
	vec1 32 ssa_38 = mov ssa_1.x
	intrinsic store_deref (ssa_37, ssa_38) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_39 = deref_var &outUVW@0 (shader_out float) 
	vec1 32 ssa_40 = mov ssa_1.y
	intrinsic store_deref (ssa_39, ssa_40) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_41 = deref_var &outUVW@1 (shader_out float) 
	vec1 32 ssa_42 = mov ssa_1.z
	intrinsic store_deref (ssa_41, ssa_42) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_35 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_36 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_35, ssa_36) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_io_to_scalar_early
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_59 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_60 = intrinsic load_deref (ssa_59) (0) /* access=0 */
	vec1 32 ssa_61 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_62 = intrinsic load_deref (ssa_61) (0) /* access=0 */
	vec1 32 ssa_63 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_64 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec3 32 ssa_65 = vec3 ssa_60, ssa_62, ssa_64
	vec1 32 ssa_7 = fadd ssa_65.y, ssa_4
	vec1 32 ssa_8 = fmul ssa_1, ssa_7
	vec1 32 ssa_9 = fmul ssa_2, ssa_7
	vec1 32 ssa_10 = fmul ssa_3, ssa_7
	vec1 32 ssa_11 = fsat ssa_8
	vec1 32 ssa_12 = fsat ssa_9
	vec1 32 ssa_13 = fsat ssa_10
	vec1 32 ssa_14 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_15 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_16 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_17 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_18 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_19 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_20 = fmul ssa_65.x, ssa_17
	vec1 32 ssa_21 = fmul ssa_65.y, ssa_18
	vec1 32 ssa_22 = fmul ssa_65.z, ssa_19
	vec1 32 ssa_23 = ffract ssa_20
	vec1 32 ssa_24 = ffract ssa_21
	vec1 32 ssa_25 = ffract ssa_22
	vec1 32 ssa_26 = fadd ssa_24, ssa_16
	vec1 32 ssa_27 = fadd ssa_23, ssa_16
	vec1 32 ssa_28 = fadd ssa_25, ssa_16
	vec1 32 ssa_29 = fmul ssa_23, ssa_26
	vec1 32 ssa_30 = fmul ssa_24, ssa_27
	vec1 32 ssa_31 = fadd ssa_29, ssa_30
	vec1 32 ssa_32 = fmul ssa_25, ssa_28
	vec1 32 ssa_33 = fadd ssa_31, ssa_32
	vec1 32 ssa_34 = fadd ssa_23, ssa_33
	vec1 32 ssa_35 = fadd ssa_24, ssa_33
	vec1 32 ssa_36 = fadd ssa_25, ssa_33
	vec1 32 ssa_37 = fadd ssa_34, ssa_35
	vec1 32 ssa_38 = fmul ssa_37, ssa_36
	vec1 32 ssa_39 = fadd ssa_34, ssa_36
	vec1 32 ssa_40 = fmul ssa_39, ssa_35
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fadd ssa_35, ssa_36
	vec1 32 ssa_43 = fmul ssa_42, ssa_34
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = ffract ssa_44
	vec1 1 ssa_46 = fge ssa_45, ssa_15
	vec1 32 ssa_47 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_50 = fmul ssa_48, ssa_49
	vec1 32 ssa_51 = fpow ssa_50, ssa_14
	vec1 32 ssa_52 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_53 = bcsel ssa_46, ssa_51, ssa_52
	vec1 32 ssa_54 = fadd ssa_53, ssa_11
	vec1 32 ssa_55 = fadd ssa_53, ssa_12
	vec1 32 ssa_56 = fadd ssa_53, ssa_13
	vec1 32 ssa_57 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_58 = vec4 ssa_54, ssa_55, ssa_56, ssa_0
	intrinsic store_deref (ssa_57, ssa_58) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_59 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_60 = intrinsic load_deref (ssa_59) (0) /* access=0 */
	vec1 32 ssa_61 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_62 = intrinsic load_deref (ssa_61) (0) /* access=0 */
	vec1 32 ssa_63 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_64 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec3 32 ssa_65 = vec3 ssa_60, ssa_62, ssa_64
	vec1 32 ssa_7 = fadd ssa_62, ssa_4
	vec1 32 ssa_8 = fmul ssa_1, ssa_7
	vec1 32 ssa_9 = fmul ssa_2, ssa_7
	vec1 32 ssa_10 = fmul ssa_3, ssa_7
	vec1 32 ssa_11 = fsat ssa_8
	vec1 32 ssa_12 = fsat ssa_9
	vec1 32 ssa_13 = fsat ssa_10
	vec1 32 ssa_14 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_15 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_16 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_17 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_18 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_19 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_20 = fmul ssa_60, ssa_17
	vec1 32 ssa_21 = fmul ssa_62, ssa_18
	vec1 32 ssa_22 = fmul ssa_64, ssa_19
	vec1 32 ssa_23 = ffract ssa_20
	vec1 32 ssa_24 = ffract ssa_21
	vec1 32 ssa_25 = ffract ssa_22
	vec1 32 ssa_26 = fadd ssa_24, ssa_16
	vec1 32 ssa_27 = fadd ssa_23, ssa_16
	vec1 32 ssa_28 = fadd ssa_25, ssa_16
	vec1 32 ssa_29 = fmul ssa_23, ssa_26
	vec1 32 ssa_30 = fmul ssa_24, ssa_27
	vec1 32 ssa_31 = fadd ssa_29, ssa_30
	vec1 32 ssa_32 = fmul ssa_25, ssa_28
	vec1 32 ssa_33 = fadd ssa_31, ssa_32
	vec1 32 ssa_34 = fadd ssa_23, ssa_33
	vec1 32 ssa_35 = fadd ssa_24, ssa_33
	vec1 32 ssa_36 = fadd ssa_25, ssa_33
	vec1 32 ssa_37 = fadd ssa_34, ssa_35
	vec1 32 ssa_38 = fmul ssa_37, ssa_36
	vec1 32 ssa_39 = fadd ssa_34, ssa_36
	vec1 32 ssa_40 = fmul ssa_39, ssa_35
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fadd ssa_35, ssa_36
	vec1 32 ssa_43 = fmul ssa_42, ssa_34
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = ffract ssa_44
	vec1 1 ssa_46 = fge ssa_45, ssa_15
	vec1 32 ssa_47 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_50 = fmul ssa_48, ssa_49
	vec1 32 ssa_51 = fpow ssa_50, ssa_14
	vec1 32 ssa_52 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_53 = bcsel ssa_46, ssa_51, ssa_52
	vec1 32 ssa_54 = fadd ssa_53, ssa_11
	vec1 32 ssa_55 = fadd ssa_53, ssa_12
	vec1 32 ssa_56 = fadd ssa_53, ssa_13
	vec1 32 ssa_57 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_58 = vec4 ssa_54, ssa_55, ssa_56, ssa_0
	intrinsic store_deref (ssa_57, ssa_58) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_59 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_60 = intrinsic load_deref (ssa_59) (0) /* access=0 */
	vec1 32 ssa_61 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_62 = intrinsic load_deref (ssa_61) (0) /* access=0 */
	vec1 32 ssa_63 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_64 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec1 32 ssa_7 = fadd ssa_62, ssa_4
	vec1 32 ssa_8 = fmul ssa_1, ssa_7
	vec1 32 ssa_9 = fmul ssa_2, ssa_7
	vec1 32 ssa_10 = fmul ssa_3, ssa_7
	vec1 32 ssa_11 = fsat ssa_8
	vec1 32 ssa_12 = fsat ssa_9
	vec1 32 ssa_13 = fsat ssa_10
	vec1 32 ssa_14 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_15 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_16 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_17 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_18 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_19 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_20 = fmul ssa_60, ssa_17
	vec1 32 ssa_21 = fmul ssa_62, ssa_18
	vec1 32 ssa_22 = fmul ssa_64, ssa_19
	vec1 32 ssa_23 = ffract ssa_20
	vec1 32 ssa_24 = ffract ssa_21
	vec1 32 ssa_25 = ffract ssa_22
	vec1 32 ssa_26 = fadd ssa_24, ssa_16
	vec1 32 ssa_27 = fadd ssa_23, ssa_16
	vec1 32 ssa_28 = fadd ssa_25, ssa_16
	vec1 32 ssa_29 = fmul ssa_23, ssa_26
	vec1 32 ssa_30 = fmul ssa_24, ssa_27
	vec1 32 ssa_31 = fadd ssa_29, ssa_30
	vec1 32 ssa_32 = fmul ssa_25, ssa_28
	vec1 32 ssa_33 = fadd ssa_31, ssa_32
	vec1 32 ssa_34 = fadd ssa_23, ssa_33
	vec1 32 ssa_35 = fadd ssa_24, ssa_33
	vec1 32 ssa_36 = fadd ssa_25, ssa_33
	vec1 32 ssa_37 = fadd ssa_34, ssa_35
	vec1 32 ssa_38 = fmul ssa_37, ssa_36
	vec1 32 ssa_39 = fadd ssa_34, ssa_36
	vec1 32 ssa_40 = fmul ssa_39, ssa_35
	vec1 32 ssa_41 = fadd ssa_38, ssa_40
	vec1 32 ssa_42 = fadd ssa_35, ssa_36
	vec1 32 ssa_43 = fmul ssa_42, ssa_34
	vec1 32 ssa_44 = fadd ssa_41, ssa_43
	vec1 32 ssa_45 = ffract ssa_44
	vec1 1 ssa_46 = fge ssa_45, ssa_15
	vec1 32 ssa_47 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_50 = fmul ssa_48, ssa_49
	vec1 32 ssa_51 = fpow ssa_50, ssa_14
	vec1 32 ssa_52 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_53 = bcsel ssa_46, ssa_51, ssa_52
	vec1 32 ssa_54 = fadd ssa_53, ssa_11
	vec1 32 ssa_55 = fadd ssa_53, ssa_12
	vec1 32 ssa_56 = fadd ssa_53, ssa_13
	vec1 32 ssa_57 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_58 = vec4 ssa_54, ssa_55, ssa_56, ssa_0
	intrinsic store_deref (ssa_57, ssa_58) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_remove_dead_variables
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &outUVW (shader_out float) 
	vec1 32 ssa_35 = mov ssa_1.x
	intrinsic store_deref (ssa_34, ssa_35) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_36 = deref_var &outUVW@0 (shader_out float) 
	vec1 32 ssa_37 = mov ssa_1.y
	intrinsic store_deref (ssa_36, ssa_37) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_38 = deref_var &outUVW@1 (shader_out float) 
	vec1 32 ssa_39 = mov ssa_1.z
	intrinsic store_deref (ssa_38, ssa_39) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_40 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_40, ssa_41) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_remove_dead_variables
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_5 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_6 = intrinsic load_deref (ssa_5) (0) /* access=0 */
	vec1 32 ssa_7 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_8 = intrinsic load_deref (ssa_7) (0) /* access=0 */
	vec1 32 ssa_9 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_10 = intrinsic load_deref (ssa_9) (0) /* access=0 */
	vec1 32 ssa_11 = fadd ssa_8, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_6, ssa_21
	vec1 32 ssa_25 = fmul ssa_8, ssa_22
	vec1 32 ssa_26 = fmul ssa_10, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_56
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec1 32 ssa_61 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	intrinsic store_deref (ssa_61, ssa_62) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_io_to_vector
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &outUVW (shader_out float) 
	vec1 32 ssa_35 = mov ssa_1.x
	vec1 32 ssa_42 = deref_var &outUVW@2 (shader_out vec3) 
	vec3 32 ssa_45 = vec3 ssa_35, ssa_43, ssa_44
	intrinsic store_deref (ssa_42, ssa_45) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_36 = deref_var &outUVW@0 (shader_out float) 
	vec1 32 ssa_37 = mov ssa_1.y
	vec1 32 ssa_46 = deref_var &outUVW@2 (shader_out vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_37, ssa_48
	intrinsic store_deref (ssa_46, ssa_49) (2, 0) /* wrmask=y */ /* access=0 */
	vec1 32 ssa_38 = deref_var &outUVW@1 (shader_out float) 
	vec1 32 ssa_39 = mov ssa_1.z
	vec1 32 ssa_50 = deref_var &outUVW@2 (shader_out vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_39
	intrinsic store_deref (ssa_50, ssa_53) (4, 0) /* wrmask=z */ /* access=0 */
	vec1 32 ssa_40 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_40, ssa_41) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &outUVW (shader_out float) 
	vec1 32 ssa_35 = mov ssa_1.x
	vec1 32 ssa_42 = deref_var &outUVW@2 (shader_out vec3) 
	vec3 32 ssa_45 = vec3 ssa_35, ssa_43, ssa_44
	vec1 32 ssa_36 = deref_var &outUVW@0 (shader_out float) 
	vec1 32 ssa_37 = mov ssa_1.y
	vec1 32 ssa_46 = deref_var &outUVW@2 (shader_out vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_37, ssa_48
	vec1 32 ssa_38 = deref_var &outUVW@1 (shader_out float) 
	vec1 32 ssa_39 = mov ssa_1.z
	vec1 32 ssa_50 = deref_var &outUVW@2 (shader_out vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_39
	vec1 32 ssa_54 = mov ssa_45.x
	vec1 32 ssa_55 = mov ssa_49.y
	vec1 32 ssa_56 = mov ssa_53.z
	vec3 32 ssa_57 = vec3 ssa_54, ssa_55, ssa_56
	intrinsic store_deref (ssa_50, ssa_57) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_40, ssa_41) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_io_to_vector
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_5 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_63 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec1 32 ssa_64 = mov ssa_6.x
	vec1 32 ssa_7 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_65 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_8 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	vec1 32 ssa_66 = mov ssa_8.y
	vec1 32 ssa_9 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_67 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	vec1 32 ssa_68 = mov ssa_10.z
	vec1 32 ssa_11 = fadd ssa_66, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_64, ssa_21
	vec1 32 ssa_25 = fmul ssa_66, ssa_22
	vec1 32 ssa_26 = fmul ssa_68, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_56
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec1 32 ssa_61 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	intrinsic store_deref (ssa_61, ssa_62) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_io_to_temporaries
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
decl_var  INTERP_MODE_NONE float out@outUVW-temp
decl_var  INTERP_MODE_NONE float out@outUVW-temp@0
decl_var  INTERP_MODE_NONE float out@outUVW-temp@1
decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@2
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@3 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@4 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@5 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &out@outUVW-temp (shader_temp float) 
	vec1 32 ssa_35 = mov ssa_1.x
	vec1 32 ssa_42 = deref_var &out@outUVW-temp@2 (shader_temp vec3) 
	vec3 32 ssa_45 = vec3 ssa_35, ssa_43, ssa_44
	vec1 32 ssa_36 = deref_var &out@outUVW-temp@0 (shader_temp float) 
	vec1 32 ssa_37 = mov ssa_1.y
	vec1 32 ssa_46 = deref_var &out@outUVW-temp@2 (shader_temp vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_37, ssa_48
	vec1 32 ssa_38 = deref_var &out@outUVW-temp@1 (shader_temp float) 
	vec1 32 ssa_39 = mov ssa_1.z
	vec1 32 ssa_50 = deref_var &out@outUVW-temp@2 (shader_temp vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_39
	vec1 32 ssa_54 = mov ssa_45.x
	vec1 32 ssa_55 = mov ssa_49.y
	vec1 32 ssa_56 = mov ssa_53.z
	vec3 32 ssa_57 = vec3 ssa_54, ssa_55, ssa_56
	intrinsic store_deref (ssa_50, ssa_57) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &out@.field0-temp (shader_temp vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_40, ssa_41) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_58 = deref_var &out@.field0-temp (shader_temp vec4) 
	vec1 32 ssa_59 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_59, ssa_58) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_60 = deref_var &out@outUVW-temp (shader_temp float) 
	vec1 32 ssa_61 = deref_var &outUVW (shader_out float) 
	intrinsic copy_deref (ssa_61, ssa_60) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_62 = deref_var &out@outUVW-temp@0 (shader_temp float) 
	vec1 32 ssa_63 = deref_var &outUVW@3 (shader_out float) 
	intrinsic copy_deref (ssa_63, ssa_62) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_64 = deref_var &out@outUVW-temp@1 (shader_temp float) 
	vec1 32 ssa_65 = deref_var &outUVW@4 (shader_out float) 
	intrinsic copy_deref (ssa_65, ssa_64) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_66 = deref_var &out@outUVW-temp@2 (shader_temp vec3) 
	vec1 32 ssa_67 = deref_var &outUVW@5 (shader_out vec3) 
	intrinsic copy_deref (ssa_67, ssa_66) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_global_vars_to_local
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_35 = mov ssa_1.x
	vec1 32 ssa_42 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_45 = vec3 ssa_35, ssa_43, ssa_44
	vec1 32 ssa_36 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_37 = mov ssa_1.y
	vec1 32 ssa_46 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_37, ssa_48
	vec1 32 ssa_38 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_39 = mov ssa_1.z
	vec1 32 ssa_50 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_39
	vec1 32 ssa_54 = mov ssa_45.x
	vec1 32 ssa_55 = mov ssa_49.y
	vec1 32 ssa_56 = mov ssa_53.z
	vec3 32 ssa_57 = vec3 ssa_54, ssa_55, ssa_56
	intrinsic store_deref (ssa_50, ssa_57) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_40, ssa_41) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_58 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_59 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_59, ssa_58) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_60 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_61 = deref_var &outUVW (shader_out float) 
	intrinsic copy_deref (ssa_61, ssa_60) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_62 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_63 = deref_var &outUVW@0 (shader_out float) 
	intrinsic copy_deref (ssa_63, ssa_62) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_64 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_65 = deref_var &outUVW@1 (shader_out float) 
	intrinsic copy_deref (ssa_65, ssa_64) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_66 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec1 32 ssa_67 = deref_var &outUVW@2 (shader_out vec3) 
	intrinsic copy_deref (ssa_67, ssa_66) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_split_var_copies
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_35 = mov ssa_1.x
	vec1 32 ssa_42 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_45 = vec3 ssa_35, ssa_43, ssa_44
	vec1 32 ssa_36 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_37 = mov ssa_1.y
	vec1 32 ssa_46 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_37, ssa_48
	vec1 32 ssa_38 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_39 = mov ssa_1.z
	vec1 32 ssa_50 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_39
	vec1 32 ssa_54 = mov ssa_45.x
	vec1 32 ssa_55 = mov ssa_49.y
	vec1 32 ssa_56 = mov ssa_53.z
	vec3 32 ssa_57 = vec3 ssa_54, ssa_55, ssa_56
	intrinsic store_deref (ssa_50, ssa_57) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_40, ssa_41) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_58 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_59 = deref_var &.field0 (shader_out vec4) 
	intrinsic copy_deref (ssa_59, ssa_58) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_60 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_61 = deref_var &outUVW (shader_out float) 
	intrinsic copy_deref (ssa_61, ssa_60) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_62 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_63 = deref_var &outUVW@0 (shader_out float) 
	intrinsic copy_deref (ssa_63, ssa_62) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_64 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_65 = deref_var &outUVW@1 (shader_out float) 
	intrinsic copy_deref (ssa_65, ssa_64) (0, 0) /* src-access=0 */ /* dst-access=0 */
	vec1 32 ssa_66 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec1 32 ssa_67 = deref_var &outUVW@2 (shader_out vec3) 
	intrinsic copy_deref (ssa_67, ssa_66) (0, 0) /* src-access=0 */ /* dst-access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_var_copies
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_35 = mov ssa_1.x
	vec1 32 ssa_42 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_45 = vec3 ssa_35, ssa_43, ssa_44
	vec1 32 ssa_36 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_37 = mov ssa_1.y
	vec1 32 ssa_46 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_37, ssa_48
	vec1 32 ssa_38 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_39 = mov ssa_1.z
	vec1 32 ssa_50 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_39
	vec1 32 ssa_54 = mov ssa_45.x
	vec1 32 ssa_55 = mov ssa_49.y
	vec1 32 ssa_56 = mov ssa_53.z
	vec3 32 ssa_57 = vec3 ssa_54, ssa_55, ssa_56
	intrinsic store_deref (ssa_50, ssa_57) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_40, ssa_41) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_58 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_59 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_68 = intrinsic load_deref (ssa_58) (0) /* access=0 */
	intrinsic store_deref (ssa_59, ssa_68) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_60 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_61 = deref_var &outUVW (shader_out float) 
	vec1 32 ssa_69 = intrinsic load_deref (ssa_60) (0) /* access=0 */
	intrinsic store_deref (ssa_61, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_62 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_63 = deref_var &outUVW@0 (shader_out float) 
	vec1 32 ssa_70 = intrinsic load_deref (ssa_62) (0) /* access=0 */
	intrinsic store_deref (ssa_63, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_64 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_65 = deref_var &outUVW@1 (shader_out float) 
	vec1 32 ssa_71 = intrinsic load_deref (ssa_64) (0) /* access=0 */
	intrinsic store_deref (ssa_65, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_66 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec1 32 ssa_67 = deref_var &outUVW@2 (shader_out vec3) 
	vec3 32 ssa_72 = intrinsic load_deref (ssa_66) (0) /* access=0 */
	intrinsic store_deref (ssa_67, ssa_72) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

anv_nir_lower_ycbcr_textures
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_35 = mov ssa_1.x
	vec1 32 ssa_42 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_45 = vec3 ssa_35, ssa_43, ssa_44
	vec1 32 ssa_36 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_37 = mov ssa_1.y
	vec1 32 ssa_46 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_37, ssa_48
	vec1 32 ssa_38 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_39 = mov ssa_1.z
	vec1 32 ssa_50 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_39
	vec1 32 ssa_54 = mov ssa_45.x
	vec1 32 ssa_55 = mov ssa_49.y
	vec1 32 ssa_56 = mov ssa_53.z
	vec3 32 ssa_57 = vec3 ssa_54, ssa_55, ssa_56
	intrinsic store_deref (ssa_50, ssa_57) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_40, ssa_41) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_58 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_59 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_68 = intrinsic load_deref (ssa_58) (0) /* access=0 */
	intrinsic store_deref (ssa_59, ssa_68) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_60 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_61 = deref_var &outUVW (shader_out float) 
	vec1 32 ssa_69 = intrinsic load_deref (ssa_60) (0) /* access=0 */
	intrinsic store_deref (ssa_61, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_62 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_63 = deref_var &outUVW@0 (shader_out float) 
	vec1 32 ssa_70 = intrinsic load_deref (ssa_62) (0) /* access=0 */
	intrinsic store_deref (ssa_63, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_64 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_65 = deref_var &outUVW@1 (shader_out float) 
	vec1 32 ssa_71 = intrinsic load_deref (ssa_64) (0) /* access=0 */
	intrinsic store_deref (ssa_65, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_66 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec1 32 ssa_67 = deref_var &outUVW@2 (shader_out vec3) 
	vec3 32 ssa_72 = intrinsic load_deref (ssa_66) (0) /* access=0 */
	intrinsic store_deref (ssa_67, ssa_72) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

anv_nir_lower_multiview
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_35 = mov ssa_1.x
	vec1 32 ssa_42 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_45 = vec3 ssa_35, ssa_43, ssa_44
	vec1 32 ssa_36 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_37 = mov ssa_1.y
	vec1 32 ssa_46 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_37, ssa_48
	vec1 32 ssa_38 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_39 = mov ssa_1.z
	vec1 32 ssa_50 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_39
	vec1 32 ssa_54 = mov ssa_45.x
	vec1 32 ssa_55 = mov ssa_49.y
	vec1 32 ssa_56 = mov ssa_53.z
	vec3 32 ssa_57 = vec3 ssa_54, ssa_55, ssa_56
	intrinsic store_deref (ssa_50, ssa_57) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_40, ssa_41) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_58 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_59 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_68 = intrinsic load_deref (ssa_58) (0) /* access=0 */
	intrinsic store_deref (ssa_59, ssa_68) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_60 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_61 = deref_var &outUVW (shader_out float) 
	vec1 32 ssa_69 = intrinsic load_deref (ssa_60) (0) /* access=0 */
	intrinsic store_deref (ssa_61, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_62 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_63 = deref_var &outUVW@0 (shader_out float) 
	vec1 32 ssa_70 = intrinsic load_deref (ssa_62) (0) /* access=0 */
	intrinsic store_deref (ssa_63, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_64 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_65 = deref_var &outUVW@1 (shader_out float) 
	vec1 32 ssa_71 = intrinsic load_deref (ssa_64) (0) /* access=0 */
	intrinsic store_deref (ssa_65, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_66 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec1 32 ssa_67 = deref_var &outUVW@2 (shader_out vec3) 
	vec3 32 ssa_72 = intrinsic load_deref (ssa_66) (0) /* access=0 */
	intrinsic store_deref (ssa_67, ssa_72) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

brw_nir_lower_image_load_store
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_35 = mov ssa_1.x
	vec1 32 ssa_42 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_45 = vec3 ssa_35, ssa_43, ssa_44
	vec1 32 ssa_36 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_37 = mov ssa_1.y
	vec1 32 ssa_46 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_37, ssa_48
	vec1 32 ssa_38 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_39 = mov ssa_1.z
	vec1 32 ssa_50 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_39
	vec1 32 ssa_54 = mov ssa_45.x
	vec1 32 ssa_55 = mov ssa_49.y
	vec1 32 ssa_56 = mov ssa_53.z
	vec3 32 ssa_57 = vec3 ssa_54, ssa_55, ssa_56
	intrinsic store_deref (ssa_50, ssa_57) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_40, ssa_41) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_58 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_59 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_68 = intrinsic load_deref (ssa_58) (0) /* access=0 */
	intrinsic store_deref (ssa_59, ssa_68) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_60 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_61 = deref_var &outUVW (shader_out float) 
	vec1 32 ssa_69 = intrinsic load_deref (ssa_60) (0) /* access=0 */
	intrinsic store_deref (ssa_61, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_62 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_63 = deref_var &outUVW@0 (shader_out float) 
	vec1 32 ssa_70 = intrinsic load_deref (ssa_62) (0) /* access=0 */
	intrinsic store_deref (ssa_63, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_64 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_65 = deref_var &outUVW@1 (shader_out float) 
	vec1 32 ssa_71 = intrinsic load_deref (ssa_64) (0) /* access=0 */
	intrinsic store_deref (ssa_65, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_66 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec1 32 ssa_67 = deref_var &outUVW@2 (shader_out vec3) 
	vec3 32 ssa_72 = intrinsic load_deref (ssa_66) (0) /* access=0 */
	intrinsic store_deref (ssa_67, ssa_72) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_explicit_io
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_35 = mov ssa_1.x
	vec1 32 ssa_42 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_45 = vec3 ssa_35, ssa_43, ssa_44
	vec1 32 ssa_36 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_37 = mov ssa_1.y
	vec1 32 ssa_46 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_37, ssa_48
	vec1 32 ssa_38 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_39 = mov ssa_1.z
	vec1 32 ssa_50 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_39
	vec1 32 ssa_54 = mov ssa_45.x
	vec1 32 ssa_55 = mov ssa_49.y
	vec1 32 ssa_56 = mov ssa_53.z
	vec3 32 ssa_57 = vec3 ssa_54, ssa_55, ssa_56
	intrinsic store_deref (ssa_50, ssa_57) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_40, ssa_41) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_58 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_59 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_68 = intrinsic load_deref (ssa_58) (0) /* access=0 */
	intrinsic store_deref (ssa_59, ssa_68) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_60 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_61 = deref_var &outUVW (shader_out float) 
	vec1 32 ssa_69 = intrinsic load_deref (ssa_60) (0) /* access=0 */
	intrinsic store_deref (ssa_61, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_62 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_63 = deref_var &outUVW@0 (shader_out float) 
	vec1 32 ssa_70 = intrinsic load_deref (ssa_62) (0) /* access=0 */
	intrinsic store_deref (ssa_63, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_64 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_65 = deref_var &outUVW@1 (shader_out float) 
	vec1 32 ssa_71 = intrinsic load_deref (ssa_64) (0) /* access=0 */
	intrinsic store_deref (ssa_65, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_66 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec1 32 ssa_67 = deref_var &outUVW@2 (shader_out vec3) 
	vec3 32 ssa_72 = intrinsic load_deref (ssa_66) (0) /* access=0 */
	intrinsic store_deref (ssa_67, ssa_72) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_explicit_io
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_35 = mov ssa_1.x
	vec1 32 ssa_42 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_45 = vec3 ssa_35, ssa_43, ssa_44
	vec1 32 ssa_36 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_37 = mov ssa_1.y
	vec1 32 ssa_46 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_37, ssa_48
	vec1 32 ssa_38 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_39 = mov ssa_1.z
	vec1 32 ssa_50 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_39
	vec1 32 ssa_54 = mov ssa_45.x
	vec1 32 ssa_55 = mov ssa_49.y
	vec1 32 ssa_56 = mov ssa_53.z
	vec3 32 ssa_57 = vec3 ssa_54, ssa_55, ssa_56
	intrinsic store_deref (ssa_50, ssa_57) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_40, ssa_41) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_58 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_59 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_68 = intrinsic load_deref (ssa_58) (0) /* access=0 */
	intrinsic store_deref (ssa_59, ssa_68) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_60 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_61 = deref_var &outUVW (shader_out float) 
	vec1 32 ssa_69 = intrinsic load_deref (ssa_60) (0) /* access=0 */
	intrinsic store_deref (ssa_61, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_62 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_63 = deref_var &outUVW@0 (shader_out float) 
	vec1 32 ssa_70 = intrinsic load_deref (ssa_62) (0) /* access=0 */
	intrinsic store_deref (ssa_63, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_64 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_65 = deref_var &outUVW@1 (shader_out float) 
	vec1 32 ssa_71 = intrinsic load_deref (ssa_64) (0) /* access=0 */
	intrinsic store_deref (ssa_65, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_66 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec1 32 ssa_67 = deref_var &outUVW@2 (shader_out vec3) 
	vec3 32 ssa_72 = intrinsic load_deref (ssa_66) (0) /* access=0 */
	intrinsic store_deref (ssa_67, ssa_72) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_explicit_io
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_35 = mov ssa_1.x
	vec1 32 ssa_42 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_45 = vec3 ssa_35, ssa_43, ssa_44
	vec1 32 ssa_36 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_37 = mov ssa_1.y
	vec1 32 ssa_46 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_37, ssa_48
	vec1 32 ssa_38 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_39 = mov ssa_1.z
	vec1 32 ssa_50 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_39
	vec1 32 ssa_54 = mov ssa_45.x
	vec1 32 ssa_55 = mov ssa_49.y
	vec1 32 ssa_56 = mov ssa_53.z
	vec3 32 ssa_57 = vec3 ssa_54, ssa_55, ssa_56
	intrinsic store_deref (ssa_50, ssa_57) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_40, ssa_41) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_58 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_59 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_68 = intrinsic load_deref (ssa_58) (0) /* access=0 */
	intrinsic store_deref (ssa_59, ssa_68) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_60 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_61 = deref_var &outUVW (shader_out float) 
	vec1 32 ssa_69 = intrinsic load_deref (ssa_60) (0) /* access=0 */
	intrinsic store_deref (ssa_61, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_62 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_63 = deref_var &outUVW@0 (shader_out float) 
	vec1 32 ssa_70 = intrinsic load_deref (ssa_62) (0) /* access=0 */
	intrinsic store_deref (ssa_63, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_64 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_65 = deref_var &outUVW@1 (shader_out float) 
	vec1 32 ssa_71 = intrinsic load_deref (ssa_64) (0) /* access=0 */
	intrinsic store_deref (ssa_65, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_66 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec1 32 ssa_67 = deref_var &outUVW@2 (shader_out vec3) 
	vec3 32 ssa_72 = intrinsic load_deref (ssa_66) (0) /* access=0 */
	intrinsic store_deref (ssa_67, ssa_72) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_constant_folding
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_35 = mov ssa_1.x
	vec1 32 ssa_42 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_45 = vec3 ssa_35, ssa_43, ssa_44
	vec1 32 ssa_36 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_37 = mov ssa_1.y
	vec1 32 ssa_46 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_37, ssa_48
	vec1 32 ssa_38 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_39 = mov ssa_1.z
	vec1 32 ssa_50 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_39
	vec1 32 ssa_54 = mov ssa_45.x
	vec1 32 ssa_55 = mov ssa_49.y
	vec1 32 ssa_56 = mov ssa_53.z
	vec3 32 ssa_57 = vec3 ssa_54, ssa_55, ssa_56
	intrinsic store_deref (ssa_50, ssa_57) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_40, ssa_41) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_58 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_59 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_68 = intrinsic load_deref (ssa_58) (0) /* access=0 */
	intrinsic store_deref (ssa_59, ssa_68) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_60 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_61 = deref_var &outUVW (shader_out float) 
	vec1 32 ssa_69 = intrinsic load_deref (ssa_60) (0) /* access=0 */
	intrinsic store_deref (ssa_61, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_62 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_63 = deref_var &outUVW@0 (shader_out float) 
	vec1 32 ssa_70 = intrinsic load_deref (ssa_62) (0) /* access=0 */
	intrinsic store_deref (ssa_63, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_64 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_65 = deref_var &outUVW@1 (shader_out float) 
	vec1 32 ssa_71 = intrinsic load_deref (ssa_64) (0) /* access=0 */
	intrinsic store_deref (ssa_65, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_66 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec1 32 ssa_67 = deref_var &outUVW@2 (shader_out vec3) 
	vec3 32 ssa_72 = intrinsic load_deref (ssa_66) (0) /* access=0 */
	intrinsic store_deref (ssa_67, ssa_72) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_non_uniform_access
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec3 32 ssa_1 = intrinsic load_deref (ssa_0) (0) /* access=0 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_push_constant (ssa_2) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_push_constant (ssa_4) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_push_constant (ssa_6) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_push_constant (ssa_8) (0, 64) /* base=0 */ /* range=64 */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_1.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_1.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_1.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_1.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_1.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_35 = mov ssa_1.x
	vec1 32 ssa_42 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_45 = vec3 ssa_35, ssa_43, ssa_44
	vec1 32 ssa_36 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_37 = mov ssa_1.y
	vec1 32 ssa_46 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_37, ssa_48
	vec1 32 ssa_38 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_39 = mov ssa_1.z
	vec1 32 ssa_50 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_39
	vec1 32 ssa_54 = mov ssa_45.x
	vec1 32 ssa_55 = mov ssa_49.y
	vec1 32 ssa_56 = mov ssa_53.z
	vec3 32 ssa_57 = vec3 ssa_54, ssa_55, ssa_56
	intrinsic store_deref (ssa_50, ssa_57) (7, 0) /* wrmask=xyz */ /* access=0 */
	vec1 32 ssa_40 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_deref (ssa_40, ssa_41) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_58 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_59 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_68 = intrinsic load_deref (ssa_58) (0) /* access=0 */
	intrinsic store_deref (ssa_59, ssa_68) (15, 0) /* wrmask=xyzw */ /* access=0 */
	vec1 32 ssa_60 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_61 = deref_var &outUVW (shader_out float) 
	vec1 32 ssa_69 = intrinsic load_deref (ssa_60) (0) /* access=0 */
	intrinsic store_deref (ssa_61, ssa_69) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_62 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_63 = deref_var &outUVW@0 (shader_out float) 
	vec1 32 ssa_70 = intrinsic load_deref (ssa_62) (0) /* access=0 */
	intrinsic store_deref (ssa_63, ssa_70) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_64 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_65 = deref_var &outUVW@1 (shader_out float) 
	vec1 32 ssa_71 = intrinsic load_deref (ssa_64) (0) /* access=0 */
	intrinsic store_deref (ssa_65, ssa_71) (1, 0) /* wrmask=x */ /* access=0 */
	vec1 32 ssa_66 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec1 32 ssa_67 = deref_var &outUVW@2 (shader_out vec3) 
	vec3 32 ssa_72 = intrinsic load_deref (ssa_66) (0) /* access=0 */
	intrinsic store_deref (ssa_67, ssa_72) (7, 0) /* wrmask=xyz */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_wpos_center
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_5 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_63 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec1 32 ssa_64 = mov ssa_6.x
	vec1 32 ssa_7 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_65 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_8 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	vec1 32 ssa_66 = mov ssa_8.y
	vec1 32 ssa_9 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_67 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	vec1 32 ssa_68 = mov ssa_10.z
	vec1 32 ssa_11 = fadd ssa_66, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_64, ssa_21
	vec1 32 ssa_25 = fmul ssa_66, ssa_22
	vec1 32 ssa_26 = fmul ssa_68, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_56
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec1 32 ssa_61 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	intrinsic store_deref (ssa_61, ssa_62) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_input_attachments
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_5 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_63 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec1 32 ssa_64 = mov ssa_6.x
	vec1 32 ssa_7 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_65 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_8 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	vec1 32 ssa_66 = mov ssa_8.y
	vec1 32 ssa_9 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_67 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	vec1 32 ssa_68 = mov ssa_10.z
	vec1 32 ssa_11 = fadd ssa_66, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_64, ssa_21
	vec1 32 ssa_25 = fmul ssa_66, ssa_22
	vec1 32 ssa_26 = fmul ssa_68, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_56
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec1 32 ssa_61 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	intrinsic store_deref (ssa_61, ssa_62) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

anv_nir_lower_ycbcr_textures
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_5 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_63 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec1 32 ssa_64 = mov ssa_6.x
	vec1 32 ssa_7 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_65 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_8 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	vec1 32 ssa_66 = mov ssa_8.y
	vec1 32 ssa_9 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_67 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	vec1 32 ssa_68 = mov ssa_10.z
	vec1 32 ssa_11 = fadd ssa_66, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_64, ssa_21
	vec1 32 ssa_25 = fmul ssa_66, ssa_22
	vec1 32 ssa_26 = fmul ssa_68, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_56
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec1 32 ssa_61 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	intrinsic store_deref (ssa_61, ssa_62) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

anv_nir_lower_multiview
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_5 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_63 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec1 32 ssa_64 = mov ssa_6.x
	vec1 32 ssa_7 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_65 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_8 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	vec1 32 ssa_66 = mov ssa_8.y
	vec1 32 ssa_9 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_67 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	vec1 32 ssa_68 = mov ssa_10.z
	vec1 32 ssa_11 = fadd ssa_66, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_64, ssa_21
	vec1 32 ssa_25 = fmul ssa_66, ssa_22
	vec1 32 ssa_26 = fmul ssa_68, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_56
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec1 32 ssa_61 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	intrinsic store_deref (ssa_61, ssa_62) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

brw_nir_lower_image_load_store
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_5 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_63 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec1 32 ssa_64 = mov ssa_6.x
	vec1 32 ssa_7 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_65 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_8 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	vec1 32 ssa_66 = mov ssa_8.y
	vec1 32 ssa_9 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_67 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	vec1 32 ssa_68 = mov ssa_10.z
	vec1 32 ssa_11 = fadd ssa_66, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_64, ssa_21
	vec1 32 ssa_25 = fmul ssa_66, ssa_22
	vec1 32 ssa_26 = fmul ssa_68, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_56
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec1 32 ssa_61 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	intrinsic store_deref (ssa_61, ssa_62) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_explicit_io
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_5 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_63 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec1 32 ssa_64 = mov ssa_6.x
	vec1 32 ssa_7 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_65 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_8 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	vec1 32 ssa_66 = mov ssa_8.y
	vec1 32 ssa_9 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_67 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	vec1 32 ssa_68 = mov ssa_10.z
	vec1 32 ssa_11 = fadd ssa_66, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_64, ssa_21
	vec1 32 ssa_25 = fmul ssa_66, ssa_22
	vec1 32 ssa_26 = fmul ssa_68, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_56
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec1 32 ssa_61 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	intrinsic store_deref (ssa_61, ssa_62) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_explicit_io
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_5 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_63 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec1 32 ssa_64 = mov ssa_6.x
	vec1 32 ssa_7 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_65 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_8 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	vec1 32 ssa_66 = mov ssa_8.y
	vec1 32 ssa_9 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_67 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	vec1 32 ssa_68 = mov ssa_10.z
	vec1 32 ssa_11 = fadd ssa_66, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_64, ssa_21
	vec1 32 ssa_25 = fmul ssa_66, ssa_22
	vec1 32 ssa_26 = fmul ssa_68, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_56
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec1 32 ssa_61 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	intrinsic store_deref (ssa_61, ssa_62) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_explicit_io
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_5 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_63 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec1 32 ssa_64 = mov ssa_6.x
	vec1 32 ssa_7 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_65 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_8 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	vec1 32 ssa_66 = mov ssa_8.y
	vec1 32 ssa_9 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_67 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	vec1 32 ssa_68 = mov ssa_10.z
	vec1 32 ssa_11 = fadd ssa_66, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_64, ssa_21
	vec1 32 ssa_25 = fmul ssa_66, ssa_22
	vec1 32 ssa_26 = fmul ssa_68, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_56
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec1 32 ssa_61 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	intrinsic store_deref (ssa_61, ssa_62) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_opt_constant_folding
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_5 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_63 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec1 32 ssa_64 = mov ssa_6.x
	vec1 32 ssa_7 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_65 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_8 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	vec1 32 ssa_66 = mov ssa_8.y
	vec1 32 ssa_9 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_67 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	vec1 32 ssa_68 = mov ssa_10.z
	vec1 32 ssa_11 = fadd ssa_66, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_64, ssa_21
	vec1 32 ssa_25 = fmul ssa_66, ssa_22
	vec1 32 ssa_26 = fmul ssa_68, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_56
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec1 32 ssa_61 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	intrinsic store_deref (ssa_61, ssa_62) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

nir_lower_non_uniform_access
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW (VARYING_SLOT_VAR0.x, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@0 (VARYING_SLOT_VAR0.y, 0, 0)
decl_var shader_in INTERP_MODE_NONE float inUVW@1 (VARYING_SLOT_VAR0.z, 0, 0)
decl_var shader_in INTERP_MODE_NONE vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 0, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_5 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_63 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_6 = intrinsic load_deref (ssa_63) (0) /* access=0 */
	vec1 32 ssa_64 = mov ssa_6.x
	vec1 32 ssa_7 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_65 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_8 = intrinsic load_deref (ssa_65) (0) /* access=0 */
	vec1 32 ssa_66 = mov ssa_8.y
	vec1 32 ssa_9 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_67 = deref_var &inUVW@2 (shader_in vec3) 
	vec3 32 ssa_10 = intrinsic load_deref (ssa_67) (0) /* access=0 */
	vec1 32 ssa_68 = mov ssa_10.z
	vec1 32 ssa_11 = fadd ssa_66, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_64, ssa_21
	vec1 32 ssa_25 = fmul ssa_66, ssa_22
	vec1 32 ssa_26 = fmul ssa_68, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_56
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec1 32 ssa_61 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	intrinsic store_deref (ssa_61, ssa_62) (15, 0) /* wrmask=xyzw */ /* access=0 */
	/* succs: block_1 */
	block block_1:
}

brw_nir_apply_sampler_key
nir_lower_subgroups
brw_nir_lower_scoped_barriers
nir_opt_combine_memory_barriers
nir_opt_algebraic_before_ffma
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_84 = undefined
	vec1 32 ssa_82 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec1 32 ssa_73 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_75 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_74 = intrinsic load_input (ssa_75) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_uniform (ssa_2) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_uniform (ssa_4) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_uniform (ssa_6) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_uniform (ssa_8) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_74.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_74.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_74.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_74.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_74.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_74.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_74.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_74.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_74.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_74.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_74.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_74.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_35 = mov ssa_74.x
	vec1 32 ssa_42 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_45 = vec3 ssa_35, ssa_43, ssa_44
	vec1 32 ssa_36 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_37 = mov ssa_74.y
	vec1 32 ssa_46 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_37, ssa_48
	vec1 32 ssa_38 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_39 = mov ssa_74.z
	vec1 32 ssa_50 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_39
	vec1 32 ssa_54 = mov ssa_45.x
	vec1 32 ssa_55 = mov ssa_49.y
	vec1 32 ssa_56 = mov ssa_53.z
	vec3 32 ssa_57 = vec3 ssa_54, ssa_55, ssa_56
	vec1 32 ssa_40 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	vec1 32 ssa_58 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_59 = deref_var &.field0 (shader_out vec4) 
	vec4 32 ssa_81 = mov ssa_41
	vec1 32 ssa_76 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_81, ssa_76) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec1 32 ssa_60 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_61 = deref_var &outUVW (shader_out float) 
	vec1 32 ssa_83 = mov ssa_82
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_83, ssa_77) (32, 1, 0, 160, 160) /* base=32 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	vec1 32 ssa_62 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_63 = deref_var &outUVW@0 (shader_out float) 
	vec1 32 ssa_85 = mov ssa_84
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_85, ssa_78) (32, 1, 1, 160, 160) /* base=32 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	vec1 32 ssa_64 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_65 = deref_var &outUVW@1 (shader_out float) 
	vec1 32 ssa_87 = mov ssa_86
	vec1 32 ssa_79 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_87, ssa_79) (32, 1, 2, 160, 160) /* base=32 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	vec1 32 ssa_66 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec1 32 ssa_67 = deref_var &outUVW@2 (shader_out vec3) 
	vec3 32 ssa_88 = mov ssa_57
	vec1 32 ssa_80 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_88, ssa_80) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	/* succs: block_1 */
	block block_1:
}

nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_84 = undefined
	vec1 32 ssa_82 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec1 32 ssa_73 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_75 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_74 = intrinsic load_input (ssa_75) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_uniform (ssa_2) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_uniform (ssa_4) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_uniform (ssa_6) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_uniform (ssa_8) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_74.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_74.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_74.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_74.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_74.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_74.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_74.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_74.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_74.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_74.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_74.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_74.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_35 = mov ssa_74.x
	vec1 32 ssa_42 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_45 = vec3 ssa_35, ssa_43, ssa_44
	vec1 32 ssa_36 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_37 = mov ssa_74.y
	vec1 32 ssa_46 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_37, ssa_48
	vec1 32 ssa_38 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_39 = mov ssa_74.z
	vec1 32 ssa_50 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_39
	vec1 32 ssa_54 = mov ssa_45.x
	vec1 32 ssa_55 = mov ssa_49.y
	vec1 32 ssa_56 = mov ssa_53.z
	vec3 32 ssa_57 = vec3 ssa_54, ssa_55, ssa_56
	vec1 32 ssa_40 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	vec1 32 ssa_58 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_59 = deref_var &.field0 (shader_out vec4) 
	vec1 32 ssa_89 = mov ssa_41.x
	vec1 32 ssa_90 = mov ssa_41.y
	vec1 32 ssa_91 = mov ssa_41.z
	vec1 32 ssa_92 = mov ssa_41.w
	vec4 32 ssa_93 = vec4 ssa_89, ssa_90, ssa_91, ssa_92
	vec1 32 ssa_76 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_93, ssa_76) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec1 32 ssa_60 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_61 = deref_var &outUVW (shader_out float) 
	vec1 32 ssa_83 = mov ssa_82
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_83, ssa_77) (32, 1, 0, 160, 160) /* base=32 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	vec1 32 ssa_62 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_63 = deref_var &outUVW@0 (shader_out float) 
	vec1 32 ssa_85 = mov ssa_84
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_85, ssa_78) (32, 1, 1, 160, 160) /* base=32 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	vec1 32 ssa_64 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_65 = deref_var &outUVW@1 (shader_out float) 
	vec1 32 ssa_87 = mov ssa_86
	vec1 32 ssa_79 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_87, ssa_79) (32, 1, 2, 160, 160) /* base=32 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	vec1 32 ssa_66 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec1 32 ssa_67 = deref_var &outUVW@2 (shader_out vec3) 
	vec1 32 ssa_94 = mov ssa_57.x
	vec1 32 ssa_95 = mov ssa_57.y
	vec1 32 ssa_96 = mov ssa_57.z
	vec3 32 ssa_97 = vec3 ssa_94, ssa_95, ssa_96
	vec1 32 ssa_80 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_97, ssa_80) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	/* succs: block_1 */
	block block_1:
}

nir_copy_prop
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_84 = undefined
	vec1 32 ssa_82 = undefined
	vec1 32 ssa_52 = undefined
	vec1 32 ssa_51 = undefined
	vec1 32 ssa_48 = undefined
	vec1 32 ssa_47 = undefined
	vec1 32 ssa_44 = undefined
	vec1 32 ssa_43 = undefined
	vec1 32 ssa_0 = deref_var &inPos (shader_in vec3) 
	vec1 32 ssa_73 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_75 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_74 = intrinsic load_input (ssa_75) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_uniform (ssa_2) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_uniform (ssa_4) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_uniform (ssa_6) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_uniform (ssa_8) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_74.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_74.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_74.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_74.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_74.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_74.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_74.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_74.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_74.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_74.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_74.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_74.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec1 32 ssa_34 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_35 = mov ssa_74.x
	vec1 32 ssa_42 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_45 = vec3 ssa_74.x, ssa_43, ssa_44
	vec1 32 ssa_36 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_37 = mov ssa_74.y
	vec1 32 ssa_46 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_49 = vec3 ssa_47, ssa_74.y, ssa_48
	vec1 32 ssa_38 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_39 = mov ssa_74.z
	vec1 32 ssa_50 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec3 32 ssa_53 = vec3 ssa_51, ssa_52, ssa_74.z
	vec1 32 ssa_54 = mov ssa_74.x
	vec1 32 ssa_55 = mov ssa_74.y
	vec1 32 ssa_56 = mov ssa_74.z
	vec3 32 ssa_57 = vec3 ssa_74.x, ssa_74.y, ssa_74.z
	vec1 32 ssa_40 = deref_var &out@.field0-temp (function_temp vec4) 
	vec4 32 ssa_41 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	vec1 32 ssa_58 = deref_var &out@.field0-temp (function_temp vec4) 
	vec1 32 ssa_59 = deref_var &.field0 (shader_out vec4) 
	vec1 32 ssa_89 = mov ssa_30
	vec1 32 ssa_90 = mov ssa_31
	vec1 32 ssa_91 = mov ssa_32
	vec1 32 ssa_92 = mov ssa_33
	vec4 32 ssa_93 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	vec1 32 ssa_76 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_93, ssa_76) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec1 32 ssa_60 = deref_var &out@outUVW-temp (function_temp float) 
	vec1 32 ssa_61 = deref_var &outUVW (shader_out float) 
	vec1 32 ssa_83 = mov ssa_82
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_82, ssa_77) (32, 1, 0, 160, 160) /* base=32 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	vec1 32 ssa_62 = deref_var &out@outUVW-temp@3 (function_temp float) 
	vec1 32 ssa_63 = deref_var &outUVW@0 (shader_out float) 
	vec1 32 ssa_85 = mov ssa_84
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_84, ssa_78) (32, 1, 1, 160, 160) /* base=32 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	vec1 32 ssa_64 = deref_var &out@outUVW-temp@4 (function_temp float) 
	vec1 32 ssa_65 = deref_var &outUVW@1 (shader_out float) 
	vec1 32 ssa_87 = mov ssa_86
	vec1 32 ssa_79 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_86, ssa_79) (32, 1, 2, 160, 160) /* base=32 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	vec1 32 ssa_66 = deref_var &out@outUVW-temp@5 (function_temp vec3) 
	vec1 32 ssa_67 = deref_var &outUVW@2 (shader_out vec3) 
	vec1 32 ssa_94 = mov ssa_74.x
	vec1 32 ssa_95 = mov ssa_74.y
	vec1 32 ssa_96 = mov ssa_74.z
	vec3 32 ssa_97 = vec3 ssa_74.x, ssa_74.y, ssa_74.z
	vec1 32 ssa_80 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_74, ssa_80) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_84 = undefined
	vec1 32 ssa_82 = undefined
	vec1 32 ssa_75 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_74 = intrinsic load_input (ssa_75) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec1 32 ssa_2 = load_const (0x00000000 /* 0.000000 */)
	vec4 32 ssa_3 = intrinsic load_uniform (ssa_2) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_uniform (ssa_4) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_uniform (ssa_6) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_uniform (ssa_8) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_74.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_74.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_74.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_74.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_74.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_74.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_74.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_74.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_74.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_74.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_74.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_74.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec4 32 ssa_93 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	vec1 32 ssa_76 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_93, ssa_76) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	vec1 32 ssa_77 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_82, ssa_77) (32, 1, 0, 160, 160) /* base=32 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_84, ssa_78) (32, 1, 1, 160, 160) /* base=32 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	vec1 32 ssa_79 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_86, ssa_79) (32, 1, 2, 160, 160) /* base=32 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	vec1 32 ssa_80 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_74, ssa_80) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_86 = undefined
	vec1 32 ssa_84 = undefined
	vec1 32 ssa_82 = undefined
	vec1 32 ssa_75 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_74 = intrinsic load_input (ssa_75) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec4 32 ssa_3 = intrinsic load_uniform (ssa_75) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_4 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_5 = intrinsic load_uniform (ssa_4) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_6 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_uniform (ssa_6) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_8 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_uniform (ssa_8) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_10 = fmul ssa_3.x, ssa_74.x
	vec1 32 ssa_11 = fmul ssa_3.y, ssa_74.x
	vec1 32 ssa_12 = fmul ssa_3.z, ssa_74.x
	vec1 32 ssa_13 = fmul ssa_3.w, ssa_74.x
	vec1 32 ssa_14 = fmul ssa_5.x, ssa_74.y
	vec1 32 ssa_15 = fmul ssa_5.y, ssa_74.y
	vec1 32 ssa_16 = fmul ssa_5.z, ssa_74.y
	vec1 32 ssa_17 = fmul ssa_5.w, ssa_74.y
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fmul ssa_7.x, ssa_74.z
	vec1 32 ssa_23 = fmul ssa_7.y, ssa_74.z
	vec1 32 ssa_24 = fmul ssa_7.z, ssa_74.z
	vec1 32 ssa_25 = fmul ssa_7.w, ssa_74.z
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_26, ssa_9.x
	vec1 32 ssa_31 = fadd ssa_27, ssa_9.y
	vec1 32 ssa_32 = fadd ssa_28, ssa_9.z
	vec1 32 ssa_33 = fadd ssa_29, ssa_9.w
	vec4 32 ssa_93 = vec4 ssa_30, ssa_31, ssa_32, ssa_33
	intrinsic store_output (ssa_93, ssa_75) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	intrinsic store_output (ssa_82, ssa_75) (32, 1, 0, 160, 160) /* base=32 */ /* wrmask=x */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	intrinsic store_output (ssa_84, ssa_75) (32, 1, 1, 160, 160) /* base=32 */ /* wrmask=x */ /* component=1 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	intrinsic store_output (ssa_86, ssa_75) (32, 1, 2, 160, 160) /* base=32 */ /* wrmask=x */ /* component=2 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	intrinsic store_output (ssa_74, ssa_75) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = undefined
	vec1 32 ssa_1 = undefined
	vec1 32 ssa_2 = undefined
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_4 = intrinsic load_input (ssa_3) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec4 32 ssa_5 = intrinsic load_uniform (ssa_3) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_6 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_uniform (ssa_6) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_8 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_uniform (ssa_8) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_10 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_11 = intrinsic load_uniform (ssa_10) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_4.x
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_4.x
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_4.x
	vec1 32 ssa_15 = fmul ssa_5.w, ssa_4.x
	vec1 32 ssa_16 = fmul ssa_7.x, ssa_4.y
	vec1 32 ssa_17 = fmul ssa_7.y, ssa_4.y
	vec1 32 ssa_18 = fmul ssa_7.z, ssa_4.y
	vec1 32 ssa_19 = fmul ssa_7.w, ssa_4.y
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fadd ssa_14, ssa_18
	vec1 32 ssa_23 = fadd ssa_15, ssa_19
	vec1 32 ssa_24 = fmul ssa_9.x, ssa_4.z
	vec1 32 ssa_25 = fmul ssa_9.y, ssa_4.z
	vec1 32 ssa_26 = fmul ssa_9.z, ssa_4.z
	vec1 32 ssa_27 = fmul ssa_9.w, ssa_4.z
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_22, ssa_26
	vec1 32 ssa_31 = fadd ssa_23, ssa_27
	vec1 32 ssa_32 = fadd ssa_28, ssa_11.x
	vec1 32 ssa_33 = fadd ssa_29, ssa_11.y
	vec1 32 ssa_34 = fadd ssa_30, ssa_11.z
	vec1 32 ssa_35 = fadd ssa_31, ssa_11.w
	vec4 32 ssa_36 = vec4 ssa_32, ssa_33, ssa_34, ssa_35
	intrinsic store_output (ssa_36, ssa_3) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	intrinsic store_output (ssa_4, ssa_3) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	/* succs: block_1 */
	block block_1:
}

nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	decl_var  INTERP_MODE_NONE vec4 out@.field0-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@3
	decl_var  INTERP_MODE_NONE float out@outUVW-temp@4
	decl_var  INTERP_MODE_NONE vec3 out@outUVW-temp@5
	block block_0:
	/* preds: */
	vec1 32 ssa_3 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_4 = intrinsic load_input (ssa_3) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec4 32 ssa_5 = intrinsic load_uniform (ssa_3) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_6 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_7 = intrinsic load_uniform (ssa_6) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_8 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_9 = intrinsic load_uniform (ssa_8) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_10 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_11 = intrinsic load_uniform (ssa_10) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_12 = fmul ssa_5.x, ssa_4.x
	vec1 32 ssa_13 = fmul ssa_5.y, ssa_4.x
	vec1 32 ssa_14 = fmul ssa_5.z, ssa_4.x
	vec1 32 ssa_15 = fmul ssa_5.w, ssa_4.x
	vec1 32 ssa_16 = fmul ssa_7.x, ssa_4.y
	vec1 32 ssa_17 = fmul ssa_7.y, ssa_4.y
	vec1 32 ssa_18 = fmul ssa_7.z, ssa_4.y
	vec1 32 ssa_19 = fmul ssa_7.w, ssa_4.y
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fadd ssa_13, ssa_17
	vec1 32 ssa_22 = fadd ssa_14, ssa_18
	vec1 32 ssa_23 = fadd ssa_15, ssa_19
	vec1 32 ssa_24 = fmul ssa_9.x, ssa_4.z
	vec1 32 ssa_25 = fmul ssa_9.y, ssa_4.z
	vec1 32 ssa_26 = fmul ssa_9.z, ssa_4.z
	vec1 32 ssa_27 = fmul ssa_9.w, ssa_4.z
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_21, ssa_25
	vec1 32 ssa_30 = fadd ssa_22, ssa_26
	vec1 32 ssa_31 = fadd ssa_23, ssa_27
	vec1 32 ssa_32 = fadd ssa_28, ssa_11.x
	vec1 32 ssa_33 = fadd ssa_29, ssa_11.y
	vec1 32 ssa_34 = fadd ssa_30, ssa_11.z
	vec1 32 ssa_35 = fadd ssa_31, ssa_11.w
	vec4 32 ssa_36 = vec4 ssa_32, ssa_33, ssa_34, ssa_35
	intrinsic store_output (ssa_36, ssa_3) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	intrinsic store_output (ssa_4, ssa_3) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_1 = intrinsic load_input (ssa_0) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec4 32 ssa_2 = intrinsic load_uniform (ssa_0) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_3 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_4 = intrinsic load_uniform (ssa_3) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_5 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_6 = intrinsic load_uniform (ssa_5) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_7 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_8 = intrinsic load_uniform (ssa_7) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_9 = fmul ssa_2.x, ssa_1.x
	vec1 32 ssa_10 = fmul ssa_2.y, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_2.z, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_2.w, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_4.x, ssa_1.y
	vec1 32 ssa_14 = fmul ssa_4.y, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_4.z, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_4.w, ssa_1.y
	vec1 32 ssa_17 = fadd ssa_9, ssa_13
	vec1 32 ssa_18 = fadd ssa_10, ssa_14
	vec1 32 ssa_19 = fadd ssa_11, ssa_15
	vec1 32 ssa_20 = fadd ssa_12, ssa_16
	vec1 32 ssa_21 = fmul ssa_6.x, ssa_1.z
	vec1 32 ssa_22 = fmul ssa_6.y, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_6.z, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_6.w, ssa_1.z
	vec1 32 ssa_25 = fadd ssa_17, ssa_21
	vec1 32 ssa_26 = fadd ssa_18, ssa_22
	vec1 32 ssa_27 = fadd ssa_19, ssa_23
	vec1 32 ssa_28 = fadd ssa_20, ssa_24
	vec1 32 ssa_29 = fadd ssa_25, ssa_8.x
	vec1 32 ssa_30 = fadd ssa_26, ssa_8.y
	vec1 32 ssa_31 = fadd ssa_27, ssa_8.z
	vec1 32 ssa_32 = fadd ssa_28, ssa_8.w
	vec4 32 ssa_33 = vec4 ssa_29, ssa_30, ssa_31, ssa_32
	intrinsic store_output (ssa_33, ssa_0) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	intrinsic store_output (ssa_1, ssa_0) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	/* succs: block_1 */
	block block_1:
}

nir_opt_load_store_vectorize
brw_nir_lower_mem_access_bit_sizes
nir_lower_int64
brw_nir_opt_peephole_ffma
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_1 = intrinsic load_input (ssa_0) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec4 32 ssa_2 = intrinsic load_uniform (ssa_0) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_3 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_4 = intrinsic load_uniform (ssa_3) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_5 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_6 = intrinsic load_uniform (ssa_5) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_7 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_8 = intrinsic load_uniform (ssa_7) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_9 = fmul ssa_2.x, ssa_1.x
	vec1 32 ssa_10 = fmul ssa_2.y, ssa_1.x
	vec1 32 ssa_11 = fmul ssa_2.z, ssa_1.x
	vec1 32 ssa_12 = fmul ssa_2.w, ssa_1.x
	vec1 32 ssa_13 = fmul ssa_4.x, ssa_1.y
	vec1 32 ssa_14 = fmul ssa_4.y, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_4.z, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_4.w, ssa_1.y
	vec1 32 ssa_34 = ffma ssa_2.x, ssa_1.x, ssa_13
	vec1 32 ssa_35 = ffma ssa_2.y, ssa_1.x, ssa_14
	vec1 32 ssa_36 = ffma ssa_2.z, ssa_1.x, ssa_15
	vec1 32 ssa_37 = ffma ssa_2.w, ssa_1.x, ssa_16
	vec1 32 ssa_21 = fmul ssa_6.x, ssa_1.z
	vec1 32 ssa_22 = fmul ssa_6.y, ssa_1.z
	vec1 32 ssa_23 = fmul ssa_6.z, ssa_1.z
	vec1 32 ssa_24 = fmul ssa_6.w, ssa_1.z
	vec1 32 ssa_38 = ffma ssa_6.x, ssa_1.z, ssa_34
	vec1 32 ssa_39 = ffma ssa_6.y, ssa_1.z, ssa_35
	vec1 32 ssa_40 = ffma ssa_6.z, ssa_1.z, ssa_36
	vec1 32 ssa_41 = ffma ssa_6.w, ssa_1.z, ssa_37
	vec1 32 ssa_29 = fadd ssa_38, ssa_8.x
	vec1 32 ssa_30 = fadd ssa_39, ssa_8.y
	vec1 32 ssa_31 = fadd ssa_40, ssa_8.z
	vec1 32 ssa_32 = fadd ssa_41, ssa_8.w
	vec4 32 ssa_33 = vec4 ssa_29, ssa_30, ssa_31, ssa_32
	intrinsic store_output (ssa_33, ssa_0) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	intrinsic store_output (ssa_1, ssa_0) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	/* succs: block_1 */
	block block_1:
}

nir_opt_comparison_pre
nir_opt_algebraic_late
brw_nir_lower_conversions
nir_lower_alu_to_scalar
nir_opt_algebraic_distribute_src_mods
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_VERTEX
inputs: 0
outputs: 0
uniforms: 64
shared: 0
decl_var shader_in INTERP_MODE_NONE vec3 inPos (VERT_ATTRIB_GENERIC0.xyz, 16, 0)
decl_var shader_out INTERP_MODE_NONE vec4 .field0 (VARYING_SLOT_POS.xyzw, 0, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_out INTERP_MODE_NONE float outUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_out INTERP_MODE_NONE vec3 outUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_1 = intrinsic load_input (ssa_0) (0, 0, 160, 272) /* base=0 */ /* component=0 */ /* type=float32 */ /* location=16 slots=2 */
	vec4 32 ssa_2 = intrinsic load_uniform (ssa_0) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_3 = load_const (0x00000010 /* 0.000000 */)
	vec4 32 ssa_4 = intrinsic load_uniform (ssa_3) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_5 = load_const (0x00000020 /* 0.000000 */)
	vec4 32 ssa_6 = intrinsic load_uniform (ssa_5) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_7 = load_const (0x00000030 /* 0.000000 */)
	vec4 32 ssa_8 = intrinsic load_uniform (ssa_7) (0, 64, 0) /* base=0 */ /* range=64 */ /* type=invalid */
	vec1 32 ssa_13 = fmul ssa_4.x, ssa_1.y
	vec1 32 ssa_14 = fmul ssa_4.y, ssa_1.y
	vec1 32 ssa_15 = fmul ssa_4.z, ssa_1.y
	vec1 32 ssa_16 = fmul ssa_4.w, ssa_1.y
	vec1 32 ssa_34 = ffma ssa_2.x, ssa_1.x, ssa_13
	vec1 32 ssa_35 = ffma ssa_2.y, ssa_1.x, ssa_14
	vec1 32 ssa_36 = ffma ssa_2.z, ssa_1.x, ssa_15
	vec1 32 ssa_37 = ffma ssa_2.w, ssa_1.x, ssa_16
	vec1 32 ssa_38 = ffma ssa_6.x, ssa_1.z, ssa_34
	vec1 32 ssa_39 = ffma ssa_6.y, ssa_1.z, ssa_35
	vec1 32 ssa_40 = ffma ssa_6.z, ssa_1.z, ssa_36
	vec1 32 ssa_41 = ffma ssa_6.w, ssa_1.z, ssa_37
	vec1 32 ssa_29 = fadd ssa_38, ssa_8.x
	vec1 32 ssa_30 = fadd ssa_39, ssa_8.y
	vec1 32 ssa_31 = fadd ssa_40, ssa_8.z
	vec1 32 ssa_32 = fadd ssa_41, ssa_8.w
	vec4 32 ssa_33 = vec4 ssa_29, ssa_30, ssa_31, ssa_32
	intrinsic store_output (ssa_33, ssa_0) (0, 15, 0, 160, 128) /* base=0 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=0 slots=1 */	/* .field0 */
	intrinsic store_output (ssa_1, ssa_0) (32, 7, 0, 160, 160) /* base=32 */ /* wrmask=xyz */ /* component=0 */ /* type=float32 */ /* location=32 slots=1 */	/* outUVW */
	/* succs: block_1 */
	block block_1:
}


Instructions before scheduling (reg_alloc 0)
{  1}    0: mul(8) vgrf1:F, g2<0>:F, g5:F 
{  2}    1: mul(8) vgrf2:F, g2<0>:F, g5:F 
{  3}    2: mul(8) vgrf3:F, g2<0>:F, g5:F 
{  4}    3: mul(8) vgrf4:F, g2<0>:F, g5:F 
{  5}    4: mad(8) vgrf5:F, vgrf1:F, g4:F, g2<0>:F 
{  5}    5: mad(8) vgrf6:F, vgrf2:F, g4:F, g2<0>:F 
{  5}    6: mad(8) vgrf7:F, vgrf3:F, g4:F, g2<0>:F 
{  5}    7: mad(8) vgrf8:F, vgrf4:F, g4:F, g2<0>:F 
{  5}    8: mad(8) vgrf9:F, vgrf5:F, g6:F, g3<0>:F 
{  5}    9: mad(8) vgrf10:F, vgrf6:F, g6:F, g3<0>:F 
{  5}   10: mad(8) vgrf11:F, vgrf7:F, g6:F, g3<0>:F 
{  5}   11: mad(8) vgrf12:F, vgrf8:F, g6:F, g3<0>:F 
{  9}   12: add(8) vgrf17+1.0:F, vgrf9:F, g3<0>:F 
{  8}   13: add(8) vgrf17+2.0:F, vgrf10:F, g3<0>:F 
{  7}   14: add(8) vgrf17+3.0:F, vgrf11:F, g3<0>:F 
{  6}   15: add(8) vgrf17+4.0:F, vgrf12:F, g3<0>:F 
{  5}   16: mov(8) vgrf17+0.0:UD, g1:UD NoMask 
{  5}   17: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
{  5}   18: mov(8) vgrf18+0.0:UD, g1:UD NoMask 
{  5}   19: mov(8) vgrf18+1.0:F, g4:F 
{  5}   20: mov(8) vgrf18+2.0:F, g5:F 
{  5}   21: mov(8) vgrf18+3.0:F, g6:F 
{  5}   22: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf18:F 
Maximum   9 registers live at once.
clock    2, scheduled: mul(8) vgrf1:F, g2<0>:F, g5:F 
(register pressure 13)
	child 1, 17 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
	child 0, 1 parents: mad(8) vgrf5:F, vgrf1:F, g4:F, g2<0>:F 
		now available
clock    4, scheduled: mul(8) vgrf2:F, g2<0>:F, g5:F 
(register pressure 14)
	child 1, 16 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
	child 0, 1 parents: mad(8) vgrf6:F, vgrf2:F, g4:F, g2<0>:F 
		now available
clock    6, scheduled: mul(8) vgrf3:F, g2<0>:F, g5:F 
(register pressure 15)
	child 1, 15 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
	child 0, 1 parents: mad(8) vgrf7:F, vgrf3:F, g4:F, g2<0>:F 
		now available
clock    8, scheduled: mul(8) vgrf4:F, g2<0>:F, g5:F 
(register pressure 16)
	child 1, 14 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
	child 0, 1 parents: mad(8) vgrf8:F, vgrf4:F, g4:F, g2<0>:F 
		now available
clock   10, scheduled: mov(8) vgrf17+0.0:UD, g1:UD NoMask 
(register pressure 21)
	child 0, 13 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
clock   12, scheduled: mad(8) vgrf5:F, vgrf1:F, g4:F, g2<0>:F 
(register pressure 21)
	child 1, 12 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
	child 0, 1 parents: mad(8) vgrf9:F, vgrf5:F, g6:F, g3<0>:F 
		now available
clock   14, scheduled: mad(8) vgrf6:F, vgrf2:F, g4:F, g2<0>:F 
(register pressure 21)
	child 1, 11 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
	child 0, 1 parents: mad(8) vgrf10:F, vgrf6:F, g6:F, g3<0>:F 
		now available
clock   16, scheduled: mad(8) vgrf7:F, vgrf3:F, g4:F, g2<0>:F 
(register pressure 21)
	child 1, 10 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
	child 0, 1 parents: mad(8) vgrf11:F, vgrf7:F, g6:F, g3<0>:F 
		now available
clock   18, scheduled: mad(8) vgrf8:F, vgrf4:F, g4:F, g2<0>:F 
(register pressure 20)
	child 1, 9 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
	child 0, 1 parents: mad(8) vgrf12:F, vgrf8:F, g6:F, g3<0>:F 
		now available
clock   20, scheduled: mad(8) vgrf9:F, vgrf5:F, g6:F, g3<0>:F 
(register pressure 20)
	child 1, 8 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
	child 0, 1 parents: add(8) vgrf17+1.0:F, vgrf9:F, g3<0>:F 
		now available
clock   22, scheduled: mad(8) vgrf10:F, vgrf6:F, g6:F, g3<0>:F 
(register pressure 20)
	child 1, 7 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
	child 0, 1 parents: add(8) vgrf17+2.0:F, vgrf10:F, g3<0>:F 
		now available
clock   24, scheduled: mad(8) vgrf11:F, vgrf7:F, g6:F, g3<0>:F 
(register pressure 20)
	child 1, 6 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
	child 0, 1 parents: add(8) vgrf17+3.0:F, vgrf11:F, g3<0>:F 
		now available
clock   26, scheduled: mad(8) vgrf12:F, vgrf8:F, g6:F, g3<0>:F 
(register pressure 20)
	child 1, 5 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
	child 0, 1 parents: add(8) vgrf17+4.0:F, vgrf12:F, g3<0>:F 
		now available
clock   28, scheduled: add(8) vgrf17+1.0:F, vgrf9:F, g3<0>:F 
(register pressure 19)
	child 0, 4 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
clock   30, scheduled: add(8) vgrf17+2.0:F, vgrf10:F, g3<0>:F 
(register pressure 18)
	child 0, 3 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
clock   32, scheduled: add(8) vgrf17+3.0:F, vgrf11:F, g3<0>:F 
(register pressure 17)
	child 0, 2 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
clock   34, scheduled: add(8) vgrf17+4.0:F, vgrf12:F, g3<0>:F 
(register pressure 15)
	child 0, 1 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
		now available
clock   37, scheduled: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
(register pressure 10)
	child 4, 5 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf18:F 
	child 3, 1 parents: mov(8) vgrf18+3.0:F, g6:F 
		now available
	child 2, 1 parents: mov(8) vgrf18+2.0:F, g5:F 
		now available
	child 1, 1 parents: mov(8) vgrf18+1.0:F, g4:F 
		now available
	child 0, 1 parents: mov(8) vgrf18+0.0:UD, g1:UD NoMask 
		now available
clock   39, scheduled: mov(8) vgrf18+0.0:UD, g1:UD NoMask 
(register pressure 10)
	child 0, 4 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf18:F 
clock   41, scheduled: mov(8) vgrf18+1.0:F, g4:F 
(register pressure 9)
	child 0, 3 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf18:F 
clock   43, scheduled: mov(8) vgrf18+2.0:F, g5:F 
(register pressure 8)
	child 0, 2 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf18:F 
clock   45, scheduled: mov(8) vgrf18+3.0:F, g6:F 
(register pressure 7)
	child 0, 1 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf18:F 
		now available
clock   48, scheduled: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf18:F 
(register pressure 2)

Instructions after scheduling (reg_alloc 0)
{  1}    0: mul(8) vgrf1:F, g2<0>:F, g5:F 
{  2}    1: mul(8) vgrf2:F, g2<0>:F, g5:F 
{  3}    2: mul(8) vgrf3:F, g2<0>:F, g5:F 
{  4}    3: mul(8) vgrf4:F, g2<0>:F, g5:F 
{  5}    4: mov(8) vgrf17+0.0:UD, g1:UD NoMask 
{  5}    5: mad(8) vgrf5:F, vgrf1:F, g4:F, g2<0>:F 
{  5}    6: mad(8) vgrf6:F, vgrf2:F, g4:F, g2<0>:F 
{  5}    7: mad(8) vgrf7:F, vgrf3:F, g4:F, g2<0>:F 
{  5}    8: mad(8) vgrf8:F, vgrf4:F, g4:F, g2<0>:F 
{  5}    9: mad(8) vgrf9:F, vgrf5:F, g6:F, g3<0>:F 
{  5}   10: mad(8) vgrf10:F, vgrf6:F, g6:F, g3<0>:F 
{  5}   11: mad(8) vgrf11:F, vgrf7:F, g6:F, g3<0>:F 
{  9}   12: mad(8) vgrf12:F, vgrf8:F, g6:F, g3<0>:F 
{  8}   13: add(8) vgrf17+1.0:F, vgrf9:F, g3<0>:F 
{  7}   14: add(8) vgrf17+2.0:F, vgrf10:F, g3<0>:F 
{  6}   15: add(8) vgrf17+3.0:F, vgrf11:F, g3<0>:F 
{  5}   16: add(8) vgrf17+4.0:F, vgrf12:F, g3<0>:F 
{  5}   17: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf17:F 
{  5}   18: mov(8) vgrf18+0.0:UD, g1:UD NoMask 
{  5}   19: mov(8) vgrf18+1.0:F, g4:F 
{  5}   20: mov(8) vgrf18+2.0:F, g5:F 
{  5}   21: mov(8) vgrf18+3.0:F, g6:F 
{  5}   22: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf18:F 
Maximum   9 registers live at once.
clock    2, scheduled: mul(8) vgrf7:F, g2<0>:F, g5:F 
	child 1, 17 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
	child 0, 1 parents: mad(8) vgrf11:F, vgrf7:F, g4:F, g2<0>:F 
		now available
clock    4, scheduled: mul(8) vgrf8:F, g2<0>:F, g5:F 
	child 1, 16 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
	child 0, 1 parents: mad(8) vgrf12:F, vgrf8:F, g4:F, g2<0>:F 
		now available
clock    6, scheduled: mul(8) vgrf9:F, g2<0>:F, g5:F 
	child 1, 15 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
	child 0, 1 parents: mad(8) vgrf13:F, vgrf9:F, g4:F, g2<0>:F 
		now available
clock    8, scheduled: mul(8) vgrf10:F, g2<0>:F, g5:F 
	child 1, 14 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
	child 0, 1 parents: mad(8) vgrf14:F, vgrf10:F, g4:F, g2<0>:F 
		now available
clock   10, scheduled: mov(8) vgrf19:UD, g1:UD NoMask 
	child 0, 13 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
clock   19, scheduled: mad(8) vgrf11:F, vgrf7:F, g4:F, g2<0>:F 
	child 1, 12 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
	child 0, 1 parents: mad(8) vgrf15:F, vgrf11:F, g6:F, g3<0>:F 
		now available
clock   22, scheduled: mad(8) vgrf12:F, vgrf8:F, g4:F, g2<0>:F 
	child 1, 11 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
	child 0, 1 parents: mad(8) vgrf16:F, vgrf12:F, g6:F, g3<0>:F 
		now available
clock   25, scheduled: mad(8) vgrf13:F, vgrf9:F, g4:F, g2<0>:F 
	child 1, 10 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
	child 0, 1 parents: mad(8) vgrf17+0.0:F, vgrf13:F, g6:F, g3<0>:F 
		now available
clock   28, scheduled: mad(8) vgrf14:F, vgrf10:F, g4:F, g2<0>:F 
	child 1, 9 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
	child 0, 1 parents: mad(8) vgrf18+0.0:F, vgrf14:F, g6:F, g3<0>:F 
		now available
clock   39, scheduled: mad(8) vgrf15:F, vgrf11:F, g6:F, g3<0>:F 
	child 1, 8 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
	child 0, 1 parents: add(8) vgrf20:F, vgrf15:F, g3<0>:F 
		now available
clock   42, scheduled: mad(8) vgrf16:F, vgrf12:F, g6:F, g3<0>:F 
	child 1, 7 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
	child 0, 1 parents: add(8) vgrf21:F, vgrf16:F, g3<0>:F 
		now available
clock   45, scheduled: mad(8) vgrf17+0.0:F, vgrf13:F, g6:F, g3<0>:F 
	child 1, 6 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
	child 0, 1 parents: add(8) vgrf22:F, vgrf17+0.0:F, g3<0>:F 
		now available
clock   48, scheduled: mad(8) vgrf18+0.0:F, vgrf14:F, g6:F, g3<0>:F 
	child 1, 5 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
	child 0, 1 parents: add(8) vgrf23:F, vgrf18+0.0:F, g3<0>:F 
		now available
clock   59, scheduled: add(8) vgrf20:F, vgrf15:F, g3<0>:F 
	child 0, 4 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
clock   62, scheduled: add(8) vgrf21:F, vgrf16:F, g3<0>:F 
	child 0, 3 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
clock   65, scheduled: add(8) vgrf22:F, vgrf17+0.0:F, g3<0>:F 
	child 0, 2 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
clock   68, scheduled: add(8) vgrf23:F, vgrf18+0.0:F, g3<0>:F 
	child 0, 1 parents: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
		now available
clock   84, scheduled: gen8_urb_write_simd8(8) (mlen: 5) (null):UD, vgrf19+0.0:F 
	child 4, 5 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf122+0.0:F 
	child 3, 1 parents: mov(8) vgrf125+0.0:F, g6:F 
		now available
	child 2, 1 parents: mov(8) vgrf124+0.0:F, g5:F 
		now available
	child 1, 1 parents: mov(8) vgrf123+0.0:F, g4:F 
		now available
	child 0, 1 parents: mov(8) vgrf122+0.0:UD, g1:UD NoMask 
		now available
clock   86, scheduled: mov(8) vgrf122+0.0:UD, g1:UD NoMask 
	child 0, 4 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf122+0.0:F 
clock   88, scheduled: mov(8) vgrf123+0.0:F, g4:F 
	child 0, 3 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf122+0.0:F 
clock   90, scheduled: mov(8) vgrf124+0.0:F, g5:F 
	child 0, 2 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf122+0.0:F 
clock   92, scheduled: mov(8) vgrf125+0.0:F, g6:F 
	child 0, 1 parents: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf122+0.0:F 
		now available
clock  108, scheduled: gen8_urb_write_simd8(8) (mlen: 5) (EOT) (null):UD, vgrf122+0.0:F 
nir_opt_move
nir_lower_bool_to_int32
nir_copy_prop
nir_opt_dce
nir_lower_locals_to_regs
nir_convert_from_ssa
nir_opt_dce
nir_opt_rematerialize_compares
brw_nir_apply_sampler_key
nir_lower_subgroups
brw_nir_demote_sample_qualifiers
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_5 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_63 = deref_var &inUVW@2 (shader_in vec3) 
	vec1 32 ssa_69 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_70 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_71 = intrinsic load_interpolated_input (ssa_70, ssa_78) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec1 32 ssa_64 = mov ssa_71.x
	vec1 32 ssa_7 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_65 = deref_var &inUVW@2 (shader_in vec3) 
	vec1 32 ssa_72 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_73 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_79 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_74 = intrinsic load_interpolated_input (ssa_73, ssa_79) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec1 32 ssa_66 = mov ssa_74.y
	vec1 32 ssa_9 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_67 = deref_var &inUVW@2 (shader_in vec3) 
	vec1 32 ssa_75 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_76 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_80 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_77 = intrinsic load_interpolated_input (ssa_76, ssa_80) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec1 32 ssa_68 = mov ssa_77.z
	vec1 32 ssa_11 = fadd ssa_66, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_64, ssa_21
	vec1 32 ssa_25 = fmul ssa_66, ssa_22
	vec1 32 ssa_26 = fmul ssa_68, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_56
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec1 32 ssa_61 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	vec1 32 ssa_81 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_62, ssa_81) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

brw_nir_move_interpolation_to_top
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_5 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_63 = deref_var &inUVW@2 (shader_in vec3) 
	vec1 32 ssa_69 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_70 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_71 = intrinsic load_interpolated_input (ssa_70, ssa_78) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec1 32 ssa_64 = mov ssa_71.x
	vec1 32 ssa_7 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_65 = deref_var &inUVW@2 (shader_in vec3) 
	vec1 32 ssa_72 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_73 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_79 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_74 = intrinsic load_interpolated_input (ssa_73, ssa_79) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec1 32 ssa_66 = mov ssa_74.y
	vec1 32 ssa_9 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_67 = deref_var &inUVW@2 (shader_in vec3) 
	vec1 32 ssa_75 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_76 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_80 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_77 = intrinsic load_interpolated_input (ssa_76, ssa_80) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec1 32 ssa_68 = mov ssa_77.z
	vec1 32 ssa_11 = fadd ssa_66, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_64, ssa_21
	vec1 32 ssa_25 = fmul ssa_66, ssa_22
	vec1 32 ssa_26 = fmul ssa_68, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_56
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec1 32 ssa_61 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	vec1 32 ssa_81 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_62, ssa_81) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

brw_nir_lower_scoped_barriers
nir_opt_combine_memory_barriers
nir_opt_algebraic_before_ffma
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec1 32 ssa_5 = deref_var &inUVW (shader_in float) 
	vec1 32 ssa_63 = deref_var &inUVW@2 (shader_in vec3) 
	vec1 32 ssa_69 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_70 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_71 = intrinsic load_interpolated_input (ssa_70, ssa_78) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec1 32 ssa_64 = mov ssa_71.x
	vec1 32 ssa_7 = deref_var &inUVW@0 (shader_in float) 
	vec1 32 ssa_65 = deref_var &inUVW@2 (shader_in vec3) 
	vec1 32 ssa_72 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_73 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_79 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_74 = intrinsic load_interpolated_input (ssa_73, ssa_79) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec1 32 ssa_66 = mov ssa_74.y
	vec1 32 ssa_9 = deref_var &inUVW@1 (shader_in float) 
	vec1 32 ssa_67 = deref_var &inUVW@2 (shader_in vec3) 
	vec1 32 ssa_75 = load_const (0x00000000 /* 0.000000 */)
	vec2 32 ssa_76 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_80 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_77 = intrinsic load_interpolated_input (ssa_76, ssa_80) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec1 32 ssa_68 = mov ssa_77.z
	vec1 32 ssa_11 = fadd ssa_74.y, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_71.x, ssa_21
	vec1 32 ssa_25 = fmul ssa_74.y, ssa_22
	vec1 32 ssa_26 = fmul ssa_77.z, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_56
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec1 32 ssa_61 = deref_var &outFragColor (shader_out vec4) 
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	vec1 32 ssa_81 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_62, ssa_81) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec2 32 ssa_70 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_71 = intrinsic load_interpolated_input (ssa_70, ssa_78) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec2 32 ssa_73 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_79 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_74 = intrinsic load_interpolated_input (ssa_73, ssa_79) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec2 32 ssa_76 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_80 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_77 = intrinsic load_interpolated_input (ssa_76, ssa_80) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec1 32 ssa_11 = fadd ssa_74.y, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_71.x, ssa_21
	vec1 32 ssa_25 = fmul ssa_74.y, ssa_22
	vec1 32 ssa_26 = fmul ssa_77.z, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_56 = load_const (0x00000000 /* 0.000000 */)
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_56
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	vec1 32 ssa_81 = load_const (0x00000000 /* 0.000000 */)
	intrinsic store_output (ssa_62, ssa_81) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_cse
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec2 32 ssa_70 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_78 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_71 = intrinsic load_interpolated_input (ssa_70, ssa_78) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec1 32 ssa_11 = fadd ssa_71.y, ssa_4
	vec1 32 ssa_12 = fmul ssa_1, ssa_11
	vec1 32 ssa_13 = fmul ssa_2, ssa_11
	vec1 32 ssa_14 = fmul ssa_3, ssa_11
	vec1 32 ssa_15 = fsat ssa_12
	vec1 32 ssa_16 = fsat ssa_13
	vec1 32 ssa_17 = fsat ssa_14
	vec1 32 ssa_18 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_19 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_20 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_21 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_22 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_23 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_24 = fmul ssa_71.x, ssa_21
	vec1 32 ssa_25 = fmul ssa_71.y, ssa_22
	vec1 32 ssa_26 = fmul ssa_71.z, ssa_23
	vec1 32 ssa_27 = ffract ssa_24
	vec1 32 ssa_28 = ffract ssa_25
	vec1 32 ssa_29 = ffract ssa_26
	vec1 32 ssa_30 = fadd ssa_28, ssa_20
	vec1 32 ssa_31 = fadd ssa_27, ssa_20
	vec1 32 ssa_32 = fadd ssa_29, ssa_20
	vec1 32 ssa_33 = fmul ssa_27, ssa_30
	vec1 32 ssa_34 = fmul ssa_28, ssa_31
	vec1 32 ssa_35 = fadd ssa_33, ssa_34
	vec1 32 ssa_36 = fmul ssa_29, ssa_32
	vec1 32 ssa_37 = fadd ssa_35, ssa_36
	vec1 32 ssa_38 = fadd ssa_27, ssa_37
	vec1 32 ssa_39 = fadd ssa_28, ssa_37
	vec1 32 ssa_40 = fadd ssa_29, ssa_37
	vec1 32 ssa_41 = fadd ssa_38, ssa_39
	vec1 32 ssa_42 = fmul ssa_41, ssa_40
	vec1 32 ssa_43 = fadd ssa_38, ssa_40
	vec1 32 ssa_44 = fmul ssa_43, ssa_39
	vec1 32 ssa_45 = fadd ssa_42, ssa_44
	vec1 32 ssa_46 = fadd ssa_39, ssa_40
	vec1 32 ssa_47 = fmul ssa_46, ssa_38
	vec1 32 ssa_48 = fadd ssa_45, ssa_47
	vec1 32 ssa_49 = ffract ssa_48
	vec1 1 ssa_50 = fge ssa_49, ssa_19
	vec1 32 ssa_51 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_52 = fadd ssa_49, ssa_51
	vec1 32 ssa_53 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_54 = fmul ssa_52, ssa_53
	vec1 32 ssa_55 = fpow ssa_54, ssa_18
	vec1 32 ssa_57 = bcsel ssa_50, ssa_55, ssa_78
	vec1 32 ssa_58 = fadd ssa_57, ssa_15
	vec1 32 ssa_59 = fadd ssa_57, ssa_16
	vec1 32 ssa_60 = fadd ssa_57, ssa_17
	vec4 32 ssa_62 = vec4 ssa_58, ssa_59, ssa_60, ssa_0
	intrinsic store_output (ssa_62, ssa_78) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_lower_flrp
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_split_array_vars
nir_shrink_vec_array_vars
nir_opt_deref
nir_lower_vars_to_ssa
nir_opt_copy_prop_vars
nir_opt_dead_write_vars
nir_opt_combine_stores
nir_lower_alu_to_scalar
nir_copy_prop
nir_lower_phis_to_scalar
nir_copy_prop
nir_opt_dce
nir_opt_cse
nir_opt_combine_stores
nir_opt_peephole_select
nir_opt_peephole_select
nir_opt_intrinsics
nir_opt_idiv_const
nir_opt_algebraic
nir_opt_constant_folding
nir_opt_dead_cf
nir_opt_trivial_continues
nir_opt_if
nir_opt_conditional_discard
nir_opt_loop_unroll
nir_opt_remove_phis
nir_opt_undef
nir_lower_pack
nir_remove_dead_variables
nir_opt_load_store_vectorize
brw_nir_lower_mem_access_bit_sizes
nir_lower_int64
brw_nir_opt_peephole_ffma
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec2 32 ssa_5 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = intrinsic load_interpolated_input (ssa_5, ssa_6) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec1 32 ssa_8 = fadd ssa_7.y, ssa_4
	vec1 32 ssa_9 = fmul ssa_1, ssa_8
	vec1 32 ssa_10 = fmul ssa_2, ssa_8
	vec1 32 ssa_11 = fmul ssa_3, ssa_8
	vec1 32 ssa_12 = fsat ssa_9
	vec1 32 ssa_13 = fsat ssa_10
	vec1 32 ssa_14 = fsat ssa_11
	vec1 32 ssa_15 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_16 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_17 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_18 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_19 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_20 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_21 = fmul ssa_7.x, ssa_18
	vec1 32 ssa_22 = fmul ssa_7.y, ssa_19
	vec1 32 ssa_23 = fmul ssa_7.z, ssa_20
	vec1 32 ssa_24 = ffract ssa_21
	vec1 32 ssa_25 = ffract ssa_22
	vec1 32 ssa_26 = ffract ssa_23
	vec1 32 ssa_27 = fadd ssa_25, ssa_17
	vec1 32 ssa_28 = fadd ssa_24, ssa_17
	vec1 32 ssa_29 = fadd ssa_26, ssa_17
	vec1 32 ssa_30 = fmul ssa_24, ssa_27
	vec1 32 ssa_31 = fmul ssa_25, ssa_28
	vec1 32 ssa_58 = ffma ssa_24, ssa_27, ssa_31
	vec1 32 ssa_33 = fmul ssa_26, ssa_29
	vec1 32 ssa_59 = ffma ssa_26, ssa_29, ssa_58
	vec1 32 ssa_35 = fadd ssa_24, ssa_59
	vec1 32 ssa_36 = fadd ssa_25, ssa_59
	vec1 32 ssa_37 = fadd ssa_26, ssa_59
	vec1 32 ssa_38 = fadd ssa_35, ssa_36
	vec1 32 ssa_39 = fmul ssa_38, ssa_37
	vec1 32 ssa_40 = fadd ssa_35, ssa_37
	vec1 32 ssa_41 = fmul ssa_40, ssa_36
	vec1 32 ssa_60 = ffma ssa_38, ssa_37, ssa_41
	vec1 32 ssa_43 = fadd ssa_36, ssa_37
	vec1 32 ssa_44 = fmul ssa_43, ssa_35
	vec1 32 ssa_61 = ffma ssa_43, ssa_35, ssa_60
	vec1 32 ssa_46 = ffract ssa_61
	vec1 1 ssa_47 = fge ssa_46, ssa_16
	vec1 32 ssa_48 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_49 = fadd ssa_46, ssa_48
	vec1 32 ssa_50 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_51 = fmul ssa_49, ssa_50
	vec1 32 ssa_52 = fpow ssa_51, ssa_15
	vec1 32 ssa_53 = bcsel ssa_47, ssa_52, ssa_6
	vec1 32 ssa_54 = fadd ssa_53, ssa_12
	vec1 32 ssa_55 = fadd ssa_53, ssa_13
	vec1 32 ssa_56 = fadd ssa_53, ssa_14
	vec4 32 ssa_57 = vec4 ssa_54, ssa_55, ssa_56, ssa_0
	intrinsic store_output (ssa_57, ssa_6) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_comparison_pre
nir_opt_algebraic_late
brw_nir_lower_conversions
nir_lower_alu_to_scalar
nir_opt_algebraic_distribute_src_mods
nir_copy_prop
nir_opt_dce
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec2 32 ssa_5 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = intrinsic load_interpolated_input (ssa_5, ssa_6) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec1 32 ssa_8 = fadd ssa_7.y, ssa_4
	vec1 32 ssa_9 = fmul ssa_1, ssa_8
	vec1 32 ssa_10 = fmul ssa_2, ssa_8
	vec1 32 ssa_11 = fmul ssa_3, ssa_8
	vec1 32 ssa_12 = fsat ssa_9
	vec1 32 ssa_13 = fsat ssa_10
	vec1 32 ssa_14 = fsat ssa_11
	vec1 32 ssa_15 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_16 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_17 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_18 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_19 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_20 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_21 = fmul ssa_7.x, ssa_18
	vec1 32 ssa_22 = fmul ssa_7.y, ssa_19
	vec1 32 ssa_23 = fmul ssa_7.z, ssa_20
	vec1 32 ssa_24 = ffract ssa_21
	vec1 32 ssa_25 = ffract ssa_22
	vec1 32 ssa_26 = ffract ssa_23
	vec1 32 ssa_27 = fadd ssa_25, ssa_17
	vec1 32 ssa_28 = fadd ssa_24, ssa_17
	vec1 32 ssa_29 = fadd ssa_26, ssa_17
	vec1 32 ssa_31 = fmul ssa_25, ssa_28
	vec1 32 ssa_58 = ffma ssa_24, ssa_27, ssa_31
	vec1 32 ssa_59 = ffma ssa_26, ssa_29, ssa_58
	vec1 32 ssa_35 = fadd ssa_24, ssa_59
	vec1 32 ssa_36 = fadd ssa_25, ssa_59
	vec1 32 ssa_37 = fadd ssa_26, ssa_59
	vec1 32 ssa_38 = fadd ssa_35, ssa_36
	vec1 32 ssa_40 = fadd ssa_35, ssa_37
	vec1 32 ssa_41 = fmul ssa_40, ssa_36
	vec1 32 ssa_60 = ffma ssa_38, ssa_37, ssa_41
	vec1 32 ssa_43 = fadd ssa_36, ssa_37
	vec1 32 ssa_61 = ffma ssa_43, ssa_35, ssa_60
	vec1 32 ssa_46 = ffract ssa_61
	vec1 1 ssa_47 = fge ssa_46, ssa_16
	vec1 32 ssa_48 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_49 = fadd ssa_46, ssa_48
	vec1 32 ssa_50 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_51 = fmul ssa_49, ssa_50
	vec1 32 ssa_52 = fpow ssa_51, ssa_15
	vec1 32 ssa_53 = bcsel ssa_47, ssa_52, ssa_6
	vec1 32 ssa_54 = fadd ssa_53, ssa_12
	vec1 32 ssa_55 = fadd ssa_53, ssa_13
	vec1 32 ssa_56 = fadd ssa_53, ssa_14
	vec4 32 ssa_57 = vec4 ssa_54, ssa_55, ssa_56, ssa_0
	intrinsic store_output (ssa_57, ssa_6) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_opt_move
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec2 32 ssa_5 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = intrinsic load_interpolated_input (ssa_5, ssa_6) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec1 32 ssa_8 = fadd ssa_7.y, ssa_4
	vec1 32 ssa_9 = fmul ssa_1, ssa_8
	vec1 32 ssa_10 = fmul ssa_2, ssa_8
	vec1 32 ssa_11 = fmul ssa_3, ssa_8
	vec1 32 ssa_12 = fsat ssa_9
	vec1 32 ssa_13 = fsat ssa_10
	vec1 32 ssa_14 = fsat ssa_11
	vec1 32 ssa_15 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_16 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_17 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_18 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_19 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_20 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_21 = fmul ssa_7.x, ssa_18
	vec1 32 ssa_22 = fmul ssa_7.y, ssa_19
	vec1 32 ssa_23 = fmul ssa_7.z, ssa_20
	vec1 32 ssa_24 = ffract ssa_21
	vec1 32 ssa_25 = ffract ssa_22
	vec1 32 ssa_26 = ffract ssa_23
	vec1 32 ssa_27 = fadd ssa_25, ssa_17
	vec1 32 ssa_28 = fadd ssa_24, ssa_17
	vec1 32 ssa_29 = fadd ssa_26, ssa_17
	vec1 32 ssa_31 = fmul ssa_25, ssa_28
	vec1 32 ssa_58 = ffma ssa_24, ssa_27, ssa_31
	vec1 32 ssa_59 = ffma ssa_26, ssa_29, ssa_58
	vec1 32 ssa_35 = fadd ssa_24, ssa_59
	vec1 32 ssa_36 = fadd ssa_25, ssa_59
	vec1 32 ssa_37 = fadd ssa_26, ssa_59
	vec1 32 ssa_38 = fadd ssa_35, ssa_36
	vec1 32 ssa_40 = fadd ssa_35, ssa_37
	vec1 32 ssa_41 = fmul ssa_40, ssa_36
	vec1 32 ssa_60 = ffma ssa_38, ssa_37, ssa_41
	vec1 32 ssa_43 = fadd ssa_36, ssa_37
	vec1 32 ssa_61 = ffma ssa_43, ssa_35, ssa_60
	vec1 32 ssa_46 = ffract ssa_61
	vec1 32 ssa_48 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_49 = fadd ssa_46, ssa_48
	vec1 32 ssa_50 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_51 = fmul ssa_49, ssa_50
	vec1 32 ssa_52 = fpow ssa_51, ssa_15
	vec1 1 ssa_47 = fge ssa_46, ssa_16
	vec1 32 ssa_53 = bcsel ssa_47, ssa_52, ssa_6
	vec1 32 ssa_54 = fadd ssa_53, ssa_12
	vec1 32 ssa_55 = fadd ssa_53, ssa_13
	vec1 32 ssa_56 = fadd ssa_53, ssa_14
	vec4 32 ssa_57 = vec4 ssa_54, ssa_55, ssa_56, ssa_0
	intrinsic store_output (ssa_57, ssa_6) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}

nir_lower_bool_to_int32
shader: MESA_SHADER_FRAGMENT
inputs: 0
outputs: 0
uniforms: 0
shared: 0
decl_var shader_out INTERP_MODE_NONE vec4 outFragColor (FRAG_RESULT_DATA0.xyzw, 8, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW (VARYING_SLOT_VAR0.x, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@0 (VARYING_SLOT_VAR0.y, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH float inUVW@1 (VARYING_SLOT_VAR0.z, 32, 0)
decl_var shader_in INTERP_MODE_SMOOTH vec3 inUVW@2 (VARYING_SLOT_VAR0.xyz, 32, 0)
decl_function main (0 params)

impl main {
	block block_0:
	/* preds: */
	vec1 32 ssa_0 = load_const (0x3f800000 /* 1.000000 */)
	vec1 32 ssa_1 = load_const (0x3dcccccd /* 0.100000 */)
	vec1 32 ssa_2 = load_const (0x3e19999a /* 0.150000 */)
	vec1 32 ssa_3 = load_const (0x3ecccccd /* 0.400000 */)
	vec1 32 ssa_4 = load_const (0x3e800000 /* 0.250000 */)
	vec2 32 ssa_5 = intrinsic load_barycentric_pixel () (1) /* interp_mode=1 */
	vec1 32 ssa_6 = load_const (0x00000000 /* 0.000000 */)
	vec3 32 ssa_7 = intrinsic load_interpolated_input (ssa_5, ssa_6) (32, 0, 288) /* base=32 */ /* component=0 */ /* location=32 slots=2 */	/* inUVW */
	vec1 32 ssa_8 = fadd ssa_7.y, ssa_4
	vec1 32 ssa_9 = fmul ssa_1, ssa_8
	vec1 32 ssa_10 = fmul ssa_2, ssa_8
	vec1 32 ssa_11 = fmul ssa_3, ssa_8
	vec1 32 ssa_12 = fsat ssa_9
	vec1 32 ssa_13 = fsat ssa_10
	vec1 32 ssa_14 = fsat ssa_11
	vec1 32 ssa_15 = load_const (0x41800000 /* 16.000000 */)
	vec1 32 ssa_16 = load_const (0x3f7d70a4 /* 0.990000 */)
	vec1 32 ssa_17 = load_const (0x4199851f /* 19.190001 */)
	vec1 32 ssa_18 = load_const (0x43ddf2d1 /* 443.897003 */)
	vec1 32 ssa_19 = load_const (0x43dcb625 /* 441.423004 */)
	vec1 32 ssa_20 = load_const (0x43da98f6 /* 437.195007 */)
	vec1 32 ssa_21 = fmul ssa_7.x, ssa_18
	vec1 32 ssa_22 = fmul ssa_7.y, ssa_19
	vec1 32 ssa_23 = fmul ssa_7.z, ssa_20
	vec1 32 ssa_24 = ffract ssa_21
	vec1 32 ssa_25 = ffract ssa_22
	vec1 32 ssa_26 = ffract ssa_23
	vec1 32 ssa_27 = fadd ssa_25, ssa_17
	vec1 32 ssa_28 = fadd ssa_24, ssa_17
	vec1 32 ssa_29 = fadd ssa_26, ssa_17
	vec1 32 ssa_31 = fmul ssa_25, ssa_28
	vec1 32 ssa_58 = ffma ssa_24, ssa_27, ssa_31
	vec1 32 ssa_59 = ffma ssa_26, ssa_29, ssa_58
	vec1 32 ssa_35 = fadd ssa_24, ssa_59
	vec1 32 ssa_36 = fadd ssa_25, ssa_59
	vec1 32 ssa_37 = fadd ssa_26, ssa_59
	vec1 32 ssa_38 = fadd ssa_35, ssa_36
	vec1 32 ssa_40 = fadd ssa_35, ssa_37
	vec1 32 ssa_41 = fmul ssa_40, ssa_36
	vec1 32 ssa_60 = ffma ssa_38, ssa_37, ssa_41
	vec1 32 ssa_43 = fadd ssa_36, ssa_37
	vec1 32 ssa_61 = ffma ssa_43, ssa_35, ssa_60
	vec1 32 ssa_46 = ffract ssa_61
	vec1 32 ssa_48 = load_const (0xbf7d70a4 /* -0.990000 */)
	vec1 32 ssa_49 = fadd ssa_46, ssa_48
	vec1 32 ssa_50 = load_const (0x42c8000d /* 100.000099 */)
	vec1 32 ssa_51 = fmul ssa_49, ssa_50
	vec1 32 ssa_52 = fpow ssa_51, ssa_15
	vec1 32 ssa_47 = fge32 ssa_46, ssa_16
	vec1 32 ssa_53 = b32csel ssa_47, ssa_52, ssa_6
	vec1 32 ssa_54 = fadd ssa_53, ssa_12
	vec1 32 ssa_55 = fadd ssa_53, ssa_13
	vec1 32 ssa_56 = fadd ssa_53, ssa_14
	vec4 32 ssa_57 = vec4 ssa_54, ssa_55, ssa_56, ssa_0
	intrinsic store_output (ssa_57, ssa_6) (8, 15, 0, 160, 132) /* base=8 */ /* wrmask=xyzw */ /* component=0 */ /* type=float32 */ /* location=4 slots=1 */	/* outFragColor */
	/* succs: block_1 */
	block block_1:
}


Instructions before scheduling (reg_alloc 0)
{  1}    0: linterp(8) vgrf32:F, g2:F, g4<0>:F 
{  2}    1: linterp(8) vgrf33:F, g2:F, g4<0>:F 
{  3}    2: linterp(8) vgrf0:F, g2:F, g5<0>:F 
{  4}    3: add(8) vgrf1:F, vgrf33:F, 0.25f 
{  5}    4: mul.sat(8) vgrf2:F, vgrf1:F, 0.1f 
{  6}    5: mul.sat(8) vgrf3:F, vgrf1:F, 0.15f 
{  7}    6: mul.sat(8) vgrf4:F, vgrf1:F, 0.4f 
{  7}    7: mul(8) vgrf5:F, vgrf32:F, 443.897f 
{  7}    8: mul(8) vgrf6:F, vgrf33:F, 441.423f 
{  7}    9: mul(8) vgrf7:F, vgrf0:F, 437.195f 
{  7}   10: frc(8) vgrf8:F, vgrf5:F 
{  7}   11: frc(8) vgrf9:F, vgrf6:F 
{  7}   12: frc(8) vgrf10:F, vgrf7:F 
{  7}   13: add(8) vgrf11:F, vgrf9:F, 19.19f 
{  8}   14: add(8) vgrf12:F, vgrf8:F, 19.19f 
{  9}   15: add(8) vgrf13:F, vgrf10:F, 19.19f 
{ 10}   16: mul(8) vgrf14:F, vgrf9:F, vgrf12:F 
{ 10}   17: mad(8) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F 
{  9}   18: mad(8) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F 
{  8}   19: add(8) vgrf17:F, vgrf8:F, vgrf16:F 
{  8}   20: add(8) vgrf18:F, vgrf9:F, vgrf16:F 
{  8}   21: add(8) vgrf19:F, vgrf10:F, vgrf16:F 
{  7}   22: add(8) vgrf20:F, vgrf17:F, vgrf18:F 
{  8}   23: add(8) vgrf21:F, vgrf17:F, vgrf19:F 
{  9}   24: mul(8) vgrf22:F, vgrf21:F, vgrf18:F 
{  9}   25: mad(8) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F 
{  8}   26: add(8) vgrf24:F, vgrf18:F, vgrf19:F 
{  7}   27: mad(8) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F 
{  5}   28: frc(8) vgrf26:F, vgrf25:F 
{  5}   29: add.ge.f0.0(8) vgrf27:F, vgrf26:F, -0.99f 
{  5}   30: mul(8) vgrf28:F, vgrf27:F, 100f 
{  5}   31: pow(8) vgrf29:F, vgrf28:F, 16f 
{  5}   32: (+f0.0) sel(8) vgrf30:UD, vgrf29:UD, 0u 
{  8}   33: add(8) vgrf34+0.0:F, vgrf30:F, vgrf2:F 
{  7}   34: add(8) vgrf34+1.0:F, vgrf30:F, vgrf3:F 
{  6}   35: add(8) vgrf34+2.0:F, vgrf30:F, vgrf4:F 
{  4}   36: mov(8) vgrf34+3.0:F, 1f 
{  4}   37: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
Maximum  10 registers live at once.
clock    2, scheduled: linterp(8) vgrf32:F, g2:F, g4<0>:F 
(register pressure 7)
	child 1, 37 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 1 parents: mul(8) vgrf5:F, vgrf32:F, 443.897f 
		now available
clock    4, scheduled: linterp(8) vgrf33:F, g2:F, g4<0>:F 
(register pressure 7)
	child 2, 36 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 1, 1 parents: mul(8) vgrf6:F, vgrf33:F, 441.423f 
		now available
	child 0, 1 parents: add(8) vgrf1:F, vgrf33:F, 0.25f 
		now available
clock    6, scheduled: linterp(8) vgrf0:F, g2:F, g5<0>:F 
(register pressure 5)
	child 1, 35 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 1 parents: mul(8) vgrf7:F, vgrf0:F, 437.195f 
		now available
clock    8, scheduled: mov(8) vgrf34+3.0:F, 1f 
(register pressure 9)
	child 0, 34 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
clock   10, scheduled: mul(8) vgrf5:F, vgrf32:F, 443.897f 
(register pressure 9)
	child 1, 33 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 1 parents: frc(8) vgrf8:F, vgrf5:F 
		now available
clock   12, scheduled: add(8) vgrf1:F, vgrf33:F, 0.25f 
(register pressure 10)
	child 3, 32 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 2, 1 parents: mul.sat(8) vgrf4:F, vgrf1:F, 0.4f 
		now available
	child 1, 1 parents: mul.sat(8) vgrf3:F, vgrf1:F, 0.15f 
		now available
	child 0, 1 parents: mul.sat(8) vgrf2:F, vgrf1:F, 0.1f 
		now available
clock   14, scheduled: mul(8) vgrf6:F, vgrf33:F, 441.423f 
(register pressure 10)
	child 1, 31 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 1 parents: frc(8) vgrf9:F, vgrf6:F 
		now available
clock   16, scheduled: mul(8) vgrf7:F, vgrf0:F, 437.195f 
(register pressure 10)
	child 1, 30 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 1 parents: frc(8) vgrf10:F, vgrf7:F 
		now available
clock   18, scheduled: frc(8) vgrf8:F, vgrf5:F 
(register pressure 10)
	child 3, 29 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 2, 2 parents: add(8) vgrf17:F, vgrf8:F, vgrf16:F 
	child 1, 3 parents: mad(8) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F 
	child 0, 1 parents: add(8) vgrf12:F, vgrf8:F, 19.19f 
		now available
clock   20, scheduled: mul.sat(8) vgrf2:F, vgrf1:F, 0.1f 
(register pressure 11)
	child 1, 28 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 2 parents: add(8) vgrf34+0.0:F, vgrf30:F, vgrf2:F 
clock   22, scheduled: mul.sat(8) vgrf3:F, vgrf1:F, 0.15f 
(register pressure 12)
	child 1, 27 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 2 parents: add(8) vgrf34+1.0:F, vgrf30:F, vgrf3:F 
clock   24, scheduled: mul.sat(8) vgrf4:F, vgrf1:F, 0.4f 
(register pressure 12)
	child 1, 26 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 2 parents: add(8) vgrf34+2.0:F, vgrf30:F, vgrf4:F 
clock   26, scheduled: frc(8) vgrf9:F, vgrf6:F 
(register pressure 12)
	child 3, 25 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 2, 2 parents: add(8) vgrf18:F, vgrf9:F, vgrf16:F 
	child 1, 2 parents: mul(8) vgrf14:F, vgrf9:F, vgrf12:F 
	child 0, 1 parents: add(8) vgrf11:F, vgrf9:F, 19.19f 
		now available
clock   28, scheduled: frc(8) vgrf10:F, vgrf7:F 
(register pressure 12)
	child 3, 24 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 2, 2 parents: add(8) vgrf19:F, vgrf10:F, vgrf16:F 
	child 1, 3 parents: mad(8) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F 
	child 0, 1 parents: add(8) vgrf13:F, vgrf10:F, 19.19f 
		now available
clock   30, scheduled: add(8) vgrf12:F, vgrf8:F, 19.19f 
(register pressure 13)
	child 1, 23 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 1 parents: mul(8) vgrf14:F, vgrf9:F, vgrf12:F 
		now available
clock   32, scheduled: add(8) vgrf11:F, vgrf9:F, 19.19f 
(register pressure 14)
	child 1, 22 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 2 parents: mad(8) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F 
clock   34, scheduled: add(8) vgrf13:F, vgrf10:F, 19.19f 
(register pressure 15)
	child 1, 21 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 2 parents: mad(8) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F 
clock   36, scheduled: mul(8) vgrf14:F, vgrf9:F, vgrf12:F 
(register pressure 15)
	child 1, 20 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 1 parents: mad(8) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F 
		now available
clock   39, scheduled: mad(8) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F 
(register pressure 14)
	child 1, 19 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 1 parents: mad(8) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F 
		now available
clock   42, scheduled: mad(8) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F 
(register pressure 13)
	child 3, 18 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 2, 1 parents: add(8) vgrf19:F, vgrf10:F, vgrf16:F 
		now available
	child 1, 1 parents: add(8) vgrf18:F, vgrf9:F, vgrf16:F 
		now available
	child 0, 1 parents: add(8) vgrf17:F, vgrf8:F, vgrf16:F 
		now available
clock   45, scheduled: add(8) vgrf17:F, vgrf8:F, vgrf16:F 
(register pressure 13)
	child 3, 17 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 2, 3 parents: mad(8) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F 
	child 1, 2 parents: add(8) vgrf21:F, vgrf17:F, vgrf19:F 
	child 0, 2 parents: add(8) vgrf20:F, vgrf17:F, vgrf18:F 
clock   47, scheduled: add(8) vgrf18:F, vgrf9:F, vgrf16:F 
(register pressure 13)
	child 3, 16 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 2, 2 parents: add(8) vgrf24:F, vgrf18:F, vgrf19:F 
	child 1, 2 parents: mul(8) vgrf22:F, vgrf21:F, vgrf18:F 
	child 0, 1 parents: add(8) vgrf20:F, vgrf17:F, vgrf18:F 
		now available
clock   49, scheduled: add(8) vgrf19:F, vgrf10:F, vgrf16:F 
(register pressure 12)
	child 3, 15 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 2, 1 parents: add(8) vgrf24:F, vgrf18:F, vgrf19:F 
		now available
	child 1, 3 parents: mad(8) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F 
	child 0, 1 parents: add(8) vgrf21:F, vgrf17:F, vgrf19:F 
		now available
clock   51, scheduled: add(8) vgrf20:F, vgrf17:F, vgrf18:F 
(register pressure 13)
	child 1, 14 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 2 parents: mad(8) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F 
clock   53, scheduled: add(8) vgrf21:F, vgrf17:F, vgrf19:F 
(register pressure 14)
	child 1, 13 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 1 parents: mul(8) vgrf22:F, vgrf21:F, vgrf18:F 
		now available
clock   55, scheduled: add(8) vgrf24:F, vgrf18:F, vgrf19:F 
(register pressure 15)
	child 1, 12 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 2 parents: mad(8) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F 
clock   57, scheduled: mul(8) vgrf22:F, vgrf21:F, vgrf18:F 
(register pressure 14)
	child 1, 11 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 1 parents: mad(8) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F 
		now available
clock   60, scheduled: mad(8) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F 
(register pressure 12)
	child 1, 10 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 1 parents: mad(8) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F 
		now available
clock   63, scheduled: mad(8) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F 
(register pressure 10)
	child 1, 9 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 1 parents: frc(8) vgrf26:F, vgrf25:F 
		now available
clock   66, scheduled: frc(8) vgrf26:F, vgrf25:F 
(register pressure 10)
	child 1, 8 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 1 parents: add.ge.f0.0(8) vgrf27:F, vgrf26:F, -0.99f 
		now available
clock   69, scheduled: add.ge.f0.0(8) vgrf27:F, vgrf26:F, -0.99f 
(register pressure 10)
	child 2, 7 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 1, 2 parents: (+f0.0) sel(8) vgrf30:UD, vgrf29:UD, 0u 
	child 0, 1 parents: mul(8) vgrf28:F, vgrf27:F, 100f 
		now available
clock   72, scheduled: mul(8) vgrf28:F, vgrf27:F, 100f 
(register pressure 10)
	child 1, 6 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 1 parents: pow(8) vgrf29:F, vgrf28:F, 16f 
		now available
clock   75, scheduled: pow(8) vgrf29:F, vgrf28:F, 16f 
(register pressure 10)
	child 1, 5 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 0, 1 parents: (+f0.0) sel(8) vgrf30:UD, vgrf29:UD, 0u 
		now available
clock   78, scheduled: (+f0.0) sel(8) vgrf30:UD, vgrf29:UD, 0u 
(register pressure 10)
	child 3, 4 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
	child 2, 1 parents: add(8) vgrf34+2.0:F, vgrf30:F, vgrf4:F 
		now available
	child 1, 1 parents: add(8) vgrf34+1.0:F, vgrf30:F, vgrf3:F 
		now available
	child 0, 1 parents: add(8) vgrf34+0.0:F, vgrf30:F, vgrf2:F 
		now available
clock   81, scheduled: add(8) vgrf34+0.0:F, vgrf30:F, vgrf2:F 
(register pressure 9)
	child 0, 3 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
clock   83, scheduled: add(8) vgrf34+1.0:F, vgrf30:F, vgrf3:F 
(register pressure 8)
	child 0, 2 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
clock   85, scheduled: add(8) vgrf34+2.0:F, vgrf30:F, vgrf4:F 
(register pressure 6)
	child 0, 1 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
		now available
clock   88, scheduled: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
(register pressure 2)

Instructions after scheduling (reg_alloc 0)
{  1}    0: linterp(8) vgrf32:F, g2:F, g4<0>:F 
{  2}    1: linterp(8) vgrf33:F, g2:F, g4<0>:F 
{  3}    2: linterp(8) vgrf0:F, g2:F, g5<0>:F 
{  4}    3: mov(8) vgrf34+3.0:F, 1f 
{  5}    4: mul(8) vgrf5:F, vgrf32:F, 443.897f 
{  6}    5: add(8) vgrf1:F, vgrf33:F, 0.25f 
{  7}    6: mul(8) vgrf6:F, vgrf33:F, 441.423f 
{  7}    7: mul(8) vgrf7:F, vgrf0:F, 437.195f 
{  7}    8: frc(8) vgrf8:F, vgrf5:F 
{  7}    9: mul.sat(8) vgrf2:F, vgrf1:F, 0.1f 
{  7}   10: mul.sat(8) vgrf3:F, vgrf1:F, 0.15f 
{  7}   11: mul.sat(8) vgrf4:F, vgrf1:F, 0.4f 
{  7}   12: frc(8) vgrf9:F, vgrf6:F 
{  7}   13: frc(8) vgrf10:F, vgrf7:F 
{  8}   14: add(8) vgrf12:F, vgrf8:F, 19.19f 
{  9}   15: add(8) vgrf11:F, vgrf9:F, 19.19f 
{ 10}   16: add(8) vgrf13:F, vgrf10:F, 19.19f 
{ 10}   17: mul(8) vgrf14:F, vgrf9:F, vgrf12:F 
{  9}   18: mad(8) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F 
{  8}   19: mad(8) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F 
{  8}   20: add(8) vgrf17:F, vgrf8:F, vgrf16:F 
{  8}   21: add(8) vgrf18:F, vgrf9:F, vgrf16:F 
{  7}   22: add(8) vgrf19:F, vgrf10:F, vgrf16:F 
{  8}   23: add(8) vgrf20:F, vgrf17:F, vgrf18:F 
{  9}   24: add(8) vgrf21:F, vgrf17:F, vgrf19:F 
{  9}   25: add(8) vgrf24:F, vgrf18:F, vgrf19:F 
{  8}   26: mul(8) vgrf22:F, vgrf21:F, vgrf18:F 
{  7}   27: mad(8) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F 
{  5}   28: mad(8) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F 
{  5}   29: frc(8) vgrf26:F, vgrf25:F 
{  5}   30: add.ge.f0.0(8) vgrf27:F, vgrf26:F, -0.99f 
{  5}   31: mul(8) vgrf28:F, vgrf27:F, 100f 
{  5}   32: pow(8) vgrf29:F, vgrf28:F, 16f 
{  8}   33: (+f0.0) sel(8) vgrf30:UD, vgrf29:UD, 0u 
{  7}   34: add(8) vgrf34+0.0:F, vgrf30:F, vgrf2:F 
{  6}   35: add(8) vgrf34+1.0:F, vgrf30:F, vgrf3:F 
{  4}   36: add(8) vgrf34+2.0:F, vgrf30:F, vgrf4:F 
{  4}   37: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf34:F 
Maximum  10 registers live at once.
clock    2, scheduled: linterp(8) vgrf36:F, g2:F, g4<0>:F 
	child 2, 2 parents: linterp(8) vgrf4:F, g2:F, g5<0>:F 
	child 1, 37 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mul(8) vgrf9:F, vgrf36:F, 443.897f 
		now available
clock    4, scheduled: linterp(8) vgrf37:F, g2:F, g4<0>:F 
	child 3, 1 parents: linterp(8) vgrf4:F, g2:F, g5<0>:F 
		now available
	child 2, 36 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 1, 1 parents: mul(8) vgrf10:F, vgrf37:F, 441.423f 
		now available
	child 0, 2 parents: add(8) vgrf5:F, vgrf37:F, 0.25f 
clock    6, scheduled: mov(8) vgrf126+0.0:F, 1f 
	child 0, 35 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
clock    8, scheduled: linterp(8) vgrf4:F, g2:F, g5<0>:F 
	child 2, 1 parents: add(8) vgrf5:F, vgrf37:F, 0.25f 
		now available
	child 1, 34 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mul(8) vgrf11:F, vgrf4:F, 437.195f 
		now available
clock   18, scheduled: mul(8) vgrf9:F, vgrf36:F, 443.897f 
	child 1, 33 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: frc(8) vgrf12:F, vgrf9:F 
		now available
clock   20, scheduled: add(8) vgrf5:F, vgrf37:F, 0.25f 
	child 3, 32 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 1 parents: mul.sat(8) vgrf8:F, vgrf5:F, 0.4f 
		now available
	child 1, 1 parents: mul.sat(8) vgrf7:F, vgrf5:F, 0.15f 
		now available
	child 0, 1 parents: mul.sat(8) vgrf6:F, vgrf5:F, 0.1f 
		now available
clock   22, scheduled: mul(8) vgrf10:F, vgrf37:F, 441.423f 
	child 1, 31 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: frc(8) vgrf13:F, vgrf10:F 
		now available
clock   24, scheduled: mul(8) vgrf11:F, vgrf4:F, 437.195f 
	child 1, 30 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: frc(8) vgrf14:F, vgrf11:F 
		now available
clock   34, scheduled: frc(8) vgrf12:F, vgrf9:F 
	child 3, 29 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 2 parents: add(8) vgrf21:F, vgrf12:F, vgrf20:F 
	child 1, 3 parents: mad(8) vgrf19:F, vgrf18:F, vgrf15:F, vgrf12:F 
	child 0, 1 parents: add(8) vgrf16:F, vgrf12:F, 19.19f 
		now available
clock   36, scheduled: mul.sat(8) vgrf6:F, vgrf5:F, 0.1f 
	child 1, 28 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 2 parents: add(8) vgrf123+0.0:F, vgrf34+0.0:F, vgrf6:F 
clock   38, scheduled: mul.sat(8) vgrf7:F, vgrf5:F, 0.15f 
	child 1, 27 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 2 parents: add(8) vgrf124+0.0:F, vgrf34+0.0:F, vgrf7:F 
clock   40, scheduled: mul.sat(8) vgrf8:F, vgrf5:F, 0.4f 
	child 1, 26 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 2 parents: add(8) vgrf125+0.0:F, vgrf34+0.0:F, vgrf8:F 
clock   42, scheduled: frc(8) vgrf13:F, vgrf10:F 
	child 3, 25 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 2 parents: add(8) vgrf22:F, vgrf13:F, vgrf20:F 
	child 1, 2 parents: mul(8) vgrf18:F, vgrf13:F, vgrf16:F 
	child 0, 1 parents: add(8) vgrf15:F, vgrf13:F, 19.19f 
		now available
clock   44, scheduled: frc(8) vgrf14:F, vgrf11:F 
	child 3, 24 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 2 parents: add(8) vgrf23:F, vgrf14:F, vgrf20:F 
	child 1, 3 parents: mad(8) vgrf20:F, vgrf19:F, vgrf17:F, vgrf14:F 
	child 0, 1 parents: add(8) vgrf17:F, vgrf14:F, 19.19f 
		now available
clock   50, scheduled: add(8) vgrf16:F, vgrf12:F, 19.19f 
	child 1, 23 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mul(8) vgrf18:F, vgrf13:F, vgrf16:F 
		now available
clock   58, scheduled: add(8) vgrf15:F, vgrf13:F, 19.19f 
	child 1, 22 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 2 parents: mad(8) vgrf19:F, vgrf18:F, vgrf15:F, vgrf12:F 
clock   60, scheduled: add(8) vgrf17:F, vgrf14:F, 19.19f 
	child 1, 21 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 2 parents: mad(8) vgrf20:F, vgrf19:F, vgrf17:F, vgrf14:F 
clock   66, scheduled: mul(8) vgrf18:F, vgrf13:F, vgrf16:F 
	child 1, 20 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mad(8) vgrf19:F, vgrf18:F, vgrf15:F, vgrf12:F 
		now available
clock   82, scheduled: mad(8) vgrf19:F, vgrf18:F, vgrf15:F, vgrf12:F 
	child 1, 19 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mad(8) vgrf20:F, vgrf19:F, vgrf17:F, vgrf14:F 
		now available
clock  102, scheduled: mad(8) vgrf20:F, vgrf19:F, vgrf17:F, vgrf14:F 
	child 3, 18 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 1 parents: add(8) vgrf23:F, vgrf14:F, vgrf20:F 
		now available
	child 1, 1 parents: add(8) vgrf22:F, vgrf13:F, vgrf20:F 
		now available
	child 0, 1 parents: add(8) vgrf21:F, vgrf12:F, vgrf20:F 
		now available
clock  122, scheduled: add(8) vgrf21:F, vgrf12:F, vgrf20:F 
	child 3, 17 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 3 parents: mad(8) vgrf29:F, vgrf27:F, vgrf21:F, vgrf28:F 
	child 1, 2 parents: add(8) vgrf25:F, vgrf21:F, vgrf23:F 
	child 0, 2 parents: add(8) vgrf24:F, vgrf21:F, vgrf22:F 
clock  124, scheduled: add(8) vgrf22:F, vgrf13:F, vgrf20:F 
	child 3, 16 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 2 parents: mul(8) vgrf26:F, vgrf25:F, vgrf22:F 
	child 1, 2 parents: add(8) vgrf28:F, vgrf22:F, vgrf23:F 
	child 0, 1 parents: add(8) vgrf24:F, vgrf21:F, vgrf22:F 
		now available
clock  126, scheduled: add(8) vgrf23:F, vgrf14:F, vgrf20:F 
	child 3, 15 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 3 parents: mad(8) vgrf27:F, vgrf26:F, vgrf23:F, vgrf24:F 
	child 1, 1 parents: add(8) vgrf28:F, vgrf22:F, vgrf23:F 
		now available
	child 0, 1 parents: add(8) vgrf25:F, vgrf21:F, vgrf23:F 
		now available
clock  140, scheduled: add(8) vgrf24:F, vgrf21:F, vgrf22:F 
	child 1, 14 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 2 parents: mad(8) vgrf27:F, vgrf26:F, vgrf23:F, vgrf24:F 
clock  142, scheduled: add(8) vgrf25:F, vgrf21:F, vgrf23:F 
	child 1, 13 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mul(8) vgrf26:F, vgrf25:F, vgrf22:F 
		now available
clock  144, scheduled: add(8) vgrf28:F, vgrf22:F, vgrf23:F 
	child 1, 12 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 2 parents: mad(8) vgrf29:F, vgrf27:F, vgrf21:F, vgrf28:F 
clock  158, scheduled: mul(8) vgrf26:F, vgrf25:F, vgrf22:F 
	child 1, 11 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mad(8) vgrf27:F, vgrf26:F, vgrf23:F, vgrf24:F 
		now available
clock  174, scheduled: mad(8) vgrf27:F, vgrf26:F, vgrf23:F, vgrf24:F 
	child 1, 10 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: mad(8) vgrf29:F, vgrf27:F, vgrf21:F, vgrf28:F 
		now available
clock  194, scheduled: mad(8) vgrf29:F, vgrf27:F, vgrf21:F, vgrf28:F 
	child 1, 9 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: frc(8) vgrf30:F, vgrf29:F 
		now available
clock  214, scheduled: frc(8) vgrf30:F, vgrf29:F 
	child 1, 8 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: add.ge.f0.0(8) vgrf31:F, vgrf30:F, -0.99f 
		now available
clock  230, scheduled: add.ge.f0.0(8) vgrf31:F, vgrf30:F, -0.99f 
	child 2, 7 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 1, 2 parents: (+f0.0) sel(8) vgrf34+0.0:UD, vgrf33:UD, 0u 
	child 0, 1 parents: mul(8) vgrf32:F, vgrf31:F, 100f 
		now available
clock  246, scheduled: mul(8) vgrf32:F, vgrf31:F, 100f 
	child 1, 6 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: pow(8) vgrf33:F, vgrf32:F, 16f 
		now available
clock  262, scheduled: pow(8) vgrf33:F, vgrf32:F, 16f 
	child 1, 5 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 0, 1 parents: (+f0.0) sel(8) vgrf34+0.0:UD, vgrf33:UD, 0u 
		now available
clock  288, scheduled: (+f0.0) sel(8) vgrf34+0.0:UD, vgrf33:UD, 0u 
	child 3, 4 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
	child 2, 1 parents: add(8) vgrf125+0.0:F, vgrf34+0.0:F, vgrf8:F 
		now available
	child 1, 1 parents: add(8) vgrf124+0.0:F, vgrf34+0.0:F, vgrf7:F 
		now available
	child 0, 1 parents: add(8) vgrf123+0.0:F, vgrf34+0.0:F, vgrf6:F 
		now available
clock  304, scheduled: add(8) vgrf123+0.0:F, vgrf34+0.0:F, vgrf6:F 
	child 0, 3 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
clock  306, scheduled: add(8) vgrf124+0.0:F, vgrf34+0.0:F, vgrf7:F 
	child 0, 2 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
clock  308, scheduled: add(8) vgrf125+0.0:F, vgrf34+0.0:F, vgrf8:F 
	child 0, 1 parents: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 
		now available
clock  324, scheduled: send(8) (mlen: 4) (EOT) (null):UD, 201728u, 0u, vgrf123+0.0:F 

Instructions before scheduling (reg_alloc 0)
{  2}    0: linterp(16) vgrf32:F, g2:F, g6<0>:F 
{  4}    1: linterp(16) vgrf33:F, g2:F, g6<0>:F 
{  6}    2: linterp(16) vgrf0:F, g2:F, g7<0>:F 
{  8}    3: add(16) vgrf1:F, vgrf33:F, 0.25f 
{ 10}    4: mul.sat(16) vgrf2:F, vgrf1:F, 0.1f 
{ 12}    5: mul.sat(16) vgrf3:F, vgrf1:F, 0.15f 
{ 14}    6: mul.sat(16) vgrf4:F, vgrf1:F, 0.4f 
{ 14}    7: mul(16) vgrf5:F, vgrf32:F, 443.897f 
{ 14}    8: mul(16) vgrf6:F, vgrf33:F, 441.423f 
{ 14}    9: mul(16) vgrf7:F, vgrf0:F, 437.195f 
{ 14}   10: frc(16) vgrf8:F, vgrf5:F 
{ 14}   11: frc(16) vgrf9:F, vgrf6:F 
{ 14}   12: frc(16) vgrf10:F, vgrf7:F 
{ 14}   13: add(16) vgrf11:F, vgrf9:F, 19.19f 
{ 16}   14: add(16) vgrf12:F, vgrf8:F, 19.19f 
{ 18}   15: add(16) vgrf13:F, vgrf10:F, 19.19f 
{ 20}   16: mul(16) vgrf14:F, vgrf9:F, vgrf12:F 
{ 20}   17: mad(16) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F 
{ 18}   18: mad(16) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F 
{ 16}   19: add(16) vgrf17:F, vgrf8:F, vgrf16:F 
{ 16}   20: add(16) vgrf18:F, vgrf9:F, vgrf16:F 
{ 16}   21: add(16) vgrf19:F, vgrf10:F, vgrf16:F 
{ 14}   22: add(16) vgrf20:F, vgrf17:F, vgrf18:F 
{ 16}   23: add(16) vgrf21:F, vgrf17:F, vgrf19:F 
{ 18}   24: mul(16) vgrf22:F, vgrf21:F, vgrf18:F 
{ 18}   25: mad(16) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F 
{ 16}   26: add(16) vgrf24:F, vgrf18:F, vgrf19:F 
{ 14}   27: mad(16) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F 
{ 10}   28: frc(16) vgrf26:F, vgrf25:F 
{ 10}   29: add.ge.f0.0(16) vgrf27:F, vgrf26:F, -0.99f 
{ 10}   30: mul(16) vgrf28:F, vgrf27:F, 100f 
{ 10}   31: pow(16) vgrf29:F, vgrf28:F, 16f 
{ 10}   32: (+f0.0) sel(16) vgrf30:UD, vgrf29:UD, 0u 
{ 16}   33: add(16) vgrf34+0.0:F, vgrf30:F, vgrf2:F 
{ 14}   34: add(16) vgrf34+2.0:F, vgrf30:F, vgrf3:F 
{ 12}   35: add(16) vgrf34+4.0:F, vgrf30:F, vgrf4:F 
{  8}   36: mov(16) vgrf34+6.0:F, 1f 
{  8}   37: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
Maximum  20 registers live at once.
clock    4, scheduled: linterp(16) vgrf32:F, g2:F, g6<0>:F 
(register pressure 10)
	child 1, 37 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 1 parents: mul(16) vgrf5:F, vgrf32:F, 443.897f 
		now available
clock    8, scheduled: linterp(16) vgrf33:F, g2:F, g6<0>:F 
(register pressure 11)
	child 2, 36 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 1, 1 parents: mul(16) vgrf6:F, vgrf33:F, 441.423f 
		now available
	child 0, 1 parents: add(16) vgrf1:F, vgrf33:F, 0.25f 
		now available
clock   12, scheduled: linterp(16) vgrf0:F, g2:F, g7<0>:F 
(register pressure 8)
	child 1, 35 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 1 parents: mul(16) vgrf7:F, vgrf0:F, 437.195f 
		now available
clock   16, scheduled: mov(16) vgrf34+6.0:F, 1f 
(register pressure 16)
	child 0, 34 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
clock   20, scheduled: mul(16) vgrf5:F, vgrf32:F, 443.897f 
(register pressure 16)
	child 1, 33 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 1 parents: frc(16) vgrf8:F, vgrf5:F 
		now available
clock   24, scheduled: add(16) vgrf1:F, vgrf33:F, 0.25f 
(register pressure 18)
	child 3, 32 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 2, 1 parents: mul.sat(16) vgrf4:F, vgrf1:F, 0.4f 
		now available
	child 1, 1 parents: mul.sat(16) vgrf3:F, vgrf1:F, 0.15f 
		now available
	child 0, 1 parents: mul.sat(16) vgrf2:F, vgrf1:F, 0.1f 
		now available
clock   28, scheduled: mul(16) vgrf6:F, vgrf33:F, 441.423f 
(register pressure 18)
	child 1, 31 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 1 parents: frc(16) vgrf9:F, vgrf6:F 
		now available
clock   32, scheduled: mul(16) vgrf7:F, vgrf0:F, 437.195f 
(register pressure 18)
	child 1, 30 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 1 parents: frc(16) vgrf10:F, vgrf7:F 
		now available
clock   36, scheduled: frc(16) vgrf8:F, vgrf5:F 
(register pressure 18)
	child 3, 29 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 2, 2 parents: add(16) vgrf17:F, vgrf8:F, vgrf16:F 
	child 1, 3 parents: mad(16) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F 
	child 0, 1 parents: add(16) vgrf12:F, vgrf8:F, 19.19f 
		now available
clock   40, scheduled: mul.sat(16) vgrf2:F, vgrf1:F, 0.1f 
(register pressure 20)
	child 1, 28 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 2 parents: add(16) vgrf34+0.0:F, vgrf30:F, vgrf2:F 
clock   44, scheduled: mul.sat(16) vgrf3:F, vgrf1:F, 0.15f 
(register pressure 22)
	child 1, 27 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 2 parents: add(16) vgrf34+2.0:F, vgrf30:F, vgrf3:F 
clock   48, scheduled: mul.sat(16) vgrf4:F, vgrf1:F, 0.4f 
(register pressure 22)
	child 1, 26 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 2 parents: add(16) vgrf34+4.0:F, vgrf30:F, vgrf4:F 
clock   52, scheduled: frc(16) vgrf9:F, vgrf6:F 
(register pressure 22)
	child 3, 25 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 2, 2 parents: add(16) vgrf18:F, vgrf9:F, vgrf16:F 
	child 1, 2 parents: mul(16) vgrf14:F, vgrf9:F, vgrf12:F 
	child 0, 1 parents: add(16) vgrf11:F, vgrf9:F, 19.19f 
		now available
clock   56, scheduled: frc(16) vgrf10:F, vgrf7:F 
(register pressure 22)
	child 3, 24 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 2, 2 parents: add(16) vgrf19:F, vgrf10:F, vgrf16:F 
	child 1, 3 parents: mad(16) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F 
	child 0, 1 parents: add(16) vgrf13:F, vgrf10:F, 19.19f 
		now available
clock   60, scheduled: add(16) vgrf12:F, vgrf8:F, 19.19f 
(register pressure 24)
	child 1, 23 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 1 parents: mul(16) vgrf14:F, vgrf9:F, vgrf12:F 
		now available
clock   64, scheduled: add(16) vgrf11:F, vgrf9:F, 19.19f 
(register pressure 26)
	child 1, 22 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 2 parents: mad(16) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F 
clock   68, scheduled: add(16) vgrf13:F, vgrf10:F, 19.19f 
(register pressure 28)
	child 1, 21 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 2 parents: mad(16) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F 
clock   72, scheduled: mul(16) vgrf14:F, vgrf9:F, vgrf12:F 
(register pressure 28)
	child 1, 20 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 1 parents: mad(16) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F 
		now available
clock   77, scheduled: mad(16) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F 
(register pressure 26)
	child 1, 19 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 1 parents: mad(16) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F 
		now available
clock   82, scheduled: mad(16) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F 
(register pressure 24)
	child 3, 18 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 2, 1 parents: add(16) vgrf19:F, vgrf10:F, vgrf16:F 
		now available
	child 1, 1 parents: add(16) vgrf18:F, vgrf9:F, vgrf16:F 
		now available
	child 0, 1 parents: add(16) vgrf17:F, vgrf8:F, vgrf16:F 
		now available
clock   87, scheduled: add(16) vgrf17:F, vgrf8:F, vgrf16:F 
(register pressure 24)
	child 3, 17 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 2, 3 parents: mad(16) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F 
	child 1, 2 parents: add(16) vgrf21:F, vgrf17:F, vgrf19:F 
	child 0, 2 parents: add(16) vgrf20:F, vgrf17:F, vgrf18:F 
clock   91, scheduled: add(16) vgrf18:F, vgrf9:F, vgrf16:F 
(register pressure 24)
	child 3, 16 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 2, 2 parents: add(16) vgrf24:F, vgrf18:F, vgrf19:F 
	child 1, 2 parents: mul(16) vgrf22:F, vgrf21:F, vgrf18:F 
	child 0, 1 parents: add(16) vgrf20:F, vgrf17:F, vgrf18:F 
		now available
clock   95, scheduled: add(16) vgrf19:F, vgrf10:F, vgrf16:F 
(register pressure 22)
	child 3, 15 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 2, 1 parents: add(16) vgrf24:F, vgrf18:F, vgrf19:F 
		now available
	child 1, 3 parents: mad(16) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F 
	child 0, 1 parents: add(16) vgrf21:F, vgrf17:F, vgrf19:F 
		now available
clock   99, scheduled: add(16) vgrf20:F, vgrf17:F, vgrf18:F 
(register pressure 24)
	child 1, 14 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 2 parents: mad(16) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F 
clock  103, scheduled: add(16) vgrf21:F, vgrf17:F, vgrf19:F 
(register pressure 26)
	child 1, 13 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 1 parents: mul(16) vgrf22:F, vgrf21:F, vgrf18:F 
		now available
clock  107, scheduled: add(16) vgrf24:F, vgrf18:F, vgrf19:F 
(register pressure 28)
	child 1, 12 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 2 parents: mad(16) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F 
clock  111, scheduled: mul(16) vgrf22:F, vgrf21:F, vgrf18:F 
(register pressure 26)
	child 1, 11 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 1 parents: mad(16) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F 
		now available
clock  116, scheduled: mad(16) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F 
(register pressure 22)
	child 1, 10 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 1 parents: mad(16) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F 
		now available
clock  121, scheduled: mad(16) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F 
(register pressure 18)
	child 1, 9 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 1 parents: frc(16) vgrf26:F, vgrf25:F 
		now available
clock  126, scheduled: frc(16) vgrf26:F, vgrf25:F 
(register pressure 18)
	child 1, 8 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 1 parents: add.ge.f0.0(16) vgrf27:F, vgrf26:F, -0.99f 
		now available
clock  131, scheduled: add.ge.f0.0(16) vgrf27:F, vgrf26:F, -0.99f 
(register pressure 18)
	child 2, 7 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 1, 2 parents: (+f0.0) sel(16) vgrf30:UD, vgrf29:UD, 0u 
	child 0, 1 parents: mul(16) vgrf28:F, vgrf27:F, 100f 
		now available
clock  136, scheduled: mul(16) vgrf28:F, vgrf27:F, 100f 
(register pressure 18)
	child 1, 6 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 1 parents: pow(16) vgrf29:F, vgrf28:F, 16f 
		now available
clock  141, scheduled: pow(16) vgrf29:F, vgrf28:F, 16f 
(register pressure 18)
	child 1, 5 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 0, 1 parents: (+f0.0) sel(16) vgrf30:UD, vgrf29:UD, 0u 
		now available
clock  146, scheduled: (+f0.0) sel(16) vgrf30:UD, vgrf29:UD, 0u 
(register pressure 18)
	child 3, 4 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
	child 2, 1 parents: add(16) vgrf34+4.0:F, vgrf30:F, vgrf4:F 
		now available
	child 1, 1 parents: add(16) vgrf34+2.0:F, vgrf30:F, vgrf3:F 
		now available
	child 0, 1 parents: add(16) vgrf34+0.0:F, vgrf30:F, vgrf2:F 
		now available
clock  151, scheduled: add(16) vgrf34+0.0:F, vgrf30:F, vgrf2:F 
(register pressure 16)
	child 0, 3 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
clock  155, scheduled: add(16) vgrf34+2.0:F, vgrf30:F, vgrf3:F 
(register pressure 14)
	child 0, 2 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
clock  159, scheduled: add(16) vgrf34+4.0:F, vgrf30:F, vgrf4:F 
(register pressure 10)
	child 0, 1 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
		now available
clock  164, scheduled: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
(register pressure 2)

Instructions after scheduling (reg_alloc 0)
{  2}    0: linterp(16) vgrf32:F, g2:F, g6<0>:F 
{  4}    1: linterp(16) vgrf33:F, g2:F, g6<0>:F 
{  6}    2: linterp(16) vgrf0:F, g2:F, g7<0>:F 
{  8}    3: mov(16) vgrf34+6.0:F, 1f 
{ 10}    4: mul(16) vgrf5:F, vgrf32:F, 443.897f 
{ 12}    5: add(16) vgrf1:F, vgrf33:F, 0.25f 
{ 14}    6: mul(16) vgrf6:F, vgrf33:F, 441.423f 
{ 14}    7: mul(16) vgrf7:F, vgrf0:F, 437.195f 
{ 14}    8: frc(16) vgrf8:F, vgrf5:F 
{ 14}    9: mul.sat(16) vgrf2:F, vgrf1:F, 0.1f 
{ 14}   10: mul.sat(16) vgrf3:F, vgrf1:F, 0.15f 
{ 14}   11: mul.sat(16) vgrf4:F, vgrf1:F, 0.4f 
{ 14}   12: frc(16) vgrf9:F, vgrf6:F 
{ 14}   13: frc(16) vgrf10:F, vgrf7:F 
{ 16}   14: add(16) vgrf12:F, vgrf8:F, 19.19f 
{ 18}   15: add(16) vgrf11:F, vgrf9:F, 19.19f 
{ 20}   16: add(16) vgrf13:F, vgrf10:F, 19.19f 
{ 20}   17: mul(16) vgrf14:F, vgrf9:F, vgrf12:F 
{ 18}   18: mad(16) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F 
{ 16}   19: mad(16) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F 
{ 16}   20: add(16) vgrf17:F, vgrf8:F, vgrf16:F 
{ 16}   21: add(16) vgrf18:F, vgrf9:F, vgrf16:F 
{ 14}   22: add(16) vgrf19:F, vgrf10:F, vgrf16:F 
{ 16}   23: add(16) vgrf20:F, vgrf17:F, vgrf18:F 
{ 18}   24: add(16) vgrf21:F, vgrf17:F, vgrf19:F 
{ 18}   25: add(16) vgrf24:F, vgrf18:F, vgrf19:F 
{ 16}   26: mul(16) vgrf22:F, vgrf21:F, vgrf18:F 
{ 14}   27: mad(16) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F 
{ 10}   28: mad(16) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F 
{ 10}   29: frc(16) vgrf26:F, vgrf25:F 
{ 10}   30: add.ge.f0.0(16) vgrf27:F, vgrf26:F, -0.99f 
{ 10}   31: mul(16) vgrf28:F, vgrf27:F, 100f 
{ 10}   32: pow(16) vgrf29:F, vgrf28:F, 16f 
{ 16}   33: (+f0.0) sel(16) vgrf30:UD, vgrf29:UD, 0u 
{ 14}   34: add(16) vgrf34+0.0:F, vgrf30:F, vgrf2:F 
{ 12}   35: add(16) vgrf34+2.0:F, vgrf30:F, vgrf3:F 
{  8}   36: add(16) vgrf34+4.0:F, vgrf30:F, vgrf4:F 
{  8}   37: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf34:F 
Maximum  20 registers live at once.
clock    4, scheduled: linterp(16) vgrf27:F, g2:F, g6<0>:F 
	child 2, 37 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 1, 3 parents: add(16) vgrf27:F, vgrf41:F, 0.25f 
	child 0, 1 parents: mul(16) vgrf17:F, vgrf27:F, 443.897f 
		now available
clock    8, scheduled: linterp(16) vgrf41:F, g2:F, g6<0>:F 
	child 3, 36 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 3 parents: mul.sat(16) vgrf41:F, vgrf27:F, 0.1f 
	child 1, 1 parents: mul(16) vgrf19:F, vgrf41:F, 441.423f 
		now available
	child 0, 2 parents: add(16) vgrf27:F, vgrf41:F, 0.25f 
clock   12, scheduled: linterp(16) vgrf23:F, g2:F, g7<0>:F 
	child 1, 35 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mul(16) vgrf21:F, vgrf23:F, 437.195f 
		now available
clock   16, scheduled: mov(16) vgrf125+0.0:F, 1f 
	child 0, 34 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
clock   22, scheduled: mul(16) vgrf17:F, vgrf27:F, 443.897f 
	child 3, 1 parents: add(16) vgrf27:F, vgrf41:F, 0.25f 
		now available
	child 2, 33 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 1, 3 parents: mul.sat(16) vgrf16:F, vgrf27:F, 0.4f 
	child 0, 1 parents: frc(16) vgrf8:F, vgrf17:F 
		now available
clock   26, scheduled: add(16) vgrf27:F, vgrf41:F, 0.25f 
	child 3, 32 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 2 parents: mul.sat(16) vgrf16:F, vgrf27:F, 0.4f 
	child 1, 1 parents: mul.sat(16) vgrf45:F, vgrf27:F, 0.15f 
		now available
	child 0, 2 parents: mul.sat(16) vgrf41:F, vgrf27:F, 0.1f 
clock   30, scheduled: mul(16) vgrf19:F, vgrf41:F, 441.423f 
	child 2, 1 parents: mul.sat(16) vgrf41:F, vgrf27:F, 0.1f 
		now available
	child 1, 31 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: frc(16) vgrf25:F, vgrf19:F 
		now available
clock   34, scheduled: mul(16) vgrf21:F, vgrf23:F, 437.195f 
	child 1, 30 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: frc(16) vgrf10:F, vgrf21:F 
		now available
clock   40, scheduled: frc(16) vgrf8:F, vgrf17:F 
	child 4, 1 parents: mul.sat(16) vgrf16:F, vgrf27:F, 0.4f 
		now available
	child 3, 29 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 2 parents: add(16) vgrf12:F, vgrf8:F, vgrf39+0.0:F 
	child 1, 3 parents: mad(16) vgrf37:F, vgrf35:F, vgrf29:F, vgrf8:F 
	child 0, 1 parents: add(16) vgrf31+0.0:F, vgrf8:F, 19.19f 
		now available
clock   44, scheduled: mul.sat(16) vgrf16:F, vgrf27:F, 0.4f 
	child 1, 28 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 2 parents: add(16) vgrf123+0.0:F, vgrf67+0.0:F, vgrf16:F 
clock   48, scheduled: mul.sat(16) vgrf41:F, vgrf27:F, 0.1f 
	child 1, 27 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 2 parents: add(16) vgrf119+0.0:F, vgrf67+0.0:F, vgrf41:F 
clock   52, scheduled: mul.sat(16) vgrf45:F, vgrf27:F, 0.15f 
	child 1, 26 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 2 parents: add(16) vgrf121+0.0:F, vgrf67+0.0:F, vgrf45:F 
clock   56, scheduled: frc(16) vgrf25:F, vgrf19:F 
	child 3, 25 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 2 parents: add(16) vgrf43:F, vgrf25:F, vgrf39+0.0:F 
	child 1, 2 parents: mul(16) vgrf35:F, vgrf25:F, vgrf31+0.0:F 
	child 0, 1 parents: add(16) vgrf29:F, vgrf25:F, 19.19f 
		now available
clock   60, scheduled: frc(16) vgrf10:F, vgrf21:F 
	child 3, 24 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 2 parents: add(16) vgrf14:F, vgrf10:F, vgrf39+0.0:F 
	child 1, 3 parents: mad(16) vgrf39+0.0:F, vgrf37:F, vgrf33:F, vgrf10:F 
	child 0, 1 parents: add(16) vgrf33:F, vgrf10:F, 19.19f 
		now available
clock   64, scheduled: add(16) vgrf31+0.0:F, vgrf8:F, 19.19f 
	child 1, 23 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mul(16) vgrf35:F, vgrf25:F, vgrf31+0.0:F 
		now available
clock   74, scheduled: add(16) vgrf29:F, vgrf25:F, 19.19f 
	child 1, 22 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 2 parents: mad(16) vgrf37:F, vgrf35:F, vgrf29:F, vgrf8:F 
clock   78, scheduled: add(16) vgrf33:F, vgrf10:F, 19.19f 
	child 1, 21 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 2 parents: mad(16) vgrf39+0.0:F, vgrf37:F, vgrf33:F, vgrf10:F 
clock   82, scheduled: mul(16) vgrf35:F, vgrf25:F, vgrf31+0.0:F 
	child 1, 20 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mad(16) vgrf37:F, vgrf35:F, vgrf29:F, vgrf8:F 
		now available
clock  100, scheduled: mad(16) vgrf37:F, vgrf35:F, vgrf29:F, vgrf8:F 
	child 1, 19 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mad(16) vgrf39+0.0:F, vgrf37:F, vgrf33:F, vgrf10:F 
		now available
clock  122, scheduled: mad(16) vgrf39+0.0:F, vgrf37:F, vgrf33:F, vgrf10:F 
	child 3, 18 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 1 parents: add(16) vgrf14:F, vgrf10:F, vgrf39+0.0:F 
		now available
	child 1, 1 parents: add(16) vgrf43:F, vgrf25:F, vgrf39+0.0:F 
		now available
	child 0, 1 parents: add(16) vgrf12:F, vgrf8:F, vgrf39+0.0:F 
		now available
clock  144, scheduled: add(16) vgrf12:F, vgrf8:F, vgrf39+0.0:F 
	child 3, 17 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 3 parents: mad(16) vgrf57:F, vgrf53:F, vgrf12:F, vgrf55:F 
	child 1, 2 parents: add(16) vgrf49:F, vgrf12:F, vgrf14:F 
	child 0, 2 parents: add(16) vgrf47:F, vgrf12:F, vgrf43:F 
clock  148, scheduled: add(16) vgrf43:F, vgrf25:F, vgrf39+0.0:F 
	child 3, 16 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 2 parents: mul(16) vgrf51:F, vgrf49:F, vgrf43:F 
	child 1, 2 parents: add(16) vgrf55:F, vgrf43:F, vgrf14:F 
	child 0, 1 parents: add(16) vgrf47:F, vgrf12:F, vgrf43:F 
		now available
clock  152, scheduled: add(16) vgrf14:F, vgrf10:F, vgrf39+0.0:F 
	child 3, 15 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 3 parents: mad(16) vgrf53:F, vgrf51:F, vgrf14:F, vgrf47:F 
	child 1, 1 parents: add(16) vgrf55:F, vgrf43:F, vgrf14:F 
		now available
	child 0, 1 parents: add(16) vgrf49:F, vgrf12:F, vgrf14:F 
		now available
clock  166, scheduled: add(16) vgrf47:F, vgrf12:F, vgrf43:F 
	child 1, 14 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 2 parents: mad(16) vgrf53:F, vgrf51:F, vgrf14:F, vgrf47:F 
clock  170, scheduled: add(16) vgrf49:F, vgrf12:F, vgrf14:F 
	child 1, 13 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mul(16) vgrf51:F, vgrf49:F, vgrf43:F 
		now available
clock  174, scheduled: add(16) vgrf55:F, vgrf43:F, vgrf14:F 
	child 1, 12 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 2 parents: mad(16) vgrf57:F, vgrf53:F, vgrf12:F, vgrf55:F 
clock  188, scheduled: mul(16) vgrf51:F, vgrf49:F, vgrf43:F 
	child 1, 11 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mad(16) vgrf53:F, vgrf51:F, vgrf14:F, vgrf47:F 
		now available
clock  206, scheduled: mad(16) vgrf53:F, vgrf51:F, vgrf14:F, vgrf47:F 
	child 1, 10 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: mad(16) vgrf57:F, vgrf53:F, vgrf12:F, vgrf55:F 
		now available
clock  228, scheduled: mad(16) vgrf57:F, vgrf53:F, vgrf12:F, vgrf55:F 
	child 1, 9 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: frc(16) vgrf59:F, vgrf57:F 
		now available
clock  250, scheduled: frc(16) vgrf59:F, vgrf57:F 
	child 1, 8 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: add.ge.f0.0(16) vgrf61:F, vgrf59:F, -0.99f 
		now available
clock  268, scheduled: add.ge.f0.0(16) vgrf61:F, vgrf59:F, -0.99f 
	child 2, 7 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 1, 2 parents: (+f0.0) sel(16) vgrf67+0.0:UD, vgrf65:UD, 0u 
	child 0, 1 parents: mul(16) vgrf63:F, vgrf61:F, 100f 
		now available
clock  286, scheduled: mul(16) vgrf63:F, vgrf61:F, 100f 
	child 1, 6 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: pow(16) vgrf65:F, vgrf63:F, 16f 
		now available
clock  304, scheduled: pow(16) vgrf65:F, vgrf63:F, 16f 
	child 1, 5 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 0, 1 parents: (+f0.0) sel(16) vgrf67+0.0:UD, vgrf65:UD, 0u 
		now available
clock  332, scheduled: (+f0.0) sel(16) vgrf67+0.0:UD, vgrf65:UD, 0u 
	child 3, 4 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
	child 2, 1 parents: add(16) vgrf123+0.0:F, vgrf67+0.0:F, vgrf16:F 
		now available
	child 1, 1 parents: add(16) vgrf121+0.0:F, vgrf67+0.0:F, vgrf45:F 
		now available
	child 0, 1 parents: add(16) vgrf119+0.0:F, vgrf67+0.0:F, vgrf41:F 
		now available
clock  350, scheduled: add(16) vgrf119+0.0:F, vgrf67+0.0:F, vgrf41:F 
	child 0, 3 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
clock  354, scheduled: add(16) vgrf121+0.0:F, vgrf67+0.0:F, vgrf45:F 
	child 0, 2 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
clock  358, scheduled: add(16) vgrf123+0.0:F, vgrf67+0.0:F, vgrf16:F 
	child 0, 1 parents: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 
		now available
clock  376, scheduled: send(16) (mlen: 8) (EOT) (null):UD, 200704u, 0u, vgrf119+0.0:F 

Instructions before scheduling (reg_alloc 0)
{  2}    0: linterp(16) vgrf76:F, g3:F, g11<0>:F group0 
{  4}    1: linterp(16) vgrf32:F, g7:F, g11<0>:F group16 
{  6}    2: linterp(16) vgrf77:F, g3:F, g11<0>:F group0 
{  8}    3: linterp(16) vgrf33:F, g7:F, g11<0>:F group16 
{ 10}    4: linterp(16) vgrf36:F, g3:F, g12<0>:F group0 
{ 12}    5: linterp(16) vgrf0:F, g7:F, g12<0>:F group16 
{ 14}    6: add(16) vgrf37:F, vgrf77:F, 0.25f group0 
{ 16}    7: add(16) vgrf1:F, vgrf33:F, 0.25f group16 
{ 18}    8: mul.sat(16) vgrf38:F, vgrf37:F, 0.1f group0 
{ 20}    9: mul.sat(16) vgrf2:F, vgrf1:F, 0.1f group16 
{ 22}   10: mul.sat(16) vgrf39:F, vgrf37:F, 0.15f group0 
{ 24}   11: mul.sat(16) vgrf3:F, vgrf1:F, 0.15f group16 
{ 26}   12: mul.sat(16) vgrf40:F, vgrf37:F, 0.4f group0 
{ 26}   13: mul.sat(16) vgrf4:F, vgrf1:F, 0.4f group16 
{ 26}   14: mul(16) vgrf41:F, vgrf76:F, 443.897f group0 
{ 26}   15: mul(16) vgrf5:F, vgrf32:F, 443.897f group16 
{ 26}   16: mul(16) vgrf42:F, vgrf77:F, 441.423f group0 
{ 26}   17: mul(16) vgrf6:F, vgrf33:F, 441.423f group16 
{ 26}   18: mul(16) vgrf43:F, vgrf36:F, 437.195f group0 
{ 26}   19: mul(16) vgrf7:F, vgrf0:F, 437.195f group16 
{ 26}   20: frc(16) vgrf44:F, vgrf41:F group0 
{ 26}   21: frc(16) vgrf8:F, vgrf5:F group16 
{ 26}   22: frc(16) vgrf45:F, vgrf42:F group0 
{ 26}   23: frc(16) vgrf9:F, vgrf6:F group16 
{ 26}   24: frc(16) vgrf46:F, vgrf43:F group0 
{ 26}   25: frc(16) vgrf10:F, vgrf7:F group16 
{ 26}   26: add(16) vgrf47:F, vgrf45:F, 19.19f group0 
{ 28}   27: add(16) vgrf11:F, vgrf9:F, 19.19f group16 
{ 30}   28: add(16) vgrf48:F, vgrf44:F, 19.19f group0 
{ 32}   29: add(16) vgrf12:F, vgrf8:F, 19.19f group16 
{ 34}   30: add(16) vgrf49:F, vgrf46:F, 19.19f group0 
{ 36}   31: add(16) vgrf13:F, vgrf10:F, 19.19f group16 
{ 38}   32: mul(16) vgrf50:F, vgrf45:F, vgrf48:F group0 
{ 38}   33: mul(16) vgrf14:F, vgrf9:F, vgrf12:F group16 
{ 38}   34: mad(16) vgrf51:F, vgrf50:F, vgrf47:F, vgrf44:F group0 
{ 36}   35: mad(16) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F group16 
{ 34}   36: mad(16) vgrf52:F, vgrf51:F, vgrf49:F, vgrf46:F group0 
{ 32}   37: mad(16) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F group16 
{ 30}   38: add(16) vgrf53:F, vgrf44:F, vgrf52:F group0 
{ 30}   39: add(16) vgrf17:F, vgrf8:F, vgrf16:F group16 
{ 30}   40: add(16) vgrf54:F, vgrf45:F, vgrf52:F group0 
{ 30}   41: add(16) vgrf18:F, vgrf9:F, vgrf16:F group16 
{ 30}   42: add(16) vgrf55:F, vgrf46:F, vgrf52:F group0 
{ 28}   43: add(16) vgrf19:F, vgrf10:F, vgrf16:F group16 
{ 26}   44: add(16) vgrf56:F, vgrf53:F, vgrf54:F group0 
{ 28}   45: add(16) vgrf20:F, vgrf17:F, vgrf18:F group16 
{ 30}   46: add(16) vgrf57:F, vgrf53:F, vgrf55:F group0 
{ 32}   47: add(16) vgrf21:F, vgrf17:F, vgrf19:F group16 
{ 34}   48: mul(16) vgrf58:F, vgrf57:F, vgrf54:F group0 
{ 34}   49: mul(16) vgrf22:F, vgrf21:F, vgrf18:F group16 
{ 34}   50: mad(16) vgrf59:F, vgrf58:F, vgrf55:F, vgrf56:F group0 
{ 32}   51: mad(16) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F group16 
{ 30}   52: add(16) vgrf60:F, vgrf54:F, vgrf55:F group0 
{ 28}   53: add(16) vgrf24:F, vgrf18:F, vgrf19:F group16 
{ 26}   54: mad(16) vgrf61:F, vgrf59:F, vgrf53:F, vgrf60:F group0 
{ 22}   55: mad(16) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F group16 
{ 18}   56: frc(16) vgrf62:F, vgrf61:F group0 
{ 18}   57: frc(16) vgrf26:F, vgrf25:F group16 
{ 18}   58: add.ge.f0.0(16) vgrf63:F, vgrf62:F, -0.99f group0 
{ 18}   59: add.ge.f0.0(16) vgrf27:F, vgrf26:F, -0.99f group16 
{ 18}   60: mul(16) vgrf64:F, vgrf63:F, 100f group0 
{ 18}   61: mul(16) vgrf28:F, vgrf27:F, 100f group16 
{ 18}   62: pow(16) vgrf65:F, vgrf64:F, 16f group0 
{ 18}   63: pow(16) vgrf29:F, vgrf28:F, 16f group16 
{ 18}   64: (+f0.0) sel(16) vgrf66:UD, vgrf65:UD, 0u group0 
{ 18}   65: (+f0.0) sel(16) vgrf30:UD, vgrf29:UD, 0u group16 
{ 24}   66: add(16) vgrf34+0.0:F, vgrf66:F, vgrf38:F group0 
{ 30}   67: add(16) vgrf35+0.0:F, vgrf30:F, vgrf2:F group16 
{ 28}   68: add(16) vgrf34+2.0:F, vgrf66:F, vgrf39:F group0 
{ 26}   69: add(16) vgrf35+2.0:F, vgrf30:F, vgrf3:F group16 
{ 24}   70: add(16) vgrf34+4.0:F, vgrf66:F, vgrf40:F group0 
{ 20}   71: add(16) vgrf35+4.0:F, vgrf30:F, vgrf4:F group16 
{ 16}   72: mov(16) vgrf34+6.0:F, 1f group0 
{ 16}   73: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
{  8}   74: mov(16) vgrf35+6.0:F, 1f group16 
{  8}   75: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf35:F group16 
Maximum  38 registers live at once.
clock    4, scheduled: linterp(16) vgrf76:F, g3:F, g11<0>:F group0 
(register pressure 14)
	child 1, 73 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: mul(16) vgrf41:F, vgrf76:F, 443.897f group0 
		now available
clock    8, scheduled: linterp(16) vgrf32:F, g7:F, g11<0>:F group16 
(register pressure 16)
	child 1, 72 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: mul(16) vgrf5:F, vgrf32:F, 443.897f group16 
		now available
clock   12, scheduled: linterp(16) vgrf77:F, g3:F, g11<0>:F group0 
(register pressure 18)
	child 2, 71 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 1, 1 parents: mul(16) vgrf42:F, vgrf77:F, 441.423f group0 
		now available
	child 0, 1 parents: add(16) vgrf37:F, vgrf77:F, 0.25f group0 
		now available
clock   16, scheduled: linterp(16) vgrf33:F, g7:F, g11<0>:F group16 
(register pressure 19)
	child 2, 70 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 1, 1 parents: mul(16) vgrf6:F, vgrf33:F, 441.423f group16 
		now available
	child 0, 1 parents: add(16) vgrf1:F, vgrf33:F, 0.25f group16 
		now available
clock   20, scheduled: linterp(16) vgrf36:F, g3:F, g12<0>:F group0 
(register pressure 17)
	child 1, 69 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: mul(16) vgrf43:F, vgrf36:F, 437.195f group0 
		now available
clock   24, scheduled: linterp(16) vgrf0:F, g7:F, g12<0>:F group16 
(register pressure 14)
	child 1, 68 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: mul(16) vgrf7:F, vgrf0:F, 437.195f group16 
		now available
clock   28, scheduled: mov(16) vgrf34+6.0:F, 1f group0 
(register pressure 22)
	child 0, 67 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
clock   32, scheduled: mul(16) vgrf41:F, vgrf76:F, 443.897f group0 
(register pressure 22)
	child 1, 66 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: frc(16) vgrf44:F, vgrf41:F group0 
		now available
clock   36, scheduled: mul(16) vgrf5:F, vgrf32:F, 443.897f group16 
(register pressure 22)
	child 1, 65 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: frc(16) vgrf8:F, vgrf5:F group16 
		now available
clock   40, scheduled: add(16) vgrf37:F, vgrf77:F, 0.25f group0 
(register pressure 24)
	child 3, 64 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 1 parents: mul.sat(16) vgrf40:F, vgrf37:F, 0.4f group0 
		now available
	child 1, 1 parents: mul.sat(16) vgrf39:F, vgrf37:F, 0.15f group0 
		now available
	child 0, 1 parents: mul.sat(16) vgrf38:F, vgrf37:F, 0.1f group0 
		now available
clock   44, scheduled: mul(16) vgrf42:F, vgrf77:F, 441.423f group0 
(register pressure 24)
	child 1, 63 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: frc(16) vgrf45:F, vgrf42:F group0 
		now available
clock   48, scheduled: add(16) vgrf1:F, vgrf33:F, 0.25f group16 
(register pressure 26)
	child 3, 62 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 1 parents: mul.sat(16) vgrf4:F, vgrf1:F, 0.4f group16 
		now available
	child 1, 1 parents: mul.sat(16) vgrf3:F, vgrf1:F, 0.15f group16 
		now available
	child 0, 1 parents: mul.sat(16) vgrf2:F, vgrf1:F, 0.1f group16 
		now available
clock   52, scheduled: mul(16) vgrf6:F, vgrf33:F, 441.423f group16 
(register pressure 26)
	child 1, 61 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: frc(16) vgrf9:F, vgrf6:F group16 
		now available
clock   56, scheduled: mul(16) vgrf43:F, vgrf36:F, 437.195f group0 
(register pressure 26)
	child 1, 60 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: frc(16) vgrf46:F, vgrf43:F group0 
		now available
clock   60, scheduled: mul(16) vgrf7:F, vgrf0:F, 437.195f group16 
(register pressure 26)
	child 1, 59 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: frc(16) vgrf10:F, vgrf7:F group16 
		now available
clock   64, scheduled: frc(16) vgrf44:F, vgrf41:F group0 
(register pressure 26)
	child 3, 58 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 2 parents: add(16) vgrf53:F, vgrf44:F, vgrf52:F group0 
	child 1, 3 parents: mad(16) vgrf51:F, vgrf50:F, vgrf47:F, vgrf44:F group0 
	child 0, 1 parents: add(16) vgrf48:F, vgrf44:F, 19.19f group0 
		now available
clock   68, scheduled: frc(16) vgrf8:F, vgrf5:F group16 
(register pressure 26)
	child 3, 57 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 2 parents: add(16) vgrf17:F, vgrf8:F, vgrf16:F group16 
	child 1, 3 parents: mad(16) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F group16 
	child 0, 1 parents: add(16) vgrf12:F, vgrf8:F, 19.19f group16 
		now available
clock   72, scheduled: mul.sat(16) vgrf38:F, vgrf37:F, 0.1f group0 
(register pressure 28)
	child 1, 56 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 2 parents: add(16) vgrf34+0.0:F, vgrf66:F, vgrf38:F group0 
clock   76, scheduled: mul.sat(16) vgrf39:F, vgrf37:F, 0.15f group0 
(register pressure 30)
	child 1, 55 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 2 parents: add(16) vgrf34+2.0:F, vgrf66:F, vgrf39:F group0 
clock   80, scheduled: mul.sat(16) vgrf40:F, vgrf37:F, 0.4f group0 
(register pressure 30)
	child 1, 54 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 2 parents: add(16) vgrf34+4.0:F, vgrf66:F, vgrf40:F group0 
clock   84, scheduled: frc(16) vgrf45:F, vgrf42:F group0 
(register pressure 30)
	child 3, 53 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 2 parents: add(16) vgrf54:F, vgrf45:F, vgrf52:F group0 
	child 1, 2 parents: mul(16) vgrf50:F, vgrf45:F, vgrf48:F group0 
	child 0, 1 parents: add(16) vgrf47:F, vgrf45:F, 19.19f group0 
		now available
clock   88, scheduled: mul.sat(16) vgrf2:F, vgrf1:F, 0.1f group16 
(register pressure 32)
	child 1, 52 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 2 parents: add(16) vgrf35+0.0:F, vgrf30:F, vgrf2:F group16 
clock   92, scheduled: mul.sat(16) vgrf3:F, vgrf1:F, 0.15f group16 
(register pressure 34)
	child 1, 51 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 2 parents: add(16) vgrf35+2.0:F, vgrf30:F, vgrf3:F group16 
clock   96, scheduled: mul.sat(16) vgrf4:F, vgrf1:F, 0.4f group16 
(register pressure 34)
	child 1, 50 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 2 parents: add(16) vgrf35+4.0:F, vgrf30:F, vgrf4:F group16 
clock  100, scheduled: frc(16) vgrf9:F, vgrf6:F group16 
(register pressure 34)
	child 3, 49 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 2 parents: add(16) vgrf18:F, vgrf9:F, vgrf16:F group16 
	child 1, 2 parents: mul(16) vgrf14:F, vgrf9:F, vgrf12:F group16 
	child 0, 1 parents: add(16) vgrf11:F, vgrf9:F, 19.19f group16 
		now available
clock  104, scheduled: frc(16) vgrf46:F, vgrf43:F group0 
(register pressure 34)
	child 3, 48 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 2 parents: add(16) vgrf55:F, vgrf46:F, vgrf52:F group0 
	child 1, 3 parents: mad(16) vgrf52:F, vgrf51:F, vgrf49:F, vgrf46:F group0 
	child 0, 1 parents: add(16) vgrf49:F, vgrf46:F, 19.19f group0 
		now available
clock  108, scheduled: frc(16) vgrf10:F, vgrf7:F group16 
(register pressure 34)
	child 3, 47 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 2 parents: add(16) vgrf19:F, vgrf10:F, vgrf16:F group16 
	child 1, 3 parents: mad(16) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F group16 
	child 0, 1 parents: add(16) vgrf13:F, vgrf10:F, 19.19f group16 
		now available
clock  112, scheduled: add(16) vgrf48:F, vgrf44:F, 19.19f group0 
(register pressure 36)
	child 1, 46 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: mul(16) vgrf50:F, vgrf45:F, vgrf48:F group0 
		now available
clock  116, scheduled: add(16) vgrf12:F, vgrf8:F, 19.19f group16 
(register pressure 38)
	child 1, 45 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: mul(16) vgrf14:F, vgrf9:F, vgrf12:F group16 
		now available
clock  120, scheduled: add(16) vgrf47:F, vgrf45:F, 19.19f group0 
(register pressure 40)
	child 1, 44 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 2 parents: mad(16) vgrf51:F, vgrf50:F, vgrf47:F, vgrf44:F group0 
clock  124, scheduled: add(16) vgrf11:F, vgrf9:F, 19.19f group16 
(register pressure 42)
	child 1, 43 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 2 parents: mad(16) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F group16 
clock  128, scheduled: add(16) vgrf49:F, vgrf46:F, 19.19f group0 
(register pressure 44)
	child 1, 42 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 2 parents: mad(16) vgrf52:F, vgrf51:F, vgrf49:F, vgrf46:F group0 
clock  132, scheduled: add(16) vgrf13:F, vgrf10:F, 19.19f group16 
(register pressure 46)
	child 1, 41 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 2 parents: mad(16) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F group16 
clock  136, scheduled: mul(16) vgrf50:F, vgrf45:F, vgrf48:F group0 
(register pressure 46)
	child 1, 40 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: mad(16) vgrf51:F, vgrf50:F, vgrf47:F, vgrf44:F group0 
		now available
clock  140, scheduled: mul(16) vgrf14:F, vgrf9:F, vgrf12:F group16 
(register pressure 46)
	child 1, 39 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: mad(16) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F group16 
		now available
clock  144, scheduled: mad(16) vgrf51:F, vgrf50:F, vgrf47:F, vgrf44:F group0 
(register pressure 44)
	child 1, 38 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: mad(16) vgrf52:F, vgrf51:F, vgrf49:F, vgrf46:F group0 
		now available
clock  148, scheduled: mad(16) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F group16 
(register pressure 42)
	child 1, 37 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: mad(16) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F group16 
		now available
clock  152, scheduled: mad(16) vgrf52:F, vgrf51:F, vgrf49:F, vgrf46:F group0 
(register pressure 40)
	child 3, 36 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 1 parents: add(16) vgrf55:F, vgrf46:F, vgrf52:F group0 
		now available
	child 1, 1 parents: add(16) vgrf54:F, vgrf45:F, vgrf52:F group0 
		now available
	child 0, 1 parents: add(16) vgrf53:F, vgrf44:F, vgrf52:F group0 
		now available
clock  156, scheduled: mad(16) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F group16 
(register pressure 38)
	child 3, 35 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 1 parents: add(16) vgrf19:F, vgrf10:F, vgrf16:F group16 
		now available
	child 1, 1 parents: add(16) vgrf18:F, vgrf9:F, vgrf16:F group16 
		now available
	child 0, 1 parents: add(16) vgrf17:F, vgrf8:F, vgrf16:F group16 
		now available
clock  160, scheduled: add(16) vgrf53:F, vgrf44:F, vgrf52:F group0 
(register pressure 38)
	child 3, 34 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 3 parents: mad(16) vgrf61:F, vgrf59:F, vgrf53:F, vgrf60:F group0 
	child 1, 2 parents: add(16) vgrf57:F, vgrf53:F, vgrf55:F group0 
	child 0, 2 parents: add(16) vgrf56:F, vgrf53:F, vgrf54:F group0 
clock  164, scheduled: add(16) vgrf54:F, vgrf45:F, vgrf52:F group0 
(register pressure 38)
	child 3, 33 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 2 parents: add(16) vgrf60:F, vgrf54:F, vgrf55:F group0 
	child 1, 2 parents: mul(16) vgrf58:F, vgrf57:F, vgrf54:F group0 
	child 0, 1 parents: add(16) vgrf56:F, vgrf53:F, vgrf54:F group0 
		now available
clock  168, scheduled: add(16) vgrf55:F, vgrf46:F, vgrf52:F group0 
(register pressure 36)
	child 3, 32 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 1 parents: add(16) vgrf60:F, vgrf54:F, vgrf55:F group0 
		now available
	child 1, 3 parents: mad(16) vgrf59:F, vgrf58:F, vgrf55:F, vgrf56:F group0 
	child 0, 1 parents: add(16) vgrf57:F, vgrf53:F, vgrf55:F group0 
		now available
clock  172, scheduled: add(16) vgrf17:F, vgrf8:F, vgrf16:F group16 
(register pressure 36)
	child 3, 31 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 3 parents: mad(16) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F group16 
	child 1, 2 parents: add(16) vgrf21:F, vgrf17:F, vgrf19:F group16 
	child 0, 2 parents: add(16) vgrf20:F, vgrf17:F, vgrf18:F group16 
clock  176, scheduled: add(16) vgrf18:F, vgrf9:F, vgrf16:F group16 
(register pressure 36)
	child 3, 30 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 2 parents: add(16) vgrf24:F, vgrf18:F, vgrf19:F group16 
	child 1, 2 parents: mul(16) vgrf22:F, vgrf21:F, vgrf18:F group16 
	child 0, 1 parents: add(16) vgrf20:F, vgrf17:F, vgrf18:F group16 
		now available
clock  180, scheduled: add(16) vgrf19:F, vgrf10:F, vgrf16:F group16 
(register pressure 34)
	child 3, 29 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 1 parents: add(16) vgrf24:F, vgrf18:F, vgrf19:F group16 
		now available
	child 1, 3 parents: mad(16) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F group16 
	child 0, 1 parents: add(16) vgrf21:F, vgrf17:F, vgrf19:F group16 
		now available
clock  184, scheduled: add(16) vgrf56:F, vgrf53:F, vgrf54:F group0 
(register pressure 36)
	child 1, 28 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 2 parents: mad(16) vgrf59:F, vgrf58:F, vgrf55:F, vgrf56:F group0 
clock  188, scheduled: add(16) vgrf57:F, vgrf53:F, vgrf55:F group0 
(register pressure 38)
	child 1, 27 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: mul(16) vgrf58:F, vgrf57:F, vgrf54:F group0 
		now available
clock  192, scheduled: add(16) vgrf60:F, vgrf54:F, vgrf55:F group0 
(register pressure 40)
	child 1, 26 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 2 parents: mad(16) vgrf61:F, vgrf59:F, vgrf53:F, vgrf60:F group0 
clock  196, scheduled: add(16) vgrf20:F, vgrf17:F, vgrf18:F group16 
(register pressure 42)
	child 1, 25 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 2 parents: mad(16) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F group16 
clock  200, scheduled: add(16) vgrf21:F, vgrf17:F, vgrf19:F group16 
(register pressure 44)
	child 1, 24 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: mul(16) vgrf22:F, vgrf21:F, vgrf18:F group16 
		now available
clock  204, scheduled: add(16) vgrf24:F, vgrf18:F, vgrf19:F group16 
(register pressure 46)
	child 1, 23 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 2 parents: mad(16) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F group16 
clock  208, scheduled: mul(16) vgrf58:F, vgrf57:F, vgrf54:F group0 
(register pressure 44)
	child 1, 22 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: mad(16) vgrf59:F, vgrf58:F, vgrf55:F, vgrf56:F group0 
		now available
clock  212, scheduled: mul(16) vgrf22:F, vgrf21:F, vgrf18:F group16 
(register pressure 42)
	child 1, 21 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: mad(16) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F group16 
		now available
clock  216, scheduled: mad(16) vgrf59:F, vgrf58:F, vgrf55:F, vgrf56:F group0 
(register pressure 38)
	child 1, 20 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: mad(16) vgrf61:F, vgrf59:F, vgrf53:F, vgrf60:F group0 
		now available
clock  220, scheduled: mad(16) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F group16 
(register pressure 34)
	child 1, 19 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: mad(16) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F group16 
		now available
clock  224, scheduled: mad(16) vgrf61:F, vgrf59:F, vgrf53:F, vgrf60:F group0 
(register pressure 30)
	child 1, 18 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: frc(16) vgrf62:F, vgrf61:F group0 
		now available
clock  228, scheduled: mad(16) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F group16 
(register pressure 26)
	child 1, 17 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: frc(16) vgrf26:F, vgrf25:F group16 
		now available
clock  232, scheduled: frc(16) vgrf62:F, vgrf61:F group0 
(register pressure 26)
	child 1, 16 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: add.ge.f0.0(16) vgrf63:F, vgrf62:F, -0.99f group0 
		now available
clock  236, scheduled: frc(16) vgrf26:F, vgrf25:F group16 
(register pressure 26)
	child 1, 15 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: add.ge.f0.0(16) vgrf27:F, vgrf26:F, -0.99f group16 
		now available
clock  240, scheduled: add.ge.f0.0(16) vgrf63:F, vgrf62:F, -0.99f group0 
(register pressure 26)
	child 2, 14 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 1, 2 parents: (+f0.0) sel(16) vgrf66:UD, vgrf65:UD, 0u group0 
	child 0, 1 parents: mul(16) vgrf64:F, vgrf63:F, 100f group0 
		now available
clock  244, scheduled: add.ge.f0.0(16) vgrf27:F, vgrf26:F, -0.99f group16 
(register pressure 26)
	child 2, 13 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 1, 2 parents: (+f0.0) sel(16) vgrf30:UD, vgrf29:UD, 0u group16 
	child 0, 1 parents: mul(16) vgrf28:F, vgrf27:F, 100f group16 
		now available
clock  248, scheduled: mul(16) vgrf64:F, vgrf63:F, 100f group0 
(register pressure 26)
	child 1, 12 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: pow(16) vgrf65:F, vgrf64:F, 16f group0 
		now available
clock  252, scheduled: mul(16) vgrf28:F, vgrf27:F, 100f group16 
(register pressure 26)
	child 1, 11 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: pow(16) vgrf29:F, vgrf28:F, 16f group16 
		now available
clock  256, scheduled: pow(16) vgrf65:F, vgrf64:F, 16f group0 
(register pressure 26)
	child 1, 10 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: (+f0.0) sel(16) vgrf66:UD, vgrf65:UD, 0u group0 
		now available
clock  260, scheduled: pow(16) vgrf29:F, vgrf28:F, 16f group16 
(register pressure 26)
	child 1, 9 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 0, 1 parents: (+f0.0) sel(16) vgrf30:UD, vgrf29:UD, 0u group16 
		now available
clock  264, scheduled: (+f0.0) sel(16) vgrf66:UD, vgrf65:UD, 0u group0 
(register pressure 26)
	child 3, 8 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 1 parents: add(16) vgrf34+4.0:F, vgrf66:F, vgrf40:F group0 
		now available
	child 1, 1 parents: add(16) vgrf34+2.0:F, vgrf66:F, vgrf39:F group0 
		now available
	child 0, 1 parents: add(16) vgrf34+0.0:F, vgrf66:F, vgrf38:F group0 
		now available
clock  268, scheduled: (+f0.0) sel(16) vgrf30:UD, vgrf29:UD, 0u group16 
(register pressure 26)
	child 3, 7 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
	child 2, 1 parents: add(16) vgrf35+4.0:F, vgrf30:F, vgrf4:F group16 
		now available
	child 1, 1 parents: add(16) vgrf35+2.0:F, vgrf30:F, vgrf3:F group16 
		now available
	child 0, 1 parents: add(16) vgrf35+0.0:F, vgrf30:F, vgrf2:F group16 
		now available
clock  272, scheduled: add(16) vgrf34+0.0:F, vgrf66:F, vgrf38:F group0 
(register pressure 24)
	child 0, 6 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
clock  276, scheduled: add(16) vgrf34+2.0:F, vgrf66:F, vgrf39:F group0 
(register pressure 22)
	child 0, 5 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
clock  280, scheduled: add(16) vgrf34+4.0:F, vgrf66:F, vgrf40:F group0 
(register pressure 18)
	child 0, 4 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
clock  284, scheduled: add(16) vgrf35+0.0:F, vgrf30:F, vgrf2:F group16 
(register pressure 24)
	child 1, 5 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf35:F group16 
	child 0, 3 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
clock  288, scheduled: add(16) vgrf35+2.0:F, vgrf30:F, vgrf3:F group16 
(register pressure 22)
	child 1, 4 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf35:F group16 
	child 0, 2 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
clock  292, scheduled: add(16) vgrf35+4.0:F, vgrf30:F, vgrf4:F group16 
(register pressure 18)
	child 1, 3 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf35:F group16 
	child 0, 1 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
		now available
clock  296, scheduled: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
(register pressure 10)
	child 1, 2 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf35:F group16 
	child 0, 1 parents: mov(16) vgrf35+6.0:F, 1f group16 
		now available
clock  300, scheduled: mov(16) vgrf35+6.0:F, 1f group16 
(register pressure 10)
	child 0, 1 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf35:F group16 
		now available
clock  305, scheduled: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf35:F group16 
(register pressure 2)

Instructions after scheduling (reg_alloc 0)
{  2}    0: linterp(16) vgrf76:F, g3:F, g11<0>:F group0 
{  4}    1: linterp(16) vgrf32:F, g7:F, g11<0>:F group16 
{  6}    2: linterp(16) vgrf77:F, g3:F, g11<0>:F group0 
{  8}    3: linterp(16) vgrf33:F, g7:F, g11<0>:F group16 
{ 10}    4: linterp(16) vgrf36:F, g3:F, g12<0>:F group0 
{ 12}    5: linterp(16) vgrf0:F, g7:F, g12<0>:F group16 
{ 14}    6: mov(16) vgrf34+6.0:F, 1f group0 
{ 16}    7: mul(16) vgrf41:F, vgrf76:F, 443.897f group0 
{ 18}    8: mul(16) vgrf5:F, vgrf32:F, 443.897f group16 
{ 20}    9: add(16) vgrf37:F, vgrf77:F, 0.25f group0 
{ 22}   10: mul(16) vgrf42:F, vgrf77:F, 441.423f group0 
{ 24}   11: add(16) vgrf1:F, vgrf33:F, 0.25f group16 
{ 26}   12: mul(16) vgrf6:F, vgrf33:F, 441.423f group16 
{ 26}   13: mul(16) vgrf43:F, vgrf36:F, 437.195f group0 
{ 26}   14: mul(16) vgrf7:F, vgrf0:F, 437.195f group16 
{ 26}   15: frc(16) vgrf44:F, vgrf41:F group0 
{ 26}   16: frc(16) vgrf8:F, vgrf5:F group16 
{ 26}   17: mul.sat(16) vgrf38:F, vgrf37:F, 0.1f group0 
{ 26}   18: mul.sat(16) vgrf39:F, vgrf37:F, 0.15f group0 
{ 26}   19: mul.sat(16) vgrf40:F, vgrf37:F, 0.4f group0 
{ 26}   20: frc(16) vgrf45:F, vgrf42:F group0 
{ 26}   21: mul.sat(16) vgrf2:F, vgrf1:F, 0.1f group16 
{ 26}   22: mul.sat(16) vgrf3:F, vgrf1:F, 0.15f group16 
{ 26}   23: mul.sat(16) vgrf4:F, vgrf1:F, 0.4f group16 
{ 26}   24: frc(16) vgrf9:F, vgrf6:F group16 
{ 26}   25: frc(16) vgrf46:F, vgrf43:F group0 
{ 26}   26: frc(16) vgrf10:F, vgrf7:F group16 
{ 28}   27: add(16) vgrf48:F, vgrf44:F, 19.19f group0 
{ 30}   28: add(16) vgrf12:F, vgrf8:F, 19.19f group16 
{ 32}   29: add(16) vgrf47:F, vgrf45:F, 19.19f group0 
{ 34}   30: add(16) vgrf11:F, vgrf9:F, 19.19f group16 
{ 36}   31: add(16) vgrf49:F, vgrf46:F, 19.19f group0 
{ 38}   32: add(16) vgrf13:F, vgrf10:F, 19.19f group16 
{ 38}   33: mul(16) vgrf50:F, vgrf45:F, vgrf48:F group0 
{ 38}   34: mul(16) vgrf14:F, vgrf9:F, vgrf12:F group16 
{ 36}   35: mad(16) vgrf51:F, vgrf50:F, vgrf47:F, vgrf44:F group0 
{ 34}   36: mad(16) vgrf15:F, vgrf14:F, vgrf11:F, vgrf8:F group16 
{ 32}   37: mad(16) vgrf52:F, vgrf51:F, vgrf49:F, vgrf46:F group0 
{ 30}   38: mad(16) vgrf16:F, vgrf15:F, vgrf13:F, vgrf10:F group16 
{ 30}   39: add(16) vgrf53:F, vgrf44:F, vgrf52:F group0 
{ 30}   40: add(16) vgrf54:F, vgrf45:F, vgrf52:F group0 
{ 30}   41: add(16) vgrf55:F, vgrf46:F, vgrf52:F group0 
{ 30}   42: add(16) vgrf17:F, vgrf8:F, vgrf16:F group16 
{ 28}   43: add(16) vgrf18:F, vgrf9:F, vgrf16:F group16 
{ 26}   44: add(16) vgrf19:F, vgrf10:F, vgrf16:F group16 
{ 28}   45: add(16) vgrf56:F, vgrf53:F, vgrf54:F group0 
{ 30}   46: add(16) vgrf57:F, vgrf53:F, vgrf55:F group0 
{ 32}   47: add(16) vgrf60:F, vgrf54:F, vgrf55:F group0 
{ 34}   48: add(16) vgrf20:F, vgrf17:F, vgrf18:F group16 
{ 34}   49: add(16) vgrf21:F, vgrf17:F, vgrf19:F group16 
{ 34}   50: add(16) vgrf24:F, vgrf18:F, vgrf19:F group16 
{ 32}   51: mul(16) vgrf58:F, vgrf57:F, vgrf54:F group0 
{ 30}   52: mul(16) vgrf22:F, vgrf21:F, vgrf18:F group16 
{ 28}   53: mad(16) vgrf59:F, vgrf58:F, vgrf55:F, vgrf56:F group0 
{ 26}   54: mad(16) vgrf23:F, vgrf22:F, vgrf19:F, vgrf20:F group16 
{ 22}   55: mad(16) vgrf61:F, vgrf59:F, vgrf53:F, vgrf60:F group0 
{ 18}   56: mad(16) vgrf25:F, vgrf23:F, vgrf17:F, vgrf24:F group16 
{ 18}   57: frc(16) vgrf62:F, vgrf61:F group0 
{ 18}   58: frc(16) vgrf26:F, vgrf25:F group16 
{ 18}   59: add.ge.f0.0(16) vgrf63:F, vgrf62:F, -0.99f group0 
{ 18}   60: add.ge.f0.0(16) vgrf27:F, vgrf26:F, -0.99f group16 
{ 18}   61: mul(16) vgrf64:F, vgrf63:F, 100f group0 
{ 18}   62: mul(16) vgrf28:F, vgrf27:F, 100f group16 
{ 18}   63: pow(16) vgrf65:F, vgrf64:F, 16f group0 
{ 18}   64: pow(16) vgrf29:F, vgrf28:F, 16f group16 
{ 18}   65: (+f0.0) sel(16) vgrf66:UD, vgrf65:UD, 0u group0 
{ 24}   66: (+f0.0) sel(16) vgrf30:UD, vgrf29:UD, 0u group16 
{ 30}   67: add(16) vgrf34+0.0:F, vgrf66:F, vgrf38:F group0 
{ 28}   68: add(16) vgrf34+2.0:F, vgrf66:F, vgrf39:F group0 
{ 26}   69: add(16) vgrf34+4.0:F, vgrf66:F, vgrf40:F group0 
{ 24}   70: add(16) vgrf35+0.0:F, vgrf30:F, vgrf2:F group16 
{ 20}   71: add(16) vgrf35+2.0:F, vgrf30:F, vgrf3:F group16 
{ 16}   72: add(16) vgrf35+4.0:F, vgrf30:F, vgrf4:F group16 
{ 16}   73: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf34:F group0 
{  8}   74: mov(16) vgrf35+6.0:F, 1f group16 
{  8}   75: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf35:F group16 
Maximum  38 registers live at once.
clock    4, scheduled: linterp(16) vgrf21:F, g3:F, g11<0>:F group0 
	child 7, 6 parents: pow(16) vgrf10:F, vgrf125+0.0:F, 16f group0 
	child 6, 8 parents: add(16) vgrf6:F, vgrf12:F, vgrf78+0.0:F group0 
	child 5, 5 parents: add(16) vgrf4:F, vgrf12:F, vgrf76:F group0 
	child 4, 5 parents: add(16) vgrf2:F, vgrf12:F, vgrf74+0.0:F group0 
	child 3, 73 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 5 parents: mul.sat(16) vgrf21:F, vgrf28:F, 0.4f group16 
	child 1, 3 parents: mul(16) vgrf22:F, vgrf28:F, 443.897f group16 
	child 0, 1 parents: mul(16) vgrf79+0.0:F, vgrf21:F, 443.897f group0 
		now available
clock    8, scheduled: linterp(16) vgrf28:F, g7:F, g11<0>:F group16 
	child 5, 5 parents: pow(16) vgrf10:F, vgrf125+0.0:F, 16f group0 
	child 4, 3 parents: mov(16) vgrf8:F, 1f group0 
	child 3, 7 parents: add(16) vgrf6:F, vgrf12:F, vgrf78+0.0:F group0 
	child 2, 72 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 1, 3 parents: add(16) vgrf28:F, vgrf32:F, 0.25f group16 
	child 0, 2 parents: mul(16) vgrf22:F, vgrf28:F, 443.897f group16 
clock   12, scheduled: linterp(16) vgrf50:F, g3:F, g11<0>:F group0 
	child 7, 4 parents: pow(16) vgrf10:F, vgrf125+0.0:F, 16f group0 
	child 6, 6 parents: add(16) vgrf6:F, vgrf12:F, vgrf78+0.0:F group0 
	child 5, 4 parents: add(16) vgrf4:F, vgrf12:F, vgrf76:F group0 
	child 4, 4 parents: add(16) vgrf2:F, vgrf12:F, vgrf74+0.0:F group0 
	child 3, 71 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 4 parents: mul(16) vgrf50:F, vgrf32:F, 441.423f group16 
	child 1, 1 parents: mul(16) vgrf81+0.0:F, vgrf50:F, 441.423f group0 
		now available
	child 0, 1 parents: add(16) vgrf107+0.0:F, vgrf50:F, 0.25f group0 
		now available
clock   16, scheduled: linterp(16) vgrf32:F, g7:F, g11<0>:F group16 
	child 6, 3 parents: pow(16) vgrf10:F, vgrf125+0.0:F, 16f group0 
	child 5, 2 parents: mov(16) vgrf8:F, 1f group0 
	child 4, 5 parents: add(16) vgrf6:F, vgrf12:F, vgrf78+0.0:F group0 
	child 3, 70 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 3 parents: mul.sat(16) vgrf32:F, vgrf28:F, 0.1f group16 
	child 1, 3 parents: mul(16) vgrf50:F, vgrf32:F, 441.423f group16 
	child 0, 2 parents: add(16) vgrf28:F, vgrf32:F, 0.25f group16 
clock   20, scheduled: linterp(16) vgrf46:F, g3:F, g12<0>:F group0 
	child 6, 5 parents: (+f0.0) sel(16) vgrf12:UD, vgrf10:UD, 0u group0 
	child 5, 4 parents: add(16) vgrf6:F, vgrf12:F, vgrf78+0.0:F group0 
	child 4, 3 parents: add(16) vgrf4:F, vgrf12:F, vgrf76:F group0 
	child 3, 3 parents: add(16) vgrf2:F, vgrf12:F, vgrf74+0.0:F group0 
	child 2, 69 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 1, 3 parents: mul.sat(16) vgrf46:F, vgrf28:F, 0.15f group16 
	child 0, 1 parents: mul(16) vgrf83+0.0:F, vgrf46:F, 437.195f group0 
		now available
clock   24, scheduled: linterp(16) vgrf13:F, g7:F, g12<0>:F group16 
	child 5, 2 parents: pow(16) vgrf10:F, vgrf125+0.0:F, 16f group0 
	child 4, 1 parents: mov(16) vgrf8:F, 1f group0 
		now available
	child 3, 3 parents: add(16) vgrf6:F, vgrf12:F, vgrf78+0.0:F group0 
	child 2, 68 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 1, 4 parents: (+f0.0) sel(16) vgrf12:UD, vgrf10:UD, 0u group0 
	child 0, 1 parents: mul(16) vgrf89+0.0:F, vgrf13:F, 437.195f group16 
		now available
clock   28, scheduled: mul(16) vgrf79+0.0:F, vgrf21:F, 443.897f group0 
	child 4, 1 parents: mul(16) vgrf22:F, vgrf28:F, 443.897f group16 
		now available
	child 3, 4 parents: mul.sat(16) vgrf21:F, vgrf28:F, 0.4f group16 
	child 2, 67 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 1, 3 parents: mul.sat(16) vgrf78+0.0:F, vgrf107+0.0:F, 0.4f group0 
	child 0, 1 parents: frc(16) vgrf24:F, vgrf79+0.0:F group0 
		now available
clock   32, scheduled: mov(16) vgrf8:F, 1f group0 
	child 0, 66 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
clock   36, scheduled: add(16) vgrf107+0.0:F, vgrf50:F, 0.25f group0 
	child 5, 2 parents: mul(16) vgrf50:F, vgrf32:F, 441.423f group16 
	child 4, 65 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 3, 5 parents: frc(16) vgrf107+0.0:F, vgrf50:F group16 
	child 2, 2 parents: mul.sat(16) vgrf78+0.0:F, vgrf107+0.0:F, 0.4f group0 
	child 1, 1 parents: mul.sat(16) vgrf76:F, vgrf107+0.0:F, 0.15f group0 
		now available
	child 0, 1 parents: mul.sat(16) vgrf74+0.0:F, vgrf107+0.0:F, 0.1f group0 
		now available
clock   40, scheduled: mul(16) vgrf81+0.0:F, vgrf50:F, 441.423f group0 
	child 2, 1 parents: mul(16) vgrf50:F, vgrf32:F, 441.423f group16 
		now available
	child 1, 64 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: frc(16) vgrf87+0.0:F, vgrf81+0.0:F group0 
		now available
clock   44, scheduled: mul(16) vgrf22:F, vgrf28:F, 443.897f group16 
	child 3, 1 parents: add(16) vgrf28:F, vgrf32:F, 0.25f group16 
		now available
	child 2, 63 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 1, 3 parents: mul.sat(16) vgrf21:F, vgrf28:F, 0.4f group16 
	child 0, 1 parents: frc(16) vgrf103+0.0:F, vgrf22:F group16 
		now available
clock   48, scheduled: mul(16) vgrf83+0.0:F, vgrf46:F, 437.195f group0 
	child 2, 2 parents: mul.sat(16) vgrf46:F, vgrf28:F, 0.15f group16 
	child 1, 62 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: frc(16) vgrf26:F, vgrf83+0.0:F group0 
		now available
clock   52, scheduled: mul(16) vgrf89+0.0:F, vgrf13:F, 437.195f group16 
	child 2, 3 parents: (+f0.0) sel(16) vgrf12:UD, vgrf10:UD, 0u group0 
	child 1, 61 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: frc(16) vgrf17:F, vgrf89+0.0:F group16 
		now available
clock   56, scheduled: mul(16) vgrf50:F, vgrf32:F, 441.423f group16 
	child 2, 2 parents: mul.sat(16) vgrf32:F, vgrf28:F, 0.1f group16 
	child 1, 60 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 4 parents: frc(16) vgrf107+0.0:F, vgrf50:F group16 
clock   60, scheduled: frc(16) vgrf24:F, vgrf79+0.0:F group0 
	child 4, 1 parents: mul.sat(16) vgrf78+0.0:F, vgrf107+0.0:F, 0.4f group0 
		now available
	child 3, 59 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 2 parents: add(16) vgrf15:F, vgrf24:F, vgrf101+0.0:F group0 
	child 1, 3 parents: mad(16) vgrf99+0.0:F, vgrf97+0.0:F, vgrf91+0.0:F, vgrf24:F group0 
	child 0, 1 parents: add(16) vgrf93+0.0:F, vgrf24:F, 19.19f group0 
		now available
clock   64, scheduled: add(16) vgrf28:F, vgrf32:F, 0.25f group16 
	child 3, 58 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 2 parents: mul.sat(16) vgrf21:F, vgrf28:F, 0.4f group16 
	child 1, 1 parents: mul.sat(16) vgrf46:F, vgrf28:F, 0.15f group16 
		now available
	child 0, 1 parents: mul.sat(16) vgrf32:F, vgrf28:F, 0.1f group16 
		now available
clock   68, scheduled: mul.sat(16) vgrf74+0.0:F, vgrf107+0.0:F, 0.1f group0 
	child 2, 3 parents: frc(16) vgrf107+0.0:F, vgrf50:F group16 
	child 1, 57 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 2 parents: add(16) vgrf2:F, vgrf12:F, vgrf74+0.0:F group0 
clock   72, scheduled: mul.sat(16) vgrf76:F, vgrf107+0.0:F, 0.15f group0 
	child 2, 2 parents: frc(16) vgrf107+0.0:F, vgrf50:F group16 
	child 1, 56 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 2 parents: add(16) vgrf4:F, vgrf12:F, vgrf76:F group0 
clock   76, scheduled: frc(16) vgrf87+0.0:F, vgrf81+0.0:F group0 
	child 3, 55 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 2 parents: add(16) vgrf105+0.0:F, vgrf87+0.0:F, vgrf101+0.0:F group0 
	child 1, 2 parents: mul(16) vgrf97+0.0:F, vgrf87+0.0:F, vgrf93+0.0:F group0 
	child 0, 1 parents: add(16) vgrf91+0.0:F, vgrf87+0.0:F, 19.19f group0 
		now available
clock   80, scheduled: frc(16) vgrf103+0.0:F, vgrf22:F group16 
	child 4, 1 parents: mul.sat(16) vgrf21:F, vgrf28:F, 0.4f group16 
		now available
	child 3, 54 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 2 parents: add(16) vgrf19:F, vgrf103+0.0:F, vgrf44:F group16 
	child 1, 3 parents: mad(16) vgrf42:F, vgrf40:F, vgrf34+0.0:F, vgrf103+0.0:F group16 
	child 0, 1 parents: add(16) vgrf36:F, vgrf103+0.0:F, 19.19f group16 
		now available
clock   84, scheduled: mul.sat(16) vgrf78+0.0:F, vgrf107+0.0:F, 0.4f group0 
	child 2, 1 parents: frc(16) vgrf107+0.0:F, vgrf50:F group16 
		now available
	child 1, 53 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 2 parents: add(16) vgrf6:F, vgrf12:F, vgrf78+0.0:F group0 
clock   88, scheduled: frc(16) vgrf26:F, vgrf83+0.0:F group0 
	child 3, 52 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 2 parents: add(16) vgrf30:F, vgrf26:F, vgrf101+0.0:F group0 
	child 1, 3 parents: mad(16) vgrf101+0.0:F, vgrf99+0.0:F, vgrf95+0.0:F, vgrf26:F group0 
	child 0, 1 parents: add(16) vgrf95+0.0:F, vgrf26:F, 19.19f group0 
		now available
clock   92, scheduled: frc(16) vgrf17:F, vgrf89+0.0:F group16 
	child 3, 51 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 2 parents: add(16) vgrf85+0.0:F, vgrf17:F, vgrf44:F group16 
	child 1, 3 parents: mad(16) vgrf44:F, vgrf42:F, vgrf38:F, vgrf17:F group16 
	child 0, 1 parents: add(16) vgrf38:F, vgrf17:F, 19.19f group16 
		now available
clock   96, scheduled: add(16) vgrf93+0.0:F, vgrf24:F, 19.19f group0 
	child 1, 50 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: mul(16) vgrf97+0.0:F, vgrf87+0.0:F, vgrf93+0.0:F group0 
		now available
clock  100, scheduled: mul.sat(16) vgrf32:F, vgrf28:F, 0.1f group16 
	child 1, 49 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 4 parents: add(16) vgrf119+0.0:F, vgrf72:F, vgrf32:F group16 
clock  104, scheduled: mul.sat(16) vgrf46:F, vgrf28:F, 0.15f group16 
	child 1, 48 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 4 parents: add(16) vgrf121+0.0:F, vgrf72:F, vgrf46:F group16 
clock  108, scheduled: mul.sat(16) vgrf21:F, vgrf28:F, 0.4f group16 
	child 1, 47 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 4 parents: add(16) vgrf123+0.0:F, vgrf72:F, vgrf21:F group16 
clock  112, scheduled: frc(16) vgrf107+0.0:F, vgrf50:F group16 
	child 3, 46 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 2 parents: add(16) vgrf48:F, vgrf107+0.0:F, vgrf44:F group16 
	child 1, 2 parents: mul(16) vgrf40:F, vgrf107+0.0:F, vgrf36:F group16 
	child 0, 1 parents: add(16) vgrf34+0.0:F, vgrf107+0.0:F, 19.19f group16 
		now available
clock  116, scheduled: add(16) vgrf91+0.0:F, vgrf87+0.0:F, 19.19f group0 
	child 1, 45 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf99+0.0:F, vgrf97+0.0:F, vgrf91+0.0:F, vgrf24:F group0 
clock  120, scheduled: add(16) vgrf36:F, vgrf103+0.0:F, 19.19f group16 
	child 1, 44 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: mul(16) vgrf40:F, vgrf107+0.0:F, vgrf36:F group16 
		now available
clock  124, scheduled: add(16) vgrf95+0.0:F, vgrf26:F, 19.19f group0 
	child 1, 43 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf101+0.0:F, vgrf99+0.0:F, vgrf95+0.0:F, vgrf26:F group0 
clock  128, scheduled: add(16) vgrf38:F, vgrf17:F, 19.19f group16 
	child 1, 42 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf44:F, vgrf42:F, vgrf38:F, vgrf17:F group16 
clock  132, scheduled: mul(16) vgrf97+0.0:F, vgrf87+0.0:F, vgrf93+0.0:F group0 
	child 1, 41 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf99+0.0:F, vgrf97+0.0:F, vgrf91+0.0:F, vgrf24:F group0 
		now available
clock  136, scheduled: add(16) vgrf34+0.0:F, vgrf107+0.0:F, 19.19f group16 
	child 1, 40 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf42:F, vgrf40:F, vgrf34+0.0:F, vgrf103+0.0:F group16 
clock  140, scheduled: mul(16) vgrf40:F, vgrf107+0.0:F, vgrf36:F group16 
	child 1, 39 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf42:F, vgrf40:F, vgrf34+0.0:F, vgrf103+0.0:F group16 
		now available
clock  150, scheduled: mad(16) vgrf99+0.0:F, vgrf97+0.0:F, vgrf91+0.0:F, vgrf24:F group0 
	child 1, 38 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf101+0.0:F, vgrf99+0.0:F, vgrf95+0.0:F, vgrf26:F group0 
		now available
clock  158, scheduled: mad(16) vgrf42:F, vgrf40:F, vgrf34+0.0:F, vgrf103+0.0:F group16 
	child 1, 37 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf44:F, vgrf42:F, vgrf38:F, vgrf17:F group16 
		now available
clock  172, scheduled: mad(16) vgrf101+0.0:F, vgrf99+0.0:F, vgrf95+0.0:F, vgrf26:F group0 
	child 3, 36 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 1 parents: add(16) vgrf30:F, vgrf26:F, vgrf101+0.0:F group0 
		now available
	child 1, 1 parents: add(16) vgrf105+0.0:F, vgrf87+0.0:F, vgrf101+0.0:F group0 
		now available
	child 0, 1 parents: add(16) vgrf15:F, vgrf24:F, vgrf101+0.0:F group0 
		now available
clock  180, scheduled: mad(16) vgrf44:F, vgrf42:F, vgrf38:F, vgrf17:F group16 
	child 3, 35 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 1 parents: add(16) vgrf85+0.0:F, vgrf17:F, vgrf44:F group16 
		now available
	child 1, 1 parents: add(16) vgrf48:F, vgrf107+0.0:F, vgrf44:F group16 
		now available
	child 0, 1 parents: add(16) vgrf19:F, vgrf103+0.0:F, vgrf44:F group16 
		now available
clock  194, scheduled: add(16) vgrf15:F, vgrf24:F, vgrf101+0.0:F group0 
	child 3, 34 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 3 parents: mad(16) vgrf119+0.0:F, vgrf115+0.0:F, vgrf15:F, vgrf117+0.0:F group0 
	child 1, 2 parents: add(16) vgrf111+0.0:F, vgrf15:F, vgrf30:F group0 
	child 0, 2 parents: add(16) vgrf109+0.0:F, vgrf15:F, vgrf105+0.0:F group0 
clock  198, scheduled: add(16) vgrf105+0.0:F, vgrf87+0.0:F, vgrf101+0.0:F group0 
	child 3, 33 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 2 parents: mul(16) vgrf113+0.0:F, vgrf111+0.0:F, vgrf105+0.0:F group0 
	child 1, 2 parents: add(16) vgrf117+0.0:F, vgrf105+0.0:F, vgrf30:F group0 
	child 0, 1 parents: add(16) vgrf109+0.0:F, vgrf15:F, vgrf105+0.0:F group0 
		now available
clock  202, scheduled: add(16) vgrf30:F, vgrf26:F, vgrf101+0.0:F group0 
	child 3, 32 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 3 parents: mad(16) vgrf115+0.0:F, vgrf113+0.0:F, vgrf30:F, vgrf109+0.0:F group0 
	child 1, 1 parents: add(16) vgrf117+0.0:F, vgrf105+0.0:F, vgrf30:F group0 
		now available
	child 0, 1 parents: add(16) vgrf111+0.0:F, vgrf15:F, vgrf30:F group0 
		now available
clock  206, scheduled: add(16) vgrf19:F, vgrf103+0.0:F, vgrf44:F group16 
	child 3, 31 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 3 parents: mad(16) vgrf62:F, vgrf58:F, vgrf19:F, vgrf60:F group16 
	child 1, 2 parents: add(16) vgrf54:F, vgrf19:F, vgrf85+0.0:F group16 
	child 0, 2 parents: add(16) vgrf52:F, vgrf19:F, vgrf48:F group16 
clock  210, scheduled: add(16) vgrf48:F, vgrf107+0.0:F, vgrf44:F group16 
	child 3, 30 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 2 parents: mul(16) vgrf56:F, vgrf54:F, vgrf48:F group16 
	child 1, 2 parents: add(16) vgrf60:F, vgrf48:F, vgrf85+0.0:F group16 
	child 0, 1 parents: add(16) vgrf52:F, vgrf19:F, vgrf48:F group16 
		now available
clock  214, scheduled: add(16) vgrf85+0.0:F, vgrf17:F, vgrf44:F group16 
	child 3, 29 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 3 parents: mad(16) vgrf58:F, vgrf56:F, vgrf85+0.0:F, vgrf52:F group16 
	child 1, 1 parents: add(16) vgrf60:F, vgrf48:F, vgrf85+0.0:F group16 
		now available
	child 0, 1 parents: add(16) vgrf54:F, vgrf19:F, vgrf85+0.0:F group16 
		now available
clock  218, scheduled: add(16) vgrf109+0.0:F, vgrf15:F, vgrf105+0.0:F group0 
	child 1, 28 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf115+0.0:F, vgrf113+0.0:F, vgrf30:F, vgrf109+0.0:F group0 
clock  222, scheduled: add(16) vgrf111+0.0:F, vgrf15:F, vgrf30:F group0 
	child 1, 27 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: mul(16) vgrf113+0.0:F, vgrf111+0.0:F, vgrf105+0.0:F group0 
		now available
clock  226, scheduled: add(16) vgrf117+0.0:F, vgrf105+0.0:F, vgrf30:F group0 
	child 1, 26 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf119+0.0:F, vgrf115+0.0:F, vgrf15:F, vgrf117+0.0:F group0 
clock  230, scheduled: add(16) vgrf52:F, vgrf19:F, vgrf48:F group16 
	child 1, 25 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf58:F, vgrf56:F, vgrf85+0.0:F, vgrf52:F group16 
clock  234, scheduled: add(16) vgrf54:F, vgrf19:F, vgrf85+0.0:F group16 
	child 1, 24 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: mul(16) vgrf56:F, vgrf54:F, vgrf48:F group16 
		now available
clock  238, scheduled: add(16) vgrf60:F, vgrf48:F, vgrf85+0.0:F group16 
	child 1, 23 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 2 parents: mad(16) vgrf62:F, vgrf58:F, vgrf19:F, vgrf60:F group16 
clock  242, scheduled: mul(16) vgrf113+0.0:F, vgrf111+0.0:F, vgrf105+0.0:F group0 
	child 1, 22 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf115+0.0:F, vgrf113+0.0:F, vgrf30:F, vgrf109+0.0:F group0 
		now available
clock  252, scheduled: mul(16) vgrf56:F, vgrf54:F, vgrf48:F group16 
	child 1, 21 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf58:F, vgrf56:F, vgrf85+0.0:F, vgrf52:F group16 
		now available
clock  260, scheduled: mad(16) vgrf115+0.0:F, vgrf113+0.0:F, vgrf30:F, vgrf109+0.0:F group0 
	child 1, 20 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf119+0.0:F, vgrf115+0.0:F, vgrf15:F, vgrf117+0.0:F group0 
		now available
clock  270, scheduled: mad(16) vgrf58:F, vgrf56:F, vgrf85+0.0:F, vgrf52:F group16 
	child 1, 19 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: mad(16) vgrf62:F, vgrf58:F, vgrf19:F, vgrf60:F group16 
		now available
clock  282, scheduled: mad(16) vgrf119+0.0:F, vgrf115+0.0:F, vgrf15:F, vgrf117+0.0:F group0 
	child 2, 18 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 1, 3 parents: add(16) vgrf119+0.0:F, vgrf72:F, vgrf32:F group16 
	child 0, 1 parents: frc(16) vgrf121+0.0:F, vgrf119+0.0:F group0 
		now available
clock  292, scheduled: mad(16) vgrf62:F, vgrf58:F, vgrf19:F, vgrf60:F group16 
	child 1, 17 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: frc(16) vgrf64:F, vgrf62:F group16 
		now available
clock  304, scheduled: frc(16) vgrf121+0.0:F, vgrf119+0.0:F group0 
	child 3, 2 parents: add(16) vgrf119+0.0:F, vgrf72:F, vgrf32:F group16 
	child 2, 16 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 1, 3 parents: add(16) vgrf121+0.0:F, vgrf72:F, vgrf46:F group16 
	child 0, 1 parents: add.ge.f0.0(16) vgrf123+0.0:F, vgrf121+0.0:F, -0.99f group0 
		now available
clock  314, scheduled: frc(16) vgrf64:F, vgrf62:F group16 
	child 1, 15 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: add.ge.f0.0(16) vgrf66:F, vgrf64:F, -0.99f group16 
		now available
clock  322, scheduled: add.ge.f0.0(16) vgrf123+0.0:F, vgrf121+0.0:F, -0.99f group0 
	child 4, 2 parents: add(16) vgrf121+0.0:F, vgrf72:F, vgrf46:F group16 
	child 3, 14 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 3 parents: add(16) vgrf123+0.0:F, vgrf72:F, vgrf21:F group16 
	child 1, 2 parents: (+f0.0) sel(16) vgrf12:UD, vgrf10:UD, 0u group0 
	child 0, 1 parents: mul(16) vgrf125+0.0:F, vgrf123+0.0:F, 100f group0 
		now available
clock  332, scheduled: add.ge.f0.0(16) vgrf66:F, vgrf64:F, -0.99f group16 
	child 2, 13 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 1, 2 parents: (+f0.0) sel(16) vgrf72:UD, vgrf70:UD, 0u group16 
	child 0, 1 parents: mul(16) vgrf68:F, vgrf66:F, 100f group16 
		now available
clock  340, scheduled: mul(16) vgrf125+0.0:F, vgrf123+0.0:F, 100f group0 
	child 3, 2 parents: add(16) vgrf123+0.0:F, vgrf72:F, vgrf21:F group16 
	child 2, 3 parents: mov(16) vgrf125+0.0:F, 1f group16 
	child 1, 12 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: pow(16) vgrf10:F, vgrf125+0.0:F, 16f group0 
		now available
clock  350, scheduled: mul(16) vgrf68:F, vgrf66:F, 100f group16 
	child 1, 11 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: pow(16) vgrf70:F, vgrf68:F, 16f group16 
		now available
clock  358, scheduled: pow(16) vgrf10:F, vgrf125+0.0:F, 16f group0 
	child 2, 2 parents: mov(16) vgrf125+0.0:F, 1f group16 
	child 1, 10 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: (+f0.0) sel(16) vgrf12:UD, vgrf10:UD, 0u group0 
		now available
clock  368, scheduled: pow(16) vgrf70:F, vgrf68:F, 16f group16 
	child 1, 9 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 0, 1 parents: (+f0.0) sel(16) vgrf72:UD, vgrf70:UD, 0u group16 
		now available
clock  386, scheduled: (+f0.0) sel(16) vgrf12:UD, vgrf10:UD, 0u group0 
	child 3, 8 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 1 parents: add(16) vgrf6:F, vgrf12:F, vgrf78+0.0:F group0 
		now available
	child 1, 1 parents: add(16) vgrf4:F, vgrf12:F, vgrf76:F group0 
		now available
	child 0, 1 parents: add(16) vgrf2:F, vgrf12:F, vgrf74+0.0:F group0 
		now available
clock  396, scheduled: (+f0.0) sel(16) vgrf72:UD, vgrf70:UD, 0u group16 
	child 3, 7 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 2, 1 parents: add(16) vgrf123+0.0:F, vgrf72:F, vgrf21:F group16 
		now available
	child 1, 1 parents: add(16) vgrf121+0.0:F, vgrf72:F, vgrf46:F group16 
		now available
	child 0, 1 parents: add(16) vgrf119+0.0:F, vgrf72:F, vgrf32:F group16 
		now available
clock  404, scheduled: add(16) vgrf2:F, vgrf12:F, vgrf74+0.0:F group0 
	child 0, 6 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
clock  408, scheduled: add(16) vgrf4:F, vgrf12:F, vgrf76:F group0 
	child 0, 5 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
clock  412, scheduled: add(16) vgrf6:F, vgrf12:F, vgrf78+0.0:F group0 
	child 0, 4 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
clock  416, scheduled: add(16) vgrf119+0.0:F, vgrf72:F, vgrf32:F group16 
	child 1, 5 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
	child 0, 3 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
clock  420, scheduled: add(16) vgrf121+0.0:F, vgrf72:F, vgrf46:F group16 
	child 1, 4 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
	child 0, 2 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
clock  424, scheduled: add(16) vgrf123+0.0:F, vgrf72:F, vgrf21:F group16 
	child 1, 3 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
	child 0, 1 parents: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
		now available
clock  430, scheduled: send(16) (mlen: 8) (null):UD, 200704u, 0u, vgrf2+0.0:F group0 
	child 1, 2 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
	child 0, 1 parents: mov(16) vgrf125+0.0:F, 1f group16 
		now available
clock  434, scheduled: mov(16) vgrf125+0.0:F, 1f group16 
	child 0, 1 parents: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
		now available
clock  452, scheduled: send(16) (mlen: 8) (EOT) (null):UD, 202752u, 0u, vgrf119+0.0:F group16 
